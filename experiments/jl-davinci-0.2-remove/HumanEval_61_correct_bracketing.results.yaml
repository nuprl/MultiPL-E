language: jl
name: HumanEval_61_correct_bracketing
results:
- exit_code: -1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpocaiwlc1.jl:13\n  Test threw
    exception\n  Expression: candidate("()") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpocaiwlc1.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpocaiwlc1.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpocaiwlc1.jl:12\ntest set: Error
    During Test at /tmp/tmpocaiwlc1.jl:14\n  Test threw exception\n  Expression: candidate("(()())")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpocaiwlc1.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpocaiwlc1.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659747810
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for c in brackets\n        if c == '('\n            push!(stack, c)\n   \
    \     elseif c == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for char in brackets\n        if char == '('\n            open_brackets\
    \ += 1\n        elseif char == ')'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # check if\
    \ the string is empty\n    if length(brackets) == 0\n        return true\n   \
    \ end\n    # check if the string has an odd number of characters\n    if length(brackets)\
    \ % 2 != 0\n        return false\n    end\n    # check if the first character\
    \ is a closing bracket\n    if brackets[1] == ')'\n        return false\n    end\n\
    \    # check if the last character is an opening bracket\n    if brackets[end]\
    \ == '('\n        return false\n    end\n    # check if the string has the same\
    \ number of opening and closing brackets\n    if count(brackets, '(') != count(brackets,\
    \ ')')\n        return false\n    end\n    # check if the string has the same\
    \ number of opening and closing brackets\n    if count(brackets, '(') != count(brackets,\
    \ ')')\n        return false\n    end\n    # check if the string has the same\
    \ number of opening and closing brackets\n    if count(brackets, '(') != count(brackets,\
    \ ')')\n        return false\n    end\n    # check if the string has the same\
    \ number of opening and closing brackets\n    if count(brackets, '(') != count(brackets,\
    \ ')')\n        return false\n    end\n    # check if the string has the same\
    \ number of opening and closing brackets\n    if count(brackets, '(') != count(brackets,\
    \ ')')\n        return false\n    end\n    # check if the string has the same\
    \ number of opening and closing brackets\n    if count(brackets, '(') != count(brackets,\
    \ ')')\n        return false\n    end\n    # check if the string has the same\
    \ number of opening and closing brackets\n    if count(brackets, '(') != count(brackets,\
    \ ')')\n        return false\n    end\n    # check if the string has the same\
    \ number of opening and closing brackets\n    if count(brackets, '(') != count(brackets,\
    \ ')')\n        return false\n    end\n    # check if the string has the same\
    \ number of opening and closing brackets\n    if count(brackets, '(') != count(brackets,\
    \ ')')\n        return false\n    end\n    # check if the string has the\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpal9766k3.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpal9766k3.jl:1\n\
    in expression starting at /tmp/tmpal9766k3.jl:1\n"
  stdout: ''
  timestamp: 1659747808
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for i in 1:length(brackets)\n        if brackets[i] == '('\n      \
    \      open_brackets += 1\n        elseif brackets[i] == ')'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_bracket_count\
    \ = 0\n    for bracket in brackets\n        if bracket == '('\n            open_bracket_count\
    \ += 1\n        elseif bracket == ')'\n            open_bracket_count -= 1\n \
    \       end\n        if open_bracket_count < 0\n            return false\n   \
    \     end\n    end\n    return open_bracket_count == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for b in brackets\n        if b == '('\n            open_brackets +=\
    \ 1\n        elseif b == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: -1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpjb_9al_q.jl:13\n  Test threw
    exception\n  Expression: candidate("()") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpjb_9al_q.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjb_9al_q.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjb_9al_q.jl:12\ntest set: Error
    During Test at /tmp/tmpjb_9al_q.jl:14\n  Test threw exception\n  Expression: candidate("(()())")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpjb_9al_q.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjb_9al_q.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659747810
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\n    open_bracket = 0\n    close_bracket = 0\n    for i in brackets\n \
    \       if i == '('\n            open_bracket += 1\n        elseif i == ')'\n\
    \            close_bracket += 1\n        end\n    end\n    if open_bracket ==\
    \ close_bracket\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnr3v9hm5.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpnr3v9hm5.jl:32\n  Expression: candidate(\"\
    )(()\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnr3v9hm5.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnr3v9hm5.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpnr3v9hm5.jl:37\n  Expression: candidate(\"()()(()())())(()\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnr3v9hm5.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnr3v9hm5.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  timestamp: 1659747808
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for b in brackets\n        if b == '('\n            push!(stack, b)\n   \
    \     elseif b == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn8hxr870.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmpn8hxr870.jl:18\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn8hxr870.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn8hxr870.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpn8hxr870.jl:19\n  Expression: candidate(\")(()\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn8hxr870.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn8hxr870.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpn8hxr870.jl:20\n  Expression: candidate(\"(\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn8hxr870.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn8hxr870.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpn8hxr870.jl:21\n  Expression: candidate(\"((((\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn8hxr870.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn8hxr870.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpn8hxr870.jl:22\n  Expression: candidate(\")\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  timestamp: 1659747809
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for b in brackets\n        if b == '('\n            push!(stack, b)\n   \
    \     elseif b == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # stack to\
    \ store the opening brackets\n    stack = []\n    # iterate through the string\n\
    \    for bracket in brackets\n        # if the bracket is an opening bracket,\
    \ push it to the stack\n        if bracket == '('\n            push!(stack, bracket)\n\
    \        # if the bracket is a closing bracket, pop the last opening bracket\n\
    \        elseif bracket == ')'\n            pop!(stack)\n        end\n    end\n\
    \    # if the stack is empty, then the string has correct bracketing\n    isempty(stack)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpr6egsbfp.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpr6egsbfp.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"((()())))\") == false\n  ArgumentError: array must\
    \ be non-empty\n  Stacktrace:\n   [1] pop!\n     @ ./array.jl:1251 [inlined]\n\
    \   [2] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpr6egsbfp.jl:15\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpr6egsbfp.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpr6egsbfp.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpr6egsbfp.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\")(()\") == false\n  ArgumentError: array must be non-empty\n  Stacktrace:\n\
    \   [1] pop!\n     @ ./array.jl:1251 [inlined]\n   [2] correct_bracketing(brackets::String)\n\
    \     @ Main /tmp/tmpr6egsbfp.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpr6egsbfp.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpr6egsbfp.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpr6egsbfp.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\")\") == false\n  ArgumentError: array must be non-empty\n  Stacktrace:\n\
    \   [1] pop!\n     @ ./array.jl:1251 [inlined]\n   [2] correct_bracketing(brackets::String)\n\
    \     @ Main /tmp/tmpr6egsbfp.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpr6egsbfp.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpr6egsbfp.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpr6egsbfp.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"()()(()())())(()\") == fa"
  timestamp: 1659747809
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for c in brackets\n        if c == '('\n            push!(stack, c)\n   \
    \     elseif c == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == \")\"\n        return false\n    end\n    if brackets[n]\
    \ == \"(\"\n        return false\n    end\n    open_count = 0\n    close_count\
    \ = 0\n    for i in 1:n\n        if brackets[i] == \"(\"\n            open_count\
    \ += 1\n        elseif brackets[i] == \")\"\n            close_count += 1\n  \
    \      end\n    end\n    if open_count != close_count\n        return false\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplw4sbj3i.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmplw4sbj3i.jl:42\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplw4sbj3i.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplw4sbj3i.jl:37\ntest set: Test\
    \ Failed at /tmp/tmplw4sbj3i.jl:43\n  Expression: candidate(\")(()\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplw4sbj3i.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplw4sbj3i.jl:37\ntest set: Test\
    \ Failed at /tmp/tmplw4sbj3i.jl:45\n  Expression: candidate(\"((((\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplw4sbj3i.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplw4sbj3i.jl:37\ntest set: Test\
    \ Failed at /tmp/tmplw4sbj3i.jl:47\n  Expression: candidate(\"(()\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplw4sbj3i.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplw4sbj3i.jl:37\ntest set: Test\
    \ Failed at /tmp/tmplw4sbj3i.jl:48\n  Expression: candidate(\"()()(()())())(()\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  timestamp: 1659747809
- exit_code: -1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpjb_9al_q.jl:13\n  Test threw
    exception\n  Expression: candidate("()") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpjb_9al_q.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjb_9al_q.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjb_9al_q.jl:12\ntest set: Error
    During Test at /tmp/tmpjb_9al_q.jl:14\n  Test threw exception\n  Expression: candidate("(()())")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpjb_9al_q.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjb_9al_q.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659747810
- exit_code: -1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpocaiwlc1.jl:13\n  Test threw
    exception\n  Expression: candidate("()") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpocaiwlc1.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpocaiwlc1.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpocaiwlc1.jl:12\ntest set: Error
    During Test at /tmp/tmpocaiwlc1.jl:14\n  Test threw exception\n  Expression: candidate("(()())")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpocaiwlc1.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpocaiwlc1.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659747810
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: -1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpjb_9al_q.jl:13\n  Test threw
    exception\n  Expression: candidate("()") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpjb_9al_q.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjb_9al_q.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjb_9al_q.jl:12\ntest set: Error
    During Test at /tmp/tmpjb_9al_q.jl:14\n  Test threw exception\n  Expression: candidate("(()())")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpjb_9al_q.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjb_9al_q.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659747810
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for i in 1:length(brackets)\n        if brackets[i] == '('\n            push!(stack,\
    \ brackets[i])\n        elseif brackets[i] == ')'\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for c in brackets\n        if c == '('\n            push!(stack, c)\n   \
    \     elseif c == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: -1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpjb_9al_q.jl:13\n  Test threw
    exception\n  Expression: candidate("()") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpjb_9al_q.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjb_9al_q.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjb_9al_q.jl:12\ntest set: Error
    During Test at /tmp/tmpjb_9al_q.jl:14\n  Test threw exception\n  Expression: candidate("(()())")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpjb_9al_q.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjb_9al_q.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659747810
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # we need\
    \ to keep track of the number of opening brackets\n    # we have seen so far.\n\
    \    # if we see a closing bracket, we need to check that\n    # we have seen\
    \ at least one opening bracket.\n    # if we see an opening bracket, we need to\
    \ increment the count.\n    # if we see a closing bracket and the count is 0,\
    \ then we have\n    # a problem.\n    # if we see a closing bracket and the count\
    \ is not 0, then we\n    # decrement the count.\n    # if we finish the loop and\
    \ the count is not 0, then we have a problem.\n    count = 0\n    for c in brackets\n\
    \        if c == '('\n            count += 1\n        elseif c == ')'\n      \
    \      if count == 0\n                return false\n            else\n       \
    \         count -= 1\n            end\n        end\n    end\n    return count\
    \ == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for b in brackets\n        if b == '('\n            push!(stack, b)\n   \
    \     elseif b == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for b in brackets\n        if b == '('\n            push!(stack, b)\n   \
    \     elseif b == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: -1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # Your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpfcxj_h8y.jl:13\n  Test threw
    exception\n  Expression: candidate("()") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpfcxj_h8y.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfcxj_h8y.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfcxj_h8y.jl:12\ntest set: Error
    During Test at /tmp/tmpfcxj_h8y.jl:14\n  Test threw exception\n  Expression: candidate("(()())")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpfcxj_h8y.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfcxj_h8y.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659747810
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for b in brackets\n        if b == '('\n            push!(stack, b)\n   \
    \     elseif b == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for c in brackets\n        if c == '('\n            push!(stack, c)\n   \
    \     elseif c == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # count the\
    \ number of opening brackets\n    num_open = count(x -> x == '(', brackets)\n\
    \    # count the number of closing brackets\n    num_close = count(x -> x == ')',\
    \ brackets)\n    # if the number of opening brackets is equal to the number of\
    \ closing brackets,\n    # then the string is correctly bracketed\n    return\
    \ num_open == num_close\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8y805iyo.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp8y805iyo.jl:24\n  Expression: candidate(\"\
    )(()\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8y805iyo.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8y805iyo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp8y805iyo.jl:29\n  Expression: candidate(\"()()(()())())(()\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8y805iyo.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8y805iyo.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  timestamp: 1659747808
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for c in brackets\n        if c == '('\n            push!(stack, c)\n   \
    \     elseif c == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for b in brackets\n        if b == '('\n            push!(stack, b)\n   \
    \     elseif b == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == \")\"\n        return false\n    end\n    if brackets[n]\
    \ == \"(\"\n        return false\n    end\n    open_count = 0\n    for i = 1:n\n\
    \        if brackets[i] == \"(\"\n            open_count += 1\n        else\n\
    \            open_count -= 1\n        end\n        if open_count < 0\n       \
    \     return false\n        end\n    end\n    return open_count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnz3_r3bv.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpnz3_r3bv.jl:37\n  Expression: candidate(\"\
    ()\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnz3_r3bv.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnz3_r3bv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpnz3_r3bv.jl:38\n  Expression: candidate(\"(()())\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnz3_r3bv.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnz3_r3bv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpnz3_r3bv.jl:39\n  Expression: candidate(\"()()(()())()\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnz3_r3bv.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnz3_r3bv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpnz3_r3bv.jl:40\n  Expression: candidate(\"()()((()()())())(()()(()))\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnz3_r3bv.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnz3_r3bv.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659747808
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = Stack()\n\
    \    for b in brackets\n        if b == '('\n            push!(stack, b)\n   \
    \     elseif b == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpozg5xz90.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpozg5xz90.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"()\") == true\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpozg5xz90.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpozg5xz90.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpozg5xz90.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpozg5xz90.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"(()())\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpozg5xz90.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpozg5xz90.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpozg5xz90.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpozg5xz90.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"()()(()())()\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpozg5xz90.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpozg5xz90.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpozg5xz90.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpozg5xz90.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"()()((()()())())(()()(()))\") == true\n  UndefVarError: Stack not\
    \ defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @\
    \ Main /tmp/tmpozg5xz90.jl:6\n   [2] macro "
  timestamp: 1659747810
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # open_brackets\
    \ = 0\n    # for i in 1:length(brackets)\n    #     if brackets[i] == '('\n  \
    \  #         open_brackets += 1\n    #     elseif brackets[i] == ')'\n    #  \
    \       open_brackets -= 1\n    #     end\n    #     if open_brackets < 0\n  \
    \  #         return false\n    #     end\n    # end\n    # return open_brackets\
    \ == 0\n    open_brackets = 0\n    for bracket in brackets\n        if bracket\
    \ == '('\n            open_brackets += 1\n        elseif bracket == ')'\n    \
    \        open_brackets -= 1\n        end\n        if open_brackets < 0\n     \
    \       return false\n        end\n    end\n    return open_brackets == 0\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for c in brackets\n        if c == '('\n            push!(stack, c)\n   \
    \     elseif c == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: -1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpjb_9al_q.jl:13\n  Test threw
    exception\n  Expression: candidate("()") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpjb_9al_q.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjb_9al_q.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjb_9al_q.jl:12\ntest set: Error
    During Test at /tmp/tmpjb_9al_q.jl:14\n  Test threw exception\n  Expression: candidate("(()())")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpjb_9al_q.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjb_9al_q.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659747810
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for i in 1:length(brackets)\n        if brackets[i] == '('\n      \
    \      open_brackets += 1\n        elseif brackets[i] == ')'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # initialize\
    \ stack\n    stack = []\n    # iterate through brackets\n    for bracket in brackets\n\
    \        # if opening bracket, push to stack\n        if bracket == '('\n    \
    \        push!(stack, bracket)\n        # if closing bracket, pop from stack\n\
    \        elseif bracket == ')'\n            pop!(stack)\n        end\n    end\n\
    \    # if stack is empty, return true\n    if isempty(stack)\n        return true\n\
    \    # else return false\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpg08wjo96.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpg08wjo96.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"((()())))\") == false\n  ArgumentError: array must\
    \ be non-empty\n  Stacktrace:\n   [1] pop!\n     @ ./array.jl:1251 [inlined]\n\
    \   [2] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpg08wjo96.jl:15\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpg08wjo96.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpg08wjo96.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpg08wjo96.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\")(()\") == false\n  ArgumentError: array must be non-empty\n  Stacktrace:\n\
    \   [1] pop!\n     @ ./array.jl:1251 [inlined]\n   [2] correct_bracketing(brackets::String)\n\
    \     @ Main /tmp/tmpg08wjo96.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpg08wjo96.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpg08wjo96.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpg08wjo96.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\")\") == false\n  ArgumentError: array must be non-empty\n  Stacktrace:\n\
    \   [1] pop!\n     @ ./array.jl:1251 [inlined]\n   [2] correct_bracketing(brackets::String)\n\
    \     @ Main /tmp/tmpg08wjo96.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpg08wjo96.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpg08wjo96.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpg08wjo96.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"()()(()())())(()\") == fa"
  timestamp: 1659747810
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for b in brackets\n        if b == '('\n            open_brackets +=\
    \ 1\n        elseif b == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets\
    \ == \"\"\n        return true\n    end\n    if brackets[1] == \")\"\n       \
    \ return false\n    end\n    if brackets[end] == \"(\"\n        return false\n\
    \    end\n    return correct_bracketing(brackets[2:end-1])\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") ==\
    \ true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc208dybi.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpc208dybi.jl:26\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc208dybi.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc208dybi.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpc208dybi.jl:27\n  Expression: candidate(\")(()\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc208dybi.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc208dybi.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpc208dybi.jl:28\n  Expression: candidate(\"(\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc208dybi.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc208dybi.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpc208dybi.jl:29\n  Expression: candidate(\"((((\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc208dybi.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc208dybi.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpc208dybi.jl:30\n  Expression: candidate(\")\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  timestamp: 1659747809
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # TODO: implement\
    \ this function\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp16vidbbp.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmp16vidbbp.jl:14\n  Expression: candidate(\"\
    ()\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp16vidbbp.jl:14 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp16vidbbp.jl:13\ntest set: Test\
    \ Failed at /tmp/tmp16vidbbp.jl:15\n  Expression: candidate(\"(()())\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp16vidbbp.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp16vidbbp.jl:13\ntest set: Test\
    \ Failed at /tmp/tmp16vidbbp.jl:16\n  Expression: candidate(\"()()(()())()\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp16vidbbp.jl:16 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp16vidbbp.jl:13\ntest set: Test\
    \ Failed at /tmp/tmp16vidbbp.jl:17\n  Expression: candidate(\"()()((()()())())(()()(()))\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp16vidbbp.jl:17 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp16vidbbp.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659747809
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for i in brackets\n        if i == '('\n            push!(stack, i)\n   \
    \     elseif i == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for b in brackets\n        if b == '('\n            push!(stack, b)\n   \
    \     else\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for i in brackets\n        if i == '('\n            open_brackets +=\
    \ 1\n        elseif i == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for b in brackets\n        if b == '('\n            push!(stack, b)\n   \
    \     elseif b == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count\
    \ = 0\n    for bracket in brackets\n        if bracket == '('\n            open_count\
    \ += 1\n        elseif bracket == ')'\n            open_count -= 1\n        end\n\
    \        if open_count < 0\n            return false\n        end\n    end\n \
    \   return open_count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for b in brackets\n        if b == '('\n            push!(stack, b)\n   \
    \     elseif b == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for b in brackets\n        if b == '('\n            open_brackets +=\
    \ 1\n        elseif b == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_stack\
    \ = []\n    for bracket in brackets\n        if bracket == '('\n            push!(bracket_stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(bracket_stack)\n\
    \                return false\n            else\n                pop!(bracket_stack)\n\
    \            end\n        end\n    end\n    return isempty(bracket_stack)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for b in brackets\n        if b == '('\n            push!(stack, b)\n   \
    \     elseif b == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    end\n    if length(brackets) == 1\n        return\
    \ false\n    end\n    if brackets[1] == \")\"\n        return false\n    end\n\
    \    if brackets[end] == \"(\"\n        return false\n    end\n    if brackets[1]\
    \ == \"(\"\n        return correct_bracketing(brackets[2:end-1])\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmp84025lwb.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp84025lwb.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"()\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmp84025lwb.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp84025lwb.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp84025lwb.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp84025lwb.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"(()())\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmp84025lwb.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp84025lwb.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scop"
  timestamp: 1659747811
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: -1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpocaiwlc1.jl:13\n  Test threw
    exception\n  Expression: candidate("()") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpocaiwlc1.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpocaiwlc1.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpocaiwlc1.jl:12\ntest set: Error
    During Test at /tmp/tmpocaiwlc1.jl:14\n  Test threw exception\n  Expression: candidate("(()())")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpocaiwlc1.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpocaiwlc1.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659747810
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    counter =\
    \ 0\n    for i in brackets\n        if i == '('\n            counter += 1\n  \
    \      elseif i == ')'\n            counter -= 1\n        end\n        if counter\
    \ < 0\n            return false\n        end\n    end\n    if counter == 0\n \
    \       return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for b in brackets\n        if b == '('\n            push!(stack, b)\n   \
    \     elseif b == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    end\n    if brackets[1] == '('\n        if brackets[end]\
    \ == ')'\n            return correct_bracketing(brackets[2:end-1])\n        else\n\
    \            return false\n        end\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprdwmsy8h.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmprdwmsy8h.jl:25\n  Expression: candidate(\"\
    (()())\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprdwmsy8h.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprdwmsy8h.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprdwmsy8h.jl:26\n  Expression: candidate(\"()()(()())()\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprdwmsy8h.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprdwmsy8h.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprdwmsy8h.jl:27\n  Expression: candidate(\"()()((()()())())(()()(()))\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprdwmsy8h.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprdwmsy8h.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  timestamp: 1659747809
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # if the string\
    \ is empty, it is correct\n    if length(brackets) == 0\n        return true\n\
    \    end\n    # if the string is not empty, it is correct if the first character\
    \ is a closing bracket\n    # and the rest of the string is correct\n    if brackets[1]\
    \ == ')'\n        return correct_bracketing(brackets[2:end])\n    end\n    # if\
    \ the string is not empty, it is correct if the first character is an opening\
    \ bracket\n    # and the rest of the string is correct and ends with a closing\
    \ bracket\n    if brackets[1] == '('\n        return correct_bracketing(brackets[2:end])\
    \ && brackets[end] == ')'\n    end\n    # if the string is not empty, it is not\
    \ correct\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbsack97w.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpbsack97w.jl:32\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbsack97w.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbsack97w.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpbsack97w.jl:33\n  Expression: candidate(\")(()\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbsack97w.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbsack97w.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpbsack97w.jl:36\n  Expression: candidate(\")\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbsack97w.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbsack97w.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpbsack97w.jl:37\n  Expression: candidate(\"(()\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbsack97w.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbsack97w.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpbsack97w.jl:38\n  Expression: candidate(\"()()(()())())(()\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test"
  timestamp: 1659747809
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for b in brackets\n        if b == '('\n            push!(stack, b)\n   \
    \     elseif b == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets\
    \ == \"\"\n        return true\n    end\n    if brackets[1] == \")\"\n       \
    \ return false\n    end\n    if brackets[end] == \"(\"\n        return false\n\
    \    end\n    if brackets[1] == \"(\"\n        return correct_bracketing(brackets[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpmor9ympn.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpmor9ympn.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"()\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmpmor9ympn.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmor9ympn.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmor9ympn.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpmor9ympn.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"(()())\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmpmor9ympn.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmor9ympn.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scop"
  timestamp: 1659747812
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for i in brackets\n        if i == '('\n            push!(stack, i)\n   \
    \     elseif i == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count\
    \ = 0\n    for b in brackets\n        if b == '('\n            open_count += 1\n\
    \        elseif b == ')'\n            open_count -= 1\n        end\n        if\
    \ open_count < 0\n            return false\n        end\n    end\n    return open_count\
    \ == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747808
- exit_code: -1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpjb_9al_q.jl:13\n  Test threw
    exception\n  Expression: candidate("()") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpjb_9al_q.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjb_9al_q.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjb_9al_q.jl:12\ntest set: Error
    During Test at /tmp/tmpjb_9al_q.jl:14\n  Test threw exception\n  Expression: candidate("(()())")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpjb_9al_q.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjb_9al_q.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659747810
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count\
    \ = 0\n    for bracket in brackets\n        if bracket == '('\n            open_count\
    \ += 1\n        elseif bracket == ')'\n            open_count -= 1\n        end\n\
    \    end\n    return open_count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpeek37saw.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpeek37saw.jl:26\n  Expression: candidate(\"\
    )(()\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeek37saw.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeek37saw.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpeek37saw.jl:31\n  Expression: candidate(\"()()(()())())(()\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeek37saw.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeek37saw.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  timestamp: 1659747810
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # initialize\
    \ a stack\n    stack = []\n    # loop over the string\n    for bracket in brackets\n\
    \        # if the bracket is an opening bracket, push it onto the stack\n    \
    \    if bracket == '('\n            push!(stack, bracket)\n        # if the bracket\
    \ is a closing bracket, pop the stack\n        elseif bracket == ')'\n       \
    \     pop!(stack)\n        # if the bracket is neither, return false\n       \
    \ else\n            return false\n        end\n    end\n    # if the stack is\
    \ empty, return true\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpdj8kngos.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpdj8kngos.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"((()())))\") == false\n  ArgumentError: array must\
    \ be non-empty\n  Stacktrace:\n   [1] pop!\n     @ ./array.jl:1251 [inlined]\n\
    \   [2] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpdj8kngos.jl:15\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdj8kngos.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdj8kngos.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpdj8kngos.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\")(()\") == false\n  ArgumentError: array must be non-empty\n  Stacktrace:\n\
    \   [1] pop!\n     @ ./array.jl:1251 [inlined]\n   [2] correct_bracketing(brackets::String)\n\
    \     @ Main /tmp/tmpdj8kngos.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdj8kngos.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdj8kngos.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpdj8kngos.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\")\") == false\n  ArgumentError: array must be non-empty\n  Stacktrace:\n\
    \   [1] pop!\n     @ ./array.jl:1251 [inlined]\n   [2] correct_bracketing(brackets::String)\n\
    \     @ Main /tmp/tmpdj8kngos.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdj8kngos.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdj8kngos.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpdj8kngos.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"()()(()())())(()\") == fa"
  timestamp: 1659747810
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for b in brackets\n        if b == '('\n            push!(stack, b)\n   \
    \     elseif b == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # if the string\
    \ is empty, it is correct\n    if length(brackets) == 0\n        return true\n\
    \    end\n    # if the string is not empty, it is correct if the first character\
    \ is a closing bracket\n    # and the rest of the string is correct\n    if brackets[1]\
    \ == ')'\n        return correct_bracketing(brackets[2:end])\n    end\n    # if\
    \ the string is not empty, it is correct if the first character is an opening\
    \ bracket\n    # and the rest of the string is correct\n    if brackets[1] ==\
    \ '('\n        return correct_bracketing(brackets[2:end])\n    end\n    # otherwise,\
    \ the string is not correct\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpi9pql4z0.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpi9pql4z0.jl:32\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi9pql4z0.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi9pql4z0.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpi9pql4z0.jl:33\n  Expression: candidate(\")(()\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi9pql4z0.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi9pql4z0.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpi9pql4z0.jl:34\n  Expression: candidate(\"(\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi9pql4z0.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi9pql4z0.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpi9pql4z0.jl:35\n  Expression: candidate(\"((((\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi9pql4z0.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi9pql4z0.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpi9pql4z0.jl:36\n  Expression: candidate(\")\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  timestamp: 1659747810
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for i in brackets\n        if i == '('\n            push!(stack, i)\n   \
    \     elseif i == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    if isempty(stack)\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747808
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for c in brackets\n        if c == '('\n            push!(stack, c)\n   \
    \     elseif c == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if brackets[1] == \")\"\n  \
    \      return false\n    end\n    if brackets[n] == \"(\"\n        return false\n\
    \    end\n    # now we know that the first and last characters are not \")\" and\
    \ \"(\"\n    # respectively.\n    # we will use a stack to keep track of the opening\
    \ brackets.\n    stack = []\n    for i in 1:n\n        if brackets[i] == \"(\"\
    \n            push!(stack, brackets[i])\n        else\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpblebjdjy.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpblebjdjy.jl:38\n  Expression: candidate(\"\
    ()\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpblebjdjy.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpblebjdjy.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpblebjdjy.jl:39\n  Expression: candidate(\"(()())\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpblebjdjy.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpblebjdjy.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpblebjdjy.jl:40\n  Expression: candidate(\"()()(()())()\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpblebjdjy.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpblebjdjy.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpblebjdjy.jl:41\n  Expression: candidate(\"()()((()()())())(()()(()))\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpblebjdjy.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpblebjdjy.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659747810
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: -1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpocaiwlc1.jl:13\n  Test threw
    exception\n  Expression: candidate("()") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpocaiwlc1.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpocaiwlc1.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpocaiwlc1.jl:12\ntest set: Error
    During Test at /tmp/tmpocaiwlc1.jl:14\n  Test threw exception\n  Expression: candidate("(()())")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpocaiwlc1.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpocaiwlc1.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659747810
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for b in brackets\n        if b == '('\n            push!(stack, b)\n   \
    \     elseif b == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for i in 1:length(brackets)\n        if brackets[i] == '('\n            push!(stack,\
    \ brackets[i])\n        elseif brackets[i] == ')'\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747809
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == \")\"\n        return false\n    end\n    if brackets[n]\
    \ == \"(\"\n        return false\n    end\n    if brackets[1] == \"(\"\n     \
    \   return correct_bracketing(brackets[2:n-1])\n    end\n    return false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwpcwr5u2.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpwpcwr5u2.jl:29\n  Expression: candidate(\"\
    ()\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwpcwr5u2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwpcwr5u2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwpcwr5u2.jl:30\n  Expression: candidate(\"(()())\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwpcwr5u2.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwpcwr5u2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwpcwr5u2.jl:31\n  Expression: candidate(\"()()(()())()\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwpcwr5u2.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwpcwr5u2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwpcwr5u2.jl:32\n  Expression: candidate(\"()()((()()())())(()()(()))\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwpcwr5u2.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwpcwr5u2.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659747810
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for b in brackets\n        if b == '('\n            push!(stack, b)\n   \
    \     else\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: -1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpjb_9al_q.jl:13\n  Test threw
    exception\n  Expression: candidate("()") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpjb_9al_q.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjb_9al_q.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjb_9al_q.jl:12\ntest set: Error
    During Test at /tmp/tmpjb_9al_q.jl:14\n  Test threw exception\n  Expression: candidate("(()())")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpjb_9al_q.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjb_9al_q.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659747810
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: -1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpocaiwlc1.jl:13\n  Test threw
    exception\n  Expression: candidate("()") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpocaiwlc1.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpocaiwlc1.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpocaiwlc1.jl:12\ntest set: Error
    During Test at /tmp/tmpocaiwlc1.jl:14\n  Test threw exception\n  Expression: candidate("(()())")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpocaiwlc1.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpocaiwlc1.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659747810
- exit_code: -1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpocaiwlc1.jl:13\n  Test threw
    exception\n  Expression: candidate("()") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpocaiwlc1.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpocaiwlc1.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpocaiwlc1.jl:12\ntest set: Error
    During Test at /tmp/tmpocaiwlc1.jl:14\n  Test threw exception\n  Expression: candidate("(()())")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpocaiwlc1.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpocaiwlc1.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659747810
- exit_code: -1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpjb_9al_q.jl:13\n  Test threw
    exception\n  Expression: candidate("()") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpjb_9al_q.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjb_9al_q.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjb_9al_q.jl:12\ntest set: Error
    During Test at /tmp/tmpjb_9al_q.jl:14\n  Test threw exception\n  Expression: candidate("(()())")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpjb_9al_q.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjb_9al_q.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659747810
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == \")\"\n        return false\n    end\n    if brackets[n]\
    \ == \"(\"\n        return false\n    end\n    if brackets[1] == \"(\"\n     \
    \   return correct_bracketing(brackets[2:n])\n    end\n    if brackets[n] == \"\
    )\"\n        return correct_bracketing(brackets[1:n-1])\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpc742h55a.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpc742h55a.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"()\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmpc742h55a.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc742h55a.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc742h55a.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpc742h55a.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"(()())\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmpc742h55a.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc742h55a.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scop"
  timestamp: 1659747813
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if brackets[1] == \")\"\n  \
    \      return false\n    end\n    if brackets[n] == \"(\"\n        return false\n\
    \    end\n    if n % 2 != 0\n        return false\n    end\n    open_brackets\
    \ = 0\n    for i in 1:n\n        if brackets[i] == \"(\"\n            open_brackets\
    \ += 1\n        elseif brackets[i] == \")\"\n            open_brackets -= 1\n\
    \        end\n        if open_brackets < 0\n            return false\n       \
    \ end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuzjnmi60.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpuzjnmi60.jl:42\n  Expression: candidate(\"\
    )(()\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuzjnmi60.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuzjnmi60.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpuzjnmi60.jl:44\n  Expression: candidate(\"((((\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuzjnmi60.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuzjnmi60.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpuzjnmi60.jl:47\n  Expression: candidate(\"()()(()())())(()\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuzjnmi60.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuzjnmi60.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpuzjnmi60.jl:48\n  Expression: candidate(\"()()(()())()))()\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuzjnmi60.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuzjnmi60.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659747811
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    end\n    if brackets[1] == '('\n        if brackets[end]\
    \ == ')'\n            return correct_bracketing(brackets[2:end-1])\n        else\n\
    \            return false\n        end\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprdwmsy8h.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmprdwmsy8h.jl:25\n  Expression: candidate(\"\
    (()())\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprdwmsy8h.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprdwmsy8h.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprdwmsy8h.jl:26\n  Expression: candidate(\"()()(()())()\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprdwmsy8h.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprdwmsy8h.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprdwmsy8h.jl:27\n  Expression: candidate(\"()()((()()())())(()()(()))\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprdwmsy8h.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprdwmsy8h.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  timestamp: 1659747809
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for b in brackets\n        if b == '('\n            open_brackets +=\
    \ 1\n        elseif b == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for i in 1:length(brackets)\n        if brackets[i] == '('\n      \
    \      open_brackets += 1\n        elseif brackets[i] == ')'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if brackets[1] == \")\"\n  \
    \      return false\n    end\n    if brackets[n] == \"(\"\n        return false\n\
    \    end\n    open_brackets = 0\n    for i in 1:n\n        if brackets[i] == \"\
    (\"\n            open_brackets += 1\n        elseif brackets[i] == \")\"\n   \
    \         open_brackets -= 1\n        end\n        if open_brackets < 0\n    \
    \        return false\n        end\n    end\n    return open_brackets == 0\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmps27ebtf1.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmps27ebtf1.jl:38\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps27ebtf1.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps27ebtf1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmps27ebtf1.jl:39\n  Expression: candidate(\")(()\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps27ebtf1.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps27ebtf1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmps27ebtf1.jl:40\n  Expression: candidate(\"(\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps27ebtf1.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps27ebtf1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmps27ebtf1.jl:41\n  Expression: candidate(\"((((\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps27ebtf1.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps27ebtf1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmps27ebtf1.jl:42\n  Expression: candidate(\")\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  timestamp: 1659747811
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets\
    \ == \"\"\n        return true\n    end\n    if brackets[1] == \")\"\n       \
    \ return false\n    end\n    if brackets[end] == \"(\"\n        return false\n\
    \    end\n    if brackets[1] == \"(\"\n        return correct_bracketing(brackets[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpmor9ympn.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpmor9ympn.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"()\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmpmor9ympn.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmor9ympn.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmor9ympn.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpmor9ympn.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"(()())\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmpmor9ympn.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmor9ympn.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scop"
  timestamp: 1659747812
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    #your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpz4q126oa.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmpz4q126oa.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"()\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmpz4q126oa.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz4q126oa.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz4q126oa.jl:12\ntest set:\
    \ Error During Test at /tmp/tmpz4q126oa.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"(()())\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmpz4q126oa.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz4q126oa.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659747813
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == \")\"\n        return false\n    end\n    if brackets[n]\
    \ == \"(\"\n        return false\n    end\n    if brackets[1] == \"(\"\n     \
    \   return correct_bracketing(brackets[2:n])\n    end\n    if brackets[n] == \"\
    )\"\n        return correct_bracketing(brackets[1:n-1])\n    end\n    return correct_bracketing(brackets[1:n-1])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgm635l66.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpgm635l66.jl:32\n  Expression: candidate(\"\
    ()\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgm635l66.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgm635l66.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpgm635l66.jl:33\n  Expression: candidate(\"(()())\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgm635l66.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgm635l66.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpgm635l66.jl:34\n  Expression: candidate(\"()()(()())()\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgm635l66.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgm635l66.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpgm635l66.jl:35\n  Expression: candidate(\"()()((()()())())(()()(()))\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgm635l66.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgm635l66.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659747811
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # initialize\
    \ a stack to hold the opening brackets\n    stack = []\n    # iterate through\
    \ the string\n    for bracket in brackets\n        # if the bracket is an opening\
    \ bracket, push it to the stack\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        # if the bracket is a closing bracket, pop the last opening\
    \ bracket from the stack\n        elseif bracket == ')'\n            pop!(stack)\n\
    \        end\n    end\n    # if the stack is empty, then all opening brackets\
    \ have been paired with closing brackets\n    return isempty(stack)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpnsvkfyhe.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpnsvkfyhe.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"((()())))\") == false\n  ArgumentError: array must\
    \ be non-empty\n  Stacktrace:\n   [1] pop!\n     @ ./array.jl:1251 [inlined]\n\
    \   [2] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpnsvkfyhe.jl:15\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnsvkfyhe.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnsvkfyhe.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpnsvkfyhe.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\")(()\") == false\n  ArgumentError: array must be non-empty\n  Stacktrace:\n\
    \   [1] pop!\n     @ ./array.jl:1251 [inlined]\n   [2] correct_bracketing(brackets::String)\n\
    \     @ Main /tmp/tmpnsvkfyhe.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnsvkfyhe.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnsvkfyhe.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpnsvkfyhe.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\")\") == false\n  ArgumentError: array must be non-empty\n  Stacktrace:\n\
    \   [1] pop!\n     @ ./array.jl:1251 [inlined]\n   [2] correct_bracketing(brackets::String)\n\
    \     @ Main /tmp/tmpnsvkfyhe.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnsvkfyhe.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnsvkfyhe.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpnsvkfyhe.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"()()(()())())(()\") == fa"
  timestamp: 1659747812
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if brackets[1] == \")\"\n  \
    \      return false\n    end\n    if brackets[n] == \"(\"\n        return false\n\
    \    end\n    if n == 1\n        return false\n    end\n    open_bracket_count\
    \ = 0\n    for i in 1:n\n        if brackets[i] == \"(\"\n            open_bracket_count\
    \ += 1\n        elseif brackets[i] == \")\"\n            open_bracket_count -=\
    \ 1\n        end\n        if open_bracket_count < 0\n            return false\n\
    \        end\n    end\n    if open_bracket_count == 0\n        return true\n \
    \   else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe1hew208.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpe1hew208.jl:45\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe1hew208.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe1hew208.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpe1hew208.jl:46\n  Expression: candidate(\")(()\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe1hew208.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe1hew208.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpe1hew208.jl:48\n  Expression: candidate(\"((((\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe1hew208.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe1hew208.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpe1hew208.jl:50\n  Expression: candidate(\"(()\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe1hew208.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe1hew208.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpe1hew208.jl:51\n  Expression: candidate(\"()()(()())())(()\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  timestamp: 1659747811
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for b in brackets\n        if b == '('\n            push!(stack, b)\n   \
    \     elseif b == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count\
    \ = 0\n    for bracket in brackets\n        if bracket == '('\n            open_count\
    \ += 1\n        elseif bracket == ')'\n            open_count -= 1\n        end\n\
    \        if open_count < 0\n            return false\n        end\n    end\n \
    \   return open_count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for b in brackets\n        if b == '('\n            open_brackets +=\
    \ 1\n        elseif b == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # check if\
    \ the string is empty\n    if brackets == \"\"\n        return true\n    end\n\
    \    # check if the string has only one character\n    if length(brackets) ==\
    \ 1\n        return false\n    end\n    # check if the first character is \")\"\
    \n    if brackets[1] == \")\"\n        return false\n    end\n    # check if the\
    \ last character is \"(\"\n    if brackets[end] == \"(\"\n        return false\n\
    \    end\n    # check if the number of \"(\" is equal to the number of \")\"\n\
    \    if count(brackets, \"(\") != count(brackets, \")\")\n        return false\n\
    \    end\n    # check if the number of \"(\" is equal to the number of \")\"\n\
    \    if count(brackets, \"(\") != count(brackets, \")\")\n        return false\n\
    \    end\n    # check if the number of \"(\" is equal to the number of \")\"\n\
    \    if count(brackets, \"(\") != count(brackets, \")\")\n        return false\n\
    \    end\n    # check if the number of \"(\" is equal to the number of \")\"\n\
    \    if count(brackets, \"(\") != count(brackets, \")\")\n        return false\n\
    \    end\n    # check if the number of \"(\" is equal to the number of \")\"\n\
    \    if count(brackets, \"(\") != count(brackets, \")\")\n        return false\n\
    \    end\n    # check if the number of \"(\" is equal to the number of \")\"\n\
    \    if count(brackets, \"(\") != count(brackets, \")\")\n        return false\n\
    \    end\n    # check if the number of \"(\" is equal to the number of \")\"\n\
    \    if count(brackets, \"(\") != count(brackets, \")\")\n        return false\n\
    \    end\n    # check if the number of \"(\" is equal to the number of \")\"\n\
    \    if count(brackets, \"(\") != count(brackets, \")\")\n        return false\n\
    \    end\n    # check if the number of \"(\" is equal to the number of \")\"\n\
    \    if count(brackets, \"(\") != count(brackets, \")\")\n        return false\n\
    \    end\n    # check if the number of \"(\"\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfwuonqzd.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfwuonqzd.jl:1\n\
    in expression starting at /tmp/tmpfwuonqzd.jl:1\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for b in brackets\n        if b == '('\n            push!(stack, b)\n   \
    \     elseif b == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: -1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpocaiwlc1.jl:13\n  Test threw
    exception\n  Expression: candidate("()") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpocaiwlc1.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpocaiwlc1.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpocaiwlc1.jl:12\ntest set: Error
    During Test at /tmp/tmpocaiwlc1.jl:14\n  Test threw exception\n  Expression: candidate("(()())")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpocaiwlc1.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpocaiwlc1.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659747810
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # count the\
    \ number of opening brackets\n    open_brackets = count(x -> x == '(', brackets)\n\
    \    # count the number of closing brackets\n    close_brackets = count(x -> x\
    \ == ')', brackets)\n    # if the number of opening brackets is equal to the number\
    \ of closing brackets\n    # then the number of opening brackets is equal to the\
    \ number of closing brackets\n    # and the string is correctly bracketed\n  \
    \  return open_brackets == close_brackets\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3cssia.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3cssia.jl:25\n  Expression: candidate(\"\
    )(()\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3cssia.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3cssia.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp4v3cssia.jl:30\n  Expression: candidate(\"()()(()())())(()\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3cssia.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3cssia.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  timestamp: 1659747811
- exit_code: -1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpjb_9al_q.jl:13\n  Test threw
    exception\n  Expression: candidate("()") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpjb_9al_q.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjb_9al_q.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjb_9al_q.jl:12\ntest set: Error
    During Test at /tmp/tmpjb_9al_q.jl:14\n  Test threw exception\n  Expression: candidate("(()())")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpjb_9al_q.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjb_9al_q.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659747810
- exit_code: -1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpocaiwlc1.jl:13\n  Test threw
    exception\n  Expression: candidate("()") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpocaiwlc1.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpocaiwlc1.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpocaiwlc1.jl:12\ntest set: Error
    During Test at /tmp/tmpocaiwlc1.jl:14\n  Test threw exception\n  Expression: candidate("(()())")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpocaiwlc1.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpocaiwlc1.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659747810
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_stack\
    \ = Stack()\n    for bracket in brackets\n        if bracket == '('\n        \
    \    push!(bracket_stack, bracket)\n        elseif bracket == ')'\n          \
    \  if isempty(bracket_stack)\n                return false\n            else\n\
    \                pop!(bracket_stack)\n            end\n        end\n    end\n\
    \    return isempty(bracket_stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpns99fcao.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpns99fcao.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"()\") == true\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpns99fcao.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpns99fcao.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpns99fcao.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpns99fcao.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"(()())\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpns99fcao.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpns99fcao.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpns99fcao.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpns99fcao.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"()()(()())()\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpns99fcao.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpns99fcao.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpns99fcao.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpns99fcao.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"()()((()()())())(()()(()))\") == true\n  UndefVarError: Stack not\
    \ defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @\
    \ Main /tmp/tmpns99fcao.jl:6\n   [2] macro "
  timestamp: 1659747813
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # create a\
    \ stack\n    stack = Stack()\n    # iterate through the string\n    for bracket\
    \ in brackets\n        # if the bracket is an opening bracket, push it onto the\
    \ stack\n        if bracket == '('\n            push!(stack, bracket)\n      \
    \  # if the bracket is a closing bracket, pop the stack\n        elseif bracket\
    \ == ')'\n            pop!(stack)\n        end\n    end\n    # if the stack is\
    \ empty, return true\n    if isempty(stack)\n        return true\n    # otherwise,\
    \ return false\n    else\n        return false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpzjjtqhfc.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpzjjtqhfc.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"()\") == true\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpzjjtqhfc.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzjjtqhfc.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzjjtqhfc.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpzjjtqhfc.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"(()())\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpzjjtqhfc.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzjjtqhfc.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzjjtqhfc.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpzjjtqhfc.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"()()(()())()\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpzjjtqhfc.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzjjtqhfc.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzjjtqhfc.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpzjjtqhfc.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"()()((()()())())(()()(()))\") == true\n  UndefVarError: Stack not\
    \ defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @\
    \ Main /tmp/tmpzjjtqhfc.jl:7\n   [2] macro "
  timestamp: 1659747813
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for c in brackets\n        if c == '('\n            push!(stack, c)\n   \
    \     elseif c == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn8hxr870.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmpn8hxr870.jl:18\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn8hxr870.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn8hxr870.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpn8hxr870.jl:19\n  Expression: candidate(\")(()\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn8hxr870.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn8hxr870.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpn8hxr870.jl:20\n  Expression: candidate(\"(\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn8hxr870.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn8hxr870.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpn8hxr870.jl:21\n  Expression: candidate(\"((((\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn8hxr870.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn8hxr870.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpn8hxr870.jl:22\n  Expression: candidate(\")\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  timestamp: 1659747809
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn8hxr870.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmpn8hxr870.jl:18\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn8hxr870.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn8hxr870.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpn8hxr870.jl:19\n  Expression: candidate(\")(()\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn8hxr870.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn8hxr870.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpn8hxr870.jl:20\n  Expression: candidate(\"(\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn8hxr870.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn8hxr870.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpn8hxr870.jl:21\n  Expression: candidate(\"((((\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn8hxr870.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn8hxr870.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpn8hxr870.jl:22\n  Expression: candidate(\")\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  timestamp: 1659747809
- exit_code: -1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpjb_9al_q.jl:13\n  Test threw
    exception\n  Expression: candidate("()") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpjb_9al_q.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjb_9al_q.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjb_9al_q.jl:12\ntest set: Error
    During Test at /tmp/tmpjb_9al_q.jl:14\n  Test threw exception\n  Expression: candidate("(()())")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpjb_9al_q.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjb_9al_q.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659747810
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for c in brackets\n        if c == '('\n            push!(stack, c)\n   \
    \     elseif c == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    end\n    if brackets[1] == '('\n        if brackets[end]\
    \ == ')'\n            return correct_bracketing(brackets[2:end-1])\n        else\n\
    \            return false\n        end\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprdwmsy8h.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmprdwmsy8h.jl:25\n  Expression: candidate(\"\
    (()())\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprdwmsy8h.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprdwmsy8h.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprdwmsy8h.jl:26\n  Expression: candidate(\"()()(()())()\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprdwmsy8h.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprdwmsy8h.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprdwmsy8h.jl:27\n  Expression: candidate(\"()()((()()())())(()()(()))\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprdwmsy8h.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprdwmsy8h.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  timestamp: 1659747809
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for b in brackets\n        if b == '('\n            push!(stack, b)\n   \
    \     elseif b == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for i in 1:length(brackets)\n        if brackets[i] == '('\n            push!(stack,\
    \ brackets[i])\n        elseif brackets[i] == ')'\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for b in brackets\n        if b == '('\n            push!(stack, b)\n   \
    \     elseif b == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_bracket_count\
    \ = 0\n    for c in brackets\n        if c == '('\n            open_bracket_count\
    \ += 1\n        elseif c == ')'\n            open_bracket_count -= 1\n       \
    \ end\n        if open_bracket_count < 0\n            return false\n        end\n\
    \    end\n    return open_bracket_count == 0\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747810
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: -1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpocaiwlc1.jl:13\n  Test threw
    exception\n  Expression: candidate("()") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpocaiwlc1.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpocaiwlc1.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpocaiwlc1.jl:12\ntest set: Error
    During Test at /tmp/tmpocaiwlc1.jl:14\n  Test threw exception\n  Expression: candidate("(()())")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmpocaiwlc1.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpocaiwlc1.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659747810
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for i in brackets\n        if i == '('\n            push!(stack, i)\n   \
    \     elseif i == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # create a\
    \ stack\n    stack = Stack()\n    # for each character in the string\n    for\
    \ c in brackets\n        # if the character is an opening bracket, push it onto\
    \ the stack\n        if c == '('\n            push!(stack, c)\n        # if the\
    \ character is a closing bracket, pop a character from the stack\n        elseif\
    \ c == ')'\n            pop!(stack)\n        end\n    end\n    # if the stack\
    \ is empty, return true\n    # otherwise, return false\n    isempty(stack)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmp3253nm9k.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp3253nm9k.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"()\") == true\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp3253nm9k.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3253nm9k.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3253nm9k.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp3253nm9k.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"(()())\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp3253nm9k.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3253nm9k.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3253nm9k.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp3253nm9k.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"()()(()())()\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp3253nm9k.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3253nm9k.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3253nm9k.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp3253nm9k.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"()()((()()())())(()()(()))\") == true\n  UndefVarError: Stack not\
    \ defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @\
    \ Main /tmp/tmp3253nm9k.jl:7\n   [2] macro "
  timestamp: 1659747813
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for c in brackets\n        if c == '('\n            push!(stack, c)\n   \
    \     elseif c == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659747807
