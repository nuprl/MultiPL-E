name: HumanEval_103_rounded_avg
language: jl
prompt: "\"\"\"You are given two positive integers n and m, and your task is to compute\
  \ the\n    average of the integers from n through m (including n and m). \n    Round\
  \ the answer to the nearest integer and convert that to binary.\n    If n is greater\
  \ than m, return -1.\n    Example:\n                    \"\"\"\nfunction rounded_avg(n::Int64,\
  \ m::Int64)::Union{String, Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
  \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
  \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t\
  @test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"\
  0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
  \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
  @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
  \ 5) == \"0b101\")\nend\n"
completions: ["    if n > m\n        return -1\n    end\n    return convert(Int64,\
    \ round(Int64, (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n\
    \    return bin(round(Int64, (n + m) / 2))\nend", "    if n > m\n        return\
    \ -1\n    end\n    return Int(round(mean([n, m])))\nend", "    if n > m\n    \
    \    return -1\n    end\n    return Int(round(mean([n, m])))\nend", "    if n\
    \ > m\n        return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return\
    \ string(dec2bin(avg))\nend", "    if n > m\n        return -1\n    end\n    return\
    \ Int(round(mean([n, m])))\nend", "    if n > m\n        return -1\n    end\n\
    \    return Int(round(mean([n, m])))\nend", "    if n > m\n        return -1\n\
    \    end\n    return convert(Int64, round(Int64, (n + m) / 2))\nend", "    if\
    \ n > m\n        return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n   \
    \ return string(dec2bin(avg))\nend", "    if n > m\n        return -1\n    end\n\
    \    return Int(round(mean([n, m])))\nend", "    if n > m\n        return -1\n\
    \    end\n    return Int(round(mean([n:m])))\nend", "    if n > m\n        return\
    \ -1\n    end\n    return Int(round(mean([n:m])))\nend", "    if n > m\n     \
    \   return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return string(dec2bin(avg))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return convert(Int64, round(Int64,\
    \ (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n    avg = round(Int64,\
    \ (n + m) / 2)\n    return string(dec2bin(avg))\nend", "    if n > m\n       \
    \ return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return string(dec2bin(avg))\n\
    end", "    if n > m\n        return -1\n    end\n    return convert(Int64, round(Int64,\
    \ (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int64(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    avg = round(Int64,\
    \ (n + m) / 2)\n    return string(dec2bin(avg))\nend", "    if n > m\n       \
    \ return -1\n    end\n    return Int(round(mean([n, m])))\nend", "    if n > m\n\
    \        return -1\n    end\n    return Int(round(mean([n:m])))\nend", "    if\
    \ n > m\n        return -1\n    end\n    return Int(round(sum(n:m)/(m-n+1)))\n\
    end", "    if n > m\n        return -1\n    end\n    return convert(Int64, round(Int64,\
    \ (n + m) / 2) )\nend", "    if n > m\n        return -1\n    end\n    return\
    \ Int(round(mean([n:m])))\nend", "    if n > m\n        return -1\n    end\n \
    \   avg = round(Int64, (n + m) / 2)\n    return convert(Int64, avg)\nend", " \
    \   if n > m\n        return -1\n    end\n    return Int64(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    avg = round(Int64, (n + m)\
    \ / 2)\n    return string(dec2bin(avg))\nend", "    if n > m\n        return -1\n\
    \    end\n    return Int(round(mean([n, m])))\nend", "    if n > m\n        return\
    \ -1\n    end\n    return Int64(round(mean([n:m])))\nend", "    if n > m\n   \
    \     return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return string(avg,\
    \ base=2)\nend", "    if n > m\n        return -1\n    end\n    return Int64(round(sum(n:m)/(m-n+1)))\n\
    end", "    if n > m\n        return -1\n    end\n    return round(Int64, (n +\
    \ m) / 2)\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return convert(Int64,\
    \ round(Int64, (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n\
    \    return Int(round(mean([n, m])))\nend", "    if n > m\n        return -1\n\
    \    end\n    return Int(round(mean([n, m])))\nend", "    if n > m\n        return\
    \ -1\n    end\n    return Int(round(mean([n:m])))\nend", "    if n > m\n     \
    \   return -1\n    end\n    return Int64(round(mean([n, m])))\nend", "    if n\
    \ > m\n        return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return\
    \ string(avg, base=2)\nend", "    if n > m\n        return -1\n    end\n    return\
    \ Int(round(mean([n, m])))\nend", "    if n > m\n        return -1\n    end\n\
    \    avg = round(Int64, (n + m) / 2)\n    return string(avg, base=2)\nend", " \
    \   if n > m\n        return -1\n    end\n    return convert(Int64, round(Int64,\
    \ (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    avg = round(Int64, (n + m)\
    \ / 2)\n    return string(dec2bin(avg))\nend", "    if n > m\n        return -1\n\
    \    end\n    return round(Int64, (n + m) / 2)\nend", "    if n > m\n        return\
    \ -1\n    end\n    return Int(round(mean([n:m])))\nend", "    if n > m\n     \
    \   return -1\n    end\n    return Int(round(mean([n:m])))\nend", "    if n >\
    \ m\n        return -1\n    end\n    return Int64(round(Int64, (n + m) / 2))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return convert(Int64,\
    \ round(Int64, (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n\
    \    return Int(round(mean([n:m])))\nend", "    if n > m\n        return -1\n\
    \    end\n    return Int(round(mean([n, m])))\nend", "    if n > m\n        return\
    \ -1\n    end\n    return convert(Int64, round(Int64, (n + m) / 2))::Int64\nend",
  "    if n > m\n        return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n\
    \    return string(dec2bin(avg))\nend", "    if n > m\n        return -1\n   \
    \ end\n    return Int(round(mean([n:m])))\nend", "    if n > m\n        return\
    \ -1\n    end\n    return Int(round(mean([n, m])))\nend", "    if n > m\n    \
    \    return -1\n    end\n    return Int(round(mean([n, m])))\nend", "    if n\
    \ > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\nend", " \
    \   if n > m\n        return -1\n    end\n    return Int(round(mean([n, m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    avg = round(Int64, (n + m)\
    \ / 2)\n    return string(dec2bin(avg))\nend", "    if n > m\n        return -1\n\
    \    end\n    avg = round(Int64, (n + m) / 2)\n    return string(dec2bin(avg))\n\
    end", "    if n > m\n        return -1\n    end\n    return convert(Int64, round(Int64,\
    \ (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return convert(Int64,\
    \ round(mean([n, m])))\nend", "    if n > m\n        return -1\n    end\n    return\
    \ Int(round(mean([n, m])))\nend", "    if n > m\n        return -1\n    end\n\
    \    return Int(round(mean([n, m])))\nend", "    if n > m\n        return -1\n\
    \    end\n    return Int(round(mean([n, m])))\nend", "    if n > m\n        return\
    \ -1\n    end\n    return convert(Int64, round(Int64, (n + m) / 2) )\nend", " \
    \   if n > m\n        return -1\n    end\n    return Int(round(mean([n, m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m]))) |> Int64 |> binary\nend", "    if n > m\n        return -1\n    end\n\
    \    return Int(round(mean([n:m])))\nend", "    if n > m\n        return -1\n\
    \    end\n    return convert(Int64, round(Int64, (n + m) / 2) )\nend", "    if\
    \ n > m\n        return -1\n    end\n    return Int(round(sum(n:m)/(m-n+1)))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    avg = round(Int64,\
    \ (n + m) / 2)\n    return string(dec2bin(avg))\nend", "    if n > m\n       \
    \ return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return string(dec2bin(avg))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int64(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(sum(n:m)/(m-n+1)))\n\
    end", "    if n > m\n        return -1\n    end\n    return round(Int64, (n +\
    \ m) / 2)\nend", "    if n > m\n        return -1\n    end\n    avg = round(Int64,\
    \ (n + m) / 2)\n    return string(avg, \" (\", base(avg, 2), \")\")\nend", " \
    \   if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    avg = round(Int64, (n + m)\
    \ / 2)\n    return string(dec2bin(avg))\nend", "    if n > m\n        return -1\n\
    \    end\n    return Int(round(mean([n, m])))\nend", "    if n > m\n        return\
    \ -1\n    end\n    return Int(round(mean([n, m])))\nend", "    if n > m\n    \
    \    return -1\n    end\n    return Int64(round(sum(n:m)/length(n:m)))\nend",
  "    if n > m\n        return -1\n    end\n    return Int64(round(mean([n, m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    avg = round(Int64,\
    \ (n + m) / 2)\n    return string(dec2bin(avg))\nend", "    if n > m\n       \
    \ return -1\n    end\n    return Int(round(mean([n, m])))\nend", "    if n > m\n\
    \        return -1\n    end\n    return Int(round(mean([n, m])))\nend", "    if\
    \ n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\nend",
  "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m]))) |> Int64 |> binary\nend", "    if n > m\n        return -1\n    end\n\
    \    return convert(Int64, round(Int64, (n + m) / 2))\nend", "    if n > m\n \
    \       return -1\n    end\n    return Int(round(mean([n, m])))\nend", "    if\
    \ n > m\n        return -1\n    end\n    return Int(round(sum(n:m)/(m-n+1)))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(sum(n:m)/(m-n+1)))\n\
    end", "    if n > m\n        return -1\n    end\n    return string(Int64, round(Int64,\
    \ (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    avg = round(Int64, (n + m)\
    \ / 2)\n    return string(avg, base=2)\nend", "    if n > m\n        return -1\n\
    \    end\n    return Int(round(mean([n, m])))\nend", "    if n > m\n        return\
    \ -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return string(dec2bin(avg))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    avg = round(Int64,\
    \ (n + m) / 2)\n    return string(avg, \" (\", convert(Int64, string(avg), 2),\
    \ \")\")\nend", "    if n > m\n        return -1\n    end\n    return convert(Int64,\
    \ round(Int64, (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n\
    \    return Int(round(Int, (n + m) / 2))::Int64\nend", "    if n > m\n       \
    \ return -1\n    end\n    return Int(round(mean([n:m])))\nend", "    if n > m\n\
    \        return -1\n    end\n    return Int(round(mean([n:m])))\nend", "    if\
    \ n > m\n        return -1\n    end\n    return convert(Int64, round(Int64, (n\
    \ + m) / 2))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    avg = round(Int64, (n + m)\
    \ / 2)\n    return string(avg, \" (\", base(avg, 2), \")\")\nend", "    if n >\
    \ m\n        return -1\n    end\n    return Int(round(mean([n, m])))\nend", " \
    \   if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return round(Int64,\
    \ (n + m) / 2)\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int64(round(Int64,\
    \ (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n    return Int64(round(sum(n:m)/(m-n+1)))\n\
    end", "    if n > m\n        return -1\n    end\n    return convert(Int64, round(Int64,\
    \ (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m]))) |> Int64 |> binary\nend", "    if n > m\n        return -1\n    end\n\
    \    return Int(round(sum(n:m)/(m-n+1)))\nend", "    if n > m\n        return\
    \ -1\n    end\n    return Int(round(mean([n, m])))\nend", "    if n > m\n    \
    \    return -1\n    end\n    return round(Int64, (n + m) / 2)\nend", "    if n\
    \ > m\n        return -1\n    end\n    return Int64(round(sum(n:m)/(m-n+1)))\n\
    end", "    if n > m\n        return -1\n    end\n    avg = round(Int64, (n + m)\
    \ / 2)\n    return string(avg, base=2)\nend", "    if n > m\n        return -1\n\
    \    end\n    return Int(round(mean([n, m])))\nend", "    if n > m\n        return\
    \ -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return string(avg, base=2)\n\
    end", "    if n > m\n        return -1\n    end\n    return Int64(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    avg = round(Int64,\
    \ (n + m) / 2)\n    return string(avg, \" (\", Int(avg, 2), \")\")\nend", "  \
    \  if n > m\n        return -1\n    end\n    return Int(round(mean([n, m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return convert(Int64, round(Int64,\
    \ (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return round(Int64,\
    \ (n + m) / 2)\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    avg = round(Int64, (n + m)\
    \ / 2)\n    return string(dec2bin(avg))\nend", "    if n > m\n        return -1\n\
    \    end\n    return Int(round(mean([n:m])))\nend", "    if n > m\n        return\
    \ -1\n    end\n    return Int(round(mean([n, m])))\nend", "    if n > m\n    \
    \    return -1\n    end\n    return Int(round(mean([n:m])))\nend", "    if n >\
    \ m\n        return -1\n    end\n    return Int(round(mean([n, m])))\nend", " \
    \   if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return round(Int64,\
    \ (n + m) / 2)\nend", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n,\
    \ m])))\nend", "    if n > m\n        return -1\n    end\n    return Int64(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int64(round(mean([n,\
    \ m])))\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
