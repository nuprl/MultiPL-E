language: jl
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> x[1:length(prefix)]\
    \ == prefix, strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> x[1:length(prefix)]\
    \ == prefix, strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1:length(prefix)]\
    \ == prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(s -> startswith(s, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [string for string in strings if\
    \ startswith(string, prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747309
