name: HumanEval_58_common
language: jl
prompt: "\"\"\"Return sorted unique common elements for two lists.\n        \n   \
  \ \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = common;\n\t@test(candidate([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5,\
  \ 3, 2, 8], [3, 2]) == [2, 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2,\
  \ 3, 4])\n\t@test(candidate([4, 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\n\
  end\n"
completions: ["    return sort(unique(intersect(l1, l2)))\nend", "    return unique(sort(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sort(unique(intersect(l1, l2)))\nend", "   \
    \ return sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    l1 = sort(unique(l1))\n    l2 = sort(unique(l2))\n    l =\
    \ []\n    i = 1\n    j = 1\n    while i <= length(l1) && j <= length(l2)\n   \
    \     if l1[i] == l2[j]\n            push!(l, l1[i])\n            i += 1\n   \
    \         j += 1\n        elseif l1[i] < l2[j]\n            i += 1\n        else\n\
    \            j += 1\n        end\n    end\n    return l\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    \"\"\"Return sorted unique common elements for two lists.\n\
    \        \n    \"\"\"\n    return sort(unique(intersect(l1, l2)))\nend", "   \
    \ return sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return unique(sort(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    l = []\n    for i in l1\n        if i in l2\n            push!(l,\
    \ i)\n        end\n    end\n    return sort(unique(l))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return unique(sort(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    \"\"\"Return sorted unique common\
    \ elements for two lists.\n        \n    \"\"\"\n    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    # your code here\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return unique(sort(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return unique(sort(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    return\
    \ sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    return sort(unique(intersect(l1, l2)))\nend", "    \"\"\"\
    Return sorted unique common elements for two lists.\n        \n    \"\"\"\n  \
    \  return sort(unique(intersect(l1, l2)))\nend", "    # TODO: implement this function\n\
    \    return []\nend", "    return sort(unique(intersect(l1, l2)))\nend", "   \
    \ return sort(unique(intersect(l1, l2)))\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
