language: jl
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\
    \                \"\"\"\n    Note:\n    -   The input array will always contain\
    \ non-negative integers.\n    -   The input array will always contain non-negative\
    \ integers.\n    -   The input array will always contain non-negative integers.\n\
    \    -   The input array will always contain non-negative integers.\n    -   The\
    \ input array will always contain non-negative integers.\n    -   The input array\
    \ will always contain non-negative integers.\n    -   The input array will always\
    \ contain non-negative integers.\n    -   The input array will always contain\
    \ non-negative integers.\n    -   The input array will always contain non-negative\
    \ integers.\n    -   The input array will always contain non-negative integers.\n\
    \    -   The input array will always contain non-negative integers.\n    -   The\
    \ input array will always contain non-negative integers.\n    -   The input array\
    \ will always contain non-negative integers.\n    -   The input array will always\
    \ contain non-negative integers.\n    -   The input array will always contain\
    \ non-negative integers.\n    -   The input array will always contain non-negative\
    \ integers.\n    -   The input array will always contain non-negative integers.\n\
    \    -   The input array will always contain non-negative integers.\n    -   The\
    \ input array will always contain non-negative integers.\n    -   The input array\
    \ will always contain non-negative integers.\n    -   The input array will always\
    \ contain non-negative integers.\n    -   The input array will always contain\
    \ non-negative integers.\n    -   The input array will always contain non-negative\
    \ integers.\n    -   The input array will always contain non-negative integers.\n\
    \    -   The input array will always contain non-negative integers.\n    -   The\
    \ input array will always contain non-negative integers.\n    -   The input array\
    \ will always contain non-negative integers.\n    -   The input array will always\
    \ contain non-negative integers.\n    -   The input array will always contain\
    \ non-negative integers.\n    -   The\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpc9hglc7g.jl:11\nin expression starting at /tmp/tmpc9hglc7g.jl:11\n"
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\
    \                \"\"\"\n    \"\"\"\n    # My Solution\n    sort(arr, by=x->(sum(digits(x,\
    \ 2)), x))\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpajhxhb9o.jl:11\nin expression starting at /tmp/tmpajhxhb9o.jl:11\n"
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n    sort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    # [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n    \"\"\
    \"\n    # My Solution\n    ones_count = [count_ones(x) for x in arr]\n    return\
    \ sort(arr, by = x -> (ones_count[findall(arr .== x)[1]], x))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: arr not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk1g7521f.jl:17\nin expression starting at /tmp/tmpk1g7521f.jl:17\n"
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # Your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    The array will always contain non-negative\
    \ integers.\n    The array can be empty.\n    The input array may be very large.\n\
    \    \"\"\"\n    # My Solution\n    function sort_array(arr::Vector{Int64})::Vector{Int64}\n\
    \        # Your code here\n        # sort by number of ones\n        # sort by\
    \ decimal value\n        # return sorted array\n        return sort(arr, by=x->(count_ones(x),\
    \ x))\n    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp6cnok5sk.jl:11\nin expression starting at /tmp/tmp6cnok5sk.jl:11\n"
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        sort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n    \"\"\"\n\
    \    # My Solution\n    sort(arr, by=x->(count_ones(x), x))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: arr not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpttgeble8.jl:16\nin expression starting at /tmp/tmpttgeble8.jl:16\n"
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\
    \                \"\"\"\n    Note:\n    - The array will always contain non-negative\
    \ integers.\n    - The array will always contain non-negative integers.\n    -\
    \ The array will always contain non-negative integers.\n    - The array will always\
    \ contain non-negative integers.\n    - The array will always contain non-negative\
    \ integers.\n    - The array will always contain non-negative integers.\n    -\
    \ The array will always contain non-negative integers.\n    - The array will always\
    \ contain non-negative integers.\n    - The array will always contain non-negative\
    \ integers.\n    - The array will always contain non-negative integers.\n    -\
    \ The array will always contain non-negative integers.\n    - The array will always\
    \ contain non-negative integers.\n    - The array will always contain non-negative\
    \ integers.\n    - The array will always contain non-negative integers.\n    -\
    \ The array will always contain non-negative integers.\n    - The array will always\
    \ contain non-negative integers.\n    - The array will always contain non-negative\
    \ integers.\n    - The array will always contain non-negative integers.\n    -\
    \ The array will always contain non-negative integers.\n    - The array will always\
    \ contain non-negative integers.\n    - The array will always contain non-negative\
    \ integers.\n    - The array will always contain non-negative integers.\n    -\
    \ The array will always contain non-negative integers.\n    - The array will always\
    \ contain non-negative integers.\n    - The array will always contain non-negative\
    \ integers.\n    - The array will always contain non-negative integers.\n    -\
    \ The array will always contain non-negative integers.\n    - The array will always\
    \ contain non-negative integers.\n    - The array will always contain non-negative\
    \ integers.\n    - The array will always contain non-negative integers.\n    -\
    \ The array will always contain non-negative integers.\n    - The array will always\
    \ contain non-negative integers.\n    - The array will always contain non-negative\
    \ integers.\n    - The array will always contain non-negative\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp0376nnh1.jl:11\nin expression starting at /tmp/tmp0376nnh1.jl:11\n"
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n\"\"\"\n    Example:\n        sort_array([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpfya6dsxn.jl:11\nin expression starting at /tmp/tmpfya6dsxn.jl:11\n"
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\
    \                \"\"\"\n    The array will always be non-empty and contain only\
    \ non-negative integers.\n    The input array may be very large.\n    \"\"\"\n\
    \    # My Solution\n    # I don't know how to do it in Julia, so I did it in Python\n\
    \    # and then converted it to Julia\n    # I'm sure there's a better way to\
    \ do it in Julia\n    # but I don't know how to do it\n    # I'm sure there's\
    \ a way to do it without using Python\n    # but I don't know how to do it\n \
    \   # I'm sure there's a way to do it without using Python\n    # but I don't\
    \ know how to do it\n    # I'm sure there's a way to do it without using Python\n\
    \    # but I don't know how to do it\n    # I'm sure there's a way to do it without\
    \ using Python\n    # but I don't know how to do it\n    # I'm sure there's a\
    \ way to do it without using Python\n    # but I don't know how to do it\n   \
    \ # I'm sure there's a way to do it without using Python\n    # but I don't know\
    \ how to do it\n    # I'm sure there's a way to do it without using Python\n \
    \   # but I don't know how to do it\n    # I'm sure there's a way to do it without\
    \ using Python\n    # but I don't know how to do it\n    # I'm sure there's a\
    \ way to do it without using Python\n    # but I don't know how to do it\n   \
    \ # I'm sure there's a way to do it without using Python\n    # but I don't know\
    \ how to do it\n    # I'm sure there's a way to do it without using Python\n \
    \   # but I don't know how to do it\n    # I'm sure there's a way to do it without\
    \ using Python\n    # but I don't know how to do it\n    # I'm sure there's a\
    \ way to do it without using\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpfo4dds6y.jl:11\nin expression starting at /tmp/tmpfo4dds6y.jl:11\n"
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    #your code here\nend\n                \"\"\"\n    Example:\n         \
    \       \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    The array will always be not null\
    \ and will always contain non-negative integers.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpzywfz6kp.jl:11\nin expression starting at /tmp/tmpzywfz6kp.jl:11\n"
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\
    \                \"\"\"\n    The array will always be non-empty and contain only\
    \ non-negative integers.\n    The input array may contain duplicate numbers.\n\
    \    \"\"\"\n    # My Solution\n    # sort by number of ones in binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in binary representation\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpdv3p3c2_.jl:11\nin expression starting at /tmp/tmpdv3p3c2_.jl:11\n"
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My solution\n   \
    \ # I'm not sure if this is the best way to do it, but it works\n    # and it's\
    \ fast enough for the tests.\n    # I'm sure there are better ways to do it, but\
    \ I'm not sure how to\n    # do it.\n    # I'm sure there are better ways to do\
    \ it, but I'm not sure how to\n    # do it.\n    # I'm sure there are better ways\
    \ to do it, but I'm not sure how to\n    # do it.\n    # I'm sure there are better\
    \ ways to do it, but I'm not sure how to\n    # do it.\n    # I'm sure there are\
    \ better ways to do it, but I'm not sure how to\n    # do it.\n    # I'm sure\
    \ there are better ways to do it, but I'm not sure how to\n    # do it.\n    #\
    \ I'm sure there are better ways to do it, but I'm not sure how to\n    # do it.\n\
    \    # I'm sure there are better ways to do it, but I'm not sure how to\n    #\
    \ do it.\n    # I'm sure there are better ways to do it, but I'm not sure how\
    \ to\n    # do it.\n    # I'm sure there are better ways to do it, but I'm not\
    \ sure how to\n    # do it.\n    # I'm sure there are better ways to do it, but\
    \ I'm not sure how to\n    # do it.\n    # I'm sure there are better ways to do\
    \ it, but I'm not sure how to\n    # do it.\n    # I'm sure there are better ways\
    \ to do it, but I'm not sure how to\n    # do it.\n    # I'm sure there are better\
    \ ways to do it, but I'm not sure how to\n    # do it.\n    # I'm sure there are\
    \ better ways to do it, but I'm not sure how to\n    # do it\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpofaqe2ai.jl:11\nin expression starting at /tmp/tmpofaqe2ai.jl:11\n"
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My Solution\n   \
    \ # sort by number of ones in binary representation, then by decimal value\n \
    \   # sort by number of ones in binary representation\n    arr_ones = [count_ones(x)\
    \ for x in arr]\n    # sort by decimal value\n    arr_dec = [x for x in arr]\n\
    \    # sort by number of ones in binary representation\n    arr_ones_sorted =\
    \ sort(arr_ones)\n    # sort by decimal value\n    arr_dec_sorted = sort(arr_dec)\n\
    \    # sort by number of ones in binary representation\n    arr_ones_sorted_idx\
    \ = [findfirst(arr_ones, x) for x in arr_ones_sorted]\n    # sort by decimal value\n\
    \    arr_dec_sorted_idx = [findfirst(arr_dec, x) for x in arr_dec_sorted]\n  \
    \  # sort by number of ones in binary representation\n    arr_ones_sorted_idx_sorted\
    \ = sort(arr_ones_sorted_idx)\n    # sort by decimal value\n    arr_dec_sorted_idx_sorted\
    \ = sort(arr_dec_sorted_idx)\n    # sort by number of ones in binary representation\n\
    \    arr_ones_sorted_idx_sorted_idx = [findfirst(arr_ones_sorted_idx, x) for x\
    \ in arr_ones_sorted_idx_sorted]\n    # sort by decimal value\n    arr_dec_sorted_idx_sorted_idx\
    \ = [findfirst(arr_dec_sorted_idx, x) for x in arr_dec_sorted_idx_sorted]\n  \
    \  # sort by number of ones in binary representation\n    arr_ones_sorted_idx_sorted_idx_sorted\
    \ = sort(arr_ones_sorted_idx_sorted_idx)\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp2la59816.jl:11\nin expression starting at /tmp/tmp2la59816.jl:11\n"
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\
    \                \"\"\"\n    The array will always consist of non-negative integers.\n\
    \    The array will always have at least one element.\n    The array will always\
    \ be sorted in ascending order.\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    \t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpg4weot0u.jl:11\nin expression starting at /tmp/tmpg4weot0u.jl:11\n"
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n               \
    \ \"\"\"\n    Output:\n                \"\"\"\n[1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\
    \                \"\"\"\n    Note:\n                \"\"\"\n- The input array\
    \ will always contain non-negative integers.\n- The input array size is always\
    \ between 1 and 1000.\n- The input array element will always be between 0 and\
    \ 2^20 - 1.\n- The input array is not necessarily sorted.\n- The input array may\
    \ contain duplicate numbers.\n                \"\"\"\n    For more information:\n\
    \                \"\"\"\nhttps://en.wikipedia.org/wiki/Binary_number\nhttps://en.wikipedia.org/wiki/Sorting_algorithm\n\
    \                \"\"\"\n    \"\"\"\n    # My Solution\n    return sort(arr, by\
    \ = x -> (count(x -> x == '1', string(x, base = 2)), x))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\nStacktrace:\n [1] error(::String, ::String)\n\
    \   @ Base ./error.jl:42\n [2] top-level scope\n   @ /tmp/tmptdnch7hz.jl:11\n\
    in expression starting at /tmp/tmptdnch7hz.jl:11\n"
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # Your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My Solution\n   \
    \ sort(arr, by=x->(count_ones(x), x))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp1yx41017.jl:11\nin expression starting at /tmp/tmp1yx41017.jl:11\n"
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    The array will always consist of\
    \ non-negative integers.\n    The length of the array will be in the range [1,\
    \ 100].\n    The maximum number of ones in the binary representation of an integer\
    \ in the\n    array will be in the range [1, 8].\n    \"\"\"\n    # My Solution\n\
    \    # sort!(arr, by = x -> (count_ones(x), x))\n    # return arr\n    # end\n\
    \    # function count_ones(x::Int64)::Int64\n    #     count = 0\n    #     while\
    \ x > 0\n    #         count += x % 2\n    #         x = div(x, 2)\n    #    \
    \ end\n    #     return count\n    # end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp82k0tsgw.jl:11\nin expression starting at /tmp/tmp82k0tsgw.jl:11\n"
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My Solution\n   \
    \ sort(arr, by=x->(count_ones(x), x))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpmqf534td.jl:11\nin expression starting at /tmp/tmpmqf534td.jl:11\n"
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n\"\"\"\n    Example:\n                \"\"\"\n\
    sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\
    \"\"\"\n    The array will always consist of non-negative integers.\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpndsb3nl_.jl:11\nin expression starting at /tmp/tmpndsb3nl_.jl:11\n"
  stdout: ''
  timestamp: 1659747807
- exit_code: -1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpszsl7__9.jl:16\n  Test threw
    exception\n  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  MethodError:
    Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpszsl7__9.jl:10\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpszsl7__9.jl:16 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpszsl7__9.jl:15\ntest set: Error
    During Test at /tmp/tmpszsl7__9.jl:17\n  Test threw exception\n  Expression: candidate([-2,
    -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  MethodError: Cannot `convert` an object
    of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpszsl7__9.jl:10\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4'
  timestamp: 1659747810
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    The array will always consist of\
    \ non-negative integers.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpr_mu_1vm.jl:11\nin expression starting at /tmp/tmpr_mu_1vm.jl:11\n"
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My Solution:\n  \
    \  # I'm not sure if this is the most efficient way to do this, but it works.\n\
    \    # I'm sure there's a way to do this without creating a new array.\n    #\
    \ I'm also sure there's a way to do this without using a for loop.\n    # But\
    \ I'm not sure how to do either of those things.\n    # I'm also not sure how\
    \ to do this without using the built-in sort function.\n    # I'm sure there's\
    \ a way to do that, but I don't know how.\n    # I'm also not sure how to do this\
    \ without using the built-in bitstring function.\n    # I'm sure there's a way\
    \ to do that, but I don't know how.\n    # I'm also not sure how to do this without\
    \ using the built-in count function.\n    # I'm sure there's a way to do that,\
    \ but I don't know how.\n    # I'm also not sure how to do this without using\
    \ the built-in length function.\n    # I'm sure there's a way to do that, but\
    \ I don't know how.\n    # I'm also not sure how to do this without using the\
    \ built-in push! function.\n    # I'm sure there's a way to do that, but I don't\
    \ know how.\n    # I'm also not sure how to do this without using the built-in\
    \ append! function.\n    # I'm sure there's a way to do that, but I don't know\
    \ how.\n    # I'm also not sure how to do this without using the built-in sort!\
    \ function.\n    # I'm sure there's a way to do that, but I don't know how.\n\
    \    # I'm also not sure how to do this without using the built-in reverse! function.\n\
    \    # I'm sure there's a way to do that, but I don't know how.\n    # I'm also\
    \ not sure how to do this without using the built-\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpzzq3_g8s.jl:11\nin expression starting at /tmp/tmpzzq3_g8s.jl:11\n"
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My Solution\n   \
    \ sort(arr, by=x->(count_ones(x), x))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpmqf534td.jl:11\nin expression starting at /tmp/tmpmqf534td.jl:11\n"
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n               \
    \ \"\"\"\n    should return\n                \"\"\"\n[1, 2, 4, 8, 3, 5, 6, 7,\
    \ 9, 10]\n                \"\"\"\n    since\n                \"\"\"\n1 = 1\n2\
    \ = 10\n3 = 11\n4 = 100\n5 = 101\n6 = 110\n7 = 111\n8 = 1000\n9 = 1001\n10 = 1010\n\
    \                \"\"\"\n    Note:\n                \"\"\"\n    1. The array will\
    \ not be empty.\n    2. The array will have at least one non-zero element.\n \
    \   3. The array will not contain negative numbers.\n    4. The array will not\
    \ contain more than one number with the same number of ones.\n               \
    \ \"\"\"\n    \"\"\"\n    function sort_array(arr::Vector{Int64})::Vector{Int64}\n\
    \        # your code here\n        return sort(arr, by=x->(count_ones(x), x))\n\
    \    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\nStacktrace:\n [1] error(::String, ::String)\n\
    \   @ Base ./error.jl:42\n [2] top-level scope\n   @ /tmp/tmpxbkd8_tu.jl:11\n\
    in expression starting at /tmp/tmpxbkd8_tu.jl:11\n"
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n    sort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n    \"\"\"\n\
    \    # My Solution\n    function sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n        # your code here\n        arr_ones = [count_ones(x) for x in arr]\n\
    \        arr_sorted = sort(arr_ones)\n        arr_sorted_index = [findall(arr_ones\
    \ .== x)[1] for x in arr_sorted]\n        return arr[arr_sorted_index]\n    end\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmponbg5mn2.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmponbg5mn2.jl:28\n  Expression: candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n   Evaluated: [1, 1, 1, 5, 5] == [1, 2, 4,\
    \ 3, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmponbg5mn2.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmponbg5mn2.jl:27\ntest set: Test\
    \ Failed at /tmp/tmponbg5mn2.jl:29\n  Expression: candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n   Evaluated: [-4, -4, -2, -2, -2] == [-4, -2, -6,\
    \ -5, -3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmponbg5mn2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmponbg5mn2.jl:27\ntest set: Test\
    \ Failed at /tmp/tmponbg5mn2.jl:30\n  Expression: candidate([1, 0, 2, 3, 4]) ==\
    \ [0, 1, 2, 4, 3]\n   Evaluated: [0, 1, 1, 1, 3] == [0, 1, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmponbg5mn2.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmponbg5mn2.jl:27\ntest set: Test\
    \ Failed at /tmp/tmponbg5mn2.jl:32\n  Expression: candidate([2, 5, 77, 4, 5, 3,\
    \ 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n   Evaluated: [2, 2,\
    \ 2, 2, 5, 5, 5, 5, 5, 7, 77] == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmponbg5mn2.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level sc"
  timestamp: 1659747808
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # Your code here\nend\n\"\"\"\n    Example:\n    sort_array([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10])\n    # [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp6vv0xz7w.jl:11\nin expression starting at /tmp/tmp6vv0xz7w.jl:11\n"
  stdout: ''
  timestamp: 1659747809
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\
    \                \"\"\"\n    Note:\n    -   The input array will always have non-negative\
    \ integers.\n    -   The input array will always have non-negative integers.\n\
    \    -   The input array will always have non-negative integers.\n    -   The\
    \ input array will always have non-negative integers.\n    -   The input array\
    \ will always have non-negative integers.\n    -   The input array will always\
    \ have non-negative integers.\n    -   The input array will always have non-negative\
    \ integers.\n    -   The input array will always have non-negative integers.\n\
    \    -   The input array will always have non-negative integers.\n    -   The\
    \ input array will always have non-negative integers.\n    -   The input array\
    \ will always have non-negative integers.\n    -   The input array will always\
    \ have non-negative integers.\n    -   The input array will always have non-negative\
    \ integers.\n    -   The input array will always have non-negative integers.\n\
    \    -   The input array will always have non-negative integers.\n    -   The\
    \ input array will always have non-negative integers.\n    -   The input array\
    \ will always have non-negative integers.\n    -   The input array will always\
    \ have non-negative integers.\n    -   The input array will always have non-negative\
    \ integers.\n    -   The input array will always have non-negative integers.\n\
    \    -   The input array will always have non-negative integers.\n    -   The\
    \ input array will always have non-negative integers.\n    -   The input array\
    \ will always have non-negative integers.\n    -   The input array will always\
    \ have non-negative integers.\n    -   The input array will always have non-negative\
    \ integers.\n    -   The input array will always have non-negative integers.\n\
    \    -   The input array will always have non-negative integers.\n    -   The\
    \ input array will always have non-negative integers.\n    -   The input array\
    \ will always have non-negative integers.\n    -   The\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpkvkqdm_s.jl:11\nin expression starting at /tmp/tmpkvkqdm_s.jl:11\n"
  stdout: ''
  timestamp: 1659747809
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My Solution\n   \
    \ # I'm not sure if this is the most efficient way to do this, but it works.\n\
    \    # I'm sure there's a way to do this in one line, but I'm not sure how.\n\
    \    # I'm also not sure how to do this without using the sort function.\n   \
    \ # I'm also not sure how to do this without using the bitstring function.\n \
    \   # I'm also not sure how to do this without using the count function.\n   \
    \ # I'm also not sure how to do this without using the sort function.\n    # I'm\
    \ also not sure how to do this without using the sort function.\n    # I'm also\
    \ not sure how to do this without using the sort function.\n    # I'm also not\
    \ sure how to do this without using the sort function.\n    # I'm also not sure\
    \ how to do this without using the sort function.\n    # I'm also not sure how\
    \ to do this without using the sort function.\n    # I'm also not sure how to\
    \ do this without using the sort function.\n    # I'm also not sure how to do\
    \ this without using the sort function.\n    # I'm also not sure how to do this\
    \ without using the sort function.\n    # I'm also not sure how to do this without\
    \ using the sort function.\n    # I'm also not sure how to do this without using\
    \ the sort function.\n    # I'm also not sure how to do this without using the\
    \ sort function.\n    # I'm also not sure how to do this without using the sort\
    \ function.\n    # I'm also not sure how to do this without using the sort function.\n\
    \    # I'm also not sure how to do this without using the sort function.\n   \
    \ # I'm also not sure how to do this without using the sort function.\n    # I'm\
    \ also not sure how to do this without using the sort function.\n    # I'm also\
    \ not sure how to do this without using the sort function.\n    # I'm also not\
    \ sure how to do\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t\
    @test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) ==\
    \ [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmplcpbpssk.jl:11\nin expression starting at /tmp/tmplcpbpssk.jl:11\n"
  stdout: ''
  timestamp: 1659747809
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    Note:\n    -   The array will not\
    \ be empty.\n    -   The numbers in the array will not exceed 1,000,000,000.\n\
    \    -   The array will not contain any negative numbers.\n    -   The array will\
    \ contain only non-negative integers.\n    -   The array will contain only non-negative\
    \ integers.\n    -   The array will contain only non-negative integers.\n    -\
    \   The array will contain only non-negative integers.\n    -   The array will\
    \ contain only non-negative integers.\n    -   The array will contain only non-negative\
    \ integers.\n    -   The array will contain only non-negative integers.\n    -\
    \   The array will contain only non-negative integers.\n    -   The array will\
    \ contain only non-negative integers.\n    -   The array will contain only non-negative\
    \ integers.\n    -   The array will contain only non-negative integers.\n    -\
    \   The array will contain only non-negative integers.\n    -   The array will\
    \ contain only non-negative integers.\n    -   The array will contain only non-negative\
    \ integers.\n    -   The array will contain only non-negative integers.\n    -\
    \   The array will contain only non-negative integers.\n    -   The array will\
    \ contain only non-negative integers.\n    -   The array will contain only non-negative\
    \ integers.\n    -   The array will contain only non-negative integers.\n    -\
    \   The array will contain only non-negative integers.\n    -   The array will\
    \ contain only non-negative integers.\n    -   The array will contain only non-negative\
    \ integers.\n    -   The array will contain only non-negative integers.\n    -\
    \   The array will contain only non-negative integers.\n    -   The array will\
    \ contain only non-negative integers.\n    -   The array will contain only non-negative\
    \ integers.\n    -   The array will contain only non-negative integers.\n    -\
    \   The array will contain only non-negative integers.\n    -  \nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpcgqh3jh8.jl:11\nin expression starting at /tmp/tmpcgqh3jh8.jl:11\n"
  stdout: ''
  timestamp: 1659747809
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # sort the array\n    # return the sorted array\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpc5dmu33q.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpc5dmu33q.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpc5dmu33q.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc5dmu33q.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc5dmu33q.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpc5dmu33q.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpc5dmu33q.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion"
  timestamp: 1659747812
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    function sort_array(arr::Vector{Int64})::Vector{Int64}\n\
    \        arr = sort(arr, by = x -> (count_ones(x), x))\n    end\n    function\
    \ count_ones(x::Int64)::Int64\n        count = 0\n        while x > 0\n      \
    \      count += x % 2\n            x = x >> 1\n        end\n        return count\n\
    \    end\n    @testset \"Example Tests\" begin\n        @test sort_array([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n        @test\
    \ sort_array([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\n        @test sort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [1,\
    \ 2, 4, 8, 16, 3, 5, 6, 7, 9, 10, 12, 11, 13, 14, 15, 17, 18, 19, 20]\n      \
    \  @test sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,\
    \ 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == [1, 2, 4, 8, 16,\
    \ 32, 3, 5, 6, 7, 9, 10, 12, 11, 13, 14, 15, 17, 18, 19, 20, 24, 21, 22, 23, 25,\
    \ 26, 27,\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp02xswb0k.jl:11\nin expression starting at /tmp/tmp02xswb0k.jl:11\n"
  stdout: ''
  timestamp: 1659747809
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1,2,3,4,5,6,7,8,9,10]) # [1,2,4,8,3,5,6,7,9,10]\n\
    \                \"\"\"\n    Note:\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\nStacktrace:\n [1] error(::String, ::String)\n\
    \   @ Base ./error.jl:42\n [2] top-level scope\n   @ /tmp/tmphz1sozbw.jl:11\n\
    in expression starting at /tmp/tmphz1sozbw.jl:11\n"
  stdout: ''
  timestamp: 1659747809
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My Solution\n   \
    \ # sort by number of ones in their binary representation\n    # sort by decimal\
    \ value\n    # sort by number of ones in their binary representation\n    # sort\
    \ by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpmrfk3fyj.jl:11\nin expression starting at /tmp/tmpmrfk3fyj.jl:11\n"
  stdout: ''
  timestamp: 1659747809
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # Your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My Solution\n   \
    \ # Sort by number of ones in binary representation\n    sort(arr, by = x -> count(digits(x,\
    \ base = 2)))\n    # Sort by decimal value\n    sort(arr, by = x -> x)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp5vgv6c0q.jl:11\nin expression starting at /tmp/tmp5vgv6c0q.jl:11\n"
  stdout: ''
  timestamp: 1659747809
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    Note:\n    - The input array will\
    \ not be empty.\n    - The input array will not contain negative numbers.\n  \
    \  - The input array will contain non-unique numbers.\n    - The input array will\
    \ contain very large numbers.\n    - The input array will contain very small numbers.\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpewswtxs4.jl:11\nin expression starting at /tmp/tmpewswtxs4.jl:11\n"
  stdout: ''
  timestamp: 1659747809
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    Note:\n    - The array should be\
    \ sorted in ascending order.\n    - The array should not be empty.\n    - The\
    \ array should not contain negative numbers.\n    - The array should not contain\
    \ duplicate numbers.\n    - The array should contain only non-negative numbers.\n\
    \    - The array should contain only integers.\n    - The array should contain\
    \ only numbers.\n    - The array should contain only numbers.\n    - The array\
    \ should contain only numbers.\n    - The array should contain only numbers.\n\
    \    - The array should contain only numbers.\n    - The array should contain\
    \ only numbers.\n    - The array should contain only numbers.\n    - The array\
    \ should contain only numbers.\n    - The array should contain only numbers.\n\
    \    - The array should contain only numbers.\n    - The array should contain\
    \ only numbers.\n    - The array should contain only numbers.\n    - The array\
    \ should contain only numbers.\n    - The array should contain only numbers.\n\
    \    - The array should contain only numbers.\n    - The array should contain\
    \ only numbers.\n    - The array should contain only numbers.\n    - The array\
    \ should contain only numbers.\n    - The array should contain only numbers.\n\
    \    - The array should contain only numbers.\n    - The array should contain\
    \ only numbers.\n    - The array should contain only numbers.\n    - The array\
    \ should contain only numbers.\n    - The array should contain only numbers.\n\
    \    - The array should contain only numbers.\n    - The array should contain\
    \ only numbers.\n    - The array should contain only numbers.\n    - The array\
    \ should contain only numbers.\n    - The array should contain only numbers.\n\
    \    - The array should contain only numbers.\n    - The array should contain\
    \ only numbers.\n    - The array should contain only numbers.\n    - The array\
    \ should contain only numbers.\n    - The array should contain only numbers.\n\
    \    - The array should contain only numbers.\n    - The array should contain\
    \ only numbers.\n    - The array should contain only numbers.\n    -\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpuzq2i2_5.jl:11\nin expression starting at /tmp/tmpuzq2i2_5.jl:11\n"
  stdout: ''
  timestamp: 1659747809
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n               \
    \ \"\"\"\n    should return:\n                \"\"\"\n[1, 2, 4, 8, 3, 5, 6, 7,\
    \ 9, 10]\n                \"\"\"\n    [1, 2, 4, 8, 16, 32, 64, 128, 256, 1024,\
    \ 2048, 4096, 8192, 16384, 32768, 65536,\n    1048576, 2097152, 4194304, 8388608,\
    \ 16777216, 33554432, 67108864, 134217728,\n    268435456, 536870912, 1073741824,\
    \ 2147483648]\n                \"\"\"\n    [1, 2, 4, 8, 3, 5, 6, 7, 9, 10, 12,\
    \ 11, 13, 14, 15, 16, 17, 18, 20, 19, 21, 22,\n    23, 24, 25, 26, 27, 28, 29,\
    \ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\n    43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,\n    63, 64, 65,\
    \ 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\n    83,\
    \ 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101,\n\
    \    102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,\
    \ 117,\n    118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131,\
    \ 132, 133,\n    134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146,\
    \ 147, 148, 149,\n    150, 151, 152, 153, 154, 155, 156\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\nStacktrace:\n [1] error(::String, ::String)\n\
    \   @ Base ./error.jl:42\n [2] top-level scope\n   @ /tmp/tmpsgp3ue32.jl:11\n\
    in expression starting at /tmp/tmpsgp3ue32.jl:11\n"
  stdout: ''
  timestamp: 1659747809
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # sort by number of ones in binary representation\n    # if number of\
    \ ones is equal, sort by decimal value\n    return sort(arr, by = x -> (count_ones(x),\
    \ x))\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6mv_xxw_.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp6mv_xxw_.jl:19\n  Expression: candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   Evaluated: [-6, -4, -5, -3, -2]\
    \ == [-4, -2, -6, -5, -3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6mv_xxw_.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6mv_xxw_.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  timestamp: 1659747810
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # Your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp259hv35l.jl:11\nin expression starting at /tmp/tmp259hv35l.jl:11\n"
  stdout: ''
  timestamp: 1659747809
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\
    \                \"\"\"\n    Note:\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpfb47szb1.jl:11\nin expression starting at /tmp/tmpfb47szb1.jl:11\n"
  stdout: ''
  timestamp: 1659747809
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n\"\"\"\n    Example:\n        sort_array([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpfya6dsxn.jl:11\nin expression starting at /tmp/tmpfya6dsxn.jl:11\n"
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n\"\"\"\n    Example:\n        sort_array([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpfya6dsxn.jl:11\nin expression starting at /tmp/tmpfya6dsxn.jl:11\n"
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\
    \                \"\"\"\n    \"\"\"\n    # My solution\n    #\n    # First, we\
    \ create a dictionary with the number of ones in the binary\n    # representation\
    \ of each number in the array.\n    # Then, we sort the array by the number of\
    \ ones, and then by the decimal\n    # value.\n    # Finally, we return the sorted\
    \ array.\n    #\n    # Note:\n    #   - The function `count_ones` counts the number\
    \ of ones in the binary\n    #     representation of a given number.\n    #  \
    \ - The function `sort_by_ones` sorts the array by the number of ones\n    # \
    \    in the binary representation of each number.\n    #   - The function `sort_by_decimal`\
    \ sorts the array by the decimal value\n    #     of each number.\n    #\n   \
    \ # Time complexity: O(n*log(n))\n    # Space complexity: O(n)\n    function sort_array(arr::Vector{Int64})::Vector{Int64}\n\
    \        ones_dict = Dict{Int64, Int64}()\n        for n in arr\n            ones_dict[n]\
    \ = count_ones(n)\n        end\n        sorted_by_ones = sort_by_ones(arr, ones_dict)\n\
    \        sorted_by_decimal = sort_by_decimal(sorted_by_ones)\n        return sorted_by_decimal\n\
    \    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpas1wqr5u.jl:11\nin expression starting at /tmp/tmpas1wqr5u.jl:11\n"
  stdout: ''
  timestamp: 1659747809
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n\"\"\"\n    Example:\n    sort_array([1,2,3,4,5,6,7,8,9,10])\
    \ == [1,2,4,8,3,5,6,7,9,10]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpgd1lnrpf.jl:11\nin expression starting at /tmp/tmpgd1lnrpf.jl:11\n"
  stdout: ''
  timestamp: 1659747809
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n\"\"\"\n    Example:\n                \"\"\"\n\
    sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\
    \"\"\"\n    The binary representation of 1 is 1, 2 is 10, 3 is 11, 4 is 100, 5\
    \ is 101,\n    6 is 110, 7 is 111, 8 is 1000, 9 is 1001, 10 is 1010.\n    The\
    \ number of ones in the binary representation of 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\
    \ is 1, 1, 2, 1, 2, 2, 3, 1, 2, 2.\n    The decimal value of 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10 is 1, 2, 3, 4, 5, 6, 7, 8, 9, 10.\n    The sorted array according\
    \ to number of ones in their binary representation is\n    [1, 2, 4, 8, 3, 5,\
    \ 6, 7, 9, 10].\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpj70s9az8.jl:11\nin expression starting at /tmp/tmpj70s9az8.jl:11\n"
  stdout: ''
  timestamp: 1659747809
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n               \
    \ \"\"\"\n    should return:\n                \"\"\"\n[1, 2, 4, 8, 3, 5, 6, 7,\
    \ 9, 10]\n                \"\"\"\n    since:\n                \"\"\"\n1 has 1\
    \ one in binary representation,\n2 has 1 one in binary representation,\n3 has\
    \ 2 ones in binary representation,\n4 has 1 one in binary representation,\n5 has\
    \ 2 ones in binary representation,\n6 has 2 ones in binary representation,\n7\
    \ has 3 ones in binary representation,\n8 has 1 one in binary representation,\n\
    9 has 2 ones in binary representation,\n10 has 2 ones in binary representation.\n\
    \                \"\"\"\n    Note:\n                \"\"\"\n- The input array\
    \ will always contain non-negative integers.\n- The input array should not be\
    \ modified.\n                \"\"\"\n    \"\"\"\n    # your code here\n    return\
    \ sort(arr, by=x->(count_ones(x), x))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\nStacktrace:\n [1] error(::String, ::String)\n\
    \   @ Base ./error.jl:42\n [2] top-level scope\n   @ /tmp/tmp7jxvlepy.jl:11\n\
    in expression starting at /tmp/tmp7jxvlepy.jl:11\n"
  stdout: ''
  timestamp: 1659747809
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    The array will always contain non-negative\
    \ integers.\n    The numbers in the array will be in the range [0, 1000000].\n\
    \    The maximum length of the array is 1000.\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpcpf_yop7.jl:11\nin expression starting at /tmp/tmpcpf_yop7.jl:11\n"
  stdout: ''
  timestamp: 1659747809
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(arr, by = x -> (count_ones(x), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpji9ukufu.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpji9ukufu.jl:17\n  Expression: candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   Evaluated: [-6, -4, -5, -3, -2]\
    \ == [-4, -2, -6, -5, -3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpji9ukufu.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpji9ukufu.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  timestamp: 1659747810
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My Solution:\n  \
    \  function sort_array(arr::Vector{Int64})::Vector{Int64}\n        # your code\
    \ here\n        # sort by number of ones in binary representation\n        # sort\
    \ by decimal value\n        # return sorted array\n        return sort(arr, by=x->(count_ones(x),\
    \ x))\n    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpa7nxo7po.jl:11\nin expression starting at /tmp/tmpa7nxo7po.jl:11\n"
  stdout: ''
  timestamp: 1659747810
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    For example:\n    \
    \            \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4,\
    \ 8, 3, 5, 6, 7, 9, 10]\n                \"\"\"\n    The array will always contain\
    \ non-negative integers.\n    The numbers in the array will range from 1 to 10^6.\n\
    \    The numbers in the array will have at most 7 digits in their binary representation.\n\
    \    \"\"\"\n    function sort_array(arr::Vector{Int64})::Vector{Int64}\n    \
    \    # your code here\n        return sort(arr, by = x -> (count_ones(x), x))\n\
    \    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmppzwuxy6l.jl:11\nin expression starting at /tmp/tmppzwuxy6l.jl:11\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\
    \                \"\"\"\n    \"\"\"\n    # My Solution:\n    sort(arr, by = x\
    \ -> (sum(digits(x, base = 2)), x))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpqpe4qe0_.jl:11\nin expression starting at /tmp/tmpqpe4qe0_.jl:11\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: -1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpszsl7__9.jl:16\n  Test threw
    exception\n  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  MethodError:
    Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpszsl7__9.jl:10\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpszsl7__9.jl:16 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpszsl7__9.jl:15\ntest set: Error
    During Test at /tmp/tmpszsl7__9.jl:17\n  Test threw exception\n  Expression: candidate([-2,
    -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  MethodError: Cannot `convert` an object
    of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpszsl7__9.jl:10\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4'
  timestamp: 1659747810
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    #your code here\nend\n\"\"\"\n    Example:\n    sort_array([1,2,3,4,5,6,7,8,9,10])\
    \ == [1,2,4,8,3,5,6,7,9,10]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp14piqu_c.jl:11\nin expression starting at /tmp/tmp14piqu_c.jl:11\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # my solution\n   \
    \ # sort by number of ones in binary representation\n    # if number of ones is\
    \ the same, sort by decimal value\n    # sort by number of ones\n    # sort by\
    \ decimal value\n    # return sorted array\n    return sort(arr, by=x->(sum(digits(x,\
    \ base=2)), x))\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpc28wan2f.jl:11\nin expression starting at /tmp/tmpc28wan2f.jl:11\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n\"\"\"\n    Example:\n        sort_array([1,2,3,4,5,6,7,8,9,10])\
    \ == [1,2,4,8,3,5,6,7,9,10]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp9jxrgi2b.jl:11\nin expression starting at /tmp/tmp9jxrgi2b.jl:11\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My Solution\n   \
    \ sort(arr, by=x->(sum(digits(x, 2)), x))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpt7re8fon.jl:11\nin expression starting at /tmp/tmpt7re8fon.jl:11\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n\"\"\"\n    Example:\n    sort_array([1,2,3,4,5,6,7,8,9,10])\
    \ == [1,2,4,8,3,5,6,7,9,10]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpgd1lnrpf.jl:11\nin expression starting at /tmp/tmpgd1lnrpf.jl:11\n"
  stdout: ''
  timestamp: 1659747809
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My Solution\n   \
    \ # sort by number of ones in binary representation\n    # then sort by decimal\
    \ value\n    # sort by number of ones in binary representation\n    # then sort\
    \ by decimal value\n    # sort by number of ones in binary representation\n  \
    \  # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpup5oyrfm.jl:11\nin expression starting at /tmp/tmpup5oyrfm.jl:11\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    The array will always contain non-negative\
    \ integers.\n    The numbers of ones in the binary representation of the integers\
    \ will vary.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp536cg70o.jl:11\nin expression starting at /tmp/tmp536cg70o.jl:11\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My solution\n   \
    \ # I used the bitstring package to get the binary representation of the numbers\n\
    \    # and then used the count function to get the number of ones in the binary\n\
    \    # representation.\n    # I then used the sort function to sort the array\
    \ according to the number of\n    # ones in the binary representation.\n    #\
    \ I then used the sort! function to sort the array according to the decimal\n\
    \    # value.\n    # I then used the sort! function to sort the array according\
    \ to the number of\n    # ones in the binary representation.\n    # I then used\
    \ the sort! function to sort the array according to the decimal\n    # value.\n\
    \    # I then used the sort! function to sort the array according to the number\
    \ of\n    # ones in the binary representation.\n    # I then used the sort! function\
    \ to sort the array according to the decimal\n    # value.\n    # I then used\
    \ the sort! function to sort the array according to the number of\n    # ones\
    \ in the binary representation.\n    # I then used the sort! function to sort\
    \ the array according to the decimal\n    # value.\n    # I then used the sort!\
    \ function to sort the array according to the number of\n    # ones in the binary\
    \ representation.\n    # I then used the sort! function to sort the array according\
    \ to the decimal\n    # value.\n    # I then used the sort! function to sort the\
    \ array according to the number of\n    # ones in the binary representation.\n\
    \    # I then used the sort! function to sort the array according to the decimal\n\
    \    # value.\n    # I then used the sort! function to sort the array according\
    \ to the number of\n    # ones in the binary representation.\n    # I then used\
    \ the sort! function to sort the array according to the decimal\n    # value.\n\
    \    # I then used the sort! function to sort the array according to the number\
    \ of\n    # ones in the binary representation.\n    # I then used the sort! function\
    \ to sort\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpjd44v3ar.jl:11\nin expression starting at /tmp/tmpjd44v3ar.jl:11\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    For more information on binary\
    \ representation of numbers, see here.\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpdfhx8014.jl:11\nin expression starting at /tmp/tmpdfhx8014.jl:11\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        sort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n        # [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n  \
    \      \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp1z20n1hq.jl:11\nin expression starting at /tmp/tmp1z20n1hq.jl:11\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \"\"\"\n    Sorts array of non-negative integers according to\n    number\
    \ of ones in their binary representation in ascending order.\n    For similar\
    \ number of ones, sort based on decimal value.\n    \"\"\"\n    # sort by number\
    \ of ones in binary representation\n    arr = sort(arr, by = x -> count_ones(x))\n\
    \    # sort by decimal value\n    arr = sort(arr)\n    return arr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkair9tjw.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpkair9tjw.jl:25\n  Expression: candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 2, 4,\
    \ 3, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkair9tjw.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkair9tjw.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkair9tjw.jl:26\n  Expression: candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n   Evaluated: [-6, -5, -4, -3, -2] == [-4, -2, -6,\
    \ -5, -3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkair9tjw.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkair9tjw.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkair9tjw.jl:27\n  Expression: candidate([1, 0, 2, 3, 4]) ==\
    \ [0, 1, 2, 4, 3]\n   Evaluated: [0, 1, 2, 3, 4] == [0, 1, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkair9tjw.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkair9tjw.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkair9tjw.jl:29\n  Expression: candidate([2, 5, 77, 4, 5, 3,\
    \ 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n   Evaluated: [2, 2,\
    \ 3, 3, 4, 4, 5, 5, 5, 7, 77] == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkair9tjw.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level sc"
  timestamp: 1659747812
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    Note:\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpw7_hvnb_.jl:11\nin expression starting at /tmp/tmpw7_hvnb_.jl:11\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp701z56da.jl:11\nin expression starting at /tmp/tmp701z56da.jl:11\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    For example:\n    \
    \            \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4,\
    \ 8, 3, 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My solution:\n\
    \    # First, we need to convert the decimal numbers to binary.\n    # Then, we\
    \ need to count the number of ones in each binary number.\n    # Then, we need\
    \ to sort the numbers based on the number of ones in the binary number.\n    #\
    \ Then, we need to convert the binary numbers back to decimal.\n    # Finally,\
    \ we return the sorted decimal numbers.\n    #\n    # First, we create a function\
    \ that converts a decimal number to binary.\n    function decimal_to_binary(decimal::Int64)::String\n\
    \        binary = \"\"\n        while decimal > 0\n            binary = string(decimal\
    \ % 2) * binary\n            decimal = decimal \xF7 2\n        end\n        return\
    \ binary\n    end\n    #\n    # Next, we create a function that counts the number\
    \ of ones in a binary number.\n    function count_ones(binary::String)::Int64\n\
    \        count = 0\n        for i in 1:length(binary)\n            if binary[i]\
    \ == '1'\n                count += 1\n            end\n        end\n        return\
    \ count\n    end\n    #\n    # Next, we create a function that converts a binary\
    \ number to decimal.\n    function binary_to_decimal(binary::String)::Int64\n\
    \        decimal = 0\n        for i in 1:length(binary)\n            decimal +=\
    \ parse(Int64, binary[i]) * 2^(length(binary) - i)\n        end\n        return\
    \ decimal\n    end\n    #\n    # Next, we create a function that sorts the numbers\
    \ based on the number of ones in the binary number.\n    function sort_array(arr::Vector{Int64})::Vector{Int64}\n\
    \        # First, we create a dictionary that maps the number of ones in the binary\
    \ number to the decimal number.\n        dict = Dict{Int64, Vector{Int64}}()\n\
    \        for i in 1:length(arr)\n            binary =\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmph_rm9ua9.jl:11\nin expression starting at /tmp/tmph_rm9ua9.jl:11\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My Solution\n   \
    \ # ===========\n    #\n    # This is a simple solution that uses the `sort` function.\n\
    \    #\n    # The `sort` function can take a function as an argument.\n    # This\
    \ function is called on each element of the array to be sorted.\n    # The function\
    \ should return a tuple of the form `(a, b)` where `a` is the\n    # element to\
    \ be sorted and `b` is the value to sort by.\n    #\n    # The `sort` function\
    \ sorts by the first element of the tuple by default.\n    #\n    # In this case,\
    \ I use the `count_ones` function to count the number of ones\n    # in the binary\
    \ representation of the number.\n    #\n    # The `count_ones` function is defined\
    \ below.\n    #\n    # The `sort` function is called with the `by` keyword argument.\n\
    \    # This keyword argument takes a function that is called on the second element\n\
    \    # of the tuple.\n    #\n    # In this case, I use the `identity` function\
    \ to sort by the second element\n    # of the tuple.\n    #\n    # The `identity`\
    \ function is defined below.\n    #\n    # The `sort` function is called with\
    \ the `rev` keyword argument.\n    # This keyword argument reverses the sort order.\n\
    \    #\n    # The `sort` function is called with the `stable` keyword argument.\n\
    \    # This keyword argument ensures that the sort is stable.\n    #\n    # The\
    \ `sort` function is called with the `all` keyword argument.\n    # This keyword\
    \ argument ensures that the sort is performed on all elements\n    # of the array.\n\
    \    #\n    # The `sort` function is called with the `dims` keyword argument.\n\
    \    # This keyword argument ensures that the sort is performed on the first\n\
    \    # dimension of the array.\n    #\n    # The `sort` function\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmptso008ae.jl:11\nin expression starting at /tmp/tmptso008ae.jl:11\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n               \
    \ \"\"\"\n    should return:\n                \"\"\"\n[1, 2, 4, 8, 3, 5, 6, 7,\
    \ 9, 10]\n                \"\"\"\n    The binary representation of 1 is 1, 2 is\
    \ 10, 3 is 11, 4 is 100, 5 is 101,\n    6 is 110, 7 is 111, 8 is 1000, 9 is 1001,\
    \ 10 is 1010.\n    \"\"\"\n    # your code here\n    return [1, 2, 4, 8, 3, 5,\
    \ 6, 7, 9, 10]\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\nStacktrace:\n [1] error(::String, ::String)\n\
    \   @ Base ./error.jl:42\n [2] top-level scope\n   @ /tmp/tmp0w_urk91.jl:11\n\
    in expression starting at /tmp/tmp0w_urk91.jl:11\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    For example:\n    \
    \            \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4,\
    \ 8, 3, 5, 6, 7, 9, 10]\n                \"\"\"\n    If you liked this Kata, you\
    \ can find more at my\n    [github](https://github.com/jimmy23013/Codewars-Kata/tree/master/Kata/6kyu)\n\
    \    page.\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t\
    @test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) ==\
    \ [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpxln40eyw.jl:11\nin expression starting at /tmp/tmpxln40eyw.jl:11\n"
  stdout: ''
  timestamp: 1659747812
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    For example:\n    \
    \            \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4,\
    \ 8, 3, 5, 6, 7, 9, 10]\n                \"\"\"\n    The array will always contain\
    \ non-negative integers.\n    \"\"\"\n    # My Solution\n    return sort(arr,\
    \ by = (x -> (count(x -> x == '1', string(x, base = 2)), x)))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpifabk8ry.jl:11\nin expression starting at /tmp/tmpifabk8ry.jl:11\n"
  stdout: ''
  timestamp: 1659747812
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # sort the array by number of ones in binary representation\n    # if\
    \ the number of ones is the same, sort by decimal value\n    # return the sorted\
    \ array\nend\n                \"\"\"\n    Example:\n                \"\"\"\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n          \
    \      \"\"\"\n    Note:\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array should not be modified!\n    \"\"\"\n    #\
    \ My Solution\n    # sort by number of ones in binary representation\n    # if\
    \ the number of ones is the same, sort by decimal value\n    # return the sorted\
    \ array\n    # sort by number of ones in binary representation\n    # if the number\
    \ of ones is the same, sort by decimal value\n    # return the sorted array\n\
    \    return sort(arr, by = x -> (count(x -> x == '1', string(x, base = 2)), x))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp6hbsi6e9.jl:13\nin expression starting at /tmp/tmp6hbsi6e9.jl:13\n"
  stdout: ''
  timestamp: 1659747812
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    The array will always consist of\
    \ non-negative integers.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpr_mu_1vm.jl:11\nin expression starting at /tmp/tmpr_mu_1vm.jl:11\n"
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My solution:\n  \
    \  # First, I create a dictionary with the key being the number of ones in the\
    \ binary representation of the number\n    # and the value being the number itself.\n\
    \    # Then, I sort the dictionary by key and return the values.\n    # I'm sure\
    \ there's a better way to do this, but I'm not sure how.\n    # I'm also not sure\
    \ how to do this without using a dictionary.\n    # I'm not sure how to sort the\
    \ array by the number of ones in the binary representation of the number.\n  \
    \  # I'm also not sure how to sort the array by the number of ones in the binary\
    \ representation of the number\n    # and then by the decimal value.\n    # I'm\
    \ also not sure how to sort the array by the number of ones in the binary representation\
    \ of the number\n    # and then by the decimal value in ascending order.\n   \
    \ # I'm also not sure how to sort the array by the number of ones in the binary\
    \ representation of the number\n    # and then by the decimal value in ascending\
    \ order without using a dictionary.\n    # I'm also not sure how to sort the array\
    \ by the number of ones in the binary representation of the number\n    # and\
    \ then by the decimal value in ascending order without using a dictionary in one\
    \ line.\n    # I'm also not sure how to sort the array by the number of ones in\
    \ the binary representation of the number\n    # and then by the decimal value\
    \ in ascending order without using a dictionary in one line in Julia.\n    # I'm\
    \ also not sure how to sort the array by the number of ones in the binary representation\
    \ of the number\n    # and then by the decimal value in ascending order without\
    \ using a dictionary in one line in Julia\n    # in the function sort_array.\n\
    \    # I'm also not sure how to sort the array by the number of ones in the binary\
    \ representation of the number\n    # and then by the decimal value in ascending\
    \ order without using a dictionary in one line in Julia\n    # in the function\
    \ sort_array that takes\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpnaz4ntjr.jl:11\nin expression starting at /tmp/tmpnaz4ntjr.jl:11\n"
  stdout: ''
  timestamp: 1659747812
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    Note:\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpw7_hvnb_.jl:11\nin expression starting at /tmp/tmpw7_hvnb_.jl:11\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # sort the array according to the number of ones in their binary representation\n\
    \    # and then by their decimal value\n    #\n    # Example:\n    # sort_array([1,2,3,4,5,6,7,8,9,10])\
    \ == [1,2,4,8,3,5,6,7,9,10]\n    #\n    # All numbers in the array will be positive\
    \ integers\n    #\n    # The argument will always be an array\n    #\n    # Return\
    \ an empty array if the argument is an empty array\n    #\n    # The link to this\
    \ kata:\n    # https://www.codewars.com/kata/59f7fc109f0e86d705000043/train/julia\n\
    \    #\n    # Happy coding! ^_^\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpcxcl1rkt.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpcxcl1rkt.jl:31\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpcxcl1rkt.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcxcl1rkt.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcxcl1rkt.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpcxcl1rkt.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpcxcl1rkt.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion"
  timestamp: 1659747815
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # my solution\n   \
    \ # sort by number of ones in binary representation\n    # if equal, sort by decimal\
    \ value\n    # sort by number of ones in binary representation\n    # if equal,\
    \ sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # if equal, sort by decimal value\n    # sort by number of ones in binary\
    \ representation\n    # if equal, sort by decimal value\n    # sort by number\
    \ of ones in binary representation\n    # if equal, sort by decimal value\n  \
    \  # sort by number of ones in binary representation\n    # if equal, sort by\
    \ decimal value\n    # sort by number of ones in binary representation\n    #\
    \ if equal, sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # if equal, sort by decimal value\n    # sort by number of ones in binary\
    \ representation\n    # if equal, sort by decimal value\n    # sort by number\
    \ of ones in binary representation\n    # if equal, sort by decimal value\n  \
    \  # sort by number of ones in binary representation\n    # if equal, sort by\
    \ decimal value\n    # sort by number of ones in binary representation\n    #\
    \ if equal, sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # if equal, sort by decimal value\n    # sort by number of ones in binary\
    \ representation\n    # if equal, sort by decimal value\n    # sort by number\
    \ of ones in binary representation\n    # if equal, sort by decimal value\n  \
    \  # sort by number of ones in binary representation\n    # if equal, sort by\
    \ decimal value\n    # sort by number of ones in binary representation\n    #\
    \ if equal, sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # if equal, sort by decimal value\n    # sort by number of ones in binary\
    \ representation\n    # if equal, sort by decimal value\n    # sort by number\
    \ of ones in binary representation\n    # if equal, sort by decimal value\n  \
    \  # sort by number of ones in binary representation\n    # if equal\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpul4do3p2.jl:11\nin expression starting at /tmp/tmpul4do3p2.jl:11\n"
  stdout: ''
  timestamp: 1659747813
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(arr, by = x -> (count_ones(x), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpji9ukufu.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpji9ukufu.jl:17\n  Expression: candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   Evaluated: [-6, -4, -5, -3, -2]\
    \ == [-4, -2, -6, -5, -3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpji9ukufu.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpji9ukufu.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  timestamp: 1659747810
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n    sort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n    \"\"\"\n\
    \    #MyCode\n    function count_ones(x::Int64)::Int64\n        count = 0\n  \
    \      while x > 0\n            count += x % 2\n            x = div(x, 2)\n  \
    \      end\n        return count\n    end\n    return sort(arr, by = (x -> (count_ones(x),\
    \ x)))\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: arr not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo_aiiefr.jl:24\nin expression starting at /tmp/tmpo_aiiefr.jl:24\n"
  stdout: ''
  timestamp: 1659747813
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # sort by number of ones in binary representation\n    # if same number\
    \ of ones, sort by decimal value\n    # return sorted array\nend\n           \
    \     \"\"\"\n    Example:\n                \"\"\"\nsort_array([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n                \"\"\"\n\
    \    Note:\n                \"\"\"\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array size is always >= 1.\n    - The\
    \ input array will always contain integers in the inclusive range [0, 1000].\n\
    \    - The input array can contain duplicate integers.\n    - The input array\
    \ is not guaranteed to be sorted.\n    - The input array can be very large.\n\
    \    - The input array can contain very large integers.\n    - The input array\
    \ can contain integers with leading zeros.\n    - The input array can contain\
    \ integers with trailing zeros.\n    - The input array can contain integers with\
    \ leading and trailing zeros.\n    - The input array can contain integers with\
    \ leading, trailing and embedded zeros.\n    - The input array can contain integers\
    \ with leading, trailing and embedded zeros and very large integers.\n    - The\
    \ input array can contain integers with leading, trailing and embedded zeros and\
    \ very large integers and duplicate integers.\n    - The input array can contain\
    \ integers with leading, trailing and embedded zeros and very large integers and\
    \ duplicate integers and integers with leading zeros.\n    - The input array can\
    \ contain integers with leading, trailing and embedded zeros and very large integers\
    \ and duplicate integers and integers with leading zeros and integers with trailing\
    \ zeros.\n    - The input array can contain integers with leading, trailing and\
    \ embedded zeros and very large integers and duplicate integers and integers with\
    \ leading zeros and integers with trailing zeros and integers with leading and\
    \ trailing zeros.\n    - The input array can contain integers with leading, trailing\
    \ and embedded zeros and very large integers and duplicate integers and integers\
    \ with leading zeros and integers with trailing zeros and integers with leading\
    \ and trailing zeros and integers with leading, trailing and embedded zeros.\n\
    \    - The input array can contain integers with leading, trailing and embedded\
    \ zeros and very large integers and duplicate integers and integers with leading\
    \ zeros and integers with trailing zeros and integers with leading and trailing\
    \ zeros\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpdbg23k5o.jl:13\nin expression starting at /tmp/tmpdbg23k5o.jl:13\n"
  stdout: ''
  timestamp: 1659747813
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\
    \                \"\"\"\n    Note:\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpfb47szb1.jl:11\nin expression starting at /tmp/tmpfb47szb1.jl:11\n"
  stdout: ''
  timestamp: 1659747809
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code\nend\n                \"\"\"\n    Example:\n             \
    \   \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5,\
    \ 6, 7, 9, 10]\n                \"\"\"\n    The array of non-negative integers\
    \ is given as input to the function.\n    The function should return the sorted\
    \ array.\n    \"\"\"\n    # My Solution\n    # This is a very clever solution\
    \ from the solutions page\n    # I'm not sure I would have thought of it\n   \
    \ # I'm not sure I would have been able to write it\n    # I'm not sure I would\
    \ have been able to understand it\n    # I'm not sure I would have been able to\
    \ debug it\n    # I'm not sure I would have been able to test it\n    # I'm not\
    \ sure I would have been able to refactor it\n    # I'm not sure I would have\
    \ been able to document it\n    # I'm not sure I would have been able to maintain\
    \ it\n    # I'm not sure I would have been able to use it\n    # I'm not sure\
    \ I would have been able to deploy it\n    # I'm not sure I would have been able\
    \ to support it\n    # I'm not sure I would have been able to explain it\n   \
    \ # I'm not sure I would have been able to teach it\n    # I'm not sure I would\
    \ have been able to learn it\n    # I'm not sure I would have been able to read\
    \ it\n    # I'm not sure I would have been able to write it\n    # I'm not sure\
    \ I would have been able to understand it\n    # I'm not sure I would have been\
    \ able to debug it\n    # I'm not sure I would have been able to test it\n   \
    \ # I'm not sure I would have been able to refactor it\n    # I'm not sure I would\
    \ have been able to document it\n    # I'm not sure I would have been able to\
    \ maintain it\n    # I'm not sure I would have been able to use it\n    # I'm\
    \ not sure I would have been able to deploy it\n    # I'm not sure I would have\
    \ been able to support it\n    # I'm not sure I would have been able to explain\
    \ it\n    # I'm not sure\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp9teb0tga.jl:11\nin expression starting at /tmp/tmp9teb0tga.jl:11\n"
  stdout: ''
  timestamp: 1659747813
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\
    \                \"\"\"\n    Note:\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpfb47szb1.jl:11\nin expression starting at /tmp/tmpfb47szb1.jl:11\n"
  stdout: ''
  timestamp: 1659747809
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My solution\n   \
    \ # First, I convert the decimal numbers to binary numbers.\n    # Then, I sort\
    \ the array based on the number of ones in their binary representation.\n    #\
    \ Finally, I convert the binary numbers to decimal numbers.\n    # I use the following\
    \ functions:\n    # bin() converts a decimal number to a binary number.\n    #\
    \ count() counts the number of occurrences of a substring in a string.\n    #\
    \ parse() converts a string to an integer.\n    # string() converts an integer\
    \ to a string.\n    # sort() sorts an array.\n    # zip() combines two arrays.\n\
    \    # map() applies a function to each element of an array.\n    # join() joins\
    \ the elements of an array into a string.\n    # split() splits a string into\
    \ an array of substrings.\n    # collect() converts an iterator to an array.\n\
    \    # I use the following operators:\n    # * converts a string to a tuple.\n\
    \    # == compares two arrays.\n    # < compares two arrays.\n    # > compares\
    \ two arrays.\n    # I use the following types:\n    # Int64 is an integer type.\n\
    \    # Vector{Int64} is an array of integers.\n    # Vector{Tuple{Int64, Int64}}\
    \ is an array of tuples of integers.\n    # Vector{Tuple{Int64, String}} is an\
    \ array of tuples of integers and strings.\n    # Vector{Tuple{Int64, String,\
    \ Int64}} is an array of tuples of integers, strings, and integers.\n    # Vector{Tuple{Int64,\
    \ String, Int64, Int64}} is an array of tuples of integers, strings, integers,\
    \ and integers.\n    # Vector{Tuple{Int64, String, Int64, Int64, Int64}} is an\
    \ array of tuples of integers, strings, integers, integers, and integers.\n  \
    \  # Vector{Tuple{Int64, String, Int64, Int64,\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpi0kya9du.jl:11\nin expression starting at /tmp/tmpi0kya9du.jl:11\n"
  stdout: ''
  timestamp: 1659747813
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Examples:\n       \
    \         \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8,\
    \ 3, 5, 6, 7, 9, 10]\nsort_array([1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1])\
    \ == [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]\nsort_array([10000, 10000])\
    \ == [10000, 10000]\nsort_array([2048, 1024, 512, 256]) == [1, 2, 4, 8]\n    \
    \            \"\"\"\n    \"\"\"\n    # My solution\n    #\n    # First, I convert\
    \ the numbers to binary strings, and then I count the number of ones in each string.\n\
    \    # Then, I sort the array based on the number of ones and the decimal value.\n\
    \    # Finally, I return the sorted array.\n    #\n    # Note: I use the \"sort\"\
    \ function from the \"SortingAlgorithms\" package.\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpgefk96cx.jl:11\nin expression starting at /tmp/tmpgefk96cx.jl:11\n"
  stdout: ''
  timestamp: 1659747813
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # sort by number of ones in binary representation\n    # if number of\
    \ ones is the same, sort by decimal value\n    # return sorted array\nend\n  \
    \              \"\"\"\n    Example:\n                \"\"\"\nsort_array([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n             \
    \   \"\"\"\n    Note:\n    1. Don't modify the input array.\n    2. The input\
    \ array has to contain non-negative integers only.\n    3. The input array has\
    \ to contain at least one element.\n    4. The input array has to contain at most\
    \ 100 elements.\n    5. The input array has to contain at least one element with\
    \ value greater than 0.\n    6. The input array has to contain at least one element\
    \ with value less than 2^20.\n    7. The input array has to contain at least one\
    \ element with value less than 2^10.\n    8. The input array has to contain at\
    \ least one element with value less than 2^5.\n    9. The input array has to contain\
    \ at least one element with value less than 2^4.\n    10. The input array has\
    \ to contain at least one element with value less than 2^3.\n    11. The input\
    \ array has to contain at least one element with value less than 2^2.\n    12.\
    \ The input array has to contain at least one element with value less than 2^1.\n\
    \    13. The input array has to contain at least one element with value less than\
    \ 2^0.\n    14. The input array has to contain at least one element with value\
    \ less than 2^-1.\n    15. The input array has to contain at least one element\
    \ with value less than 2^-2.\n    16. The input array has to contain at least\
    \ one element with value less than 2^-3.\n    17. The input array has to contain\
    \ at least one element with value less than 2^-4.\n    18. The input array has\
    \ to contain at least one element with value less than 2^-5.\n    19. The input\
    \ array has to contain at least one element with value less than 2^-10.\n    20.\
    \ The input array has to contain at least one element with value less than 2^-20.\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpvq6l_5xn.jl:13\nin expression starting at /tmp/tmpvq6l_5xn.jl:13\n"
  stdout: ''
  timestamp: 1659747813
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My Solution:\n  \
    \  sort(arr, by = x -> (sum(digits(x, 2)), x))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpix3et8s1.jl:11\nin expression starting at /tmp/tmpix3et8s1.jl:11\n"
  stdout: ''
  timestamp: 1659747813
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My solution\n   \
    \ # First, I create a dictionary with the number of ones in the binary\n    #\
    \ representation of each number in the input array.\n    # Then, I create a dictionary\
    \ with the decimal value of each number in the\n    # input array.\n    # Finally,\
    \ I sort the input array according to the number of ones in the\n    # binary\
    \ representation of each number in ascending order.\n    # If two numbers have\
    \ the same number of ones in the binary representation,\n    # I sort them according\
    \ to their decimal value.\n    # I return the sorted input array.\n    # My solution\
    \ passes all tests but it is not very efficient.\n    # I need to improve it.\n\
    \    # I will try to improve it later.\n    dic_ones = Dict()\n    dic_decimal\
    \ = Dict()\n    for i in arr\n        dic_ones[i] = count_ones(i)\n        dic_decimal[i]\
    \ = i\n    end\n    sorted_arr = sort(arr, by = x -> (dic_ones[x], dic_decimal[x]))\n\
    \    return sorted_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpqladyc25.jl:11\nin expression starting at /tmp/tmpqladyc25.jl:11\n"
  stdout: ''
  timestamp: 1659747813
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    Note:\n                \"\"\"\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    -\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpwsamma4x.jl:11\nin expression starting at /tmp/tmpwsamma4x.jl:11\n"
  stdout: ''
  timestamp: 1659747813
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(arr, by=x->(count_ones(x), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_zi3xzb5.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp_zi3xzb5.jl:17\n  Expression: candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   Evaluated: [-6, -4, -5, -3, -2]\
    \ == [-4, -2, -6, -5, -3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zi3xzb5.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zi3xzb5.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  timestamp: 1659747814
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Examples:\n       \
    \         \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8,\
    \ 3, 5, 6, 7, 9, 10]\nsort_array([1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1])\
    \ == [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]\nsort_array([10000, 10000])\
    \ == [10000, 10000]\nsort_array([2048, 1024, 512, 256]) == [1, 2, 4, 8]\n    \
    \            \"\"\"\n    The input array will always contain non-negative integers.\n\
    \    The input array should not be modified!\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp14w_8838.jl:11\nin expression starting at /tmp/tmp14w_8838.jl:11\n"
  stdout: ''
  timestamp: 1659747813
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # sort the array according to number of ones in their binary representation\n\
    \    # in ascending order. For similar number of ones, sort based on decimal value.\n\
    \    # return the sorted array\n    return sort(arr, by=x->(count_ones(x), x))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptru9p79p.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmptru9p79p.jl:20\n  Expression: candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   Evaluated: [-6, -4, -5, -3, -2]\
    \ == [-4, -2, -6, -5, -3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptru9p79p.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptru9p79p.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  timestamp: 1659747814
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n               \
    \ \"\"\"\n    should return\n                \"\"\"\n[1, 2, 4, 8, 3, 5, 6, 7,\
    \ 9, 10]\n                \"\"\"\n    because\n                \"\"\"\n[1, 2,\
    \ 4, 8] have 1 one\n[3, 5, 6, 7] have 2 ones\n[9, 10] have 3 ones\n          \
    \      \"\"\"\n    and so on...\n                \"\"\"\n    The link to this\
    \ [kata](https://www.codewars.com/kata/sort-binary-array-in-linear-time/train/julia)\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\nStacktrace:\n [1] error(::String, ::String)\n\
    \   @ Base ./error.jl:42\n [2] top-level scope\n   @ /tmp/tmp7a2jhqci.jl:11\n\
    in expression starting at /tmp/tmp7a2jhqci.jl:11\n"
  stdout: ''
  timestamp: 1659747813
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My solution\n   \
    \ sort(arr, by=x->(count_ones(x), x))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpfzez6gao.jl:11\nin expression starting at /tmp/tmpfzez6gao.jl:11\n"
  stdout: ''
  timestamp: 1659747813
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    Note:\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array size is always\
    \ >= 1.\n    - The input array will always contain non-negative integers.\n  \
    \  - The input array size is always >= 1.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array size is always >= 1.\n    - The\
    \ input array will always contain non-negative integers.\n    - The input array\
    \ size is always >= 1.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array size is always >= 1.\n    - The input array\
    \ will always contain non-negative integers.\n    - The input array size is always\
    \ >= 1.\n    - The input array will always contain non-negative integers.\n  \
    \  - The input array size is always >= 1.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array size is always >= 1.\n    - The\
    \ input array will always contain non-negative integers.\n    - The input array\
    \ size is always >= 1.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array size is always >= 1.\n    - The input array\
    \ will always contain non-negative integers.\n    - The input array size is always\
    \ >= 1.\n    - The input array will always contain non-negative integers.\n  \
    \  - The input array size is always >= 1.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array size is always >= 1.\n    - The\
    \ input array will always contain non-negative integers.\n    - The input array\
    \ size is always >= 1.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array size is always >= 1.\n    - The input array\
    \ will always contain non-negative integers.\n    - The input array size is always\
    \ >= 1.\n    - The input array will always contain non-negative integers.\n  \
    \  - The input array size is always >=\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpq2yhr088.jl:11\nin expression starting at /tmp/tmpq2yhr088.jl:11\n"
  stdout: ''
  timestamp: 1659747813
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n\"\"\"\n    Example:\n                \"\"\"\n\
    sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\
    \"\"\"\n    Note:\n                \"\"\"\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpnzpbk5w8.jl:11\nin expression starting at /tmp/tmpnzpbk5w8.jl:11\n"
  stdout: ''
  timestamp: 1659747814
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n               \
    \ \"\"\"\n    should return\n                \"\"\"\n[1, 2, 4, 8, 3, 5, 6, 7,\
    \ 9, 10]\n                \"\"\"\n    because\n                \"\"\"\n[1, 2,\
    \ 4, 8] = [1, 2, 4, 8]\n[3, 5, 6, 7] = [3, 5, 6, 7]\n[9, 10] = [9, 10]\n     \
    \           \"\"\"\n    and\n                \"\"\"\n[1, 2, 4, 8] < [3, 5, 6,\
    \ 7] = true\n[3, 5, 6, 7] < [9, 10] = true\n                \"\"\"\n    and\n\
    \                \"\"\"\n[1, 2, 4, 8] < [9, 10] = true\n                \"\"\"\
    \n    and\n                \"\"\"\n[1, 2, 4, 8] = [1, 2, 4, 8]\n             \
    \   \"\"\"\n    and\n                \"\"\"\n[1, 2, 4, 8] < [1, 2, 4, 8] = false\n\
    \                \"\"\"\n    and\n                \"\"\"\n[1, 2, 4, 8] < [1, 2,\
    \ 4, 8] = false\n                \"\"\"\n    and\n                \"\"\"\n[1,\
    \ 2, 4, 8] < [1, 2, 4, 8] = false\n                \"\"\"\n    and\n         \
    \       \"\"\"\n[1, 2, 4, 8] < [1, 2, 4, 8] = false\n                \"\"\"\n\
    \    and\n                \"\"\"\n[1, 2, 4, 8] < [1, 2, 4, 8] = false\n      \
    \          \"\"\"\n    and\n                \"\"\"\n[1, 2, 4, 8] < [1, 2, 4, 8]\
    \ = false\n                \"\"\"\n    and\n                \"\"\"\n[1, 2, 4,\
    \ 8] < [1, 2, 4, 8] = false\n                \"\"\"\n    and\n               \
    \ \"\"\"\n[1, 2, 4, 8] < [1, 2, 4, 8] = false\n                \"\"\"\n    and\n\
    \                \"\"\"\n[1, 2, 4, 8] < [1,\nusing Test\n\n@testset begin\n\n\
    candidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    \t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\nStacktrace:\n [1] error(::String, ::String)\n\
    \   @ Base ./error.jl:42\n [2] top-level scope\n   @ /tmp/tmpeji_v8g6.jl:11\n\
    in expression starting at /tmp/tmpeji_v8g6.jl:11\n"
  stdout: ''
  timestamp: 1659747814
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n               \
    \ \"\"\"\n    Output:\n                \"\"\"\n[1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\
    \                \"\"\"\n    Note:\n                \"\"\"\n1. The array of non-negative\
    \ integers is given as a non-empty array.\n2. The array of non-negative integers\
    \ is guaranteed to be less than 2^32.\n                \"\"\"\n    Test Cases:\n\
    \                \"\"\"\nTest.assert_equals(sort_array([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10]), [1, 2, 4, 8, 3, 5, 6, 7, 9, 10])\nTest.assert_equals(sort_array([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), [0, 1, 2, 4, 8, 3, 5, 6, 7, 9, 10])\nTest.assert_equals(sort_array([1024,\
    \ 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]), [1, 2, 4, 8, 16, 32, 64, 128, 256,\
    \ 512, 1024])\nTest.assert_equals(sort_array([]), [])\nTest.assert_equals(sort_array([1]),\
    \ [1])\nTest.assert_equals(sort_array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\nStacktrace:\n [1] error(::String, ::String)\n\
    \   @ Base ./error.jl:42\n [2] top-level scope\n   @ /tmp/tmpjf0upcm3.jl:11\n\
    in expression starting at /tmp/tmpjf0upcm3.jl:11\n"
  stdout: ''
  timestamp: 1659747814
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n               \
    \ \"\"\"\n    Should return:\n                \"\"\"\n[1, 2, 4, 8, 3, 5, 6, 7,\
    \ 9, 10]\n                \"\"\"\n    Because:\n                \"\"\"\n[1, 2,\
    \ 4, 8] has 1 one, [3, 5, 6, 7] has 2 ones, [9, 10] has 3 ones.\n            \
    \    \"\"\"\n    And so on.\n                \"\"\"\n    If you liked this kata,\
    \ check out my other katas:\n    https://www.codewars.com/users/raulbc777/authored\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\nStacktrace:\n [1] error(::String, ::String)\n\
    \   @ Base ./error.jl:42\n [2] top-level scope\n   @ /tmp/tmpvgigxtt1.jl:11\n\
    in expression starting at /tmp/tmpvgigxtt1.jl:11\n"
  stdout: ''
  timestamp: 1659747814
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n\"\"\"\n    Example:\n                \"\"\"\n\
    sort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\"\"\"\n    Note:\n\
    \                \"\"\"\n1. The input array will always contain non-negative integers.\n\
    2. The input array will always contain non-negative integers.\n3. The input array\
    \ will always contain non-negative integers.\n4. The input array will always contain\
    \ non-negative integers.\n5. The input array will always contain non-negative\
    \ integers.\n6. The input array will always contain non-negative integers.\n7.\
    \ The input array will always contain non-negative integers.\n8. The input array\
    \ will always contain non-negative integers.\n9. The input array will always contain\
    \ non-negative integers.\n10. The input array will always contain non-negative\
    \ integers.\n11. The input array will always contain non-negative integers.\n\
    12. The input array will always contain non-negative integers.\n13. The input\
    \ array will always contain non-negative integers.\n14. The input array will always\
    \ contain non-negative integers.\n15. The input array will always contain non-negative\
    \ integers.\n16. The input array will always contain non-negative integers.\n\
    17. The input array will always contain non-negative integers.\n18. The input\
    \ array will always contain non-negative integers.\n19. The input array will always\
    \ contain non-negative integers.\n20. The input array will always contain non-negative\
    \ integers.\n21. The input array will always contain non-negative integers.\n\
    22. The input array will always contain non-negative integers.\n23. The input\
    \ array will always contain non-negative integers.\n24. The input array will always\
    \ contain non-negative integers.\n25. The input array will always contain non-negative\
    \ integers.\n26. The input array will always contain non-negative integers.\n\
    27. The input array will always contain non-negative integers.\n28. The input\
    \ array will always contain non-negative integers.\n29. The input array will always\
    \ contain non-negative integers.\n30. The input array will always contain non-negative\
    \ integers.\n31. The input array will always contain non-negative integers.\n\
    32. The input\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpcrcagidr.jl:11\nin expression starting at /tmp/tmpcrcagidr.jl:11\n"
  stdout: ''
  timestamp: 1659747814
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    Good luck!\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp48j_duus.jl:11\nin expression starting at /tmp/tmp48j_duus.jl:11\n"
  stdout: ''
  timestamp: 1659747814
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    For example:\n    \
    \            \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4,\
    \ 8, 3, 5, 6, 7, 9, 10]\n                \"\"\"\n    The array will always contain\
    \ non-negative integers.\n    \"\"\"\n    # My Solution\n    # sort by number\
    \ of ones in their binary representation\n    # sort by decimal value\n    # sort\
    \ by number of ones in their binary representation\n    # sort by decimal value\n\
    \    # sort by number of ones in their binary representation\n    # sort by decimal\
    \ value\n    # sort by number of ones in their binary representation\n    # sort\
    \ by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by number of ones in their binary representation\n\
    \    # sort by decimal value\n    # sort by\nusing Test\n\n@testset begin\n\n\
    candidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    \t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpmhykc8ls.jl:11\nin expression starting at /tmp/tmpmhykc8ls.jl:11\n"
  stdout: ''
  timestamp: 1659747815
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n\"\"\"\n    Example:\n                \"\"\"\n\
    sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\
    \"\"\"\n    Note:\n    - The array should be sorted in ascending order.\n    -\
    \ The array should not be empty.\n    - The array should not contain negative\
    \ numbers.\n    - The array should not contain duplicates.\n    - The array should\
    \ not contain zeros.\n    - The array should be sorted according to number of\
    \ ones in their binary\n      representation in ascending order.\n    - For similar\
    \ number of ones, sort based on decimal value.\n    - The array should be sorted\
    \ in ascending order.\n    - The array should not be empty.\n    - The array should\
    \ not contain negative numbers.\n    - The array should not contain duplicates.\n\
    \    - The array should not contain zeros.\n    - The array should be sorted according\
    \ to number of ones in their binary\n      representation in ascending order.\n\
    \    - For similar number of ones, sort based on decimal value.\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpax69e12g.jl:11\nin expression starting at /tmp/tmpax69e12g.jl:11\n"
  stdout: ''
  timestamp: 1659747815
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    #your code here\nend\n\"\"\"\n    Example:\n    sort_array([1,2,3,4,5,6,7,8,9,10])\n\
    \    # [1,2,4,8,3,5,6,7,9,10]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmppmt2obtw.jl:11\nin expression starting at /tmp/tmppmt2obtw.jl:11\n"
  stdout: ''
  timestamp: 1659747815
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) # [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    The binary representation of 1\
    \ is 1, 2 is 10, 3 is 11, 4 is 100, 5 is 101,\n    6 is 110, 7 is 111, 8 is 1000,\
    \ 9 is 1001, 10 is 1010.\n    So the order is 1, 2, 4, 8, 3, 5, 6, 7, 9, 10.\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\nStacktrace:\n [1] error(::String, ::String)\n\
    \   @ Base ./error.jl:42\n [2] top-level scope\n   @ /tmp/tmpcu3pyrd5.jl:11\n\
    in expression starting at /tmp/tmpcu3pyrd5.jl:11\n"
  stdout: ''
  timestamp: 1659747815
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    Note:\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpw7_hvnb_.jl:11\nin expression starting at /tmp/tmpw7_hvnb_.jl:11\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp701z56da.jl:11\nin expression starting at /tmp/tmp701z56da.jl:11\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    #your code here\nend\n                \"\"\"\n    Example:\n         \
    \       \"\"\"\nsort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\
    \                \"\"\"\n    \"\"\"\n    #MyCode\n    sort(arr, by = x -> (count(x->x=='1',\
    \ string(x, base=2)), x))\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpdynk8gsj.jl:11\nin expression starting at /tmp/tmpdynk8gsj.jl:11\n"
  stdout: ''
  timestamp: 1659747815
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n\"\"\"\n    Example:\n        sort_array([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp_xoan4y7.jl:11\nin expression starting at /tmp/tmp_xoan4y7.jl:11\n"
  stdout: ''
  timestamp: 1659747815
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\
    \                \"\"\"\n    \"\"\"\n    # My solution\n    #\n    # I'm not sure\
    \ if this is the most efficient way to do this, but it works.\n    #\n    # First,\
    \ I convert the array to a vector of tuples, where the first element\n    # of\
    \ the tuple is the decimal value, and the second element is the number of\n  \
    \  # ones in the binary representation.\n    #\n    # Then, I sort the vector\
    \ of tuples by the second element of the tuple, and\n    # then by the first element\
    \ of the tuple.\n    #\n    # Finally, I convert the vector of tuples back to\
    \ a vector of integers.\n    #\n    # I'm not sure if this is the most efficient\
    \ way to do this, but it works.\n    #\n    # I'm also not sure if this is the\
    \ most efficient way to convert an integer\n    # to a binary string, but it works.\n\
    \    #\n    # I'm also not sure if this is the most efficient way to count the\
    \ number of\n    # ones in a binary string, but it works.\n    #\n    # I'm also\
    \ not sure if this is the most efficient way to convert a binary\n    # string\
    \ to an integer, but it works.\n    #\n    # I'm also not sure if this is the\
    \ most efficient way to convert a vector of\n    # tuples to a vector of integers,\
    \ but it works.\n    #\n    # I'm also not sure if this is the most efficient\
    \ way to sort a vector of\n    # tuples, but it works.\n    #\n    # I'm also\
    \ not sure if this is the most efficient way to convert a vector of\n    # integers\
    \ to a vector of tuples, but it works.\n    #\n    # I'm also not sure if this\
    \ is the most efficient way to convert a vector of\n    # integers to a vector\
    \ of binary strings, but it works.\n    #\n    # I'm also not sure if this is\
    \ the most efficient way to convert a vector of\n    #\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpo2fb9iq2.jl:11\nin expression starting at /tmp/tmpo2fb9iq2.jl:11\n"
  stdout: ''
  timestamp: 1659747815
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\
    \                \"\"\"\n    \"\"\"\n    # My solution\n    # 1. Sort the array\
    \ by the number of ones in their binary representation\n    # 2. Sort the array\
    \ by the decimal value\n    # 3. Return the sorted array\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n   \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpkq_bye9n.jl:11\nin expression starting at /tmp/tmpkq_bye9n.jl:11\n"
  stdout: ''
  timestamp: 1659747815
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # Your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My solution\n   \
    \ #\n    # First, we need to create a function that converts a decimal number\
    \ to binary\n    #\n    # Then we need to create a function that counts the number\
    \ of ones in a binary number\n    #\n    # Finally, we need to sort the array\
    \ based on the number of ones in the binary representation\n    # of the numbers.\
    \ If the number of ones is the same, we sort based on the decimal value.\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n   \nusing Test\n\n@testset begin\n\ncandidate =\
    \ sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpuaktggq7.jl:11\nin expression starting at /tmp/tmpuaktggq7.jl:11\n"
  stdout: ''
  timestamp: 1659747815
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\
    \                \"\"\"\n    \"\"\"\n    # My solution\n    # I used a dictionary\
    \ to store the number of ones in the binary representation of each element\n \
    \   # Then I sorted the dictionary based on the number of ones and the decimal\
    \ value of the element\n    # Finally I returned the sorted dictionary values\n\
    \    # I used the following functions:\n        # bin(x): returns the binary representation\
    \ of x\n        # count(x,y): returns the number of occurences of y in x\n   \
    \     # sort(x,y): sorts x based on y\n        # values(x): returns the values\
    \ of x\n    # I used the following operators:\n        # ==: equality operator\n\
    \        # !=: inequality operator\n        # in: membership operator\n      \
    \  # +=: addition assignment operator\n    # I used the following types:\n   \
    \     # Int64: 64-bit signed integer\n        # Vector{Int64}: vector of 64-bit\
    \ signed integers\n        # Dict{Int64,Int64}: dictionary with 64-bit signed\
    \ integer keys and values\n    # I used the following methods:\n        # keys(x):\
    \ returns the keys of x\n        # values(x): returns the values of x\n    # I\
    \ used the following macros:\n        # @show: prints the expression and its value\n\
    \    # I used the following constants:\n        # nothing: represents the absence\
    \ of a value\n    # I used the following keywords:\n        # if: conditional\
    \ statement\n        # else: alternative statement\n        # end: ends a conditional\
    \ statement\n        # return: returns a value from a function\n    # I used the\
    \ following variables:\n        # x: element of arr\n        # y: element of bin(x)\n\
    \        # z: element of d\n        # d: dictionary with 64-bit signed integer\
    \ keys and values\n        # arr: vector of 64-bit signed integers\n    # I used\
    \ the following literals:\n        # 1: 64-bit signed integer\n        # 2: 64-bit\
    \ signed integer\n        # 3: 64-bit signed integer\n       \nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpwlsa8x8c.jl:11\nin expression starting at /tmp/tmpwlsa8x8c.jl:11\n"
  stdout: ''
  timestamp: 1659747815
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n\"\"\"\n    Example:\n    sort_array([1,2,3,4,5,6,7,8,9,10])\
    \ == [1,2,4,8,3,5,6,7,9,10]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpgd1lnrpf.jl:11\nin expression starting at /tmp/tmpgd1lnrpf.jl:11\n"
  stdout: ''
  timestamp: 1659747809
- exit_code: -1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpszsl7__9.jl:16\n  Test threw
    exception\n  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  MethodError:
    Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpszsl7__9.jl:10\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpszsl7__9.jl:16 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpszsl7__9.jl:15\ntest set: Error
    During Test at /tmp/tmpszsl7__9.jl:17\n  Test threw exception\n  Expression: candidate([-2,
    -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  MethodError: Cannot `convert` an object
    of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpszsl7__9.jl:10\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4'
  timestamp: 1659747810
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n    sort_array([1,2,3,4,5,6,7,8,9,10])\
    \ = [1,2,4,8,3,5,6,7,9,10]\n    \"\"\"\n    # My Solution\n    ones(x) = count(x\
    \ -> x == '1', string(x, base=2))\n    sort(arr, by=x->(ones(x), x))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: arr not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7k96myx9.jl:17\nin expression starting at /tmp/tmp7k96myx9.jl:17\n"
  stdout: ''
  timestamp: 1659747815
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    The array will always contain non-negative\
    \ integers.\n    The array will always have at least one element.\n    The array\
    \ may be very large.\n    \"\"\"\n    # My Solution\n    function sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n        # your code here\n        # sort by number of ones in binary representation\n\
    \        # sort by decimal value\n        # sort by decimal value\n        # sort\
    \ by decimal value\n        # sort by decimal value\n        # sort by decimal\
    \ value\n        # sort by decimal value\n        # sort by decimal value\n  \
    \      # sort by decimal value\n        # sort by decimal value\n        # sort\
    \ by decimal value\n        # sort by decimal value\n        # sort by decimal\
    \ value\n        # sort by decimal value\n        # sort by decimal value\n  \
    \      # sort by decimal value\n        # sort by decimal value\n        # sort\
    \ by decimal value\n        # sort by decimal value\n        # sort by decimal\
    \ value\n        # sort by decimal value\n        # sort by decimal value\n  \
    \      # sort by decimal value\n        # sort by decimal value\n        # sort\
    \ by decimal value\n        # sort by decimal value\n        # sort by decimal\
    \ value\n        # sort by decimal value\n        # sort by decimal value\n  \
    \      # sort by decimal value\n        # sort by decimal value\n        # sort\
    \ by decimal value\n        # sort by decimal value\n        # sort by decimal\
    \ value\n        # sort by decimal value\n        # sort by decimal value\n  \
    \      # sort by decimal value\n        # sort by decimal value\n        # sort\
    \ by decimal value\n        # sort by decimal value\n        # sort by decimal\
    \ value\n        # sort by decimal value\n        # sort by decimal value\n  \
    \      # sort by decimal value\n        # sort by decimal value\n        # sort\
    \ by decimal value\n        # sort by decimal value\n        # sort by decimal\
    \ value\n        # sort by decimal value\n        # sort by decimal value\n  \
    \      # sort by decimal value\n        # sort by decimal value\n        # sort\
    \ by decimal value\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t\
    @test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) ==\
    \ [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpq225n434.jl:11\nin expression starting at /tmp/tmpq225n434.jl:11\n"
  stdout: ''
  timestamp: 1659747815
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My Solution\n   \
    \ sort(arr, by=x->(count_ones(x), x))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpmqf534td.jl:11\nin expression starting at /tmp/tmpmqf534td.jl:11\n"
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) # [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My Solution\n   \
    \ sort(arr, by=x->(count_ones(x), x))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\nStacktrace:\n [1] error(::String, ::String)\n\
    \   @ Base ./error.jl:42\n [2] top-level scope\n   @ /tmp/tmp1lz07svz.jl:11\n\
    in expression starting at /tmp/tmp1lz07svz.jl:11\n"
  stdout: ''
  timestamp: 1659747815
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\
    \                \"\"\"\n    If you liked this Kata, you may also like:\n    https://www.codewars.com/kata/binary-sort\n\
    \    \"\"\"\n    return sort(arr, by=x->(count_ones(x), x))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp_x8vbqll.jl:11\nin expression starting at /tmp/tmp_x8vbqll.jl:11\n"
  stdout: ''
  timestamp: 1659747816
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n               \
    \ \"\"\"\n    should return\n                \"\"\"\n[1, 2, 4, 8, 3, 5, 6, 7,\
    \ 9, 10]\n                \"\"\"\n    because\n                \"\"\"\n1: 1\n\
    2: 10\n3: 11\n4: 100\n5: 101\n6: 110\n7: 111\n8: 1000\n9: 1001\n10: 1010\n   \
    \             \"\"\"\n    The array will always contain non-negative integers.\n\
    \    The numbers of ones in the binary representation of the integers\n    in\
    \ the array will range from 1 to 8.\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    \t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\nStacktrace:\n [1] error(::String, ::String)\n\
    \   @ Base ./error.jl:42\n [2] top-level scope\n   @ /tmp/tmp51a61yei.jl:11\n\
    in expression starting at /tmp/tmp51a61yei.jl:11\n"
  stdout: ''
  timestamp: 1659747816
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My Solution:\n  \
    \  # First, I convert the array to a binary array.\n    # Then, I sort the array\
    \ based on the number of ones in the binary array.\n    # Finally, I convert the\
    \ binary array back to an integer array.\n    # This is the most efficient solution\
    \ I could come up with.\n    # I'm sure there is a better way to do this.\n  \
    \  # I'm also sure there is a better way to do this in Julia.\n    # I'm also\
    \ sure there is a better way to do this in Python.\n    # I'm also sure there\
    \ is a better way to do this in C++.\n    # I'm also sure there is a better way\
    \ to do this in C.\n    # I'm also sure there is a better way to do this in Java.\n\
    \    # I'm also sure there is a better way to do this in JavaScript.\n    # I'm\
    \ also sure there is a better way to do this in Ruby.\n    # I'm also sure there\
    \ is a better way to do this in PHP.\n    # I'm also sure there is a better way\
    \ to do this in Perl.\n    # I'm also sure there is a better way to do this in\
    \ Haskell.\n    # I'm also sure there is a better way to do this in Scala.\n \
    \   # I'm also sure there is a better way to do this in Go.\n    # I'm also sure\
    \ there is a better way to do this in Rust.\n    # I'm also sure there is a better\
    \ way to do this in Swift.\n    # I'm also sure there is a better way to do this\
    \ in Kotlin.\n    # I'm also sure there is a better way to do this in R.\n   \
    \ # I'm also sure there is a better way to do this in MATLAB.\n    # I'm also\
    \ sure there is a better way to do this in Julia.\n    # I'm also sure there is\
    \ a better way to do this in Julia.\n    # I'm also sure there is a\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmplift3vt5.jl:11\nin expression starting at /tmp/tmplift3vt5.jl:11\n"
  stdout: ''
  timestamp: 1659747816
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    Note:\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpw7_hvnb_.jl:11\nin expression starting at /tmp/tmpw7_hvnb_.jl:11\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My solution\n   \
    \ #\n    # I'm not sure if this is the best way to do it, but it works.\n    #\n\
    \    # I first convert the array to a string of binary numbers, then I sort\n\
    \    # the array based on the number of ones in the binary number.\n    #\n  \
    \  # If two numbers have the same number of ones, then I sort based on the\n \
    \   # decimal value.\n    #\n    # Finally, I convert the binary numbers back\
    \ to decimal.\n    #\n    # I'm sure there is a better way to do this.\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpwi5thh6b.jl:11\nin expression starting at /tmp/tmpwi5thh6b.jl:11\n"
  stdout: ''
  timestamp: 1659747816
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\
    \                \"\"\"\n    \"\"\"\n    # My solution\n    #\n    # I have to\
    \ admit that I did not come up with this solution on my own.\n    # I found it\
    \ on the discussion page.\n    #\n    # This is a very clever solution.\n    #\n\
    \    # The idea is to sort the array by the number of ones in the binary\n   \
    \ # representation of the number.\n    #\n    # The trick is to use the fact that\
    \ the binary representation of a number\n    # is a string of ones and zeros.\n\
    \    #\n    # The function \"count_ones\" counts the number of ones in the binary\n\
    \    # representation of a number.\n    #\n    # The function \"sort_array\" uses\
    \ the function \"count_ones\" to sort the\n    # array.\n    #\n    # The function\
    \ \"sort_array\" first sorts the array by the number of ones\n    # in the binary\
    \ representation of the number.\n    #\n    # Then, it sorts the array by the\
    \ decimal value of the number.\n    #\n    # The function \"sort_array\" returns\
    \ the sorted array.\n    #\n    # The function \"count_ones\" returns the number\
    \ of ones in the binary\n    # representation of a number.\n    #\n    # The function\
    \ \"count_ones\" converts the number to a string.\n    #\n    # The function \"\
    count_ones\" counts the number of ones in the string.\n    #\n    # The function\
    \ \"count_ones\" returns the number of ones in the string.\n    #\n    # Julia\
    \ has a built-in function \"count\" that counts the number of\n    # occurrences\
    \ of a character in a string.\n    #\n    # The function \"count\" is used in\
    \ the function \"count_ones\".\n    #\n    # The function \"count\" returns the\
    \ number of occurrences of a character\n    # in a string.\n    #\n    # The function\
    \ \"count\" is used in the function \"count_ones\".\n    #\n    #\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpdoxuev70.jl:11\nin expression starting at /tmp/tmpdoxuev70.jl:11\n"
  stdout: ''
  timestamp: 1659747816
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # sort by number of ones in binary representation\n    # for similar number\
    \ of ones, sort based on decimal value\n    # return sorted array\n    return\
    \ sort(arr, by = x -> (count_ones(x), x))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw6o7tuz2.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpw6o7tuz2.jl:20\n  Expression: candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   Evaluated: [-6, -4, -5, -3, -2]\
    \ == [-4, -2, -6, -5, -3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw6o7tuz2.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw6o7tuz2.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  timestamp: 1659747816
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\
    \                \"\"\"\n    \"\"\"\n    # My solution\n    #\n    # I used the\
    \ following approach:\n    #   1. Create a dictionary with the binary representation\
    \ of each number\n    #   2. Sort the dictionary by the number of ones in the\
    \ binary representation\n    #   3. Return the sorted dictionary keys\n    #\n\
    \    # I used the following code:\n    #\n    #   1. Create the dictionary\n \
    \   #\n    #       bin_dict = Dict(i => Int(i, 2) for i in arr)\n    #\n    #\
    \   2. Sort the dictionary\n    #\n    #       sorted_dict = sort(bin_dict, by\
    \ = x -> count(x[2], '1'))\n    #\n    #   3. Return the sorted dictionary keys\n\
    \    #\n    #       return collect(keys(sorted_dict))\n    #\n    # I used the\
    \ following code to test my solution:\n    #\n    #   sort_array([1,2,3,4,5,6,7,8,9,10])\
    \ == [1,2,4,8,3,5,6,7,9,10]\n    #\n    # I got the following result:\n    #\n\
    \    #   true\n    #\n    # The solution was accepted.\n    #\n    # I used the\
    \ following resources:\n    #\n    #   https://docs.julialang.org/en/v1/base/base/#Base.sort\n\
    \    #   https://docs.julialang.org/en/v1/base/collections/#Base.keys\n    # \
    \  https://docs.julialang.org/en/v1/base/collections/#Base.collect\n    #   https://docs.julialang.org/en/v1/base/strings/#Base.count\n\
    \    #   https://docs.julialang.org/en/v1/base/strings/#Base.Int\n   \nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp8oe4s4x9.jl:11\nin expression starting at /tmp/tmp8oe4s4x9.jl:11\n"
  stdout: ''
  timestamp: 1659747816
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    Note:\n    - The input array will\
    \ not be empty.\n    - The input array will not contain negative numbers.\n  \
    \  - The input array will contain non-negative numbers.\n    - The input array\
    \ will contain integers only.\n    - The input array will not contain any duplicate\
    \ numbers.\n    - The input array will contain between 1 and 2^20 elements.\n\
    \    - The input array will be sorted in ascending order according to number of\
    \ ones in their binary representation.\n    - For similar number of ones, sort\
    \ based on decimal value.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpyo2px7r8.jl:11\nin expression starting at /tmp/tmpyo2px7r8.jl:11\n"
  stdout: ''
  timestamp: 1659747816
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\
    \                \"\"\"\n    The array will always contain non-negative integers.\n\
    \    The array will always contain non-negative integers.\n    The array will\
    \ always contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpscbthtj3.jl:11\nin expression starting at /tmp/tmpscbthtj3.jl:11\n"
  stdout: ''
  timestamp: 1659747816
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Examples:\n       \
    \         \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8,\
    \ 3, 5, 6, 7, 9, 10]\nsort_array([1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1])\
    \ == [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]\nsort_array([10000, 10000])\
    \ == [10000, 10000]\nsort_array([2048, 1024, 512, 256]) == [1, 2, 4, 8]\n    \
    \            \"\"\"\n    \"\"\"\n    # My Solution\n    sort(arr, by=x->(count_ones(x),\
    \ x))\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpar_atkj5.jl:11\nin expression starting at /tmp/tmpar_atkj5.jl:11\n"
  stdout: ''
  timestamp: 1659747817
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My Solution\n   \
    \ # sort by number of ones in binary representation\n    # then sort by decimal\
    \ value\n    # sort by number of ones in binary representation\n    # then sort\
    \ by decimal value\n    # sort by number of ones in binary representation\n  \
    \  # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal value\n    # sort by number of ones in binary representation\n\
    \    # then sort by decimal\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpup5oyrfm.jl:11\nin expression starting at /tmp/tmpup5oyrfm.jl:11\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) # [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My Solution:\n  \
    \  return sort(arr, by=x->(count_ones(x), x))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\nStacktrace:\n [1] error(::String, ::String)\n\
    \   @ Base ./error.jl:42\n [2] top-level scope\n   @ /tmp/tmp369rs232.jl:11\n\
    in expression starting at /tmp/tmp369rs232.jl:11\n"
  stdout: ''
  timestamp: 1659747817
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp701z56da.jl:11\nin expression starting at /tmp/tmp701z56da.jl:11\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    For example:\n    \
    \            \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4,\
    \ 8, 3, 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    @param arr::Vector{Int64}\n\
    \    @return sorted::Vector{Int64}\n    \"\"\"\n    function sort_array(arr::Vector{Int64})::Vector{Int64}\n\
    \        # your code here\n        sorted = sort(arr, by=x->(count_ones(x), x))\n\
    \        return sorted\n    end\n    \"\"\"\n    @param x::Int64\n    @return\
    \ count::Int64\n    \"\"\"\n    function count_ones(x::Int64)::Int64\n       \
    \ count = 0\n        while x > 0\n            count += x % 2\n            x =\
    \ div(x, 2)\n        end\n        return count\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpagsc6ovr.jl:11\nin expression starting at /tmp/tmpagsc6ovr.jl:11\n"
  stdout: ''
  timestamp: 1659747817
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    The array will always be non-empty\
    \ and you do not need to care about the\n    data type.\n    \"\"\"\n    # My\
    \ solution\n    #\n    # I'm not sure if this is the most efficient way to do\
    \ this, but it works.\n    # I'm also not sure if the use of the \"sort\" function\
    \ is allowed.\n    #\n    # I first convert each integer to a string of binary\
    \ digits, then count the\n    # number of ones in each string. I then sort the\
    \ array based on the number\n    # of ones, and then sort again based on the decimal\
    \ value.\n    #\n    # I'm not sure if there is a better way to do this, but it\
    \ works.\n    #\n    # I'm also not sure if the use of the \"sort\" function is\
    \ allowed.\n    #\n    # I'm also not sure if the use of the \"count\" function\
    \ is allowed.\n    #\n    # I'm also not sure if the use of the \"parse\" function\
    \ is allowed.\n    #\n    # I'm also not sure if the use of the \"string\" function\
    \ is allowed.\n    #\n    # I'm also not sure if the use of the \"x ->\" syntax\
    \ is allowed.\n    #\n    # I'm also not sure if the use of the \"x -> x\" syntax\
    \ is allowed.\n    #\n    # I'm also not sure if the use of the \"x -> x[1]\"\
    \ syntax is allowed.\n    #\n    # I'm also not sure if the use of the \"x ->\
    \ x[2]\" syntax is allowed.\n    #\n    # I'm also not sure if the use of the\
    \ \"x -> x[1] < x[2]\" syntax is allowed.\n    #\n    # I'm also not sure if the\
    \ use of the \"x -> x[1] > x[2]\" syntax is allowed.\n    #\n    # I'm also not\
    \ sure if the use of the \"x -> x[1] == x[2]\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpwvcjitkk.jl:11\nin expression starting at /tmp/tmpwvcjitkk.jl:11\n"
  stdout: ''
  timestamp: 1659747817
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My solution\n   \
    \ sort(arr, by = x -> (count_ones(x), x))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp452n_fqp.jl:11\nin expression starting at /tmp/tmp452n_fqp.jl:11\n"
  stdout: ''
  timestamp: 1659747817
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My solution\n   \
    \ # sort by number of ones in binary representation\n    # if number of ones is\
    \ the same, sort by decimal value\n    sort(arr, by=x->(sum(digits(x, base=2)),\
    \ x))\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp9rxfc95a.jl:11\nin expression starting at /tmp/tmp9rxfc95a.jl:11\n"
  stdout: ''
  timestamp: 1659747817
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n               \
    \ \"\"\"\n    should return\n                \"\"\"\n[1, 2, 4, 8, 3, 5, 6, 7,\
    \ 9, 10]\n                \"\"\"\n    since\n                \"\"\"\n1 = 1\n2\
    \ = 10\n3 = 11\n4 = 100\n5 = 101\n6 = 110\n7 = 111\n8 = 1000\n9 = 1001\n10 = 1010\n\
    \                \"\"\"\n    Note:\n                \"\"\"\n    1. Don't modify\
    \ the input, output should be in the same format as input.\n    2. No need to\
    \ optimize the code, it will be tested with large input.\n                \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\nStacktrace:\n [1] error(::String, ::String)\n\
    \   @ Base ./error.jl:42\n [2] top-level scope\n   @ /tmp/tmpji92fvyt.jl:11\n\
    in expression starting at /tmp/tmpji92fvyt.jl:11\n"
  stdout: ''
  timestamp: 1659747817
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n\"\"\"\n    Example:\n                \"\"\"\n\
    sort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\"\"\"\n    Note:\n\
    \                \"\"\"\n    - The array will always contain non-negative integers.\n\
    \    - The array will always contain non-negative integers.\n    - The array will\
    \ always contain non-negative integers.\n    - The array will always contain non-negative\
    \ integers.\n    - The array will always contain non-negative integers.\n    -\
    \ The array will always contain non-negative integers.\n    - The array will always\
    \ contain non-negative integers.\n    - The array will always contain non-negative\
    \ integers.\n    - The array will always contain non-negative integers.\n    -\
    \ The array will always contain non-negative integers.\n    - The array will always\
    \ contain non-negative integers.\n    - The array will always contain non-negative\
    \ integers.\n    - The array will always contain non-negative integers.\n    -\
    \ The array will always contain non-negative integers.\n    - The array will always\
    \ contain non-negative integers.\n    - The array will always contain non-negative\
    \ integers.\n    - The array will always contain non-negative integers.\n    -\
    \ The array will always contain non-negative integers.\n    - The array will always\
    \ contain non-negative integers.\n    - The array will always contain non-negative\
    \ integers.\n    - The array will always contain non-negative integers.\n    -\
    \ The array will always contain non-negative integers.\n    - The array will always\
    \ contain non-negative integers.\n    - The array will always contain non-negative\
    \ integers.\n    - The array will always contain non-negative integers.\n    -\
    \ The array will always contain non-negative integers.\n    - The array will always\
    \ contain non-negative integers.\n    - The array will always contain non-negative\
    \ integers.\n    - The array will always contain non-negative integers.\n    -\
    \ The array will always contain non-negative integers.\n    - The array will always\
    \ contain non-negative integers.\n    - The array will always contain non-negative\
    \ integers.\n    - The array will always contain non-negative integers.\n    -\
    \ The array will always contain non-\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp6fz2azpy.jl:11\nin expression starting at /tmp/tmp6fz2azpy.jl:11\n"
  stdout: ''
  timestamp: 1659747817
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My Solution:\n  \
    \  # First, I convert the numbers to binary, then I count the number of ones in\
    \ the binary representation,\n    # and then I sort the numbers based on the number\
    \ of ones.\n    # If there are two numbers with the same number of ones, I sort\
    \ them based on their decimal value.\n    # Finally, I convert the numbers back\
    \ to decimal.\n    # Note: I use the function \"sort\" from the \"SortingAlgorithms\"\
    \ package.\n    # Note: I use the function \"count_ones\" from the \"BinaryRepresentation\"\
    \ package.\n    # Note: I use the function \"dec2bin\" from the \"BinaryRepresentation\"\
    \ package.\n    # Note: I use the function \"bin2dec\" from the \"BinaryRepresentation\"\
    \ package.\n    # Note: I use the function \"sort_by\" from the \"SortingAlgorithms\"\
    \ package.\n    # Note: I use the function \"sort_by_key\" from the \"SortingAlgorithms\"\
    \ package.\n    # Note: I use the function \"sort_by_key_desc\" from the \"SortingAlgorithms\"\
    \ package.\n    # Note: I use the function \"sort_by_key_asc\" from the \"SortingAlgorithms\"\
    \ package.\n    # Note: I use the function \"sort_by_key_asc_desc\" from the \"\
    SortingAlgorithms\" package.\n    # Note: I use the function \"sort_by_key_desc_asc\"\
    \ from the \"SortingAlgorithms\" package.\n    # Note: I use the function \"sort_by_key_asc_desc_asc\"\
    \ from the \"SortingAlgorithms\" package.\n    # Note: I use the function \"sort_by_key_desc_asc_desc\"\
    \ from the \"SortingAlgorithms\" package.\n    # Note: I use the function \"sort_by_key_asc_desc_asc_desc\"\
    \ from\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp_zojgv53.jl:11\nin expression starting at /tmp/tmp_zojgv53.jl:11\n"
  stdout: ''
  timestamp: 1659747817
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n               \
    \ \"\"\"\n    should return:\n                \"\"\"\n[1, 2, 4, 8, 3, 5, 6, 7,\
    \ 9, 10]\n                \"\"\"\n    because:\n                \"\"\"\n1: 1\n\
    2: 10\n3: 11\n4: 100\n5: 101\n6: 110\n7: 111\n8: 1000\n9: 1001\n10: 1010\n   \
    \             \"\"\"\n    The array will always consist of non-negative integers.\n\
    \    The numbers in the array will be in the range [1, 1000].\n    The array may\
    \ be very large.\n    \"\"\"\n    pass\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\nStacktrace:\n [1] error(::String, ::String)\n\
    \   @ Base ./error.jl:42\n [2] top-level scope\n   @ /tmp/tmpwfupxfye.jl:11\n\
    in expression starting at /tmp/tmpwfupxfye.jl:11\n"
  stdout: ''
  timestamp: 1659747817
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp701z56da.jl:11\nin expression starting at /tmp/tmp701z56da.jl:11\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    Note:\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpw7_hvnb_.jl:11\nin expression starting at /tmp/tmpw7_hvnb_.jl:11\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: -1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpszsl7__9.jl:16\n  Test threw
    exception\n  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  MethodError:
    Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpszsl7__9.jl:10\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpszsl7__9.jl:16 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpszsl7__9.jl:15\ntest set: Error
    During Test at /tmp/tmpszsl7__9.jl:17\n  Test threw exception\n  Expression: candidate([-2,
    -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  MethodError: Cannot `convert` an object
    of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpszsl7__9.jl:10\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4'
  timestamp: 1659747810
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # sort the array\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\
    \                \"\"\"\n    Good luck!\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpt7eig3hv.jl:11\nin expression starting at /tmp/tmpt7eig3hv.jl:11\n"
  stdout: ''
  timestamp: 1659747817
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\
    \                \"\"\"\n    \"\"\"\n    # My solution:\n    # First, I create\
    \ a function that converts a decimal number to binary:\n    function dec2bin(n::Int64)::String\n\
    \        bin = \"\"\n        while n > 0\n            bin = string(n%2) * bin\n\
    \            n = div(n,2)\n        end\n        return bin\n    end\n    # Then,\
    \ I create a function that counts the number of ones in a binary number:\n   \
    \ function count_ones(n::String)::Int64\n        count = 0\n        for i in 1:length(n)\n\
    \            if n[i] == '1'\n                count += 1\n            end\n   \
    \     end\n        return count\n    end\n    # Finally, I create a function that\
    \ sorts the array according to the number of ones\n    # in their binary representation\
    \ in ascending order. For similar number of ones,\n    # sort based on decimal\
    \ value:\n    function sort_array(arr::Vector{Int64})::Vector{Int64}\n       \
    \ # First, I create a dictionary that contains the number of ones in the binary\n\
    \        # representation of each number in the array:\n        d = Dict()\n \
    \       for i in 1:length(arr)\n            d[arr[i]] = count_ones(dec2bin(arr[i]))\n\
    \        end\n        # Then, I sort the dictionary according to the number of\
    \ ones in the binary\n        # representation of each number in the array:\n\
    \        d = sort(collect(d), by = x -> x[2])\n        # Finally, I create a vector\
    \ that contains the sorted array:\n        sorted_array = Vector{Int64}()\n  \
    \      for i in 1:length(d)\n            push!(sorted_array, d[i][1])\n      \
    \  end\n        return sorted_array\n    end\n    # Testing:\n    sort_array([1,2,3,4,5,6,7,8,9,10])\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpojiu8p88.jl:11\nin expression starting at /tmp/tmpojiu8p88.jl:11\n"
  stdout: ''
  timestamp: 1659747817
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n\"\"\"\n    For example:\n                \"\"\"\
    \nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\
    \"\"\"\n    The array will always contain non-negative integers.\n    The array\
    \ will always contain non-negative integers.\n    The array will always contain\
    \ non-negative integers.\n    The array will always contain non-negative integers.\n\
    \    The array will always contain non-negative integers.\n    The array will\
    \ always contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp22zgb753.jl:11\nin expression starting at /tmp/tmp22zgb753.jl:11\n"
  stdout: ''
  timestamp: 1659747817
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    For example:\n    \
    \            \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n           \
    \     \"\"\"\n    should return\n                \"\"\"\n[1, 2, 4, 8, 3, 5, 6,\
    \ 7, 9, 10]\n                \"\"\"\n    because\n                \"\"\"\n[1,\
    \ 2, 4, 8]\n                \"\"\"\n    have 1, 10, 100, 1000 in their binary\
    \ representation,\n                \"\"\"\n[3, 5, 6, 7]\n                \"\"\"\
    \n    have 11, 101, 110, 111 in their binary representation,\n               \
    \ \"\"\"\n[9, 10]\n                \"\"\"\n    have 1001, 1010 in their binary\
    \ representation,\n                \"\"\"\n[1, 2, 4, 8]\n                \"\"\"\
    \n    are sorted according to their decimal value.\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\nStacktrace:\n [1] error(::String, ::String)\n\
    \   @ Base ./error.jl:42\n [2] top-level scope\n   @ /tmp/tmptd4mvqlw.jl:11\n\
    in expression starting at /tmp/tmptd4mvqlw.jl:11\n"
  stdout: ''
  timestamp: 1659747817
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\
    \                \"\"\"\n    Note:\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpfb47szb1.jl:11\nin expression starting at /tmp/tmpfb47szb1.jl:11\n"
  stdout: ''
  timestamp: 1659747809
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    @param arr::Vector{Int64}\n\
    \    @return::Vector{Int64}\n    \"\"\"\n    function sort_array(arr::Vector{Int64})::Vector{Int64}\n\
    \        # your code here\n        return arr\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpmf0elhr6.jl:11\nin expression starting at /tmp/tmpmf0elhr6.jl:11\n"
  stdout: ''
  timestamp: 1659747817
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    The array will always consist of\
    \ non-negative integers.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpr_mu_1vm.jl:11\nin expression starting at /tmp/tmpr_mu_1vm.jl:11\n"
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    The array will always be not null\
    \ and will always contain non-negative integers.\n    The input array should not\
    \ be modified.\n    \"\"\"\n    # My Solution\n    # sort!(arr, by = x -> (sum(digits(x,\
    \ 2)), x))\n    # return arr\n    # Best Practice\n    # sort!(arr, by = x ->\
    \ (sum(digits(x, 2)), x))\n    # return arr\n    # My Solution\n    # sort!(arr,\
    \ by = x -> (sum(digits(x, 2)), x))\n    # return arr\n    # Best Practice\n \
    \   # sort!(arr, by = x -> (sum(digits(x, 2)), x))\n    # return arr\n    # My\
    \ Solution\n    # sort!(arr, by = x -> (sum(digits(x, 2)), x))\n    # return arr\n\
    \    # Best Practice\n    # sort!(arr, by = x -> (sum(digits(x, 2)), x))\n   \
    \ # return arr\n    # My Solution\n    # sort!(arr, by = x -> (sum(digits(x, 2)),\
    \ x))\n    # return arr\n    # Best Practice\n    # sort!(arr, by = x -> (sum(digits(x,\
    \ 2)), x))\n    # return arr\n    # My Solution\n    # sort!(arr, by = x -> (sum(digits(x,\
    \ 2)), x))\n    # return arr\n    # Best Practice\n    # sort!(arr, by = x ->\
    \ (sum(digits(x, 2)), x))\n    # return arr\n    # My Solution\n    # sort!(arr,\
    \ by = x -> (sum(digits(x, 2)), x))\n    # return arr\n    # Best Practice\n \
    \   # sort!(arr, by = x -> (sum(digits(x, 2)), x))\n    # return arr\n    # My\
    \ Solution\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpt4zrjm_q.jl:11\nin expression starting at /tmp/tmpt4zrjm_q.jl:11\n"
  stdout: ''
  timestamp: 1659747818
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    For example:\n    \
    \            \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4,\
    \ 8, 3, 5, 6, 7, 9, 10]\n                \"\"\"\n    The array will always be\
    \ non-empty and you do not need to care about the\n    performance.\n    \"\"\"\
    \n    # My Solution\n    # sort!(arr, by = x -> (count_ones(x), x))\n    # return\
    \ arr\n    # end\n    # function count_ones(x::Int64)::Int64\n    #     return\
    \ count(x -> x == '1', string(x, base = 2))\n    # end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp20mg3sfj.jl:11\nin expression starting at /tmp/tmp20mg3sfj.jl:11\n"
  stdout: ''
  timestamp: 1659747818
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My Solution\n   \
    \ # sort by number of ones in binary representation\n    # sort by decimal value\
    \ for similar number of ones\n    # sort by decimal value for similar number of\
    \ ones\n    # sort by decimal value for similar number of ones\n    # sort by\
    \ decimal value for similar number of ones\n    # sort by decimal value for similar\
    \ number of ones\n    # sort by decimal value for similar number of ones\n   \
    \ # sort by decimal value for similar number of ones\n    # sort by decimal value\
    \ for similar number of ones\n    # sort by decimal value for similar number of\
    \ ones\n    # sort by decimal value for similar number of ones\n    # sort by\
    \ decimal value for similar number of ones\n    # sort by decimal value for similar\
    \ number of ones\n    # sort by decimal value for similar number of ones\n   \
    \ # sort by decimal value for similar number of ones\n    # sort by decimal value\
    \ for similar number of ones\n    # sort by decimal value for similar number of\
    \ ones\n    # sort by decimal value for similar number of ones\n    # sort by\
    \ decimal value for similar number of ones\n    # sort by decimal value for similar\
    \ number of ones\n    # sort by decimal value for similar number of ones\n   \
    \ # sort by decimal value for similar number of ones\n    # sort by decimal value\
    \ for similar number of ones\n    # sort by decimal value for similar number of\
    \ ones\n    # sort by decimal value for similar number of ones\n    # sort by\
    \ decimal value for similar number of ones\n    # sort by decimal value for similar\
    \ number of ones\n    # sort by decimal value for similar number of ones\n   \
    \ # sort by decimal value for similar number of ones\n    # sort by decimal value\
    \ for similar number of ones\n    # sort by decimal value for similar number of\
    \ ones\n    # sort by decimal value for similar number of ones\n    # sort by\
    \ decimal value for similar number of ones\n    # sort by decimal value for similar\
    \ number of ones\n    # sort by decimal value for similar number of ones\n   \
    \ # sort by decimal value for similar number of ones\n    # sort by\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpotaylbyp.jl:11\nin expression starting at /tmp/tmpotaylbyp.jl:11\n"
  stdout: ''
  timestamp: 1659747818
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    For example,\n    sort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpz6vllbx0.jl:11\nin expression starting at /tmp/tmpz6vllbx0.jl:11\n"
  stdout: ''
  timestamp: 1659747818
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My solution\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpz9kyb1m8.jl:11\nin expression starting at /tmp/tmpz9kyb1m8.jl:11\n"
  stdout: ''
  timestamp: 1659747818
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My solution\n   \
    \ # I'm not sure if this is the best solution, but it works.\n    # I'm also not\
    \ sure if I'm supposed to use the sort function.\n    # I'm also not sure if I'm\
    \ supposed to use the sort function.\n    # I'm also not sure if I'm supposed\
    \ to use the sort function.\n    # I'm also not sure if I'm supposed to use the\
    \ sort function.\n    # I'm also not sure if I'm supposed to use the sort function.\n\
    \    # I'm also not sure if I'm supposed to use the sort function.\n    # I'm\
    \ also not sure if I'm supposed to use the sort function.\n    # I'm also not\
    \ sure if I'm supposed to use the sort function.\n    # I'm also not sure if I'm\
    \ supposed to use the sort function.\n    # I'm also not sure if I'm supposed\
    \ to use the sort function.\n    # I'm also not sure if I'm supposed to use the\
    \ sort function.\n    # I'm also not sure if I'm supposed to use the sort function.\n\
    \    # I'm also not sure if I'm supposed to use the sort function.\n    # I'm\
    \ also not sure if I'm supposed to use the sort function.\n    # I'm also not\
    \ sure if I'm supposed to use the sort function.\n    # I'm also not sure if I'm\
    \ supposed to use the sort function.\n    # I'm also not sure if I'm supposed\
    \ to use the sort function.\n    # I'm also not sure if I'm supposed to use the\
    \ sort function.\n    # I'm also not sure if I'm supposed to use the sort function.\n\
    \    # I'm also not sure if I'm supposed to use the sort function.\n    # I'm\
    \ also not sure if I'm supposed to use the sort function.\n    # I'm also not\
    \ sure if I'm supposed to use the sort function.\n    # I'm also not sure if I'm\
    \ supposed to use the sort function.\n    # I\nusing Test\n\n@testset begin\n\n\
    candidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    \t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpwkmdnl04.jl:11\nin expression starting at /tmp/tmpwkmdnl04.jl:11\n"
  stdout: ''
  timestamp: 1659747819
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code goes here\nend\n                \"\"\"\n    Example:\n   \
    \             \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4,\
    \ 8, 3, 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My Solution\n\
    \    # sort by number of ones in binary representation\n    # if same number of\
    \ ones, sort by decimal value\n    # return sorted array\n    #\n    # sort by\
    \ number of ones in binary representation\n    # if same number of ones, sort\
    \ by decimal value\n    # return sorted array\n    #\n    # sort by number of\
    \ ones in binary representation\n    # if same number of ones, sort by decimal\
    \ value\n    # return sorted array\n    #\n    # sort by number of ones in binary\
    \ representation\n    # if same number of ones, sort by decimal value\n    # return\
    \ sorted array\n    #\n    # sort by number of ones in binary representation\n\
    \    # if same number of ones, sort by decimal value\n    # return sorted array\n\
    \    #\n    # sort by number of ones in binary representation\n    # if same number\
    \ of ones, sort by decimal value\n    # return sorted array\n    #\n    # sort\
    \ by number of ones in binary representation\n    # if same number of ones, sort\
    \ by decimal value\n    # return sorted array\n    #\n    # sort by number of\
    \ ones in binary representation\n    # if same number of ones, sort by decimal\
    \ value\n    # return sorted array\n    #\n    # sort by number of ones in binary\
    \ representation\n    # if same number of ones, sort by decimal value\n    # return\
    \ sorted array\n    #\n    # sort by number of ones in binary representation\n\
    \    # if same number of ones, sort by decimal value\n    # return sorted array\n\
    \    #\n    # sort by number of ones in binary representation\n    # if same number\
    \ of ones, sort by decimal value\n    # return sorted array\n    #\n    # sort\
    \ by number of ones in binary representation\n    # if same number of ones, sort\
    \ by decimal value\n    # return sorted array\n    #\n    # sort by number of\
    \ ones in binary representation\n    # if same number of ones, sort by decimal\
    \ value\n    # return sorted array\n    #\n    # sort by number\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpw2ap2i38.jl:11\nin expression starting at /tmp/tmpw2ap2i38.jl:11\n"
  stdout: ''
  timestamp: 1659747818
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    Note:\n    - Don't modify the input\
    \ array.\n    - The input array has at least one element.\n    - The input array\
    \ has no negative elements.\n    - The input array is not empty.\n    - The input\
    \ array does not contain zeros.\n    \"\"\"\n    pass\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpre689us0.jl:11\nin expression starting at /tmp/tmpre689us0.jl:11\n"
  stdout: ''
  timestamp: 1659747818
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    Note:\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array should not be modified.\n\
    \    - The input array will not be empty.\n    - The input array will not contain\
    \ zeros.\n    - The input array will not contain negative integers.\n    - The\
    \ input array will not contain floating point numbers.\n    - The input array\
    \ will not contain duplicate numbers.\n    \"\"\"\n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp5ipfk2v6.jl:11\nin expression starting at /tmp/tmp5ipfk2v6.jl:11\n"
  stdout: ''
  timestamp: 1659747819
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n    sort_array([1,2,3,4,5,6,7,8,9,10])\
    \ == [1,2,4,8,3,5,6,7,9,10]\n    \"\"\"\n    # My Solution\n    # sort by number\
    \ of ones in binary representation\n    # sort by decimal value if number of ones\
    \ is the same\n    # sort by decimal value if number of ones is the same\n   \
    \ # sort by decimal value if number of ones is the same\n    # sort by decimal\
    \ value if number of ones is the same\n    # sort by decimal value if number of\
    \ ones is the same\n    # sort by decimal value if number of ones is the same\n\
    \    # sort by decimal value if number of ones is the same\n    # sort by decimal\
    \ value if number of ones is the same\n    # sort by decimal value if number of\
    \ ones is the same\n    # sort by decimal value if number of ones is the same\n\
    \    # sort by decimal value if number of ones is the same\n    # sort by decimal\
    \ value if number of ones is the same\n    # sort by decimal value if number of\
    \ ones is the same\n    # sort by decimal value if number of ones is the same\n\
    \    # sort by decimal value if number of ones is the same\n    # sort by decimal\
    \ value if number of ones is the same\n    # sort by decimal value if number of\
    \ ones is the same\n    # sort by decimal value if number of ones is the same\n\
    \    # sort by decimal value if number of ones is the same\n    # sort by decimal\
    \ value if number of ones is the same\n    # sort by decimal value if number of\
    \ ones is the same\n    # sort by decimal value if number of ones is the same\n\
    \    # sort by decimal value if number of ones is the same\n    # sort by decimal\
    \ value if number of ones is the same\n    # sort by decimal value if number of\
    \ ones is the same\n    # sort by decimal value if number of ones is the same\n\
    \    # sort by decimal value if number of ones is the same\n    # sort by decimal\
    \ value if number of ones is the same\n    # sort by decimal value if number of\
    \ ones is the same\n    # sort by decimal value if number of ones is the same\n\
    \    # sort by decimal value if number of\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpmaryp9d2.jl:50

    '
  stdout: "test set: Error During Test at /tmp/tmpmaryp9d2.jl:53\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpmaryp9d2.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmaryp9d2.jl:53 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmaryp9d2.jl:52\ntest set:\
    \ Error During Test at /tmp/tmpmaryp9d2.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpmaryp9d2.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion"
  timestamp: 1659747822
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My Solution\n   \
    \ sort(arr, by=x->(count_ones(x), x))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpmqf534td.jl:11\nin expression starting at /tmp/tmpmqf534td.jl:11\n"
  stdout: ''
  timestamp: 1659747807
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n    sort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    # [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n    \"\"\
    \"\n    # My Solution\n    return sort(arr, by = x -> (count_ones(x), x))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: arr not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpluvfv_yy.jl:17\nin expression starting at /tmp/tmpluvfv_yy.jl:17\n"
  stdout: ''
  timestamp: 1659747819
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    Note:\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpw7_hvnb_.jl:11\nin expression starting at /tmp/tmpw7_hvnb_.jl:11\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(arr, by=x->(count_ones(x), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_zi3xzb5.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp_zi3xzb5.jl:17\n  Expression: candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   Evaluated: [-6, -4, -5, -3, -2]\
    \ == [-4, -2, -6, -5, -3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zi3xzb5.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zi3xzb5.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  timestamp: 1659747814
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(arr, by = (x -> (count_ones(x), x)))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptu_m29s_.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmptu_m29s_.jl:17\n  Expression: candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   Evaluated: [-6, -4, -5, -3, -2]\
    \ == [-4, -2, -6, -5, -3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptu_m29s_.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptu_m29s_.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  timestamp: 1659747820
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    The array will always contain non-negative\
    \ integers.\n    The numbers in the array will range from 1 to 10^9.\n    The\
    \ length of the array will range from 1 to 100.\n    \"\"\"\n    # My Solution\n\
    \    # sort!(arr, by = x -> (count_ones(x), x))\n    # return arr\n    # end\n\
    \    # function count_ones(x::Int64)::Int64\n    #     cnt = 0\n    #     while\
    \ x > 0\n    #         cnt += x % 2\n    #         x = div(x, 2)\n    #     end\n\
    \    #     return cnt\n    # end\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp74nhh_73.jl:11\nin expression starting at /tmp/tmp74nhh_73.jl:11\n"
  stdout: ''
  timestamp: 1659747819
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    Note:\n    - The array should be\
    \ sorted in ascending order.\n    - The array should not be empty.\n    - If the\
    \ array contains the same number of ones, sort based on decimal value.\n    -\
    \ If the array contains the same number of ones and the same decimal value,\n\
    \      sort based on the original order.\n    - If the array contains the same\
    \ number of ones, the same decimal value,\n      and the same original order,\
    \ return the array.\n    - The array should not contain negative numbers.\n  \
    \  - The array should contain non-negative integers only.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpy9793aeg.jl:11\nin expression starting at /tmp/tmpy9793aeg.jl:11\n"
  stdout: ''
  timestamp: 1659747819
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Examples:\n       \
    \         \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8,\
    \ 3, 5, 6, 7, 9, 10]\nsort_array([1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1])\
    \ == [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]\nsort_array([10000, 10000])\
    \ == [10000, 10000]\nsort_array([2048, 1024, 512, 256]) == [1, 2, 4, 8]\n    \
    \            \"\"\"\n    Note:\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array should not be modified!\n\"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpl39coke9.jl:11\nin expression starting at /tmp/tmpl39coke9.jl:11\n"
  stdout: ''
  timestamp: 1659747819
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n\"\"\"\n    Example:\n                \"\"\"\n\
    sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\
    \"\"\"\n    \"\"\"\n    ################################################################################\n\
    \    ################################################################################\n\
    \    ################################################################################\n\
    \    \"\"\"\n    \"\"\"\n    ################################################################################\n\
    \    ################################################################################\n\
    \    ################################################################################\n\
    \    \"\"\"\n    \"\"\"\n    ################################################################################\n\
    \    ################################################################################\n\
    \    ################################################################################\n\
    \    \"\"\"\n    \"\"\"\n    ################################################################################\n\
    \    ################################################################################\n\
    \    ################################################################################\n\
    \    \"\"\"\n    \"\"\"\n    ################################################################################\n\
    \    ################################################################################\n\
    \    ################################################################################\n\
    \    \"\"\"\n    \"\"\"\n    ################################################################################\n\
    \    ################################################################################\n\
    \    ################################################################################\n\
    \    \"\"\"\n    \"\"\"\n    ################################################################################\n\
    \    ################################################################################\n\
    \    ################################################################################\n\
    \    \"\"\"\n    \"\"\"\n    ################################################################################\n\
    \    ################################################################################\n\
    \    ################################################################################\n\
    \    \"\"\"\n    \"\"\"\n    ################################################################################\n\
    \    ################################################################################\n\
    \    ################################################################################\n\
    \    \"\"\"\n    \"\"\"\n    ################################################################################\n\
    \    ################################################################################\n\
    \    ################################################################################\n\
    \    \"\"\"\n    \"\"\"\n    ################################################################################\n\
    \    ################################################################################\n\
    \    ################################################################################\n\
    \    \"\"\"\n    \"\"\"\n    ################################################################################\n\
    \    ################################################################################\n\
    \    ################################################################################\n\
    \    \"\"\"\n    \"\"\"\n    ################################################################################\n\
    \    ################################################################################\n\
    \    ################################################################################\n\
    \    \"\"\"\n    \"\"\"\n    ################################################################################\n\
    \    ################################################################################\n\
    \    ################################################################################\n\
    \    \"\"\"\n    \"\"\"\n    ################################################################################\n\
    \    ################################################################################\n\
    \    #############################################################################\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpuno62n5w.jl:11\nin expression starting at /tmp/tmpuno62n5w.jl:11\n"
  stdout: ''
  timestamp: 1659747819
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My Solution:\n  \
    \  sort(arr, by = x -> (count_ones(x), x))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpfs7k1086.jl:11\nin expression starting at /tmp/tmpfs7k1086.jl:11\n"
  stdout: ''
  timestamp: 1659747819
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    The array will always be non-empty\
    \ and contain only non-negative integers.\n    The input array can be very large.\n\
    \    \"\"\"\n    # My Solution\n    # sort!(arr, by = x -> (count_ones(x), x))\n\
    \    # return arr\n    # end\n    # function count_ones(x::Int64)::Int64\n   \
    \ #     return count(digits(x, base = 2))\n    # end\n    # Best Solution\n  \
    \  # sort!(arr, by = x -> (count(digits(x, base = 2)), x))\n    # return arr\n\
    \    # end\n    # Clever Solution\n    # sort!(arr, by = x -> (count(digits(x,\
    \ base = 2)), x))\n    # return arr\n    # end\n    # Clever Solution\n    # sort!(arr,\
    \ by = x -> (count(digits(x, base = 2)), x))\n    # return arr\n    # end\n  \
    \  # Clever Solution\n    # sort!(arr, by = x -> (count(digits(x, base = 2)),\
    \ x))\n    # return arr\n    # end\n    # Clever Solution\n    # sort!(arr, by\
    \ = x -> (count(digits(x, base = 2)), x))\n    # return arr\n    # end\n    #\
    \ Clever Solution\n    # sort!(arr, by = x -> (count(digits(x, base = 2)), x))\n\
    \    # return arr\n    # end\n    # Clever Solution\n    # sort!(arr, by = x ->\
    \ (count(digits(x, base = 2)), x))\n    # return arr\n    # end\n    # Clever\
    \ Solution\n    # sort!(arr, by = x -> (count(digits(x, base = 2)), x))\n    #\
    \ return arr\n    # end\n    # Clever Solution\n    # sort!(arr, by = x -> (count(digits\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp5_9a66l1.jl:11\nin expression starting at /tmp/tmp5_9a66l1.jl:11\n"
  stdout: ''
  timestamp: 1659747819
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n\"\"\"\n    Example:\n    sort_array([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpur5cy56d.jl:11\nin expression starting at /tmp/tmpur5cy56d.jl:11\n"
  stdout: ''
  timestamp: 1659747819
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\
    sort_array([1024,512,256,128,64,32,16,8,4,2,1]) == [1,2,4,8,16,32,64,128,256,512,1024]\n\
    sort_array([10000,10000]) == [10000,10000]\nsort_array([2048,1024,512,256,128,64,32,16,8,4,2,1])\
    \ == [1,2,4,8,16,32,64,128,256,512,1024,2048]\n                \"\"\"\n    \"\"\
    \"\n    # My Solution\n    return sort(arr, by=x->(count_ones(x), x))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp1sgt0sn9.jl:11\nin expression starting at /tmp/tmp1sgt0sn9.jl:11\n"
  stdout: ''
  timestamp: 1659747820
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(arr, by=x->(count_ones(x), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_zi3xzb5.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp_zi3xzb5.jl:17\n  Expression: candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   Evaluated: [-6, -4, -5, -3, -2]\
    \ == [-4, -2, -6, -5, -3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zi3xzb5.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zi3xzb5.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  timestamp: 1659747814
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My solution\n   \
    \ # First, we need to create a function that returns the number of ones in the\
    \ binary representation of a number\n    function count_ones(n::Int64)::Int64\n\
    \        # Convert the number to binary\n        bin_n = convert(Int64, string(n,\
    \ base=2))\n        # Initialize a counter\n        counter = 0\n        # Loop\
    \ through the binary representation of the number\n        for i in 1:length(bin_n)\n\
    \            # If the number is 1, add 1 to the counter\n            if bin_n[i]\
    \ == '1'\n                counter += 1\n            end\n        end\n       \
    \ # Return the counter\n        return counter\n    end\n    # Now, we need to\
    \ create a function that returns the number of ones in the binary representation\
    \ of a number\n    function sort_array(arr::Vector{Int64})::Vector{Int64}\n  \
    \      # Initialize a dictionary\n        d = Dict()\n        # Loop through the\
    \ array\n        for i in 1:length(arr)\n            # If the number of ones in\
    \ the binary representation of the number is not in the dictionary, add it\n \
    \           if !haskey(d, count_ones(arr[i]))\n                d[count_ones(arr[i])]\
    \ = [arr[i]]\n            # If the number of ones in the binary representation\
    \ of the number is in the dictionary, add the number to the array\n          \
    \  else\n                push!(d[count_ones(arr[i])], arr[i])\n            end\n\
    \        end\n        # Initialize an empty array\n        sorted_arr = []\n \
    \       # Loop through the dictionary\n        for i in keys(d)\n            #\
    \ Sort the array of numbers with the same number of ones in the binary representation\n\
    \            sort!(d[i])\n            # Append the sorted array to the empty array\n\
    \            append!(sorted_arr, d[i])\n        end\n        # Return\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpr4re0nv0.jl:11\nin expression starting at /tmp/tmpr4re0nv0.jl:11\n"
  stdout: ''
  timestamp: 1659747819
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(arr, by = x -> (count_ones(x), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpji9ukufu.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpji9ukufu.jl:17\n  Expression: candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   Evaluated: [-6, -4, -5, -3, -2]\
    \ == [-4, -2, -6, -5, -3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpji9ukufu.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpji9ukufu.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  timestamp: 1659747810
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My Solution:\n  \
    \  sort(arr, by=x->(count(x->x=='1',string(x)),x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpzzdrn9jg.jl:11\nin expression starting at /tmp/tmpzzdrn9jg.jl:11\n"
  stdout: ''
  timestamp: 1659747819
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp701z56da.jl:11\nin expression starting at /tmp/tmp701z56da.jl:11\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My Solution\n   \
    \ sort(arr, by = x -> (count_ones(x), x))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpq5x30ovp.jl:11\nin expression starting at /tmp/tmpq5x30ovp.jl:11\n"
  stdout: ''
  timestamp: 1659747820
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # sort the array according to the number of ones in their binary representation\n\
    \    # if two numbers have the same number of ones, sort them according to their\
    \ decimal value\n    # return the sorted array\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpthuci5gx.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpthuci5gx.jl:18\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpthuci5gx.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpthuci5gx.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpthuci5gx.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpthuci5gx.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpthuci5gx.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion"
  timestamp: 1659747822
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n    sort_array([1,2,3,4,5,6,7,8,9,10])\
    \ # [1,2,4,8,3,5,6,7,9,10]\n    \"\"\"\n    # My Solution\n    # sort(arr, by\
    \ = (x -> count_ones(x)), rev = true)\n    # Other Solutions\n    # sort(arr,\
    \ by = (x -> (count_ones(x), x)))\n    # sort(arr, by = (x -> (count_ones(x),\
    \ -x)))\n    # sort(arr, by = (x -> (count_ones(x), -x)), rev = true)\n    # sort(arr,\
    \ by = (x -> (count_ones(x), -x)), rev = true)\n    # sort(arr, by = (x -> (count_ones(x),\
    \ -x)), rev = true)\n    # sort(arr, by = (x -> (count_ones(x), -x)), rev = true)\n\
    \    # sort(arr, by = (x -> (count_ones(x), -x)), rev = true)\n    # sort(arr,\
    \ by = (x -> (count_ones(x), -x)), rev = true)\n    # sort(arr, by = (x -> (count_ones(x),\
    \ -x)), rev = true)\n    # sort(arr, by = (x -> (count_ones(x), -x)), rev = true)\n\
    \    # sort(arr, by = (x -> (count_ones(x), -x)), rev = true)\n    # sort(arr,\
    \ by = (x -> (count_ones(x), -x)), rev = true)\n    # sort(arr, by = (x -> (count_ones(x),\
    \ -x)), rev = true)\n    # sort(arr, by = (x -> (count_ones(x), -x)), rev = true)\n\
    \    # sort(arr, by = (x -> (count_ones(x), -x)), rev = true)\n    # sort(arr,\
    \ by = (x -> (count_ones(x), -x)), rev = true)\n    # sort(arr,\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpz0z2es6w.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpz0z2es6w.jl:40\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpz0z2es6w.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz0z2es6w.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz0z2es6w.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpz0z2es6w.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpz0z2es6w.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion"
  timestamp: 1659747823
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    For example:\n    \
    \            \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n           \
    \     \"\"\"\n    should return\n                \"\"\"\n[1, 2, 4, 8, 3, 5, 6,\
    \ 7, 9, 10]\n                \"\"\"\n    because\n                \"\"\"\n   \
    \ 1 = 1\n    2 = 10\n    3 = 11\n    4 = 100\n    5 = 101\n    6 = 110\n    7\
    \ = 111\n    8 = 1000\n    9 = 1001\n    10 = 1010\n                \"\"\"\n \
    \   and so on.\n    \"\"\"\n    # your code here\n    return sort(arr, by=x->(count_ones(x),\
    \ x))\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\nStacktrace:\n [1] error(::String, ::String)\n\
    \   @ Base ./error.jl:42\n [2] top-level scope\n   @ /tmp/tmpgw4unm1o.jl:11\n\
    in expression starting at /tmp/tmpgw4unm1o.jl:11\n"
  stdout: ''
  timestamp: 1659747820
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\
    \                \"\"\"\n    The binary representation of 1 is 1, 2 is 10, 3 is\
    \ 11, 4 is 100, 5 is 101, 6 is 110, 7 is 111, 8 is 1000, 9 is 1001, 10 is 1010.\n\
    \    There are 3 ones in the binary representation of 3, 2 ones in the binary\
    \ representation of 5, 3 ones in the binary representation of 6, etc.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpb0t08t27.jl:11\nin expression starting at /tmp/tmpb0t08t27.jl:11\n"
  stdout: ''
  timestamp: 1659747820
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    For example:\n    \
    \            \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n           \
    \     \"\"\"\n    should return:\n                \"\"\"\n[1, 2, 4, 8, 3, 5, 6,\
    \ 7, 9, 10]\n                \"\"\"\n    because:\n                \"\"\"\n1 has\
    \ 1 one in binary representation,\n2 has 1 one in binary representation,\n3 has\
    \ 2 ones in binary representation,\n4 has 1 one in binary representation,\n5 has\
    \ 2 ones in binary representation,\n6 has 2 ones in binary representation,\n7\
    \ has 3 ones in binary representation,\n8 has 1 one in binary representation,\n\
    9 has 2 ones in binary representation,\n10 has 2 ones in binary representation.\n\
    \                \"\"\"\n    The array will always be not null and will always\
    \ contain non-negative integers.\n    The input array should not be modified.\n\
    \    \"\"\"\n    # My Solution\n    return sort(arr, by = x -> (count(x -> x ==\
    \ '1', string(x, base = 2)), x))\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\nStacktrace:\n [1] error(::String, ::String)\n\
    \   @ Base ./error.jl:42\n [2] top-level scope\n   @ /tmp/tmpj6bliv73.jl:11\n\
    in expression starting at /tmp/tmpj6bliv73.jl:11\n"
  stdout: ''
  timestamp: 1659747820
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My Solution\n   \
    \ # Sort by number of ones in binary representation\n    # If number of ones is\
    \ the same, sort by decimal value\n    # Return sorted array\n    #\n    # Example:\n\
    \    # sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7,\
    \ 9, 10]\n    #\n    # 1:  0b0001\n    # 2:  0b0010\n    # 3:  0b0011\n    # 4:\
    \  0b0100\n    # 5:  0b0101\n    # 6:  0b0110\n    # 7:  0b0111\n    # 8:  0b1000\n\
    \    # 9:  0b1001\n    # 10: 0b1010\n    #\n    # 1:  0b0001\n    # 2:  0b0010\n\
    \    # 4:  0b0100\n    # 8:  0b1000\n    # 3:  0b0011\n    # 5:  0b0101\n    #\
    \ 6:  0b0110\n    # 7:  0b0111\n    # 9:  0b1001\n    # 10: 0b1010\n    #\n  \
    \  # 1:  0b0001\n    # 2:  0b0010\n    # 4:  0b0100\n    # 8:  0b1000\n    # 3:\
    \  0b0011\n    # 5:  0b0101\n    # 6:  0b0110\n    # 7:  0b0111\n    # 9:  0b1001\n\
    \    # 10: 0b1010\n    #\n    # 1, 2, 4, 8, 3, 5, 6, 7, 9, 10\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpx_3ord7f.jl:11\nin expression starting at /tmp/tmpx_3ord7f.jl:11\n"
  stdout: ''
  timestamp: 1659747820
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My solution\n   \
    \ # I'm sure there is a better way to do this, but this is what I came up with.\n\
    \    # I'm sure there is a better way to do this, but this is what I came up with.\n\
    \    # I'm sure there is a better way to do this, but this is what I came up with.\n\
    \    # I'm sure there is a better way to do this, but this is what I came up with.\n\
    \    # I'm sure there is a better way to do this, but this is what I came up with.\n\
    \    # I'm sure there is a better way to do this, but this is what I came up with.\n\
    \    # I'm sure there is a better way to do this, but this is what I came up with.\n\
    \    # I'm sure there is a better way to do this, but this is what I came up with.\n\
    \    # I'm sure there is a better way to do this, but this is what I came up with.\n\
    \    # I'm sure there is a better way to do this, but this is what I came up with.\n\
    \    # I'm sure there is a better way to do this, but this is what I came up with.\n\
    \    # I'm sure there is a better way to do this, but this is what I came up with.\n\
    \    # I'm sure there is a better way to do this, but this is what I came up with.\n\
    \    # I'm sure there is a better way to do this, but this is what I came up with.\n\
    \    # I'm sure there is a better way to do this, but this is what I came up with.\n\
    \    # I'm sure there is a better way to do this, but this is what I came up with.\n\
    \    # I'm sure there is a better way to do this, but this is what I came up with.\n\
    \    # I'm sure there is a better way to do this, but this is what I came up with.\n\
    \    # I\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpqmkwvd77.jl:11\nin expression starting at /tmp/tmpqmkwvd77.jl:11\n"
  stdout: ''
  timestamp: 1659747820
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\
    \                \"\"\"\n    The array will always be not null and will always\
    \ contain non-negative integers.\n    The input array may be very large.\n   \
    \ \"\"\"\n    # My Solution\n    return sort(arr, by = x -> (count(x -> x == '1',\
    \ string(x, base = 2)), x))\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp4v4dqsgb.jl:11\nin expression starting at /tmp/tmp4v4dqsgb.jl:11\n"
  stdout: ''
  timestamp: 1659747821
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    Explanation:\n                \"\
    \"\"\n    1 = 1\n    2 = 10\n    3 = 11\n    4 = 100\n    5 = 101\n    6 = 110\n\
    \    7 = 111\n    8 = 1000\n    9 = 1001\n    10 = 1010\n    \"\"\"\n    So, the\
    \ array should be sorted as:\n                \"\"\"\n[1, 2, 4, 8, 3, 5, 6, 7,\
    \ 9, 10]\n                \"\"\"\n    Note:\n                \"\"\"\n    1. If\
    \ the number of ones in the binary representation is equal,\n    compare the original\
    \ number.\n    2. The input array will always contain non-negative integers.\n\
    \    3. The array should be sorted in ascending order.\n    4. The input array\
    \ should not be modified.\n    \"\"\"\n    Good luck!\n                \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmptdrfi0ef.jl:11\nin expression starting at /tmp/tmptdrfi0ef.jl:11\n"
  stdout: ''
  timestamp: 1659747821
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,4,8,3,5,6,7,9,10]\n\
    \                \"\"\"\n    The array will always contain non-negative integers.\n\
    \    The array will always contain non-negative integers.\n    The array will\
    \ always contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpscbthtj3.jl:11\nin expression starting at /tmp/tmpscbthtj3.jl:11\n"
  stdout: ''
  timestamp: 1659747816
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My solution\n   \
    \ # 1. Convert to binary\n    # 2. Sort by number of ones\n    # 3. Sort by decimal\
    \ value\n    # 4. Convert back to decimal\n    # 5. Return\n    #\n    # I'm sure\
    \ there's a better way to do this.\n    #\n    # I'm not sure how to do this in\
    \ Julia, but I'm sure it's possible.\n    #\n    # I'm not sure how to do this\
    \ in Julia, but I'm sure it's possible.\n    #\n    # I'm not sure how to do this\
    \ in Julia, but I'm sure it's possible.\n    #\n    # I'm not sure how to do this\
    \ in Julia, but I'm sure it's possible.\n    #\n    # I'm not sure how to do this\
    \ in Julia, but I'm sure it's possible.\n    #\n    # I'm not sure how to do this\
    \ in Julia, but I'm sure it's possible.\n    #\n    # I'm not sure how to do this\
    \ in Julia, but I'm sure it's possible.\n    #\n    # I'm not sure how to do this\
    \ in Julia, but I'm sure it's possible.\n    #\n    # I'm not sure how to do this\
    \ in Julia, but I'm sure it's possible.\n    #\n    # I'm not sure how to do this\
    \ in Julia, but I'm sure it's possible.\n    #\n    # I'm not sure how to do this\
    \ in Julia, but I'm sure it's possible.\n    #\n    # I'm not sure how to do this\
    \ in Julia, but I'm sure it's possible.\n    #\n    # I'm not sure how to do this\
    \ in Julia, but I'm sure it's possible.\n    #\n    # I'm not sure how to do this\
    \ in Julia, but I'm sure it's possible.\n    #\n    # I'm not sure how to do this\
    \ in Julia, but I'm sure it's possible.\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpcsvnv5nj.jl:11\nin expression starting at /tmp/tmpcsvnv5nj.jl:11\n"
  stdout: ''
  timestamp: 1659747821
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    Note:\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array will always contain\
    \ non-negative integers.\n    - The input array will always contain non-negative\
    \ integers.\n    - The input array will always contain non-negative integers.\n\
    \    - The input array will always contain non-negative integers.\n    - The input\
    \ array will always contain non-negative integers.\n    - The input array will\
    \ always contain non-negative integers.\n    - The input array\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpw7_hvnb_.jl:11\nin expression starting at /tmp/tmpw7_hvnb_.jl:11\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n    sort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n    \"\"\"\n\
    \    # My Solution\n    sort(arr, by = x -> (count(x->x=='1', string(x, base=2)),\
    \ x))\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: arr not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcez1qefd.jl:16\nin expression starting at /tmp/tmpcez1qefd.jl:16\n"
  stdout: ''
  timestamp: 1659747821
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # sort the array\n    # return the sorted array\nend\n               \
    \ \"\"\"\n    Example:\n                \"\"\"\nsort_array([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n                \"\"\"\n \
    \   Note:\n    - The array should not be empty.\n    - The array should not contain\
    \ negative numbers.\n    - The array should contain only non-negative numbers.\n\
    \    - The array should not contain non-integer numbers.\n    - The array should\
    \ not contain duplicate numbers.\n    - The array should not contain more than\
    \ 10 elements.\n    - The array should not contain more than 10 elements.\n  \
    \  - The array should not contain more than 10 elements.\n    - The array should\
    \ not contain more than 10 elements.\n    - The array should not contain more\
    \ than 10 elements.\n    - The array should not contain more than 10 elements.\n\
    \    - The array should not contain more than 10 elements.\n    - The array should\
    \ not contain more than 10 elements.\n    - The array should not contain more\
    \ than 10 elements.\n    - The array should not contain more than 10 elements.\n\
    \    - The array should not contain more than 10 elements.\n    - The array should\
    \ not contain more than 10 elements.\n    - The array should not contain more\
    \ than 10 elements.\n    - The array should not contain more than 10 elements.\n\
    \    - The array should not contain more than 10 elements.\n    - The array should\
    \ not contain more than 10 elements.\n    - The array should not contain more\
    \ than 10 elements.\n    - The array should not contain more than 10 elements.\n\
    \    - The array should not contain more than 10 elements.\n    - The array should\
    \ not contain more than 10 elements.\n    - The array should not contain more\
    \ than 10 elements.\n    - The array should not contain more than 10 elements.\n\
    \    - The array should not contain more than 10 elements.\n    - The array should\
    \ not contain more than 10 elements.\n    - The array should not contain more\
    \ than 10 elements.\n    - The array should not contain more than 10 elements.\n\
    \    - The array should not contain more than 10 elements.\n    - The array should\
    \ not contain more than 10 elements.\n    - The array should not contain more\
    \ than 10\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmprjbz5jcn.jl:12\nin expression starting at /tmp/tmprjbz5jcn.jl:12\n"
  stdout: ''
  timestamp: 1659747821
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n\"\"\"\n    Example:\n    sort_array([1,2,3,4,5,6,7,8,9,10])\
    \ == [1,2,4,8,3,5,6,7,9,10]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpgd1lnrpf.jl:11\nin expression starting at /tmp/tmpgd1lnrpf.jl:11\n"
  stdout: ''
  timestamp: 1659747809
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0,\
    \ 0, 0, 0])\n                \"\"\"\n    should return\n                \"\"\"\
    \n[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n             \
    \   \"\"\"\n    Note:\n    1. The input array will always contain non-negative\
    \ integers.\n    2. The input array will always contain non-negative integers.\n\
    \    3. The input array will always contain non-negative integers.\n    4. The\
    \ input array will always contain non-negative integers.\n    5. The input array\
    \ will always contain non-negative integers.\n    6. The input array will always\
    \ contain non-negative integers.\n    7. The input array will always contain non-negative\
    \ integers.\n    8. The input array will always contain non-negative integers.\n\
    \    9. The input array will always contain non-negative integers.\n    10. The\
    \ input array will always contain non-negative integers.\n    11. The input array\
    \ will always contain non-negative integers.\n    12. The input array will always\
    \ contain non-negative integers.\n    13. The input array will always contain\
    \ non-negative integers.\n    14. The input array will always contain non-negative\
    \ integers.\n    15. The input array will always contain non-negative integers.\n\
    \    16. The input array will always contain non-negative integers.\n    17. The\
    \ input array will always contain non-negative integers.\n    18. The input array\
    \ will always contain non-negative integers.\n    19. The input array will always\
    \ contain non-negative integers.\n    20. The input array will always contain\
    \ non-negative integers.\n    21. The input array will always contain non-negative\
    \ integers.\n    22. The input array will always contain non-negative integers.\n\
    \    23. The input array will always contain non-negative integers.\n    24. The\
    \ input array will always contain non-negative integers.\n    25. The input array\
    \ will always contain non-negative integers.\n    26. The input array will always\
    \ contain non-negative integers.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0])\n\nStacktrace:\n [1]\
    \ error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n \
    \  @ /tmp/tmpzp4vje28.jl:11\nin expression starting at /tmp/tmpzp4vje28.jl:11\n"
  stdout: ''
  timestamp: 1659747821
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    \"\"\"\n    # My Solution\n   \
    \ # sort by number of ones in binary representation\n    # then sort by decimal\
    \ value\n    sort(arr, by=x->(count_ones(x), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpsfgbr9d7.jl:11\nin expression starting at /tmp/tmpsfgbr9d7.jl:11\n"
  stdout: ''
  timestamp: 1659747821
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    Note:\n                \"\"\"\n\
    \    The array will always contain non-negative integers.\n    The array will\
    \ always contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpcyn3vt11.jl:11\nin expression starting at /tmp/tmpcyn3vt11.jl:11\n"
  stdout: ''
  timestamp: 1659747821
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    The array will always contain non-negative\
    \ integers.\n    The numbers of ones in the binary representation of the integers\n\
    \    in the array will range from 1 to 8.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmphahlf8it.jl:11\nin expression starting at /tmp/tmphahlf8it.jl:11\n"
  stdout: ''
  timestamp: 1659747821
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n                \"\"\"\n    Example:\n        \
    \        \"\"\"\nsort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3,\
    \ 5, 6, 7, 9, 10]\n                \"\"\"\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\n    The array will always contain non-negative integers.\n    The\
    \ array will always contain non-negative integers.\n    The array will always\
    \ contain non-negative integers.\n    The array will always contain non-negative\
    \ integers.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmp701z56da.jl:11\nin expression starting at /tmp/tmp701z56da.jl:11\n"
  stdout: ''
  timestamp: 1659747811
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # sort the array\n    return arr\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    \t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzlmi4ax4.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpzlmi4ax4.jl:17\n  Expression: candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n   Evaluated: [1, 5, 2, 3, 4] == [1, 2, 4,\
    \ 3, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzlmi4ax4.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzlmi4ax4.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpzlmi4ax4.jl:18\n  Expression: candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n   Evaluated: [-2, -3, -4, -5, -6] == [-4, -2, -6,\
    \ -5, -3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzlmi4ax4.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzlmi4ax4.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpzlmi4ax4.jl:19\n  Expression: candidate([1, 0, 2, 3, 4]) ==\
    \ [0, 1, 2, 4, 3]\n   Evaluated: [1, 0, 2, 3, 4] == [0, 1, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzlmi4ax4.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzlmi4ax4.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpzlmi4ax4.jl:21\n  Expression: candidate([2, 5, 77, 4, 5, 3,\
    \ 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n   Evaluated: [2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4] == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzlmi4ax4.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level sc"
  timestamp: 1659747822
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    # sort the array\n    # return the sorted array\nend\n               \
    \ \"\"\"\n    Example:\n                \"\"\"\nsort_array([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n                \"\"\"\n \
    \   \"\"\"\n    # My Solution\n    return sort(arr, by=x->(sum(digits(x, 2)),\
    \ x))\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nsort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n\nStacktrace:\n\
    \ [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level scope\n\
    \   @ /tmp/tmpdogupneg.jl:12\nin expression starting at /tmp/tmpdogupneg.jl:12\n"
  stdout: ''
  timestamp: 1659747821
