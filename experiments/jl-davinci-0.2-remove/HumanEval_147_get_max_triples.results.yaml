language: jl
name: HumanEval_147_get_max_triples
results:
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n\n        for j in i+1:n\n            for\
    \ k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n             \
    \       count += 1\n                end\n            end\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if a[i] + a[j] + a[k] % 3 == 0\n        \
    \            count += 1\n                end\n            end\n        end\n \
    \   end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp646ifsjk.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp646ifsjk.jl:34\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp646ifsjk.jl:35\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp646ifsjk.jl:36\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp646ifsjk.jl:37\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660014286
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n      \
    \      for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n    \
    \                count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n      \
    \      for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n    \
    \                count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n\n        for j in i+1:n\n            for\
    \ k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n             \
    \       count += 1\n                end\n            end\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n      \
    \      for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n    \
    \                count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n      \
    \      for k in j+1:n\n                if a[i] + a[j] + a[k] % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0yg289xg.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp0yg289xg.jl:34\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yg289xg.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yg289xg.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0yg289xg.jl:35\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yg289xg.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yg289xg.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0yg289xg.jl:36\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yg289xg.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yg289xg.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0yg289xg.jl:37\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yg289xg.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yg289xg.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660014286
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n      \
    \      for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n    \
    \                count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n      \
    \      for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n    \
    \                count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n\n    \
    \    for j in i+1:n\n            for k in j+1:n\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0\n                    count += 1\n                end\n    \
    \        end\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n      \
    \      for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n    \
    \                count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n      \
    \      for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n    \
    \                count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n      \
    \      for k in j+1:n\n                if a[i] + a[j] + a[k] % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0yg289xg.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp0yg289xg.jl:34\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yg289xg.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yg289xg.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0yg289xg.jl:35\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yg289xg.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yg289xg.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0yg289xg.jl:36\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yg289xg.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yg289xg.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0yg289xg.jl:37\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yg289xg.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yg289xg.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660014286
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n\n        for j in i+1:n\n            for\
    \ k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n             \
    \       count += 1\n                end\n            end\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i = 1:n\n        a[i] = i * i - i + 1\n \
    \   end\n    count = 0\n    for i = 1:n-2\n        for j = i+1:n-1\n         \
    \   for k = j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n        \
    \            count += 1\n                end\n            end\n        end\n \
    \   end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n      \
    \      for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n    \
    \                count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n\n        for j in i+1:n\n            for\
    \ k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n             \
    \       count += 1\n                end\n            end\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n      \
    \      for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n    \
    \                count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n\n        for j in i+1:n\n            for\
    \ k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n             \
    \       count += 1\n                end\n            end\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n      \
    \      for k in j+1:n\n                if a[i] + a[j] + a[k] % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0yg289xg.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp0yg289xg.jl:34\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yg289xg.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yg289xg.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0yg289xg.jl:35\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yg289xg.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yg289xg.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0yg289xg.jl:36\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yg289xg.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yg289xg.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0yg289xg.jl:37\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yg289xg.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yg289xg.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660014286
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    cnt = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              cnt += 1\n                end\n            end\n        end\n \
    \   end\n    return cnt\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = Array{Int64}(undef, n)\n    for i in 1:n\n        a[i] = i*i - i +\
    \ 1\n    end\n    count = 0\n    for i in 1:n\n        for j in i+1:n\n      \
    \      for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n    \
    \                count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if a[i] + a[j] + a[k] % 3 == 0\n        \
    \            count += 1\n                end\n            end\n        end\n \
    \   end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp646ifsjk.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp646ifsjk.jl:34\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp646ifsjk.jl:35\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp646ifsjk.jl:36\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp646ifsjk.jl:37\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660014286
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n      \
    \      for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n    \
    \                count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n\n        for j in i+1:n\n          \
    \  for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n        \
    \            count += 1\n                end\n            end\n        end\n \
    \   end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if a[i] + a[j] + a[k] % 3 == 0\n        \
    \            count += 1\n                end\n            end\n        end\n \
    \   end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp646ifsjk.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp646ifsjk.jl:34\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp646ifsjk.jl:35\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp646ifsjk.jl:36\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp646ifsjk.jl:37\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660014286
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if a[i] +\
    \ a[j] + a[k] % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphwjwgcpi.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmphwjwgcpi.jl:31\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphwjwgcpi.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphwjwgcpi.jl:30\ntest set: Test\
    \ Failed at /tmp/tmphwjwgcpi.jl:32\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphwjwgcpi.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphwjwgcpi.jl:30\ntest set: Test\
    \ Failed at /tmp/tmphwjwgcpi.jl:33\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphwjwgcpi.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphwjwgcpi.jl:30\ntest set: Test\
    \ Failed at /tmp/tmphwjwgcpi.jl:34\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphwjwgcpi.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphwjwgcpi.jl:30\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660014286
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    c = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n            for\
    \ k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n             \
    \       c += 1\n                end\n            end\n        end\n    end\n \
    \   return c\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n\n        for j in i+1:n\n          \
    \  for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n        \
    \            count += 1\n                end\n            end\n        end\n \
    \   end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    cnt = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              cnt += 1\n                end\n            end\n        end\n \
    \   end\n    return cnt\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i * i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n\
    \        for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n      \
    \      for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n    \
    \                count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n\n        for j in i+1:n\n          \
    \  for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n        \
    \            count += 1\n                end\n            end\n        end\n \
    \   end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n\n        for j in i+1:n\n          \
    \  for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n        \
    \            count += 1\n                end\n            end\n        end\n \
    \   end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n\n        for j in i+1:n\n          \
    \  for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n        \
    \            count += 1\n                end\n            end\n        end\n \
    \   end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n      \
    \      for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n    \
    \                count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if a[i] + a[j] + a[k] % 3 == 0\n        \
    \            count += 1\n                end\n            end\n        end\n \
    \   end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp646ifsjk.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp646ifsjk.jl:34\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp646ifsjk.jl:35\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp646ifsjk.jl:36\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp646ifsjk.jl:37\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660014286
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = Array{Int64}(undef, n)\n    for i in 1:n\n        a[i] = i*i - i +\
    \ 1\n    end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n  \
    \          for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n      \
    \      for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n    \
    \                count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    return sum([a[i] + a[j] + a[k] % 3\
    \ == 0 for i in 1:n-2, j in i+1:n-1, k in j+1:n])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp2rl29a_e.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp2rl29a_e.jl:21\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmp2rl29a_e.jl:14\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2rl29a_e.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2rl29a_e.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp2rl29a_e.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmp2rl29a_e.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2rl29a_e.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2rl29a_e.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp2rl29a_e.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmp2rl29a_e.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2rl29a_e.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2rl29a_e.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp2rl29a_e.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: i not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmp2rl29a_e.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2rl29a_"
  timestamp: 1660014287
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n\n        for j in i+1:n\n          \
    \  for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n        \
    \            count += 1\n                end\n            end\n        end\n \
    \   end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if a[i] +\
    \ a[j] + a[k] % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphwjwgcpi.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmphwjwgcpi.jl:31\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphwjwgcpi.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphwjwgcpi.jl:30\ntest set: Test\
    \ Failed at /tmp/tmphwjwgcpi.jl:32\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphwjwgcpi.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphwjwgcpi.jl:30\ntest set: Test\
    \ Failed at /tmp/tmphwjwgcpi.jl:33\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphwjwgcpi.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphwjwgcpi.jl:30\ntest set: Test\
    \ Failed at /tmp/tmphwjwgcpi.jl:34\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphwjwgcpi.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphwjwgcpi.jl:30\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660014286
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    cnt = 0\n    for i in 1:n-2\n    \
    \    for j in i+1:n-1\n            for k in j+1:n\n                if a[i] + a[j]\
    \ + a[k] % 3 == 0\n                    cnt += 1\n                end\n       \
    \     end\n        end\n    end\n    return cnt\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0edbg94y.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp0edbg94y.jl:31\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0edbg94y.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0edbg94y.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0edbg94y.jl:32\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0edbg94y.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0edbg94y.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0edbg94y.jl:33\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0edbg94y.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0edbg94y.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0edbg94y.jl:34\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0edbg94y.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0edbg94y.jl:30\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660014286
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if a[i] + a[j] + a[k] % 3 == 0\n        \
    \            count += 1\n                end\n            end\n        end\n \
    \   end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp646ifsjk.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp646ifsjk.jl:34\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp646ifsjk.jl:35\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp646ifsjk.jl:36\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp646ifsjk.jl:37\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660014286
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n      \
    \      for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n    \
    \                count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    cnt = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n          \
    \  for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n        \
    \            cnt += 1\n                end\n            end\n        end\n   \
    \ end\n    return cnt\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n      \
    \      for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n    \
    \                count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n\n        for j in i+1:n\n            for\
    \ k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n             \
    \       count += 1\n                end\n            end\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = Array{Int64}(undef, n)\n    for i in 1:n\n        a[i] = i*i - i +\
    \ 1\n    end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n  \
    \          for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n      \
    \      for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n    \
    \                count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n\n        for j in i+1:n\n          \
    \  for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n        \
    \            count += 1\n                end\n            end\n        end\n \
    \   end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if a[i] + a[j] + a[k] % 3 == 0\n        \
    \            count += 1\n                end\n            end\n        end\n \
    \   end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp646ifsjk.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp646ifsjk.jl:34\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp646ifsjk.jl:35\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp646ifsjk.jl:36\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp646ifsjk.jl:37\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660014286
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n\n        for j in i+1:n\n          \
    \  for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n        \
    \            count += 1\n                end\n            end\n        end\n \
    \   end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n      \
    \      for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n    \
    \                count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    return sum([a[i] + a[j] + a[k] % 3\
    \ == 0 for i in 1:n-2, j in i+1:n-1, k in j+1:n])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp2rl29a_e.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp2rl29a_e.jl:21\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmp2rl29a_e.jl:14\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2rl29a_e.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2rl29a_e.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp2rl29a_e.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmp2rl29a_e.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2rl29a_e.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2rl29a_e.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp2rl29a_e.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmp2rl29a_e.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2rl29a_e.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2rl29a_e.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp2rl29a_e.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: i not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmp2rl29a_e.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2rl29a_"
  timestamp: 1660014287
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i * i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n\n  \
    \      for j in i+1:n\n            for k in j+1:n\n                if (a[i] +\
    \ a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    triples = [(a[i], a[j], a[k]) for\
    \ i in 1:n-2, j in i+1:n-1, k in j+1:n]\n    return sum([(a[i] + a[j] + a[k])\
    \ % 3 == 0 for (a[i], a[j], a[k]) in triples])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpz66_gsb_.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpz66_gsb_.jl:22\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmpz66_gsb_.jl:14\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz66_gsb_.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz66_gsb_.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpz66_gsb_.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpz66_gsb_.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz66_gsb_.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz66_gsb_.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpz66_gsb_.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpz66_gsb_.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz66_gsb_.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz66_gsb_.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpz66_gsb_.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: i not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmpz66_gsb_.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz66_gsb"
  timestamp: 1660014287
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n\n        for j in i+1:n\n          \
    \  for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n        \
    \            count += 1\n                end\n            end\n        end\n \
    \   end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n\n        for j in i+1:n\n          \
    \  for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n        \
    \            count += 1\n                end\n            end\n        end\n \
    \   end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i = 1:n\n        a[i] = i*i - i + 1\n   \
    \ end\n    count = 0\n    for i = 1:n-2\n        for j = i+1:n-1\n           \
    \ for k = j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n          \
    \          count += 1\n                end\n            end\n        end\n   \
    \ end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n      \
    \      for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n    \
    \                count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    cnt = 0\n    for i in 1:n-2\n    \
    \    for j in i+1:n-1\n            for k in j+1:n\n                if a[i] + a[j]\
    \ + a[k] % 3 == 0\n                    cnt += 1\n                end\n       \
    \     end\n        end\n    end\n    return cnt\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0edbg94y.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp0edbg94y.jl:31\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0edbg94y.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0edbg94y.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0edbg94y.jl:32\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0edbg94y.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0edbg94y.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0edbg94y.jl:33\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0edbg94y.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0edbg94y.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0edbg94y.jl:34\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0edbg94y.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0edbg94y.jl:30\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660014286
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n      \
    \      for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n    \
    \                count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if a[i] + a[j] + a[k] % 3 == 0\n        \
    \            count += 1\n                end\n            end\n        end\n \
    \   end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp646ifsjk.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp646ifsjk.jl:34\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp646ifsjk.jl:35\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp646ifsjk.jl:36\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp646ifsjk.jl:37\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660014286
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n      \
    \      for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n    \
    \                count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n      \
    \      for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n    \
    \                count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n\n        for j in i+1:n\n          \
    \  for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n        \
    \            count += 1\n                end\n            end\n        end\n \
    \   end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n      \
    \      for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n    \
    \                count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    return (n-2)*(n-1)*n/6\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjmryyuwq.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpjmryyuwq.jl:20\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 10 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjmryyuwq.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjmryyuwq.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpjmryyuwq.jl:21\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 20 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjmryyuwq.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjmryyuwq.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpjmryyuwq.jl:22\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 120 == 36\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjmryyuwq.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjmryyuwq.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpjmryyuwq.jl:23\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 161700 == 53361\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjmryyuwq.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjmryyuwq.jl:19\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660014286
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n\n        for j in i+1:n\n            for\
    \ k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n             \
    \       count += 1\n                end\n            end\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n            Explanation: \n        a = [1, 3, 7, 13,\
    \ 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\nfunction get_max_triples(n::Int64)::Int64\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n  \
    \  end\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n        \
    \    for k in j+1:n\n                if a[i] + a[j] + a[k] % 3 == 0\n        \
    \            count += 1\n                end\n            end\n        end\n \
    \   end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp646ifsjk.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp646ifsjk.jl:34\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp646ifsjk.jl:35\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp646ifsjk.jl:36\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp646ifsjk.jl:37\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp646ifsjk.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp646ifsjk.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660014286
