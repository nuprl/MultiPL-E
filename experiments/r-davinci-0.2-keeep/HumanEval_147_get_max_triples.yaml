name: HumanEval_147_get_max_triples
language: humaneval_to_r.py
prompt: "# You are given a positive integer n. You have to create an integer array\
  \ a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i\
  \ - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j <\
  \ k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# Input: n = 5\n\
  # Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is\
  \ (1, 7, 13).\nget_max_triples <- function(n) {"
tests: "test_humaneval <- function() {\ncandidate <- get_max_triples\n    if(!identical(candidate(5),\
  \ 1)){quit('no', 1)}\n    if(!identical(candidate(6), 4)){quit('no', 1)}\n    if(!identical(candidate(10),\
  \ 36)){quit('no', 1)}\n    if(!identical(candidate(100), 53361)){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: ["\n  a <- 1:n\n  a <- a * a - a + 1\n  triples <- combn(a, 3)\n  triples\
    \ <- triples[, colSums(triples) %% 3 == 0]\n  nrow(triples)\n}\nget_max_triples(5)\n",
  "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for\
    \ (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] +\
    \ a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n\
    \  }\n  return(count)\n}\nget_max_triples(5)\n", "\n    a <- 1:n\n    a <- a *\
    \ a - a + 1\n    count <- 0\n    for (i in 1:(n-2)) {\n        for (j in (i+1):(n-1))\
    \ {\n            for (k in (j+1):n) {\n                if ((a[i] + a[j] + a[k])\
    \ %% 3 == 0) {\n                    count <- count + 1\n                }\n  \
    \          }\n        }\n    }\n    return(count)\n}\n\nget_max_triples(5)\n",
  "\n  a <- 1:n\n  a <- a * a - a + 1\n  triples <- combn(a, 3)\n  sum(rowSums(triples)\
    \ %% 3 == 0)\n}\nget_max_triples(5)\n", "\n  a <- c()\n  for (i in 1:n) {\n  \
    \  a[i] <- i * i - i + 1\n  }\n  count <- 0\n  for (i in 1:(n - 2)) {\n    for\
    \ (j in (i + 1):(n - 1)) {\n      for (k in (j + 1):n) {\n        if ((a[i] +\
    \ a[j] + a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n\
    \    }\n  }\n  return(count)\n}\n\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <-\
    \ a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1))\
    \ {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n\
    \          count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2))\
    \ {\n    for (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i]\
    \ + a[j] + a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n     \
    \ }\n    }\n  }\n  return(count)\n}\nget_max_triples(5)\n", "\n  a <- 1:n\n  a\
    \ <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1))\
    \ {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n\
    \          count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  triples <- combn(a, 3)\n  sum(apply(triples,\
    \ 2, function(x) sum(x) %% 3 == 0))\n}\nget_max_triples(5)\n", "\n  a <- c()\n\
    \  for (i in 1:n) {\n    a[i] <- i * i - i + 1\n  }\n  count <- 0\n  for (i in\
    \ 1:(n - 2)) {\n    for (j in (i + 1):(n - 1)) {\n      for (k in (j + 1):n) {\n\
    \        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <- count + 1\n\
    \        }\n      }\n    }\n  }\n  return(count)\n}\n\nget_max_triples(5)\n",
  "\n  a <- c()\n  for (i in 1:n) {\n    a[i] <- i * i - i + 1\n  }\n  count <- 0\n\
    \  for (i in 1:(n - 2)) {\n    for (j in (i + 1):(n - 1)) {\n      for (k in (j\
    \ + 1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <-\
    \ count + 1\n        }\n      }\n    }\n  }\n  return(count)\n}\nget_max_triples(5)\n",
  "\n  a <- 1:n\n  a <- a * a - a + 1\n  triples <- combn(a, 3)\n  triples <- triples[,\
    \ colSums(triples) %% 3 == 0]\n  return(nrow(triples))\n}\nget_max_triples(5)\n",
  "\n  a <- rep(NA, n)\n  for (i in 1:n) {\n    a[i] <- i * i - i + 1\n  }\n  count\
    \ <- 0\n  for (i in 1:(n - 2)) {\n    for (j in (i + 1):(n - 1)) {\n      for\
    \ (k in (j + 1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n        \
    \  count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n}\n\n\
    get_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for\
    \ (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n\
    \        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <- count + 1\n\
    \        }\n      }\n    }\n  }\n  return(count)\n}\n\nget_max_triples(5)\n",
  "\n  a <- c(1, 3, 7, 13, 21)\n  if (n > 5) {\n    for (i in 6:n) {\n      a[i] <-\
    \ i * i - i + 1\n    }\n  }\n  count <- 0\n  for (i in 1:(n - 2)) {\n    for (j\
    \ in (i + 1):(n - 1)) {\n      for (k in (j + 1):n) {\n        if ((a[i] + a[j]\
    \ + a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n   \
    \ }\n  }\n  return(count)\n}\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a *\
    \ a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1))\
    \ {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n\
    \          count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\n\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n\
    \  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n      for (k in (j+1):n)\
    \ {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <- count +\
    \ 1\n        }\n      }\n    }\n  }\n  return(count)\n}\nget_max_triples(5)\n",
  "\n  a <- c()\n  for (i in 1:n) {\n    a[i] <- i * i - i + 1\n  }\n  count <- 0\n\
    \  for (i in 1:(n - 2)) {\n    for (j in (i + 1):(n - 1)) {\n      for (k in (j\
    \ + 1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <-\
    \ count + 1\n        }\n      }\n    }\n  }\n  return(count)\n}\nget_max_triples(5)",
  "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for\
    \ (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] +\
    \ a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n\
    \  }\n  return(count)\n}\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  triples <-\
    \ combn(a, 3)\n  triples <- triples[, colSums(triples) %% 3 == 0]\n  return(nrow(triples))\n\
    }\n", "\n  a <- c(1, 3, 7, 13, 21)\n  for (i in 6:n) {\n    a[i] <- i * i - i\
    \ + 1\n  }\n  triples <- 0\n  for (i in 1:(n - 2)) {\n    for (j in (i + 1):(n\
    \ - 1)) {\n      for (k in (j + 1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3\
    \ == 0) {\n          triples <- triples + 1\n        }\n      }\n    }\n  }\n\
    \  return(triples)\n}\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a\
    \ + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n  \
    \    for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n   \
    \       count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\n\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n\
    \  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n      for (k in (j+1):n)\
    \ {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <- count +\
    \ 1\n        }\n      }\n    }\n  }\n  return(count)\n}\n\nget_max_triples(5)\n",
  "\n  a <- c()\n  for (i in 1:n) {\n    a[i] <- i * i - i + 1\n  }\n  count <- 0\n\
    \  for (i in 1:(n - 2)) {\n    for (j in (i + 1):(n - 1)) {\n      for (k in (j\
    \ + 1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <-\
    \ count + 1\n        }\n      }\n    }\n  }\n  return(count)\n}\nget_max_triples(5)\n",
  "\n    a <- c()\n    for (i in 1:n) {\n        a[i] <- i * i - i + 1\n    }\n  \
    \  triples <- 0\n    for (i in 1:(n - 2)) {\n        for (j in (i + 1):(n - 1))\
    \ {\n            for (k in (j + 1):n) {\n                if ((a[i] + a[j] + a[k])\
    \ %% 3 == 0) {\n                    triples <- triples + 1\n                }\n\
    \            }\n        }\n    }\n    return(triples)\n}\nget_max_triples(5)\n",
  "\n  a <- 1:n\n  a <- a * a - a + 1\n  triples <- combn(a, 3)\n  triples <- triples[,\
    \ colSums(triples) %% 3 == 0]\n  return(nrow(triples))\n}\n\nget_max_triples(5)\n",
  "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for\
    \ (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] +\
    \ a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n\
    \  }\n  return(count)\n}\n", "\n  a <- c()\n  for (i in 1:n) {\n    a[i] <- i\
    \ * i - i + 1\n  }\n  count <- 0\n  for (i in 1:(n - 2)) {\n    for (j in (i +\
    \ 1):(n - 1)) {\n      for (k in (j + 1):n) {\n        if ((a[i] + a[j] + a[k])\
    \ %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n  }\n\
    \  return(count)\n}\n\nget_max_triples(5)\n", "\n    a <- 1:n\n    a <- a * a\
    \ - a + 1\n    count <- 0\n    for (i in 1:(n-2)) {\n        for (j in (i+1):(n-1))\
    \ {\n            for (k in (j+1):n) {\n                if ((a[i] + a[j] + a[k])\
    \ %% 3 == 0) {\n                    count <- count + 1\n                }\n  \
    \          }\n        }\n    }\n    return(count)\n}\n", "\n  a <- 1:n\n  a <-\
    \ a * a - a + 1\n  triples <- combn(a, 3)\n  triples <- triples[, triples[1, ]\
    \ + triples[2, ] + triples[3, ] %% 3 == 0]\n  return(ncol(triples))\n}\nget_max_triples(5)\n",
  "\n  a <- c(1, 3, 7, 13, 21)\n  for (i in 6:n) {\n    a[i] <- i * i - i + 1\n  }\n\
    \  count <- 0\n  for (i in 1:(n - 2)) {\n    for (j in (i + 1):(n - 1)) {\n  \
    \    for (k in (j + 1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n \
    \         count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n\
    \  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n      for (k in (j+1):n)\
    \ {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <- count +\
    \ 1\n        }\n      }\n    }\n  }\n  return(count)\n}\nget_max_triples(5)\n",
  "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for\
    \ (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] +\
    \ a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n\
    \  }\n  return(count)\n}\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n\
    \  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n      for (k in (j+1):n)\
    \ {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <- count +\
    \ 1\n        }\n      }\n    }\n  }\n  return(count)\n}\nget_max_triples(5)\n",
  "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for\
    \ (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] +\
    \ a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n\
    \  }\n  return(count)\n}\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a -\
    \ a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n\
    \      for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n \
    \         count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\n\nget_max_triples(5)\n", "\n  a <- c(1, 3, 7, 13, 21)\n  if (n < 5) {\n   \
    \ return(0)\n  }\n  for (i in 6:n) {\n    a[i] <- i * i - i + 1\n  }\n  count\
    \ <- 0\n  for (i in 1:(n - 2)) {\n    for (j in (i + 1):(n - 1)) {\n      for\
    \ (k in (j + 1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n        \
    \  count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n}\n\n\
    get_max_triples(5)\n", "\n    a <- 1:n\n    a <- a * a - a + 1\n    triples <-\
    \ combn(a, 3)\n    sum(apply(triples, 2, function(x) sum(x) %% 3 == 0))\n}\nget_max_triples(5)\n",
  "\n    a <- 1:n\n    a <- a * a - a + 1\n    count <- 0\n    for (i in 1:(n-2))\
    \ {\n        for (j in (i+1):(n-1)) {\n            for (k in (j+1):n) {\n    \
    \            if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n                    count\
    \ <- count + 1\n                }\n            }\n        }\n    }\n    return(count)\n\
    }\nget_max_triples(5)\n", "\n    a <- 1:n\n    a <- a * a - a + 1\n    count <-\
    \ 0\n    for (i in 1:(n-2)) {\n        for (j in (i+1):(n-1)) {\n            for\
    \ (k in (j+1):n) {\n                if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n  \
    \                  count <- count + 1\n                }\n            }\n    \
    \    }\n    }\n    return(count)\n}\nget_max_triples(5)\n", "\n  a <- 1:n\n  a\
    \ <- a * a - a + 1\n  triples <- combn(a, 3)\n  sum(apply(triples, 2, function(x)\
    \ all(x %% 3 == 0)))\n}\nget_max_triples(5)\n", "\n  # Write your code here\n\
    \  a <- c()\n  for (i in 1:n) {\n    a[i] <- i * i - i + 1\n  }\n  count <- 0\n\
    \  for (i in 1:(n - 2)) {\n    for (j in (i + 1):(n - 1)) {\n      for (k in (j\
    \ + 1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <-\
    \ count + 1\n        }\n      }\n    }\n  }\n  return(count)\n}\n\nget_max_triples(5)\n",
  "\n  a <- rep(0, n)\n  for (i in 1:n) {\n    a[i] <- i * i - i + 1\n  }\n  count\
    \ <- 0\n  for (i in 1:(n - 2)) {\n    for (j in (i + 1):(n - 1)) {\n      for\
    \ (k in (j + 1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n        \
    \  count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n}\nget_max_triples(5)\n",
  "\n  a <- 1:n\n  a <- a * a - a + 1\n  triples <- combn(a, 3)\n  triples <- triples[,\
    \ colSums(triples) %% 3 == 0]\n  return(nrow(triples))\n}\n\nget_max_triples(5)\n",
  "\n  a <- (1:n) * (1:n) - (1:n) + 1\n  sum(sapply(1:(n-2), function(i) {\n    sum(sapply(i+1:(n-1),\
    \ function(j) {\n      sum(sapply(j+1:n, function(k) {\n        if (a[i] + a[j]\
    \ + a[k] %% 3 == 0) {\n          return(1)\n        } else {\n          return(0)\n\
    \        }\n      }))\n    }))\n  }))\n}\nget_max_triples(5)\n", "\n  # Write\
    \ your code here\n  a <- c()\n  for (i in 1:n) {\n    a[i] <- i * i - i + 1\n\
    \  }\n  count <- 0\n  for (i in 1:(n - 2)) {\n    for (j in (i + 1):(n - 1)) {\n\
    \      for (k in (j + 1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n\
    \          count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\n\nget_max_triples(5)\n", "\n  a <- c()\n  for (i in 1:n) {\n    a[i] <- i *\
    \ i - i + 1\n  }\n  count <- 0\n  for (i in 1:(n - 2)) {\n    for (j in (i + 1):(n\
    \ - 1)) {\n      for (k in (j + 1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3\
    \ == 0) {\n          count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  a <- a[a %% 3\
    \ == 0]\n  return(length(a))\n}\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <-\
    \ a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1))\
    \ {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n\
    \          count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  a <- a[a %% 3\
    \ == 0]\n  return(length(a))\n}\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <-\
    \ a * a - a + 1\n  triples <- combn(a, 3)\n  triples <- triples[, colSums(triples)\
    \ %% 3 == 0]\n  return(nrow(triples))\n}\nget_max_triples(5)\n", "\n    a <- 1:n\n\
    \    a <- a * a - a + 1\n    count <- 0\n    for (i in 1:(n-2)) {\n        for\
    \ (j in (i+1):(n-1)) {\n            for (k in (j+1):n) {\n                if ((a[i]\
    \ + a[j] + a[k]) %% 3 == 0) {\n                    count <- count + 1\n      \
    \          }\n            }\n        }\n    }\n    return(count)\n}\nget_max_triples(5)\n",
  "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for\
    \ (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] +\
    \ a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n\
    \  }\n  return(count)\n}\n\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a\
    \ - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n\
    \      for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n \
    \         count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n\
    \  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n      for (k in (j+1):n)\
    \ {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <- count +\
    \ 1\n        }\n      }\n    }\n  }\n  return(count)\n}\n\nget_max_triples(5)\n",
  "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for\
    \ (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] +\
    \ a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n\
    \  }\n  return(count)\n}\n", "\n  a <- c()\n  for (i in 1:n) {\n    a[i] <- i\
    \ * i - i + 1\n  }\n  triples <- 0\n  for (i in 1:(n - 2)) {\n    for (j in (i\
    \ + 1):(n - 1)) {\n      for (k in (j + 1):n) {\n        if ((a[i] + a[j] + a[k])\
    \ %% 3 == 0) {\n          triples <- triples + 1\n        }\n      }\n    }\n\
    \  }\n  return(triples)\n}\n\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a *\
    \ a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1))\
    \ {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n\
    \          count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  triples <- combn(a, 3)\n  sum(rowSums(triples)\
    \ %% 3 == 0)\n}\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n\
    \  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n      for\
    \ (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count\
    \ <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n}\nget_max_triples(5)\n",
  "\n    a <- 1:n\n    a <- a * a - a + 1\n    count <- 0\n    for (i in 1:(n-2))\
    \ {\n        for (j in (i+1):(n-1)) {\n            for (k in (j+1):n) {\n    \
    \            if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n                    count\
    \ <- count + 1\n                }\n            }\n        }\n    }\n    return(count)\n\
    }\n", "\n  a <- 1:n\n  a <- a*a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n\
    \    for (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] +\
    \ a[j] + a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n\
    \    }\n  }\n  return(count)\n}\n\nget_max_triples(5)\n", "\n    a <- seq(1, n)\n\
    \    a <- a * a - a + 1\n    triples <- combn(a, 3)\n    sum(rowSums(triples)\
    \ %% 3 == 0)\n}\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n\
    \  triples <- combn(a, 3)\n  sum(apply(triples, 2, function(x) {\n    sum(x) %%\
    \ 3 == 0\n  }))\n}\n\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a +\
    \ 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n    \
    \  for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n     \
    \     count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n}\n",
  "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for\
    \ (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] +\
    \ a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n\
    \  }\n  return(count)\n}\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a -\
    \ a + 1\n  triples <- combn(a, 3)\n  sum(apply(triples, 1, function(x) sum(x)\
    \ %% 3 == 0))\n}\nget_max_triples(5)\n", "\n    a <- 1:n\n    a <- a * a - a +\
    \ 1\n    count <- 0\n    for (i in 1:(n-2)) {\n        for (j in (i+1):(n-1))\
    \ {\n            for (k in (j+1):n) {\n                if ((a[i] + a[j] + a[k])\
    \ %% 3 == 0) {\n                    count <- count + 1\n                }\n  \
    \          }\n        }\n    }\n    return(count)\n}\nget_max_triples(5)\n", "\n\
    \  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for\
    \ (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] +\
    \ a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n\
    \  }\n  return(count)\n}\n", "\n  a <- c(1, 3, 7, 13, 21)\n  if (n <= 5) {\n \
    \   return(0)\n  }\n  for (i in 6:n) {\n    a[i] <- i * i - i + 1\n  }\n  count\
    \ <- 0\n  for (i in 1:(n - 2)) {\n    for (j in (i + 1):(n - 1)) {\n      for\
    \ (k in (j + 1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n        \
    \  count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n}\n\n\
    get_max_triples(5)\nget_max_triples(6)\nget_max_triples(7)\nget_max_triples(8)\n\
    get_max_triples(9)\nget_max_triples(10)\n", "\n  a <- 1:n\n  a <- a * a - a +\
    \ 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n    \
    \  for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n     \
    \     count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n}\n\
    \nget_max_triples(5)\n", "\n    a <- 1:n\n    a <- a * a - a + 1\n    count <-\
    \ 0\n    for (i in 1:(n-2)) {\n        for (j in (i+1):(n-1)) {\n            for\
    \ (k in (j+1):n) {\n                if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n  \
    \                  count <- count + 1\n                }\n            }\n    \
    \    }\n    }\n    return(count)\n}\nget_max_triples(5)\n", "\n    a <- 1:n\n\
    \    a <- a * a - a + 1\n    count <- 0\n    for (i in 1:(n-2)) {\n        for\
    \ (j in (i+1):(n-1)) {\n            for (k in (j+1):n) {\n                if ((a[i]\
    \ + a[j] + a[k]) %% 3 == 0) {\n                    count <- count + 1\n      \
    \          }\n            }\n        }\n    }\n    return(count)\n}\nget_max_triples(5)\n",
  "\n  a <- c(1:n)\n  a <- a * a - a + 1\n  triples <- combn(a, 3)\n  triples <- triples[,\
    \ triples[1, ] + triples[2, ] + triples[3, ] %% 3 == 0]\n  return(ncol(triples))\n\
    }\n\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n\
    \  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n      for (k in (j+1):n)\
    \ {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <- count +\
    \ 1\n        }\n      }\n    }\n  }\n  return(count)\n}\nget_max_triples(5)\n",
  "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for\
    \ (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] +\
    \ a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n\
    \  }\n  return(count)\n}\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a -\
    \ a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n\
    \      for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n \
    \         count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\n\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n\
    \  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n      for (k in (j+1):n)\
    \ {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <- count +\
    \ 1\n        }\n      }\n    }\n  }\n  return(count)\n}\nget_max_triples(5)\n",
  "\n  a <- 1:n\n  a <- a * a - a + 1\n  triples <- combn(a, 3)\n  sum(apply(triples,\
    \ 2, function(x) sum(x) %% 3 == 0))\n}\n\nget_max_triples(5)\n", "\n  a <- 1:n\n\
    \  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1))\
    \ {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n\
    \          count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2))\
    \ {\n    for (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i]\
    \ + a[j] + a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n     \
    \ }\n    }\n  }\n  return(count)\n}\n\nget_max_triples(5)\n", "\n    a <- 1:n\n\
    \    a <- a * a - a + 1\n    count <- 0\n    for (i in 1:(n-2)) {\n        for\
    \ (j in (i+1):(n-1)) {\n            for (k in (j+1):n) {\n                if ((a[i]\
    \ + a[j] + a[k]) %% 3 == 0) {\n                    count <- count + 1\n      \
    \          }\n            }\n        }\n    }\n    return(count)\n}\n", "\n  a\
    \ <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for\
    \ (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] +\
    \ a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n\
    \  }\n  return(count)\n}\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a -\
    \ a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n\
    \      for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n \
    \         count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\n\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  triples <-\
    \ combn(a, 3)\n  sum(apply(triples, 2, function(x) sum(x) %% 3 == 0))\n}\nget_max_triples(5)\n",
  "\n  a <- c()\n  for (i in 1:n) {\n    a[i] <- i * i - i + 1\n  }\n  return(a)\n\
    }\n\nget_max_triples(5)\n", "\n    # Write your code here\n    a <- c()\n    for\
    \ (i in 1:n) {\n        a[i] <- i * i - i + 1\n    }\n    count <- 0\n    for\
    \ (i in 1:(n-2)) {\n        for (j in (i+1):(n-1)) {\n            for (k in (j+1):n)\
    \ {\n                if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n                 \
    \   count <- count + 1\n                }\n            }\n        }\n    }\n \
    \   return(count)\n}\n", "\n  # Write your code here\n  a <- 1:n\n  a <- a * a\
    \ - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n\
    \      for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n \
    \         count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2))\
    \ {\n    for (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i]\
    \ + a[j] + a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n     \
    \ }\n    }\n  }\n  return(count)\n}\n\nget_max_triples(5)\n", "\n  a <- 1:n\n\
    \  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1))\
    \ {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n\
    \          count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\n", "\n  a <- c(1, 3, 7, 13, 21)\n  for (i in 6:n) {\n    a[i] <- i * i - i\
    \ + 1\n  }\n  count <- 0\n  for (i in 1:(n - 2)) {\n    for (j in (i + 1):(n -\
    \ 1)) {\n      for (k in (j + 1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 ==\
    \ 0) {\n          count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\nget_max_triples(5)\n", "\n    a <- 1:n\n    a <- a * a - a + 1\n    count <-\
    \ 0\n    for (i in 1:(n-2)) {\n        for (j in (i+1):(n-1)) {\n            for\
    \ (k in (j+1):n) {\n                if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n  \
    \                  count <- count + 1\n                }\n            }\n    \
    \    }\n    }\n    return(count)\n}\nget_max_triples(5)\n", "\n  a <- 1:n\n  a\
    \ <- a * a - a + 1\n  a <- a[a %% 3 == 0]\n  a <- combn(a, 3)\n  a <- apply(a,\
    \ 2, sum)\n  sum(a %% 3 == 0)\n}\nget_max_triples(5)\n", "\n    a <- 1:n\n   \
    \ a <- a * a - a + 1\n    count <- 0\n    for (i in 1:(n-2)) {\n        for (j\
    \ in (i+1):(n-1)) {\n            for (k in (j+1):n) {\n                if ((a[i]\
    \ + a[j] + a[k]) %% 3 == 0) {\n                    count <- count + 1\n      \
    \          }\n            }\n        }\n    }\n    return(count)\n}\nget_max_triples(5)\n",
  "\n    a <- c()\n    for (i in 1:n) {\n        a[i] <- i * i - i + 1\n    }\n  \
    \  count <- 0\n    for (i in 1:(n - 2)) {\n        for (j in (i + 1):(n - 1))\
    \ {\n            for (k in (j + 1):n) {\n                if ((a[i] + a[j] + a[k])\
    \ %% 3 == 0) {\n                    count <- count + 1\n                }\n  \
    \          }\n        }\n    }\n    return(count)\n}\nget_max_triples(5)\n", "\n\
    \  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for\
    \ (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] +\
    \ a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n\
    \  }\n  return(count)\n}\nget_max_triples(5)\n", "\n    a <- 1:n\n    a <- a*a\
    \ - a + 1\n    count <- 0\n    for (i in 1:(n-2)) {\n        for (j in (i+1):(n-1))\
    \ {\n            for (k in (j+1):n) {\n                if ((a[i] + a[j] + a[k])\
    \ %% 3 == 0) {\n                    count <- count + 1\n                }\n  \
    \          }\n        }\n    }\n    return(count)\n}\n\nget_max_triples(5)\n",
  "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for\
    \ (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] +\
    \ a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n\
    \  }\n  return(count)\n}\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a -\
    \ a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n\
    \      for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n \
    \         count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n\
    \  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n      for (k in (j+1):n)\
    \ {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <- count +\
    \ 1\n        }\n      }\n    }\n  }\n  return(count)\n}\n", "\n  a <- 1:n\n  a\
    \ <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1))\
    \ {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n\
    \          count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n\
    \  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n      for (k in (j+1):n)\
    \ {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <- count +\
    \ 1\n        }\n      }\n    }\n  }\n  return(count)\n}\n", "\n  a <- 1:n\n  a\
    \ <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1))\
    \ {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n\
    \          count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\n\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  triples <-\
    \ combn(a, 3)\n  triples <- triples[, colSums(triples) %% 3 == 0]\n  return(nrow(triples))\n\
    }\n\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n\
    \  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n      for (k in (j+1):n)\
    \ {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <- count +\
    \ 1\n        }\n      }\n    }\n  }\n  return(count)\n}\nget_max_triples(5)\n",
  "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for\
    \ (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] +\
    \ a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n\
    \  }\n  return(count)\n}\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a -\
    \ a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n\
    \      for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n \
    \         count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\n\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  triples <-\
    \ combn(a, 3)\n  sum(apply(triples, 2, function(x) sum(x) %% 3 == 0))\n}\nget_max_triples(5)\n",
  "\n    a <- 1:n\n    a <- a * a - a + 1\n    a <- a[a %% 3 == 0]\n    return(length(a))\n\
    }\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n\
    \  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n      for (k in (j+1):n)\
    \ {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <- count +\
    \ 1\n        }\n      }\n    }\n  }\n  return(count)\n}\n\nget_max_triples(5)\n",
  "\n  # Write your code here\n  a <- c()\n  for (i in 1:n) {\n    a[i] <- i * i -\
    \ i + 1\n  }\n  count <- 0\n  for (i in 1:(n - 2)) {\n    for (j in (i + 1):(n\
    \ - 1)) {\n      for (k in (j + 1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3\
    \ == 0) {\n          count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  triples <- combn(a, 3)\n  sum(apply(triples,\
    \ 2, function(x) sum(x) %% 3 == 0))\n}\n\nget_max_triples(5)\n", "\n  a <- 1:n\n\
    \  a <- a * a - a + 1\n  triples <- combn(a, 3)\n  sum(apply(triples, 2, function(x)\
    \ sum(x) %% 3 == 0))\n}\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a -\
    \ a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n\
    \      for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n \
    \         count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\n\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n\
    \  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n      for (k in (j+1):n)\
    \ {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <- count +\
    \ 1\n        }\n      }\n    }\n  }\n  return(count)\n}\n", "\n  # Write your\
    \ code here\n  a <- c()\n  for (i in 1:n) {\n    a[i] <- i * i - i + 1\n  }\n\
    \  count <- 0\n  for (i in 1:(n - 2)) {\n    for (j in (i + 1):(n - 1)) {\n  \
    \    for (k in (j + 1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n \
    \         count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\n", "\n    a <- 1:n\n    a <- a * a - a + 1\n    count <- 0\n    for (i in 1:(n-2))\
    \ {\n        for (j in (i+1):(n-1)) {\n            for (k in (j+1):n) {\n    \
    \            if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n                    count\
    \ <- count + 1\n                }\n            }\n        }\n    }\n    return(count)\n\
    }\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  return(sum(a[1:(n-2)]\
    \ + a[2:(n-1)] + a[3:n] %% 3 == 0))\n}\n\nget_max_triples(5)\n", "\n    a <- 1:n\n\
    \    a <- a * a - a + 1\n    count <- 0\n    for (i in 1:(n-2)) {\n        for\
    \ (j in (i+1):(n-1)) {\n            for (k in (j+1):n) {\n                if ((a[i]\
    \ + a[j] + a[k]) %% 3 == 0) {\n                    count <- count + 1\n      \
    \          }\n            }\n        }\n    }\n    return(count)\n}\nget_max_triples(5)\n",
  "\n  a <- c()\n  for (i in 1:n) {\n    a[i] <- i * i - i + 1\n  }\n  count <- 0\n\
    \  for (i in 1:(n - 2)) {\n    for (j in (i + 1):(n - 1)) {\n      for (k in (j\
    \ + 1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <-\
    \ count + 1\n        }\n      }\n    }\n  }\n  return(count)\n}\n\nget_max_triples(5)\n",
  "\n  a <- 1:n\n  a <- a * a - a + 1\n  triples <- combn(a, 3)\n  triples <- triples[,\
    \ colSums(triples) %% 3 == 0]\n  return(nrow(triples))\n}\n\nget_max_triples(5)\n",
  "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for\
    \ (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] +\
    \ a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n\
    \  }\n  return(count)\n}\n\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a\
    \ - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n\
    \      for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n \
    \         count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\nget_max_triples(5)\n", "\n    a <- 1:n\n    a <- a * a - a + 1\n    count <-\
    \ 0\n    for (i in 1:(n-2)) {\n        for (j in (i+1):(n-1)) {\n            for\
    \ (k in (j+1):n) {\n                if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n  \
    \                  count <- count + 1\n                }\n            }\n    \
    \    }\n    }\n    return(count)\n}\n", "\n  a <- c()\n  for (i in 1:n) {\n  \
    \  a[i] <- i * i - i + 1\n  }\n  count <- 0\n  for (i in 1:(n - 2)) {\n    for\
    \ (j in (i + 1):(n - 1)) {\n      for (k in (j + 1):n) {\n        if ((a[i] +\
    \ a[j] + a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n\
    \    }\n  }\n  return(count)\n}\n", "\n    a <- c(1, 3, 7, 13, 21)\n    if (n\
    \ <= 5) {\n        return(0)\n    }\n    for (i in 6:n) {\n        a[i] <- i *\
    \ i - i + 1\n    }\n    count <- 0\n    for (i in 1:(n - 2)) {\n        for (j\
    \ in (i + 1):(n - 1)) {\n            for (k in (j + 1):n) {\n                if\
    \ ((a[i] + a[j] + a[k]) %% 3 == 0) {\n                    count <- count + 1\n\
    \                }\n            }\n        }\n    }\n    return(count)\n}\nget_max_triples(5)\n",
  "\n  a <- c()\n  for (i in 1:n) {\n    a[i] <- i * i - i + 1\n  }\n  count <- 0\n\
    \  for (i in 1:(n - 2)) {\n    for (j in (i + 1):(n - 1)) {\n      for (k in (j\
    \ + 1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <-\
    \ count + 1\n        }\n      }\n    }\n  }\n  return(count)\n}\nget_max_triples(5)\n",
  "\n  a <- c()\n  for (i in 1:n) {\n    a[i] <- i * i - i + 1\n  }\n  triples <-\
    \ 0\n  for (i in 1:(n - 2)) {\n    for (j in (i + 1):(n - 1)) {\n      for (k\
    \ in (j + 1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          triples\
    \ <- triples + 1\n        }\n      }\n    }\n  }\n  return(triples)\n}\nget_max_triples(5)\n",
  "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for\
    \ (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] +\
    \ a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n\
    \  }\n  return(count)\n}\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a -\
    \ a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n\
    \      for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n \
    \         count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\n\nget_max_triples(5)\n", "\n  a <- c()\n  for (i in 1:n) {\n    a[i] <- i *\
    \ i - i + 1\n  }\n  count <- 0\n  for (i in 1:(n - 2)) {\n    for (j in (i + 1):(n\
    \ - 1)) {\n      for (k in (j + 1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3\
    \ == 0) {\n          count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\n\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  triples <-\
    \ combn(a, 3)\n  sum(apply(triples, 2, function(x) sum(x) %% 3 == 0))\n}\n\nget_max_triples(5)\n",
  "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for\
    \ (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] +\
    \ a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n\
    \  }\n  return(count)\n}\n\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a\
    \ - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n\
    \      for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n \
    \         count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2))\
    \ {\n    for (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i]\
    \ + a[j] + a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n     \
    \ }\n    }\n  }\n  return(count)\n}\n\nget_max_triples(5)\n", "\n  a <- 1:n\n\
    \  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1))\
    \ {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n\
    \          count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  triples <- combn(a, 3)\n  triples\
    \ <- triples[, colSums(triples) %% 3 == 0]\n  return(nrow(triples))\n}\nget_max_triples(5)\n",
  "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for\
    \ (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] +\
    \ a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n\
    \  }\n  return(count)\n}\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a -\
    \ a + 1\n  triples <- combn(a, 3)\n  sum(apply(triples, 2, function(x) sum(x)\
    \ %% 3 == 0))\n}\n\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n\
    \  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n      for\
    \ (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count\
    \ <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n}\n", "\n   \
    \ a <- 1:n\n    a <- a * a - a + 1\n    count <- 0\n    for (i in 1:(n-2)) {\n\
    \        for (j in (i+1):(n-1)) {\n            for (k in (j+1):n) {\n        \
    \        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n                    count <- count\
    \ + 1\n                }\n            }\n        }\n    }\n    return(count)\n\
    }\n", "\n  a <- c(1, 3, 7, 13, 21)\n  for (i in 6:n) {\n    a[i] <- i * i - i\
    \ + 1\n  }\n  triples <- 0\n  for (i in 1:(n - 2)) {\n    for (j in (i + 1):(n\
    \ - 1)) {\n      for (k in (j + 1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3\
    \ == 0) {\n          triples <- triples + 1\n        }\n      }\n    }\n  }\n\
    \  return(triples)\n}\nget_max_triples(5)\n", "\n    a <- c(1:n)\n    a <- a *\
    \ a - a + 1\n    triples <- combn(a, 3)\n    sum(apply(triples, 2, function(x)\
    \ sum(x) %% 3 == 0))\n}\n\nget_max_triples(5)\n", "\n    a <- 1:n\n    a <- a\
    \ * a - a + 1\n    count <- 0\n    for (i in 1:(n-2)) {\n        for (j in (i+1):(n-1))\
    \ {\n            for (k in (j+1):n) {\n                if ((a[i] + a[j] + a[k])\
    \ %% 3 == 0) {\n                    count <- count + 1\n                }\n  \
    \          }\n        }\n    }\n    return(count)\n}\n\nget_max_triples(5)\n",
  "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for\
    \ (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] +\
    \ a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n\
    \  }\n  return(count)\n}\n", "\n    a <- 1:n\n    a <- a * a - a + 1\n    count\
    \ <- 0\n    for (i in 1:(n-2)) {\n        for (j in (i+1):(n-1)) {\n         \
    \   for (k in (j+1):n) {\n                if ((a[i] + a[j] + a[k]) %% 3 == 0)\
    \ {\n                    count <- count + 1\n                }\n            }\n\
    \        }\n    }\n    return(count)\n}\nget_max_triples(5)\n", "\n  a <- seq(1,\
    \ n)\n  a <- a * a - a + 1\n  a <- a[a %% 3 == 0]\n  return(length(a))\n}\nget_max_triples(5)\n",
  "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for\
    \ (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] +\
    \ a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n\
    \  }\n  return(count)\n}\n\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a\
    \ - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n\
    \      for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n \
    \         count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\n\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n\
    \  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n      for (k in (j+1):n)\
    \ {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <- count +\
    \ 1\n        }\n      }\n    }\n  }\n  return(count)\n}\nget_max_triples(5)\n",
  "\n  a <- c(1:n)\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n \
    \   for (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] +\
    \ a[j] + a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n\
    \    }\n  }\n  return(count)\n}\n", "\n    a <- 1:n\n    a <- a * a - a + 1\n\
    \    a <- a[a %% 3 == 0]\n    a <- a[a < n]\n    a <- a[a > 1]\n    a <- a[a %%\
    \ 2 == 0]\n    return(length(a))\n}\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n\
    \  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n      for\
    \ (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count\
    \ <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n}\n", "\n  a\
    \ <- c(1, 3, 7, 13, 21)\n  if (n > 5) {\n    for (i in 6:n) {\n      a[i] <- i\
    \ * i - i + 1\n    }\n  }\n  triples <- 0\n  for (i in 1:(n - 2)) {\n    for (j\
    \ in (i + 1):(n - 1)) {\n      for (k in (j + 1):n) {\n        if ((a[i] + a[j]\
    \ + a[k]) %% 3 == 0) {\n          triples <- triples + 1\n        }\n      }\n\
    \    }\n  }\n  return(triples)\n}\nget_max_triples(5)\n", "\n    a <- c(1, 3,\
    \ 7, 13, 21)\n    if (n > 5) {\n        for (i in 6:n) {\n            a[i] <-\
    \ i * i - i + 1\n        }\n    }\n    count <- 0\n    for (i in 1:(n - 2)) {\n\
    \        for (j in (i + 1):(n - 1)) {\n            for (k in (j + 1):n) {\n  \
    \              if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n                    count\
    \ <- count + 1\n                }\n            }\n        }\n    }\n    return(count)\n\
    }\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n\
    \  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n      for (k in (j+1):n)\
    \ {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <- count +\
    \ 1\n        }\n      }\n    }\n  }\n  return(count)\n}\n\nget_max_triples(5)\n",
  "\n  if (n < 3) {\n    return(0)\n  }\n  a <- c()\n  for (i in 1:n) {\n    a[i]\
    \ <- i * i - i + 1\n  }\n  count <- 0\n  for (i in 1:(n - 2)) {\n    for (j in\
    \ (i + 1):(n - 1)) {\n      for (k in (j + 1):n) {\n        if ((a[i] + a[j] +\
    \ a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n\
    \  }\n  return(count)\n}\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n\
    \  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n      for (k in (j+1):n)\
    \ {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <- count +\
    \ 1\n        }\n      }\n    }\n  }\n  return(count)\n}\n", "\n  a <- 1:n\n  a\
    \ <- a * a - a + 1\n  triples <- combn(a, 3)\n  sum(apply(triples, 2, function(x)\
    \ sum(x) %% 3 == 0))\n}\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a -\
    \ a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n\
    \      for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n \
    \         count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a*a - a + 1\n  count <- 0\n  for\
    \ (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n\
    \        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <- count + 1\n\
    \        }\n      }\n    }\n  }\n  return(count)\n}\n", "\n    # Write your code\
    \ here\n    a <- c()\n    for (i in 1:n) {\n        a[i] <- i * i - i + 1\n  \
    \  }\n    count <- 0\n    for (i in 1:(n-2)) {\n        for (j in (i+1):(n-1))\
    \ {\n            for (k in (j+1):n) {\n                if ((a[i] + a[j] + a[k])\
    \ %% 3 == 0) {\n                    count <- count + 1\n                }\n  \
    \          }\n        }\n    }\n    return(count)\n}\n", "\n  a <- 1:n\n  a <-\
    \ a * a - a + 1\n  triples <- combn(a, 3)\n  triples <- triples[, colSums(triples)\
    \ %% 3 == 0]\n  return(nrow(triples))\n}\n\nget_max_triples(5)\n", "\n    a <-\
    \ 1:n\n    a <- a * a - a + 1\n    count <- 0\n    for (i in 1:(n-2)) {\n    \
    \    for (j in (i+1):(n-1)) {\n            for (k in (j+1):n) {\n            \
    \    if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n                    count <- count\
    \ + 1\n                }\n            }\n        }\n    }\n    return(count)\n\
    }\n", "\n  a <- seq(1, n)\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n\
    \ - 2)) {\n    for (j in (i + 1):(n - 1)) {\n      for (k in (j + 1):n) {\n  \
    \      if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <- count + 1\n \
    \       }\n      }\n    }\n  }\n  return(count)\n}\nget_max_triples(5)\n", "\n\
    \  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for\
    \ (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] +\
    \ a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n\
    \  }\n  return(count)\n}\nget_max_triples(5)\n", "\n    a <- 1:n\n    a <- a *\
    \ a - a + 1\n    count <- 0\n    for (i in 1:(n-2)) {\n        for (j in (i+1):(n-1))\
    \ {\n            for (k in (j+1):n) {\n                if ((a[i] + a[j] + a[k])\
    \ %% 3 == 0) {\n                    count <- count + 1\n                }\n  \
    \          }\n        }\n    }\n    return(count)\n}\nget_max_triples(5)\n", "\n\
    \  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for\
    \ (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] +\
    \ a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n\
    \  }\n  return(count)\n}\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n\
    \  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n      for (k in (j+1):n)\
    \ {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <- count +\
    \ 1\n        }\n      }\n    }\n  }\n  return(count)\n}\n\nget_max_triples(5)\n",
  "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for\
    \ (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] +\
    \ a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n\
    \  }\n  return(count)\n}\nget_max_triples(5)\n", "\n  a <- c(1, 3, 7, 13, 21)\n\
    \  if (n > 5) {\n    for (i in 6:n) {\n      a[i] <- i * i - i + 1\n    }\n  }\n\
    \  count <- 0\n  for (i in 1:(n - 2)) {\n    for (j in (i + 1):(n - 1)) {\n  \
    \    for (k in (j + 1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n \
    \         count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n\
    \  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n      for (k in (j+1):n)\
    \ {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <- count +\
    \ 1\n        }\n      }\n    }\n  }\n  return(count)\n}\n\nget_max_triples(5)\n",
  "\n  a <- 1:n\n  a <- a * a - a + 1\n  triples <- combn(a, 3)\n  triples <- triples[,\
    \ colSums(triples) %% 3 == 0]\n  return(nrow(triples))\n}\n\nget_max_triples(5)\n",
  "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for\
    \ (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] +\
    \ a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n\
    \  }\n  return(count)\n}\n", "\n  a <- c()\n  for (i in 1:n) {\n    a[i] <- i\
    \ * i - i + 1\n  }\n  count <- 0\n  for (i in 1:(n - 2)) {\n    for (j in (i +\
    \ 1):(n - 1)) {\n      for (k in (j + 1):n) {\n        if ((a[i] + a[j] + a[k])\
    \ %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n  }\n\
    \  return(count)\n}\nget_max_triples(5)\n", "\n    a <- 1:n\n    a <- a * a -\
    \ a + 1\n    count <- 0\n    for (i in 1:(n-2)) {\n        for (j in (i+1):(n-1))\
    \ {\n            for (k in (j+1):n) {\n                if ((a[i] + a[j] + a[k])\
    \ %% 3 == 0) {\n                    count <- count + 1\n                }\n  \
    \          }\n        }\n    }\n    return(count)\n}\n", "\n  a <- c(1, 3, 7,\
    \ 13, 21)\n  if (n > 5) {\n    for (i in 6:n) {\n      a[i] <- i * i - i + 1\n\
    \    }\n  }\n  count <- 0\n  for (i in 1:(n - 2)) {\n    for (j in (i + 1):(n\
    \ - 1)) {\n      for (k in (j + 1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3\
    \ == 0) {\n          count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\n", "\n    a <- 1:n\n    a <- a * a - a + 1\n    triples <- combn(a, 3)\n  \
    \  triples <- triples[, triples[1, ] + triples[2, ] + triples[3, ] %% 3 == 0]\n\
    \    return(ncol(triples))\n}\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a\
    \ * a - a + 1\n  triples <- combn(a, 3)\n  triples <- triples[, colSums(triples)\
    \ %% 3 == 0]\n  return(nrow(triples))\n}\nget_max_triples(5)\n", "\n  a <- c(1,\
    \ 3, 7, 13, 21)\n  for (i in 6:n) {\n    a[i] <- i * i - i + 1\n  }\n  count <-\
    \ 0\n  for (i in 1:(n - 2)) {\n    for (j in (i + 1):(n - 1)) {\n      for (k\
    \ in (j + 1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count\
    \ <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n}\nget_max_triples(5)\n",
  "\n  a <- c(1, 3, 7, 13, 21)\n  for (i in 6:n) {\n    a[i] <- i * i - i + 1\n  }\n\
    \  count <- 0\n  for (i in 1:(n - 2)) {\n    for (j in (i + 1):(n - 1)) {\n  \
    \    for (k in (j + 1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n \
    \         count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\nget_max_triples(5)\n", "\n    a <- 1:n\n    a <- a * a - a + 1\n    count <-\
    \ 0\n    for (i in 1:(n-2)) {\n        for (j in (i+1):(n-1)) {\n            for\
    \ (k in (j+1):n) {\n                if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n  \
    \                  count <- count + 1\n                }\n            }\n    \
    \    }\n    }\n    return(count)\n}\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n\
    \  a <- a[a %% 3 == 0]\n  return(length(a))\n}\nget_max_triples(5)\n", "\n  a\
    \ <- 1:n\n  a <- a*a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j\
    \ in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k])\
    \ %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n  }\n\
    \  return(count)\n}\n\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a\
    \ + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n  \
    \    for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n   \
    \       count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\n", "\n    a <- c(1, 3, 7, 13, 21)\n    for (i in 6:n) {\n        a[i] <- i\
    \ * i - i + 1\n    }\n    count <- 0\n    for (i in 1:(n - 2)) {\n        for\
    \ (j in (i + 1):(n - 1)) {\n            for (k in (j + 1):n) {\n             \
    \   if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n                    count <- count\
    \ + 1\n                }\n            }\n        }\n    }\n    return(count)\n\
    }\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  triples <- combn(a,\
    \ 3)\n  triples <- triples[, colSums(triples) %% 3 == 0]\n  return(nrow(triples))\n\
    }\nget_max_triples(5)\n", "\n    a <- c()\n    for (i in 1:n) {\n        a[i]\
    \ <- i * i - i + 1\n    }\n    count <- 0\n    for (i in 1:(n - 2)) {\n      \
    \  for (j in (i + 1):(n - 1)) {\n            for (k in (j + 1):n) {\n        \
    \        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n                    count <- count\
    \ + 1\n                }\n            }\n        }\n    }\n    return(count)\n\
    }\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  a <- a[a %% 3\
    \ == 0]\n  return(length(a))\n}\n\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <-\
    \ a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1))\
    \ {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n\
    \          count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  triples <- combn(a,\
    \ 3)\n  sum(rowSums(triples) %% 3 == 0)\n}\nget_max_triples(5)\n", "\n  a <- 1:n\n\
    \  a <- a * a - a + 1\n  a <- a[a %% 3 == 0]\n  return(length(a))\n}\nget_max_triples(5)\n",
  "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for\
    \ (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] +\
    \ a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n\
    \  }\n  return(count)\n}\n\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a\
    \ - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n\
    \      for (k in (j+1):n) {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n \
    \         count <- count + 1\n        }\n      }\n    }\n  }\n  return(count)\n\
    }\n\nget_max_triples(5)\n", "\n  a <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n\
    \  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n      for (k in (j+1):n)\
    \ {\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <- count +\
    \ 1\n        }\n      }\n    }\n  }\n  return(count)\n}\n\nget_max_triples(5)\n",
  "\n    # Write your code here\n    a <- c()\n    for (i in 1:n) {\n        a[i]\
    \ <- i * i - i + 1\n    }\n    count <- 0\n    for (i in 1:(n-2)) {\n        for\
    \ (j in (i+1):(n-1)) {\n            for (k in (j+1):n) {\n                if ((a[i]\
    \ + a[j] + a[k]) %% 3 == 0) {\n                    count <- count + 1\n      \
    \          }\n            }\n        }\n    }\n    return(count)\n}\n", "\n  a\
    \ <- 1:n\n  a <- a * a - a + 1\n  count <- 0\n  for (i in 1:(n-2)) {\n    for\
    \ (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        if ((a[i] + a[j] +\
    \ a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n\
    \  }\n  return(count)\n}\n\nget_max_triples(5)\n", "\n  a <- c(1, 3, 7, 13, 21)\n\
    \  for (i in 6:n) {\n    a[i] <- i * i - i + 1\n  }\n  count <- 0\n  for (i in\
    \ 1:(n - 2)) {\n    for (j in (i + 1):(n - 1)) {\n      for (k in (j + 1):n) {\n\
    \        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <- count + 1\n\
    \        }\n      }\n    }\n  }\n  return(count)\n}\nget_max_triples(5)\n", "\n\
    \  a <- 1:n\n  a <- a * a - a + 1\n  triples <- combn(a, 3)\n  triples <- apply(triples,\
    \ 2, sum)\n  sum(triples %% 3 == 0)\n}\n\nget_max_triples(5)\n", "\n  a <- 1:n\n\
    \  a <- a * a - a + 1\n  triples <- combn(a, 3)\n  sum(apply(triples, 2, function(x)\
    \ sum(x) %% 3 == 0))\n}\nget_max_triples(5)\n"]
stop_tokens:
- "\n#"
- "\n```"
