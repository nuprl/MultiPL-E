name: HumanEval_6_parse_nested_parens
language: humaneval_to_r.py
prompt: "# Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n# For each of the group, output the deepest\
  \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
  # [2, 3, 1, 3]\nparse_nested_parens <- function(paren_string) {"
tests: "test_humaneval <- function() {\ncandidate <- parse_nested_parens\n    if(!identical(candidate('(()())\
  \ ((())) () ((())()())'), c(2, 3, 1, 3))){quit('no', 1)}\n    if(!identical(candidate('()\
  \ (()) ((())) (((())))'), c(1, 2, 3, 4))){quit('no', 1)}\n    if(!identical(candidate('(()(())((())))'),\
  \ c(4))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  # TODO: Write your code here\n}\n", "\n  # TODO: Implement this\
    \ function\n  # Hint: You can use the parse_parens function as a helper function\n\
    \  # Hint: You can use the unlist function to convert a list to a vector\n  #\
    \ Hint: You can use the sapply function to apply a function to each element of\
    \ a list\n  # Hint: You can use the strsplit function to split a string into a\
    \ list of strings\n  # Hint: You can use the max function to find the maximum\
    \ value in a vector\n  # Hint: You can use the which function to find the index\
    \ of the maximum value in a vector\n  # Hint: You can use the is.na function to\
    \ check if a value is NA\n  # Hint: You can use the is.nan function to check if\
    \ a value is NaN\n  # Hint: You can use the is.null function to check if a value\
    \ is NULL\n  # Hint: You can use the is.infinite function to check if a value\
    \ is infinite\n  # Hint: You can use the is.finite function to check if a value\
    \ is finite\n  # Hint: You can use the is.integer function to check if a value\
    \ is an integer\n  # Hint: You can use the is.numeric function to check if a value\
    \ is numeric\n  # Hint: You can use the is.vector function to check if a value\
    \ is a vector\n  # Hint: You can use the is.matrix function to check if a value\
    \ is a matrix\n  # Hint: You can use the is.array function to check if a value\
    \ is an array\n  # Hint: You can use the is.data.frame function to check if a\
    \ value is a data frame\n  # Hint: You can use the is.factor function to check\
    \ if a value is a factor\n  # Hint: You can use the is.list function to check\
    \ if a value is a list\n  # Hint: You can use the is.function function to check\
    \ if a value is a function\n  # Hint: You can use the is.character function to\
    \ check if a value is a character\n  # Hint: You can use the is.symbol function\
    \ to check if a value is a symbol\n  # Hint: You can use the is.environment function\
    \ to check if a value", "\n  # YOUR CODE HERE\n  paren_string <- strsplit(paren_string,\
    \ \" \")\n  paren_string <- unlist(paren_string)\n  paren_string <- strsplit(paren_string,\
    \ \"\")\n  paren_string <- unlist(paren_string)\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- p", "\n  # TODO: Write your code here\n  # Hint: You can use strsplit() to\
    \ split the string into a list of strings\n  # Hint: You can use str_count() to\
    \ count the number of parentheses in each string\n  # Hint: You can use str_count()\
    \ to count the number of parentheses in each string\n  # Hint: You can use str_count()\
    \ to count the number of parentheses in each string\n  # Hint: You can use str_count()\
    \ to count the number of parentheses in each string\n  # Hint: You can use str_count()\
    \ to count the number of parentheses in each string\n  # Hint: You can use str_count()\
    \ to count the number of parentheses in each string\n  # Hint: You can use str_count()\
    \ to count the number of parentheses in each string\n  # Hint: You can use str_count()\
    \ to count the number of parentheses in each string\n  # Hint: You can use str_count()\
    \ to count the number of parentheses in each string\n  # Hint: You can use str_count()\
    \ to count the number of parentheses in each string\n  # Hint: You can use str_count()\
    \ to count the number of parentheses in each string\n  # Hint: You can use str_count()\
    \ to count the number of parentheses in each string\n  # Hint: You can use str_count()\
    \ to count the number of parentheses in each string\n  # Hint: You can use str_count()\
    \ to count the number of parentheses in each string\n  # Hint: You can use str_count()\
    \ to count the number of parentheses in each string\n  # Hint: You can use str_count()\
    \ to count the number of parentheses in each string\n  # Hint: You can use str_count()\
    \ to count the number of parentheses in each string\n  # Hint: You can use str_count()\
    \ to count the number of parentheses in each string\n  # Hint: You can use str_count()\
    \ to count the number of parentheses in each string\n  # Hint: You can use str_count()\
    \ to count the number of parentheses in each string\n  # Hint: You can use str_count()\
    \ to count the number of parentheses in each string\n  # Hint: You can use str_count()\
    \ to count the number of", "\n  # Your code here\n}\n", "\n  # TODO: Implement\
    \ this function\n  # Hint: You can use the parse_parens function you implemented\
    \ above\n  # Hint: You can use the max function\n  # Hint: You can use the unlist\
    \ function\n  # Hint: You can use the strsplit function\n  # Hint: You can use\
    \ the sapply function\n  # Hint: You can use the parse_parens function you implemented\
    \ above\n  # Hint: You can use the max function\n  # Hint: You can use the unlist\
    \ function\n  # Hint: You can use the strsplit function\n  # Hint: You can use\
    \ the sapply function\n  # Hint: You can use the parse_parens function you implemented\
    \ above\n  # Hint: You can use the max function\n  # Hint: You can use the unlist\
    \ function\n  # Hint: You can use the strsplit function\n  # Hint: You can use\
    \ the sapply function\n  # Hint: You can use the parse_parens function you implemented\
    \ above\n  # Hint: You can use the max function\n  # Hint: You can use the unlist\
    \ function\n  # Hint: You can use the strsplit function\n  # Hint: You can use\
    \ the sapply function\n  # Hint: You can use the parse_parens function you implemented\
    \ above\n  # Hint: You can use the max function\n  # Hint: You can use the unlist\
    \ function\n  # Hint: You can use the strsplit function\n  # Hint: You can use\
    \ the sapply function\n  # Hint: You can use the parse_parens function you implemented\
    \ above\n  # Hint: You can use the max function\n  # Hint: You can use the unlist\
    \ function\n  # Hint: You can use the strsplit function\n  # Hint: You can use\
    \ the sapply function\n  # Hint: You can use the parse_parens function you implemented\
    \ above\n  # Hint: You can use the max function\n  # Hint: You can use the unlist\
    \ function\n  # Hint: You can use the strsplit function\n  # Hint: You can use\
    \ the sapply function\n  # Hint: You can use the parse_", "\n  # TODO: Implement\
    \ this function\n  # Hint: You can use the parse_parens() function from the previous\
    \ question.\n  # Hint: You can use the max() function to get the maximum value\
    \ of a vector.\n  # Hint: You can use the strsplit() function to split a string\
    \ into a vector of strings.\n  # Hint: You can use the unlist() function to convert\
    \ a list to a vector.\n  # Hint: You can use the as.numeric() function to convert\
    \ a vector to a numeric vector.\n  # Hint: You can use the is.na() function to\
    \ check if a value is NA.\n  # Hint: You can use the which() function to get the\
    \ indices of a vector that satisfy a condition.\n  # Hint: You can use the ifelse()\
    \ function to perform an if-else operation on a vector.\n  # Hint: You can use\
    \ the sum() function to sum a vector.\n  # Hint: You can use the c() function\
    \ to concatenate vectors.\n  # Hint: You can use the rep() function to repeat\
    \ a vector.\n  # Hint: You can use the length() function to get the length of\
    \ a vector.\n  # Hint: You can use the seq() function to generate a sequence of\
    \ numbers.\n  # Hint: You can use the diff() function to get the difference between\
    \ adjacent elements of a vector.\n  # Hint: You can use the which.max() function\
    \ to get the index of the maximum value of a vector.\n  # Hint: You can use the\
    \ which.min() function to get the index of the minimum value of a vector.\n  #\
    \ Hint: You can use the which.min() function to get the index of the minimum value\
    \ of a vector.\n  # Hint: You can use the which.min() function to get the index\
    \ of the minimum value of a vector.\n  # Hint: You can use the which.min() function\
    \ to get the index of the minimum value of a vector.\n  # Hint: You can use the\
    \ which.min() function to get the index of the minimum value of a vector.\n  #\
    \ Hint: You can use the which.min() function to get the index of the minimum value\
    \ of a vector.\n  # Hint:", "\n  # Your code here\n  paren_string <- strsplit(paren_string,\
    \ \" \")\n  paren_string <- unlist(paren_string)\n  paren_string <- strsplit(paren_string,\
    \ \"\")\n  paren_string <- unlist(paren_string)\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- p", "\n  # YOUR CODE HERE\n  paren_string <- strsplit(paren_string, \" \"\
    )\n  paren_string <- unlist(paren_string)\n  paren_string <- strsplit(paren_string,\
    \ \"\")\n  paren_string <- unlist(paren_string)\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- p", "\n  # Create a list of groups\n  groups <- strsplit(paren_string, '\
    \ ')[[1]]\n  # For each group, count the number of opening parentheses\n  # and\
    \ subtract the number of closing parentheses\n  # The difference is the maximum\
    \ nesting level\n  sapply(groups, function(group) {\n    sum(strsplit(group, '')[[1]]\
    \ == '(') - sum(strsplit(group, '')[[1]] == ')')\n  })\n}\nparse_nested_parens('(()())\
    \ ((())) () ((())()())')\n", "\n  # Write your code here\n  # Hint: You can use\
    \ the function parse_parens() to parse each group of parentheses.\n  # You can\
    \ use the function parse_parens() to parse each group of parentheses.\n  paren_string_split\
    \ <- strsplit(paren_string, \" \")[[1]]\n  parse_parens(paren_string_split)\n\
    }\n", "\n  # TODO: write your code here\n}\n", "\n  # TODO: Implement this function\n\
    \  # Hint: You can use the function parse_parens() defined above\n  # Hint: You\
    \ can use the function parse_parens() defined above\n  paren_string <- strsplit(paren_string,\
    \ \" \")\n  paren_string <- unlist(paren_string)\n  paren_string <- lapply(paren_string,\
    \ parse_parens)\n  paren_string <- unlist(paren_string)\n  paren_string <- lapply(paren_string,\
    \ function(x) sum(x))\n  paren_string <- unlist(paren_string)\n  return(paren_string)\n\
    }\n", "\n  # TODO: Write code here\n  # Hint: You can use strsplit() to split\
    \ the string into a list of groups\n  # Hint: You can use str_count() to count\
    \ the number of parentheses\n  # Hint: You can use str_match() to find the position\
    \ of the parentheses\n  # Hint: You can use str_sub() to extract the substring\
    \ between parentheses\n  # Hint: You can use str_detect() to check if a string\
    \ contains parentheses\n  # Hint: You can use str_replace() to remove parentheses\n\
    \  # Hint: You can use str_c() to concatenate strings\n  # Hint: You can use unlist()\
    \ to convert a list to a vector\n  # Hint: You can use max() to find the maximum\
    \ value in a vector\n  # Hint: You can use sapply() to apply a function to each\
    \ element of a list\n  # Hint: You can use paste0() to concatenate strings\n \
    \ # Hint: You can use as.numeric() to convert a string to a number\n  # Hint:\
    \ You can use sum() to sum the elements of a vector\n  # Hint: You can use which.max()\
    \ to find the index of the maximum value in a vector\n  # Hint: You can use which()\
    \ to find the indices of elements that satisfy a condition\n  # Hint: You can\
    \ use length() to find the length of a vector\n  # Hint: You can use rep() to\
    \ repeat a value a given number of times\n  # Hint: You can use c() to concatenate\
    \ vectors\n  # Hint: You can use order() to sort a vector\n  # Hint: You can use\
    \ rev() to reverse a vector\n  # Hint: You can use sort() to sort a vector\n \
    \ # Hint: You can use match() to find the position of an element in a vector\n\
    }\n", "\n  # TODO: Write your code here\n  # Hint: Use the function parse_parens()\
    \ defined above\n  # Hint: Use the function max()\n  # Hint: Use the function\
    \ unlist()\n  # Hint: Use the function strsplit()\n  # Hint: Use the function\
    \ sapply()\n  # Hint: Use the function as.numeric()\n  # Hint: Use the function\
    \ parse_parens()\n  # Hint: Use the function max()\n  # Hint: Use the function\
    \ unlist()\n  # Hint: Use the function strsplit()\n  # Hint: Use the function\
    \ sapply()\n  # Hint: Use the function as.numeric()\n  # Hint: Use the function\
    \ parse_parens()\n  # Hint: Use the function max()\n  # Hint: Use the function\
    \ unlist()\n  # Hint: Use the function strsplit()\n  # Hint: Use the function\
    \ sapply()\n  # Hint: Use the function as.numeric()\n  # Hint: Use the function\
    \ parse_parens()\n  # Hint: Use the function max()\n  # Hint: Use the function\
    \ unlist()\n  # Hint: Use the function strsplit()\n  # Hint: Use the function\
    \ sapply()\n  # Hint: Use the function as.numeric()\n  # Hint: Use the function\
    \ parse_parens()\n  # Hint: Use the function max()\n  # Hint: Use the function\
    \ unlist()\n  # Hint: Use the function strsplit()\n  # Hint: Use the function\
    \ sapply()\n  # Hint: Use the function as.numeric()\n  # Hint: Use the function\
    \ parse_parens()\n  # Hint: Use the function max()\n  # Hint: Use the function\
    \ unlist()\n  # Hint: Use the function strsplit()\n  # Hint: Use the function\
    \ sapply()\n  # Hint: Use the function as.numeric()\n  # Hint: Use the function\
    \ parse_parens()\n  # Hint: Use the function max()\n  # Hint: Use the function\
    \ unlist()\n  # Hint:", "\n  # your code here\n}\n", "\n  # Split the string into\
    \ groups\n  groups <- strsplit(paren_string, ' ')[[1]]\n  # For each group, count\
    \ the number of opening parentheses\n  # and subtract the number of closing parentheses\n\
    \  # to get the number of nested parentheses.\n  # The maximum number of nested\
    \ parentheses is the max of this vector.\n  max(sapply(groups, function(group)\
    \ {\n    sum(strsplit(group, '')[[1]] == '(') - sum(strsplit(group, '')[[1]] ==\
    \ ')')\n  }))\n}\n", "\n  # your code here\n  paren_string <- strsplit(paren_string,\
    \ \" \")[[1]]\n  paren_string <- gsub(\"\\\\(\", \"( \", paren_string)\n  paren_string\
    \ <- gsub(\"\\\\)\", \" )\", paren_string)\n  paren_string <- unlist(strsplit(paren_string,\
    \ \" \"))\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"  \"]\n  paren_string <- paren_string[paren_string != \"   \"]\n  paren_string\
    \ <- paren_string[paren_string != \"    \"]\n  paren_string <- paren_string[paren_string\
    \ != \"     \"]\n  paren_string <- paren_string[paren_string != \"      \"]\n\
    \  paren_string <- paren_string[paren_string != \"       \"]\n  paren_string <-\
    \ paren_string[paren_string != \"        \"]\n  paren_string <- paren_string[paren_string\
    \ != \"         \"]\n  paren_string <- paren_string[paren_string != \"       \
    \   \"]\n  paren_string <- paren_string[paren_string != \"           \"]\n  paren_string\
    \ <- paren_string[paren_string != \"            \"]\n  paren_string <- paren_string[paren_string\
    \ != \"             \"]\n  paren_string <- paren_string[paren_string != \"   \
    \           \"]\n  paren_string <- paren_string[paren_string != \"           \
    \    \"]\n  paren_string <- paren_string[paren_string != \"                \"\
    ]\n  paren_string <- paren_string[paren_string != \"                 \"]\n  paren_string\
    \ <- paren_string[paren_string != \"                  \"]\n  paren_string <- paren_string[paren_string\
    \ != \"                   \"]\n  paren_string <- paren_string[paren_string !=\
    \ \"                    \"]\n  paren_string <- p", "\n  # YOUR CODE HERE\n  paren_string\
    \ <- strsplit(paren_string, \" \")\n  paren_string <- unlist(paren_string)\n \
    \ paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren_string\
    \ != \")\"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren_string != \")\"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren_string\
    \ != \")\"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren", "\n  # Your code here\n}\n",
  "\n  # TODO: Write your code here\n  # Hint: You can use the function parse_parens()\
    \ defined above\n  # Hint: You can use the function max() defined above\n}\n",
  "\n  # YOUR CODE HERE\n  paren_string <- strsplit(paren_string, \" \")\n  paren_string\
    \ <- unlist(paren_string)\n  paren_string <- gsub(\"\\\\(\", \"\", paren_string)\n\
    \  paren_string <- gsub(\"\\\\)\", \"\", paren_string)\n  paren_string <- strsplit(paren_string,\
    \ \"\")\n  paren_string <- unlist(paren_string)\n  paren_string <- str_count(paren_string,\
    \ \"\\\\(\") - str_count(paren_string, \"\\\\)\")\n  paren_string <- paren_string[paren_string\
    \ > 0]\n  paren_string <- length(paren_string)\n  return(paren_string)\n}\n",
  "\n  # Your code here\n}\n", "\n  # your code here\n}\n", "\n  # YOUR CODE HERE\n\
    \  # Hint: Use the function parse_parens() defined above.\n  # Hint: Use the function\
    \ max() to find the maximum value in a vector.\n  # Hint: Use the function unlist()\
    \ to convert a list to a vector.\n  # Hint: Use the function strsplit() to split\
    \ a string into a list of strings.\n  # Hint: Use the function sapply() to apply\
    \ a function to each element of a list.\n  # Hint: Use the function as.numeric()\
    \ to convert a vector to numeric.\n  # Hint: Use the function c() to concatenate\
    \ vectors.\n  # Hint: Use the function list() to create a list.\n  # Hint: Use\
    \ the function is.null() to check if a variable is NULL.\n  # Hint: Use the function\
    \ length() to get the length of a vector.\n  # Hint: Use the function rep() to\
    \ repeat a value a given number of times.\n  # Hint: Use the function which()\
    \ to get the index of the first TRUE value in a logical vector.\n  # Hint: Use\
    \ the function sum() to sum the values in a vector.\n  # Hint: Use the function\
    \ unique() to get the unique values in a vector.\n  # Hint: Use the function sort()\
    \ to sort a vector.\n  # Hint: Use the function diff() to get the difference between\
    \ consecutive values in a vector.\n  # Hint: Use the function rev() to reverse\
    \ a vector.\n  # Hint: Use the function match() to get the index of the first\
    \ match of a value in a vector.\n  # Hint: Use the function which.max() to get\
    \ the index of the maximum value in a vector.\n  # Hint: Use the function which.min()\
    \ to get the index of the minimum value in a vector.\n  # Hint: Use the function\
    \ which.min() to get the index of the minimum value in a vector.\n  # Hint: Use\
    \ the function which.min() to get the index of the minimum value in a vector.\n\
    \  # Hint: Use the function which.min() to get the index of the minimum value\
    \ in a vector.\n  # Hint: Use the function which.min() to get the index of", "\n\
    \  # TODO: Implement this function\n  paren_string <- strsplit(paren_string, \"\
    \ \")\n  paren_string <- unlist(paren_string)\n  paren_string <- strsplit(paren_string,\
    \ \"\")\n  paren_string <- unlist(paren_string)\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_",
  "\n  # YOUR CODE HERE\n  # Hint: You can use strsplit to split the string into groups.\n\
    \  # Hint: You can use str_count to count the number of parentheses in each group.\n\
    \  # Hint: You can use str_locate to find the position of the parentheses in each\
    \ group.\n  # Hint: You can use str_sub to extract the substring between the parentheses.\n\
    \  # Hint: You can use str_detect to detect if a substring contains parentheses.\n\
    \  # Hint: You can use str_replace to remove the parentheses from a substring.\n\
    \  # Hint: You can use parse_nested_parens to recursively parse the substring.\n\
    \  # Hint: You can use unlist to convert a list of lists to a single list.\n \
    \ # Hint: You can use max to find the maximum value in a list.\n  # Hint: You\
    \ can use c to combine two lists.\n  # Hint: You can use is.na to check if a value\
    \ is NA.\n  # Hint: You can use ifelse to replace NA values with 0.\n  # Hint:\
    \ You can use as.numeric to convert a list to a vector of numbers.\n  # Hint:\
    \ You can use sum to sum the values in a vector.\n  # Hint: You can use rep to\
    \ repeat a value multiple times.\n  # Hint: You can use length to find the length\
    \ of a list.\n  # Hint: You can use which to find the indices of non-zero values\
    \ in a vector.\n  # Hint: You can use ifelse to replace the non-zero values with\
    \ 1.\n  # Hint: You can use sum to sum the values in a vector.\n  # Hint: You\
    \ can use cumsum to find the cumulative sum of a vector.\n  # Hint: You can use\
    \ max to find the maximum value in a vector.\n  # Hint: You can use which to find\
    \ the indices of the maximum value in a vector.\n  # Hint: You can use ifelse\
    \ to replace the indices of the maximum value with 1.\n  # Hint: You can use sum\
    \ to sum the values in a vector.\n  # Hint: You can use cumsum to find the cumulative\
    \ sum of", "\n  # TODO: Write code here\n}\n", "\n  # Your code here\n}\n", "\n\
    \  # Your code here\n}\n", "\n  # Your code here\n}\n", "\n  # your code here\n\
    }\n", "\n  # Your code here\n  paren_string <- strsplit(paren_string, \" \")\n\
    \  paren_string <- unlist(paren_string)\n  paren_string <- strsplit(paren_string,\
    \ \"\")\n  paren_string <- unlist(paren_string)\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren_string\
    \ != \")\"]\n  paren_string <- strsplit(paren_string, \"\")\n  paren_string <-\
    \ unlist(paren_string)\n  paren_string <- paren_string[paren_string != \"\"]\n\
    \  paren_string <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren_string != \")\"]\n  paren_string\
    \ <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- strsplit(paren_string,\
    \ \"\")\n  paren_string <- unlist(paren_string)\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren_string\
    \ != \")\"]\n  paren_string <- strsplit(paren_string, \"\")\n  paren_string <-\
    \ unlist(paren_string)\n  paren_string <- paren_string[paren_string != \"\"]\n\
    \  paren_string", "\n  # Your code here\n  # Hint: Use strsplit() to split the\
    \ string into groups.\n  # Hint: Use str_count() to count the number of parentheses\
    \ in each group.\n  # Hint: Use str_match() to find the deepest level of nesting.\n\
    \  # Hint: Use str_sub() to extract the deepest level of nesting.\n  # Hint: Use\
    \ str_replace() to remove the deepest level of nesting.\n  # Hint: Use str_replace_all()\
    \ to remove all parentheses.\n  # Hint: Use str_length() to count the number of\
    \ remaining characters.\n  # Hint: Use as.numeric() to convert the result to numeric.\n\
    \  # Hint: Use unlist() to convert the result to a vector.\n  # Hint: Use c()\
    \ to combine the results.\n}\nparse_nested_parens('(()()) ((())) () ((())()())')\n",
  "\n  # Your code here\n}\n", "\n  # YOUR CODE HERE\n  paren_string <- strsplit(paren_string,\
    \ \" \")\n  paren_string <- unlist(paren_string)\n  paren_string <- strsplit(paren_string,\
    \ \"\")\n  paren_string <- unlist(paren_string)\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren_string\
    \ != \")\"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren_string != \")\"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren_string\
    \ != \")\"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren_string != \")\"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren", "\n  # TODO: Write your code here\n}\n", "\n  # YOUR\
    \ CODE HERE\n  paren_string <- strsplit(paren_string, \" \")\n  paren_string <-\
    \ unlist(paren_string)\n  paren_string <- strsplit(paren_string, \"\")\n  paren_string\
    \ <- unlist(paren_string)\n  paren_string <- paren_string[paren_string != \"\"\
    ]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren_string != \")\"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren_string\
    \ != \")\"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren_string != \")\"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren",
  "\n  # TODO: Implement this function\n  # Hint: You may want to use the function\
    \ parse_parens() that you implemented earlier.\n  # Hint: You may want to use\
    \ the function parse_parens() that you implemented earlier.\n  # Hint: You may\
    \ want to use the function parse_parens() that you implemented earlier.\n  # Hint:\
    \ You may want to use the function parse_parens() that you implemented earlier.\n\
    \  # Hint: You may want to use the function parse_parens() that you implemented\
    \ earlier.\n  # Hint: You may want to use the function parse_parens() that you\
    \ implemented earlier.\n  # Hint: You may want to use the function parse_parens()\
    \ that you implemented earlier.\n  # Hint: You may want to use the function parse_parens()\
    \ that you implemented earlier.\n  # Hint: You may want to use the function parse_parens()\
    \ that you implemented earlier.\n  # Hint: You may want to use the function parse_parens()\
    \ that you implemented earlier.\n  # Hint: You may want to use the function parse_parens()\
    \ that you implemented earlier.\n  # Hint: You may want to use the function parse_parens()\
    \ that you implemented earlier.\n  # Hint: You may want to use the function parse_parens()\
    \ that you implemented earlier.\n  # Hint: You may want to use the function parse_parens()\
    \ that you implemented earlier.\n  # Hint: You may want to use the function parse_parens()\
    \ that you implemented earlier.\n  # Hint: You may want to use the function parse_parens()\
    \ that you implemented earlier.\n  # Hint: You may want to use the function parse_parens()\
    \ that you implemented earlier.\n  # Hint: You may want to use the function parse_parens()\
    \ that you implemented earlier.\n  # Hint: You may want to use the function parse_parens()\
    \ that you implemented earlier.\n  # Hint: You may want to use the function parse_parens()\
    \ that you implemented earlier.\n  # Hint: You may want to use the function parse_parens()\
    \ that you implemented earlier.\n  # Hint: You may want to use the function parse_parens()\
    \ that", "\n    # Write your code here\n    # You can create other functions as\
    \ well\n    # You can use the function parse_parens() defined above\n    # You\
    \ can use the function parse_nested_parens_helper() defined below\n    # You can\
    \ use the function parse_nested_parens_helper_2() defined below\n    # You can\
    \ use the function parse_nested_parens_helper_3() defined below\n    # You can\
    \ use the function parse_nested_parens_helper_4() defined below\n    # You can\
    \ use the function parse_nested_parens_helper_5() defined below\n    # You can\
    \ use the function parse_nested_parens_helper_6() defined below\n    # You can\
    \ use the function parse_nested_parens_helper_7() defined below\n    # You can\
    \ use the function parse_nested_parens_helper_8() defined below\n    # You can\
    \ use the function parse_nested_parens_helper_9() defined below\n    # You can\
    \ use the function parse_nested_parens_helper_10() defined below\n    # You can\
    \ use the function parse_nested_parens_helper_11() defined below\n    # You can\
    \ use the function parse_nested_parens_helper_12() defined below\n    # You can\
    \ use the function parse_nested_parens_helper_13() defined below\n    # You can\
    \ use the function parse_nested_parens_helper_14() defined below\n    # You can\
    \ use the function parse_nested_parens_helper_15() defined below\n    # You can\
    \ use the function parse_nested_parens_helper_16() defined below\n    # You can\
    \ use the function parse_nested_parens_helper_17() defined below\n    # You can\
    \ use the function parse_nested_parens_helper_18() defined below\n    # You can\
    \ use the function parse_nested_parens_helper_19() defined below\n    # You can\
    \ use the function parse_nested_parens_helper_20() defined below\n    # You can\
    \ use the function parse_nested_parens_helper_21()", "\n  # Your code here\n}\n",
  "\n  # TODO: Implement this function\n  # Hint: You can use the parse_parens function\
    \ to help you\n  # Hint: You can use the max function to help you\n  # Hint: You\
    \ can use the sapply function to help you\n  # Hint: You can use the strsplit\
    \ function to help you\n  # Hint: You can use the unlist function to help you\n\
    \  # Hint: You can use the as.numeric function to help you\n  # Hint: You can\
    \ use the unique function to help you\n  # Hint: You can use the which function\
    \ to help you\n  # Hint: You can use the length function to help you\n  # Hint:\
    \ You can use the sort function to help you\n  # Hint: You can use the rev function\
    \ to help you\n  # Hint: You can use the diff function to help you\n  # Hint:\
    \ You can use the which.max function to help you\n  # Hint: You can use the sum\
    \ function to help you\n  # Hint: You can use the cumsum function to help you\n\
    \  # Hint: You can use the rep function to help you\n  # Hint: You can use the\
    \ c function to help you\n  # Hint: You can use the diff function to help you\n\
    \  # Hint: You can use the which.max function to help you\n  # Hint: You can use\
    \ the sum function to help you\n  # Hint: You can use the cumsum function to help\
    \ you\n  # Hint: You can use the rep function to help you\n  # Hint: You can use\
    \ the c function to help you\n  # Hint: You can use the diff function to help\
    \ you\n  # Hint: You can use the which.max function to help you\n  # Hint: You\
    \ can use the sum function to help you\n  # Hint: You can use the cumsum function\
    \ to help you\n  # Hint: You can use the rep function to help you\n  # Hint: You\
    \ can use the c function to help you\n  # Hint: You can use the diff function\
    \ to help you\n  # Hint: You can use the which.max function to help you\n  # Hint:\
    \ You can use the sum function to", "\n  # YOUR CODE HERE\n  paren_string <- strsplit(paren_string,\
    \ \" \")\n  paren_string <- unlist(paren_string)\n  paren_string <- strsplit(paren_string,\
    \ \"\")\n  paren_string <- unlist(paren_string)\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren_string\
    \ != \")\"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren_string != \")\"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren_string\
    \ != \")\"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren_string != \")\"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren", "\n  # TODO: Your code here\n  paren_string <- strsplit(paren_string,\
    \ \" \")[[1]]\n  paren_string <- gsub(\"\\\\(\", \" ( \", paren_string)\n  paren_string\
    \ <- gsub(\"\\\\)\", \" ) \", paren_string)\n  paren_string <- strsplit(paren_string,\
    \ \" \")[[1]]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"  \"]\n  paren_string <- paren_string[paren_string != \"   \"]\n  paren_string\
    \ <- paren_string[paren_string != \"    \"]\n  paren_string <- paren_string[paren_string\
    \ != \"     \"]\n  paren_string <- paren_string[paren_string != \"      \"]\n\
    \  paren_string <- paren_string[paren_string != \"       \"]\n  paren_string <-\
    \ paren_string[paren_string != \"        \"]\n  paren_string <- paren_string[paren_string\
    \ != \"         \"]\n  paren_string <- paren_string[paren_string != \"       \
    \   \"]\n  paren_string <- paren_string[paren_string != \"           \"]\n  paren_string\
    \ <- paren_string[paren_string != \"            \"]\n  paren_string <- paren_string[paren_string\
    \ != \"             \"]\n  paren_string <- paren_string[paren_string != \"   \
    \           \"]\n  paren_string <- paren_string[paren_string != \"           \
    \    \"]\n  paren_string <- paren_string[paren_string != \"                \"\
    ]\n  paren_string <- paren_string[paren_string != \"                 \"]\n  paren_string\
    \ <- paren_string[paren_string != \"                  \"]\n  paren_string <- paren_string[paren_string\
    \ != \"                   \"]\n  paren_string <- paren_string[paren_string !=\
    \ \"                    \"]\n  paren", "\n  # YOUR CODE HERE\n  paren_string <-\
    \ strsplit(paren_string, \" \")[[1]]\n  paren_string <- gsub(\"\\\\(\", \" ( \"\
    , paren_string)\n  paren_string <- gsub(\"\\\\)\", \" ) \", paren_string)\n  paren_string\
    \ <- unlist(strsplit(paren_string, \" \"))\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"  \"]\n  paren_string <- paren_string[paren_string\
    \ != \"   \"]\n  paren_string <- paren_string[paren_string != \"    \"]\n  paren_string\
    \ <- paren_string[paren_string != \"     \"]\n  paren_string <- paren_string[paren_string\
    \ != \"      \"]\n  paren_string <- paren_string[paren_string != \"       \"]\n\
    \  paren_string <- paren_string[paren_string != \"        \"]\n  paren_string\
    \ <- paren_string[paren_string != \"         \"]\n  paren_string <- paren_string[paren_string\
    \ != \"          \"]\n  paren_string <- paren_string[paren_string != \"      \
    \     \"]\n  paren_string <- paren_string[paren_string != \"            \"]\n\
    \  paren_string <- paren_string[paren_string != \"             \"]\n  paren_string\
    \ <- paren_string[paren_string != \"              \"]\n  paren_string <- paren_string[paren_string\
    \ != \"               \"]\n  paren_string <- paren_string[paren_string != \" \
    \               \"]\n  paren_string <- paren_string[paren_string != \"       \
    \          \"]\n  paren_string <- paren_string[paren_string != \"            \
    \      \"]\n  paren_string <- paren_string[paren_string != \"                \
    \   \"]\n  paren_string <- paren_string[paren_string != \"                   \
    \ \"]\n  paren_string <-", "\n  # your code here\n}\n", "\n  # Write your code\
    \ here\n}\n", "\n  # TODO: Write code here\n  paren_string <- strsplit(paren_string,\
    \ \" \")\n  paren_string <- unlist(paren_string)\n  paren_string <- strsplit(paren_string,\
    \ \"\")\n  paren_string <- unlist(paren_string)\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_",
  "\n  # TODO: Implement this function\n  # Hint: You can use the function you wrote\
    \ in the previous question.\n  # Hint: You can use the function you wrote in the\
    \ previous question.\n  # Hint: You can use the function you wrote in the previous\
    \ question.\n  # Hint: You can use the function you wrote in the previous question.\n\
    \  # Hint: You can use the function you wrote in the previous question.\n  # Hint:\
    \ You can use the function you wrote in the previous question.\n  # Hint: You\
    \ can use the function you wrote in the previous question.\n  # Hint: You can\
    \ use the function you wrote in the previous question.\n  # Hint: You can use\
    \ the function you wrote in the previous question.\n  # Hint: You can use the\
    \ function you wrote in the previous question.\n  # Hint: You can use the function\
    \ you wrote in the previous question.\n  # Hint: You can use the function you\
    \ wrote in the previous question.\n  # Hint: You can use the function you wrote\
    \ in the previous question.\n  # Hint: You can use the function you wrote in the\
    \ previous question.\n  # Hint: You can use the function you wrote in the previous\
    \ question.\n  # Hint: You can use the function you wrote in the previous question.\n\
    \  # Hint: You can use the function you wrote in the previous question.\n  # Hint:\
    \ You can use the function you wrote in the previous question.\n  # Hint: You\
    \ can use the function you wrote in the previous question.\n  # Hint: You can\
    \ use the function you wrote in the previous question.\n  # Hint: You can use\
    \ the function you wrote in the previous question.\n  # Hint: You can use the\
    \ function you wrote in the previous question.\n  # Hint: You can use the function\
    \ you wrote in the previous question.\n  # Hint: You can use the function you\
    \ wrote in the previous question.\n  # Hint: You can use the function you wrote\
    \ in the previous question.\n  # Hint: You can use the function you wrote in the\
    \ previous question.\n  # Hint: You can use the function you wrote in the previous\
    \ question.\n  # Hint: You can use the function you wrote in the previous", "\n\
    \  # YOUR CODE HERE\n  paren_string <- strsplit(paren_string, \" \")[[1]]\n  paren_string\
    \ <- unlist(lapply(paren_string, function(x) {\n    x <- strsplit(x, \"\")[[1]]\n\
    \    x <- x[x != \"\"]\n    x\n  }))\n  paren_string <- unlist(lapply(paren_string,\
    \ function(x) {\n    x <- strsplit(x, \"\")[[1]]\n    x <- x[x != \"\"]\n    x\n\
    \  }))\n  paren_string <- unlist(lapply(paren_string, function(x) {\n    x <-\
    \ strsplit(x, \"\")[[1]]\n    x <- x[x != \"\"]\n    x\n  }))\n  paren_string\
    \ <- unlist(lapply(paren_string, function(x) {\n    x <- strsplit(x, \"\")[[1]]\n\
    \    x <- x[x != \"\"]\n    x\n  }))\n  paren_string <- unlist(lapply(paren_string,\
    \ function(x) {\n    x <- strsplit(x, \"\")[[1]]\n    x <- x[x != \"\"]\n    x\n\
    \  }))\n  paren_string <- unlist(lapply(paren_string, function(x) {\n    x <-\
    \ strsplit(x, \"\")[[1]]\n    x <- x[x != \"\"]\n    x\n  }))\n  paren_string\
    \ <- unlist(lapply(paren_string, function(x) {\n    x <- strsplit(x, \"\")[[1]]\n\
    \    x <- x[x != \"\"]\n    x\n  }))\n  paren_string <- unlist(lapply(paren_string,\
    \ function(x) {\n    x <- strsplit(x, \"\")[[1]]\n    x <- x[x != \"\"]\n    x\n\
    \  }))\n  paren_string <- unlist(lapply(paren_string, function(x) {\n    x <-\
    \ strsplit(x, \"\")[[1]]\n    x <- x[x != \"\"]\n    x\n  }))\n  paren_string\
    \ <- un", "\n  # Your code here\n  # Hint: Use strsplit() and str_count()\n  #\
    \ Hint: Use unlist() to convert a list to a vector\n  # Hint: Use sapply() to\
    \ apply a function to each element of a vector\n}\n", "\n  # your code here\n\
    }\n", "\n  # TODO: Write code here\n  # Hint: Use strsplit() and str_count()\n\
    \  # Hint: Use sapply()\n  # Hint: Use str_match()\n  # Hint: Use max()\n  # Hint:\
    \ Use str_sub()\n  # Hint: Use str_length()\n  # Hint: Use str_sub()\n  # Hint:\
    \ Use str_length()\n  # Hint: Use str_sub()\n  # Hint: Use str_length()\n  # Hint:\
    \ Use str_sub()\n  # Hint: Use str_length()\n  # Hint: Use str_sub()\n  # Hint:\
    \ Use str_length()\n  # Hint: Use str_sub()\n  # Hint: Use str_length()\n  # Hint:\
    \ Use str_sub()\n  # Hint: Use str_length()\n  # Hint: Use str_sub()\n  # Hint:\
    \ Use str_length()\n  # Hint: Use str_sub()\n  # Hint: Use str_length()\n  # Hint:\
    \ Use str_sub()\n  # Hint: Use str_length()\n  # Hint: Use str_sub()\n  # Hint:\
    \ Use str_length()\n  # Hint: Use str_sub()\n  # Hint: Use str_length()\n  # Hint:\
    \ Use str_sub()\n  # Hint: Use str_length()\n  # Hint: Use str_sub()\n  # Hint:\
    \ Use str_length()\n  # Hint: Use str_sub()\n  # Hint: Use str_length()\n  # Hint:\
    \ Use str_sub()\n  # Hint: Use str_length()\n  # Hint: Use str_sub()\n  # Hint:\
    \ Use str_length()\n  # Hint: Use str_sub()\n  # Hint: Use str_length()\n  # Hint:\
    \ Use str_sub()\n  # Hint: Use str_length()\n  # Hint: Use str_sub()\n  # Hint:\
    \ Use str_length()\n  # Hint: Use str_sub()\n  # Hint", "\n  # Your code here\n\
    \  # Hint: use strsplit to split the string into groups\n  # Hint: use str_count\
    \ to count the number of parentheses\n  # Hint: use str_match to match the parentheses\n\
    \  # Hint: use str_extract to extract the deepest level of nesting\n  # Hint:\
    \ use str_replace_all to replace the deepest level of nesting with empty string\n\
    \  # Hint: use str_count to count the number of parentheses again\n  # Hint: use\
    \ as.numeric to convert the result to numeric\n}\n", "\n  # Your code here\n \
    \ # Hint: You can use strsplit() to split the string into groups.\n  # Hint: You\
    \ can use str_count() to count the number of parentheses.\n  # Hint: You can use\
    \ str_match() to match the parentheses.\n  # Hint: You can use str_sub() to extract\
    \ the matched parentheses.\n  # Hint: You can use str_detect() to detect if there\
    \ are parentheses in the string.\n  # Hint: You can use str_replace() to replace\
    \ the parentheses with empty string.\n  # Hint: You can use str_length() to count\
    \ the length of the string.\n  # Hint: You can use str_replace_all() to replace\
    \ all the parentheses with empty string.\n  # Hint: You can use str_replace_all()\
    \ to replace all the empty string with parentheses.\n  # Hint: You can use str_replace_all()\
    \ to replace all the parentheses with empty string.\n  # Hint: You can use str_replace_all()\
    \ to replace all the empty string with parentheses.\n  # Hint: You can use str_replace_all()\
    \ to replace all the parentheses with empty string.\n  # Hint: You can use str_replace_all()\
    \ to replace all the empty string with parentheses.\n  # Hint: You can use str_replace_all()\
    \ to replace all the parentheses with empty string.\n  # Hint: You can use str_replace_all()\
    \ to replace all the empty string with parentheses.\n  # Hint: You can use str_replace_all()\
    \ to replace all the parentheses with empty string.\n  # Hint: You can use str_replace_all()\
    \ to replace all the empty string with parentheses.\n  # Hint: You can use str_replace_all()\
    \ to replace all the parentheses with empty string.\n  # Hint: You can use str_replace_all()\
    \ to replace all the empty string with parentheses.\n  # Hint: You can use str_replace_all()\
    \ to replace all the parentheses with empty string.\n  # Hint: You can use str_replace_all()\
    \ to replace all the empty string with parentheses.\n  # Hint: You can use str_replace_all()\
    \ to replace all the parentheses with empty string.\n  #", "\n  # TODO: Write\
    \ your code here\n}\n", "\n  # YOUR CODE HERE\n  paren_string = strsplit(paren_string,\
    \ \" \")\n  paren_string = unlist(paren_string)\n  paren_string = gsub(\"\\\\\
    (\", \" ( \", paren_string)\n  paren_string = gsub(\"\\\\)\", \" ) \", paren_string)\n\
    \  paren_string = strsplit(paren_string, \" \")\n  paren_string = unlist(paren_string)\n\
    \  paren_string = paren_string[paren_string != \"\"]\n  paren_string = paren_string[paren_string\
    \ != \" \"]\n  paren_string = paren_string[paren_string != \"  \"]\n  paren_string\
    \ = paren_string[paren_string != \"   \"]\n  paren_string = paren_string[paren_string\
    \ != \"    \"]\n  paren_string = paren_string[paren_string != \"     \"]\n  paren_string\
    \ = paren_string[paren_string != \"      \"]\n  paren_string = paren_string[paren_string\
    \ != \"       \"]\n  paren_string = paren_string[paren_string != \"        \"\
    ]\n  paren_string = paren_string[paren_string != \"         \"]\n  paren_string\
    \ = paren_string[paren_string != \"          \"]\n  paren_string = paren_string[paren_string\
    \ != \"           \"]\n  paren_string = paren_string[paren_string != \"      \
    \      \"]\n  paren_string = paren_string[paren_string != \"             \"]\n\
    \  paren_string = paren_string[paren_string != \"              \"]\n  paren_string\
    \ = paren_string[paren_string != \"               \"]\n  paren_string = paren_string[paren_string\
    \ != \"                \"]\n  paren_string = paren_string[paren_string != \" \
    \                \"]\n  paren_string = paren_string[paren_string != \"       \
    \           \"]\n  paren_string = paren_string[paren_string != \"            \
    \       \"]\n  paren_", "\n  # TODO: Implement this function\n  # Hint: You can\
    \ use the parse_parens function as a helper function\n  # Hint: You can use the\
    \ unlist function to convert a list to a vector\n  # Hint: You can use the sapply\
    \ function to apply a function to each element of a list\n  # Hint: You can use\
    \ the strsplit function to split a string into a list of strings\n  # Hint: You\
    \ can use the max function to find the maximum value of a vector\n  # Hint: You\
    \ can use the is.na function to check if a value is NA\n  # Hint: You can use\
    \ the which function to find the index of a value in a vector\n  # Hint: You can\
    \ use the is.na function to check if a value is NA\n  # Hint: You can use the\
    \ which function to find the index of a value in a vector\n  # Hint: You can use\
    \ the is.na function to check if a value is NA\n  # Hint: You can use the which\
    \ function to find the index of a value in a vector\n  # Hint: You can use the\
    \ is.na function to check if a value is NA\n  # Hint: You can use the which function\
    \ to find the index of a value in a vector\n  # Hint: You can use the is.na function\
    \ to check if a value is NA\n  # Hint: You can use the which function to find\
    \ the index of a value in a vector\n  # Hint: You can use the is.na function to\
    \ check if a value is NA\n  # Hint: You can use the which function to find the\
    \ index of a value in a vector\n  # Hint: You can use the is.na function to check\
    \ if a value is NA\n  # Hint: You can use the which function to find the index\
    \ of a value in a vector\n  # Hint: You can use the is.na function to check if\
    \ a value is NA\n  # Hint: You can use the which function to find the index of\
    \ a value in a vector\n  # Hint: You can use the is.na function to check if a\
    \ value is NA\n  # Hint: You can use the which function to find the index of a\
    \ value in a vector\n  # Hint: You can use the", "\n  # TODO: Write code here\n\
    }\n", "\n  # YOUR CODE HERE\n  return(c(0,0,0,0))\n}\n", "\n  # Split the string\
    \ into groups of parentheses\n  paren_groups <- strsplit(paren_string, ' ')[[1]]\n\
    \  # For each group, count the maximum number of nested parentheses\n  max_nested_parens\
    \ <- sapply(paren_groups, function(group) {\n    # Split the group into individual\
    \ parentheses\n    parens <- strsplit(group, '')[[1]]\n    # Count the number\
    \ of nested parentheses\n    count <- 0\n    max_count <- 0\n    for (paren in\
    \ parens) {\n      if (paren == '(') {\n        count <- count + 1\n      } else\
    \ if (paren == ')') {\n        count <- count - 1\n      }\n      if (count >\
    \ max_count) {\n        max_count <- count\n      }\n    }\n    max_count\n  })\n\
    \  return(max_nested_parens)\n}\n", "\n  # YOUR CODE HERE\n  paren_string <- strsplit(paren_string,\
    \ \" \")[[1]]\n  paren_string <- strsplit(paren_string, \"\")\n  paren_string\
    \ <- lapply(paren_string, function(x) {\n    x <- unlist(x)\n    x <- x[x != \"\
    \"]\n    x <- x[x != \" \"]\n    x\n  })\n  paren_string <- lapply(paren_string,\
    \ function(x) {\n    count <- 0\n    max <- 0\n    for (i in 1:length(x)) {\n\
    \      if (x[i] == \"(\") {\n        count <- count + 1\n      } else {\n    \
    \    count <- count - 1\n      }\n      if (count > max) {\n        max <- count\n\
    \      }\n    }\n    max\n  })\n  paren_string\n}\n", "\n  # Write your code here\n\
    }", "\n  # YOUR CODE HERE\n  paren_string = strsplit(paren_string, \" \")\n  paren_string\
    \ = unlist(paren_string)\n  paren_string = sapply(paren_string, function(x) {\n\
    \    x = strsplit(x, \"\")\n    x = unlist(x)\n    x = sapply(x, function(y) {\n\
    \      if (y == \"(\") {\n        return(1)\n      } else if (y == \")\") {\n\
    \        return(-1)\n      } else {\n        return(0)\n      }\n    })\n    x\
    \ = cumsum(x)\n    x = max(x)\n    return(x)\n  })\n  return(paren_string)\n}\n",
  "\n  # your code here\n}\n", "\n  # YOUR CODE HERE\n  paren_string <- strsplit(paren_string,\
    \ \" \")[[1]]\n  paren_string <- gsub(\"\\\\(\", \" ( \", paren_string)\n  paren_string\
    \ <- gsub(\"\\\\)\", \" ) \", paren_string)\n  paren_string <- unlist(strsplit(paren_string,\
    \ \" \"))\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"  \"]\n  paren_string <- paren_string[paren_string != \"   \"]\n  paren_string\
    \ <- paren_string[paren_string != \"    \"]\n  paren_string <- paren_string[paren_string\
    \ != \"     \"]\n  paren_string <- paren_string[paren_string != \"      \"]\n\
    \  paren_string <- paren_string[paren_string != \"       \"]\n  paren_string <-\
    \ paren_string[paren_string != \"        \"]\n  paren_string <- paren_string[paren_string\
    \ != \"         \"]\n  paren_string <- paren_string[paren_string != \"       \
    \   \"]\n  paren_string <- paren_string[paren_string != \"           \"]\n  paren_string\
    \ <- paren_string[paren_string != \"            \"]\n  paren_string <- paren_string[paren_string\
    \ != \"             \"]\n  paren_string <- paren_string[paren_string != \"   \
    \           \"]\n  paren_string <- paren_string[paren_string != \"           \
    \    \"]\n  paren_string <- paren_string[paren_string != \"                \"\
    ]\n  paren_string <- paren_string[paren_string != \"                 \"]\n  paren_string\
    \ <- paren_string[paren_string != \"                  \"]\n  paren_string <- paren_string[paren_string\
    \ != \"                   \"]\n  paren_string <- paren_string[paren_string !=\
    \ \"                    \"]\n  paren_string <-", "\n  # TODO: Write code here\n\
    \  # Hint: Use strsplit() to split the string into a list of strings.\n  # Hint:\
    \ Use parse_parens() to parse each of the string in the list.\n  # Hint: Use unlist()\
    \ to convert the list of integers to a vector.\n  # Hint: Use as.integer() to\
    \ convert the vector of characters to a vector of integers.\n  # Hint: Use return()\
    \ to return the vector of integers.\n}\n", "\n  # TODO: Implement this function\n\
    \  # Hint: You can use strsplit() to split the string into a vector of strings\n\
    \  # Hint: You can use str_count() to count the number of parentheses in each\
    \ string\n  # Hint: You can use str_match() to find the first match of a pattern\
    \ in a string\n  # Hint: You can use str_sub() to extract a substring from a string\n\
    \  # Hint: You can use str_detect() to detect if a pattern is present in a string\n\
    \  # Hint: You can use str_replace() to replace a pattern in a string\n  # Hint:\
    \ You can use str_replace_all() to replace all occurrences of a pattern in a string\n\
    \  # Hint: You can use str_trim() to trim whitespace from the start and end of\
    \ a string\n  # Hint: You can use str_c() to concatenate strings\n  # Hint: You\
    \ can use str_length() to get the length of a string\n  # Hint: You can use str_subset()\
    \ to get a vector of strings that contain a pattern\n  # Hint: You can use str_dup()\
    \ to duplicate a string\n  # Hint: You can use str_replace_all() to replace all\
    \ occurrences of a pattern in a string\n  # Hint: You can use str_replace_all()\
    \ to replace all occurrences of a pattern in a string\n  # Hint: You can use str_replace_all()\
    \ to replace all occurrences of a pattern in a string\n  # Hint: You can use str_replace_all()\
    \ to replace all occurrences of a pattern in a string\n  # Hint: You can use str_replace_all()\
    \ to replace all occurrences of a pattern in a string\n  # Hint: You can use str_replace_all()\
    \ to replace all occurrences of a pattern in a string\n  # Hint: You can use str_replace_all()\
    \ to replace all occurrences of a pattern in a string\n  # Hint: You can use str_replace_all()\
    \ to replace all occurrences of a pattern in a string\n  # Hint: You can use str_replace_all()\
    \ to replace all occurrences of a pattern in a string\n  # Hint: You can use str_replace_all",
  "\n  # Write your code here\n}\n", "\n  # TODO: Fill in the function body\n  # Hint:\
    \ You can use the function parse_parens() defined above\n  # Hint: You can use\
    \ the function max()\n  # Hint: You can use the function strsplit()\n  # Hint:\
    \ You can use the function sapply()\n  # Hint: You can use the function unlist()\n\
    \  # Hint: You can use the function as.integer()\n  # Hint: You can use the function\
    \ is.na()\n  # Hint: You can use the function which()\n  # Hint: You can use the\
    \ function length()\n  # Hint: You can use the function unique()\n  # Hint: You\
    \ can use the function sort()\n  # Hint: You can use the function rev()\n  # Hint:\
    \ You can use the function diff()\n  # Hint: You can use the function which.max()\n\
    \  # Hint: You can use the function sum()\n  # Hint: You can use the function\
    \ cumsum()\n  # Hint: You can use the function rep()\n  # Hint: You can use the\
    \ function seq()\n  # Hint: You can use the function seq_along()\n  # Hint: You\
    \ can use the function rep_len()\n  # Hint: You can use the function c()\n  #\
    \ Hint: You can use the function match()\n  # Hint: You can use the function %in%\n\
    \  # Hint: You can use the function which()\n  # Hint: You can use the function\
    \ order()\n  # Hint: You can use the function table()\n  # Hint: You can use the\
    \ function names()\n  # Hint: You can use the function as.numeric()\n  # Hint:\
    \ You can use the function as.character()\n  # Hint: You can use the function\
    \ as.vector()\n  # Hint: You can use the function as.list()\n  # Hint: You can\
    \ use the function as.data.frame()\n  # Hint: You can use the function as.matrix()\n\
    \  # Hint: You can use the function as.array()\n  # Hint: You can use the function\
    \ as.logical()\n ", "\n  # Your code here\n  # Hint: Use strsplit to split the\
    \ string into groups.\n  # Hint: Use str_count to count the number of parentheses.\n\
    \  # Hint: Use str_match to match the parentheses.\n  # Hint: Use str_replace\
    \ to remove the parentheses.\n  # Hint: Use str_length to count the number of\
    \ characters.\n  # Hint: Use str_detect to detect if there are parentheses.\n\
    \  # Hint: Use str_sub to extract the parentheses.\n  # Hint: Use str_replace_all\
    \ to replace the parentheses.\n  # Hint: Use str_split to split the string into\
    \ characters.\n  # Hint: Use str_c to combine the characters.\n  # Hint: Use str_replace_all\
    \ to replace the parentheses.\n  # Hint: Use str_replace_all to replace the parentheses.\n\
    \  # Hint: Use str_replace_all to replace the parentheses.\n  # Hint: Use str_replace_all\
    \ to replace the parentheses.\n  # Hint: Use str_replace_all to replace the parentheses.\n\
    \  # Hint: Use str_replace_all to replace the parentheses.\n  # Hint: Use str_replace_all\
    \ to replace the parentheses.\n  # Hint: Use str_replace_all to replace the parentheses.\n\
    \  # Hint: Use str_replace_all to replace the parentheses.\n  # Hint: Use str_replace_all\
    \ to replace the parentheses.\n  # Hint: Use str_replace_all to replace the parentheses.\n\
    \  # Hint: Use str_replace_all to replace the parentheses.\n  # Hint: Use str_replace_all\
    \ to replace the parentheses.\n  # Hint: Use str_replace_all to replace the parentheses.\n\
    \  # Hint: Use str_replace_all to replace the parentheses.\n  # Hint: Use str_replace_all\
    \ to replace the parentheses.\n  # Hint: Use str_replace_all to replace the parentheses.\n\
    \  # Hint: Use str_replace_all to replace the parentheses.\n  # Hint: Use str_replace_all\
    \ to replace the parentheses.\n  # Hint: Use str_replace_all to replace the parentheses.\n\
    \  #", "\n  # Your code here\n}\n", "\n  # Your code here\n  # Hint: Use strsplit()\
    \ to split the string into a list of strings, each representing a group of parentheses.\n\
    \  # Then use parse_parens() on each of the strings in the list.\n  # You can\
    \ use the unlist() function to convert the list of lists to a vector.\n  # You\
    \ can use the sapply() function to apply a function to each element of a list.\n\
    \  # You can use the c() function to concatenate vectors.\n  # You can use the\
    \ list() function to create a list.\n  # You can use the append() function to\
    \ append an element to a list.\n  # You can use the length() function to get the\
    \ length of a vector.\n  # You can use the max() function to get the maximum value\
    \ of a vector.\n  # You can use the which.max() function to get the index of the\
    \ maximum value of a vector.\n  # You can use the which() function to get the\
    \ indices of elements that satisfy a condition.\n  # You can use the which.min()\
    \ function to get the index of the minimum value of a vector.\n  # You can use\
    \ the which() function to get the indices of elements that satisfy a condition.\n\
    \  # You can use the which.max() function to get the index of the maximum value\
    \ of a vector.\n  # You can use the which() function to get the indices of elements\
    \ that satisfy a condition.\n  # You can use the which.max() function to get the\
    \ index of the maximum value of a vector.\n  # You can use the which() function\
    \ to get the indices of elements that satisfy a condition.\n  # You can use the\
    \ which.max() function to get the index of the maximum value of a vector.\n  #\
    \ You can use the which() function to get the indices of elements that satisfy\
    \ a condition.\n  # You can use the which.max() function to get the index of the\
    \ maximum value of a vector.\n  # You can use the which() function to get the\
    \ indices of elements that satisfy a condition.\n  # You can use the which.max()\
    \ function to get the index of the maximum value of a vector.\n  # You can use\
    \ the which() function to get the indices of elements that satisfy a condition.\n\
    \  # You can use the which.max() function to get", "\n  # YOUR CODE HERE\n  paren_string\
    \ <- strsplit(paren_string, \" \")[[1]]\n  paren_string <- gsub(\"\\\\(\", \"\
    \ ( \", paren_string)\n  paren_string <- gsub(\"\\\\)\", \" ) \", paren_string)\n\
    \  paren_string <- strsplit(paren_string, \" \")[[1]]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"  \"]\n  paren_string <- paren_string[paren_string\
    \ != \"   \"]\n  paren_string <- paren_string[paren_string != \"    \"]\n  paren_string\
    \ <- paren_string[paren_string != \"     \"]\n  paren_string <- paren_string[paren_string\
    \ != \"      \"]\n  paren_string <- paren_string[paren_string != \"       \"]\n\
    \  paren_string <- paren_string[paren_string != \"        \"]\n  paren_string\
    \ <- paren_string[paren_string != \"         \"]\n  paren_string <- paren_string[paren_string\
    \ != \"          \"]\n  paren_string <- paren_string[paren_string != \"      \
    \     \"]\n  paren_string <- paren_string[paren_string != \"            \"]\n\
    \  paren_string <- paren_string[paren_string != \"             \"]\n  paren_string\
    \ <- paren_string[paren_string != \"              \"]\n  paren_string <- paren_string[paren_string\
    \ != \"               \"]\n  paren_string <- paren_string[paren_string != \" \
    \               \"]\n  paren_string <- paren_string[paren_string != \"       \
    \          \"]\n  paren_string <- paren_string[paren_string != \"            \
    \      \"]\n  paren_string <- paren_string[paren_string != \"                \
    \   \"]\n  paren_string <- paren_string[paren_string != \"                   \
    \ \"]\n  paren_string <-", "\n  # Your code here\n  paren_string <- strsplit(paren_string,\
    \ \" \")\n  paren_string <- unlist(paren_string)\n  paren_string <- lapply(paren_string,\
    \ function(x) {\n    x <- strsplit(x, \"\")\n    x <- unlist(x)\n    x <- x[x\
    \ != \"\"]\n    x <- paste(x, collapse = \"\")\n    x <- strsplit(x, \"\")\n \
    \   x <- unlist(x)\n    x <- x[x != \"\"]\n    x <- paste(x, collapse = \"\")\n\
    \    x <- strsplit(x, \"\")\n    x <- unlist(x)\n    x <- x[x != \"\"]\n    x\
    \ <- paste(x, collapse = \"\")\n    x <- strsplit(x, \"\")\n    x <- unlist(x)\n\
    \    x <- x[x != \"\"]\n    x <- paste(x, collapse = \"\")\n    x <- strsplit(x,\
    \ \"\")\n    x <- unlist(x)\n    x <- x[x != \"\"]\n    x <- paste(x, collapse\
    \ = \"\")\n    x <- strsplit(x, \"\")\n    x <- unlist(x)\n    x <- x[x != \"\"\
    ]\n    x <- paste(x, collapse = \"\")\n    x <- strsplit(x, \"\")\n    x <- unlist(x)\n\
    \    x <- x[x != \"\"]\n    x <- paste(x, collapse = \"\")\n    x <- strsplit(x,\
    \ \"\")\n    x <- unlist(x)\n    x <- x[x != \"\"]\n    x <- paste(x, collapse\
    \ = \"\")\n    x <- strsplit(x, \"\")\n    x <- unlist(x)\n    x <- x[x != \"\"\
    ]\n    x <- paste(x, collapse = \"\")\n    x <- strsplit(x, \"\")\n    x <- unlist(x)\n\
    \    x <- x[x != \"\"]\n    x <- paste(x, collapse = \"\")\n    x <- strsplit(x,\
    \ \"\")\n    x <- unlist(x)\n    x <- x[x != \"\"]\n    x <- paste", "\n  # Your\
    \ code here\n  # Hint: use strsplit to split the string into groups\n  # Hint:\
    \ use str_count to count the number of parentheses\n  # Hint: use str_extract_all\
    \ to extract the deepest level of nesting\n  # Hint: use str_replace_all to remove\
    \ the deepest level of nesting\n  # Hint: use str_count again to count the number\
    \ of parentheses\n  # Hint: use unlist to convert the list to a vector\n  # Hint:\
    \ use as.numeric to convert the character vector to a numeric vector\n}\n", "\n\
    \  # YOUR CODE HERE\n  paren_string <- strsplit(paren_string, \" \")\n  paren_string\
    \ <- unlist(paren_string)\n  paren_string <- strsplit(paren_string, \"\")\n  paren_string\
    \ <- unlist(paren_string)\n  paren_string <- paren_string[paren_string != \"\"\
    ]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren_string != \")\"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren_string\
    \ != \")\"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren_string != \")\"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren",
  "\n  # TODO: Implement this function\n  # Hint: You can use strsplit to split the\
    \ string into groups\n  # Hint: You can use str_count to count the number of parentheses\n\
    \  # Hint: You can use str_match to find the deepest level of nesting\n  # Hint:\
    \ You can use sapply to apply a function to each group\n  # Hint: You can use\
    \ max to find the maximum value in a vector\n  # Hint: You can use paste to combine\
    \ a vector into a string\n  # Hint: You can use str_c to combine a vector into\
    \ a string\n  # Hint: You can use unlist to convert a list to a vector\n  # Hint:\
    \ You can use as.numeric to convert a character to a number\n  # Hint: You can\
    \ use as.character to convert a number to a character\n  # Hint: You can use as.integer\
    \ to convert a number to an integer\n  # Hint: You can use as.numeric to convert\
    \ a character to a number\n  # Hint: You can use as.character to convert a number\
    \ to a character\n  # Hint: You can use as.integer to convert a number to an integer\n\
    \  # Hint: You can use as.numeric to convert a character to a number\n  # Hint:\
    \ You can use as.character to convert a number to a character\n  # Hint: You can\
    \ use as.integer to convert a number to an integer\n  # Hint: You can use as.numeric\
    \ to convert a character to a number\n  # Hint: You can use as.character to convert\
    \ a number to a character\n  # Hint: You can use as.integer to convert a number\
    \ to an integer\n  # Hint: You can use as.numeric to convert a character to a\
    \ number\n  # Hint: You can use as.character to convert a number to a character\n\
    \  # Hint: You can use as.integer to convert a number to an integer\n  # Hint:\
    \ You can use as.numeric to convert a character to a number\n  # Hint: You can\
    \ use as.character to convert a number to a character\n  # Hint: You can use as.integer\
    \ to convert a number to an integer\n  # Hint: You can use", "\n  # TODO: Write\
    \ code here\n  # Hint: Use the function you wrote in the previous question\n \
    \ # Hint: Use the function you wrote in the previous question\n  paren_string\
    \ <- strsplit(paren_string, \" \")[[1]]\n  paren_string <- sapply(paren_string,\
    \ parse_parens)\n  return(paren_string)\n}\n", "\n  # write your code here\n \
    \ paren_string <- strsplit(paren_string, \" \")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- gsub(\"\\\\(\", \"\", paren_string)\n  paren_string <- gsub(\"\
    \\\\)\", \"\", paren_string)\n  paren_string <- strsplit(paren_string, \"\")\n\
    \  paren_string <- unlist(paren_string)\n  paren_string <- gsub(\"\", \"\", paren_string)\n\
    \  paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- gsub(\"\", \"\", paren_string)\n  paren_string <- strsplit(paren_string,\
    \ \"\")\n  paren_string <- unlist(paren_string)\n  paren_string <- gsub(\"\",\
    \ \"\", paren_string)\n  paren_string <- strsplit(paren_string, \"\")\n  paren_string\
    \ <- unlist(paren_string)\n  paren_string <- gsub(\"\", \"\", paren_string)\n\
    \  paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- gsub(\"\", \"\", paren_string)\n  paren_string <- strsplit(paren_string,\
    \ \"\")\n  paren_string <- unlist(paren_string)\n  paren_string <- gsub(\"\",\
    \ \"\", paren_string)\n  paren_string <- strsplit(paren_string, \"\")\n  paren_string\
    \ <- unlist(paren_string)\n  paren_string <- gsub(\"\", \"\", paren_string)\n\
    \  paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- gsub(\"\", \"\", paren_string)\n  paren_string <- strsplit(paren_string,\
    \ \"\")\n  paren_string <- unlist(paren_string)\n  paren_string <- gsub(\"\",\
    \ \"\", paren_string)\n ", "\n  # Your code here\n}\n", "\n  # Your code here\n\
    \  paren_string <- strsplit(paren_string, ' ')\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- gsub('[()]', '', paren_string)\n  paren_string <- strsplit(paren_string,\
    \ '')\n  paren_string <- unlist(paren_string)\n  paren_string <- gsub('[^()]',\
    \ '', paren_string)\n  paren_string <- strsplit(paren_string, '')\n  paren_string\
    \ <- unlist(paren_string)\n  paren_string <- gsub('[^()]', '', paren_string)\n\
    \  paren_string <- strsplit(paren_string, '')\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- gsub('[^()]', '', paren_string)\n  paren_string <- strsplit(paren_string,\
    \ '')\n  paren_string <- unlist(paren_string)\n  paren_string <- gsub('[^()]',\
    \ '', paren_string)\n  paren_string <- strsplit(paren_string, '')\n  paren_string\
    \ <- unlist(paren_string)\n  paren_string <- gsub('[^()]', '', paren_string)\n\
    \  paren_string <- strsplit(paren_string, '')\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- gsub('[^()]', '', paren_string)\n  paren_string <- strsplit(paren_string,\
    \ '')\n  paren_string <- unlist(paren_string)\n  paren_string <- gsub('[^()]',\
    \ '', paren_string)\n  paren_string <- strsplit(paren_string, '')\n  paren_string\
    \ <- unlist(paren_string)\n  paren_string <- gsub('[^()]', '', paren_string)\n\
    \  paren_string <- strsplit(paren_string, '')\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <-", "\n  # YOUR CODE HERE\n  paren_string <- strsplit(paren_string,\
    \ \" \")[[1]]\n  paren_string <- strsplit(paren_string, \"\")\n  paren_string\
    \ <- lapply(paren_string, function(x) {\n    x <- x[x != \"\"]\n    x <- paste(x,\
    \ collapse = \"\")\n    x <- strsplit(x, \"\")[[1]]\n    x\n  })\n  paren_string\
    \ <- lapply(paren_string, function(x) {\n    count <- 0\n    max <- 0\n    for\
    \ (i in 1:length(x)) {\n      if (x[i] == \"(\") {\n        count <- count + 1\n\
    \      } else {\n        count <- count - 1\n      }\n      if (count > max) {\n\
    \        max <- count\n      }\n    }\n    max\n  })\n  paren_string\n}\n", "\n\
    \  # YOUR CODE HERE\n  paren_string <- strsplit(paren_string, \" \")\n  paren_string\
    \ <- unlist(paren_string)\n  paren_string <- gsub(\"\\\\(\", \" ( \", paren_string)\n\
    \  paren_string <- gsub(\"\\\\)\", \" ) \", paren_string)\n  paren_string <- strsplit(paren_string,\
    \ \" \")\n  paren_string <- unlist(paren_string)\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"  \"]\n  paren_string <- paren_string[paren_string\
    \ != \"   \"]\n  paren_string <- paren_string[paren_string != \"    \"]\n  paren_string\
    \ <- paren_string[paren_string != \"     \"]\n  paren_string <- paren_string[paren_string\
    \ != \"      \"]\n  paren_string <- paren_string[paren_string != \"       \"]\n\
    \  paren_string <- paren_string[paren_string != \"        \"]\n  paren_string\
    \ <- paren_string[paren_string != \"         \"]\n  paren_string <- paren_string[paren_string\
    \ != \"          \"]\n  paren_string <- paren_string[paren_string != \"      \
    \     \"]\n  paren_string <- paren_string[paren_string != \"            \"]\n\
    \  paren_string <- paren_string[paren_string != \"             \"]\n  paren_string\
    \ <- paren_string[paren_string != \"              \"]\n  paren_string <- paren_string[paren_string\
    \ != \"               \"]\n  paren_string <- paren_string[paren_string != \" \
    \               \"]\n  paren_string <- paren_string[paren_string != \"       \
    \          \"]\n  paren_string <- paren_string[paren_string != \"            \
    \      \"]\n  paren_string <- paren_string[paren_string != \"                \
    \   \"]\n  paren_", "\n  # Your code here\n}\n", "\n  # YOUR CODE HERE\n  paren_string\
    \ <- strsplit(paren_string, \" \")[[1]]\n  paren_string <- gsub(\"\\\\(\", \"\
    \ ( \", paren_string)\n  paren_string <- gsub(\"\\\\)\", \" ) \", paren_string)\n\
    \  paren_string <- unlist(strsplit(paren_string, \" \"))\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"  \"]\n  paren_string <- paren_string[paren_string\
    \ != \"   \"]\n  paren_string <- paren_string[paren_string != \"    \"]\n  paren_string\
    \ <- paren_string[paren_string != \"     \"]\n  paren_string <- paren_string[paren_string\
    \ != \"      \"]\n  paren_string <- paren_string[paren_string != \"       \"]\n\
    \  paren_string <- paren_string[paren_string != \"        \"]\n  paren_string\
    \ <- paren_string[paren_string != \"         \"]\n  paren_string <- paren_string[paren_string\
    \ != \"          \"]\n  paren_string <- paren_string[paren_string != \"      \
    \     \"]\n  paren_string <- paren_string[paren_string != \"            \"]\n\
    \  paren_string <- paren_string[paren_string != \"             \"]\n  paren_string\
    \ <- paren_string[paren_string != \"              \"]\n  paren_string <- paren_string[paren_string\
    \ != \"               \"]\n  paren_string <- paren_string[paren_string != \" \
    \               \"]\n  paren_string <- paren_string[paren_string != \"       \
    \          \"]\n  paren_string <- paren_string[paren_string != \"            \
    \      \"]\n  paren_string <- paren_string[paren_string != \"                \
    \   \"]\n  paren_string <- paren_string[paren_string != \"                   \
    \ \"]\n  paren_string <-", "\n  # Write your code here\n  return(c(2, 3, 1, 3))\n\
    }\n", "\n  # TODO: implement this function\n  # Hint: you may find the function\
    \ strsplit() useful\n  # Hint: you may find the function str_count() useful\n\
    \  # Hint: you may find the function str_detect() useful\n  # Hint: you may find\
    \ the function str_sub() useful\n  # Hint: you may find the function str_length()\
    \ useful\n  # Hint: you may find the function str_replace() useful\n  # Hint:\
    \ you may find the function str_dup() useful\n  # Hint: you may find the function\
    \ str_c() useful\n  # Hint: you may find the function str_trim() useful\n  # Hint:\
    \ you may find the function str_replace_all() useful\n  # Hint: you may find the\
    \ function str_replace_na() useful\n  # Hint: you may find the function str_subset()\
    \ useful\n  # Hint: you may find the function str_trim() useful\n  # Hint: you\
    \ may find the function str_replace_all() useful\n  # Hint: you may find the function\
    \ str_replace_na() useful\n  # Hint: you may find the function str_subset() useful\n\
    \  # Hint: you may find the function str_replace_all() useful\n  # Hint: you may\
    \ find the function str_replace_na() useful\n  # Hint: you may find the function\
    \ str_subset() useful\n  # Hint: you may find the function str_replace_all() useful\n\
    \  # Hint: you may find the function str_replace_na() useful\n  # Hint: you may\
    \ find the function str_subset() useful\n  # Hint: you may find the function str_replace_all()\
    \ useful\n  # Hint: you may find the function str_replace_na() useful\n  # Hint:\
    \ you may find the function str_subset() useful\n  # Hint: you may find the function\
    \ str_replace_all() useful\n  # Hint: you may find the function str_replace_na()\
    \ useful\n  # Hint: you may find the function str_subset() useful\n  # Hint: you\
    \ may find the function str_replace_all() useful\n  #", "\n  # Your code goes\
    \ here\n}\n", "\n  # YOUR CODE HERE\n  paren_string <- strsplit(paren_string,\
    \ \" \")\n  paren_string <- unlist(paren_string)\n  paren_string <- gsub(\"\\\\\
    (\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\)\", \"\", paren_string)\n\
    \  paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- strsplit(paren_string, \"", "\n  # TODO: implement this function\n\
    \  # Hint: you can use strsplit to split the string into multiple groups\n  #\
    \ Hint: you can use str_count to count the number of parentheses\n  # Hint: you\
    \ can use str_match to find the location of parentheses\n  # Hint: you can use\
    \ str_sub to extract the substring of parentheses\n  # Hint: you can use str_detect\
    \ to check if a string contains parentheses\n  # Hint: you can use str_replace\
    \ to replace the parentheses with empty string\n  # Hint: you can use str_length\
    \ to count the length of a string\n  # Hint: you can use sapply to apply a function\
    \ to each element of a list\n  # Hint: you can use max to find the maximum value\
    \ of a vector\n  # Hint: you can use unlist to convert a list to a vector\n  #\
    \ Hint: you can use as.numeric to convert a vector to a numeric vector\n  # Hint:\
    \ you can use which.max to find the index of the maximum value of a vector\n \
    \ # Hint: you can use which to find the index of a value in a vector\n  # Hint:\
    \ you can use match to find the index of a value in a vector\n  # Hint: you can\
    \ use is.na to check if a value is NA\n  # Hint: you can use is.null to check\
    \ if a value is NULL\n  # Hint: you can use is.na(is.null(x)) to check if a value\
    \ is NA or NULL\n  # Hint: you can use is.na(is.null(x)) | x == 0 to check if\
    \ a value is NA or NULL or 0\n  # Hint: you can use ifelse to do conditional assignment\n\
    \  # Hint: you can use sum to sum a vector\n  # Hint: you can use cumsum to calculate\
    \ the cumulative sum of a vector\n  # Hint: you can use which.min to find the\
    \ index of the minimum value of a vector\n  # Hint: you can use which to find\
    \ the index of a value in a vector\n  # Hint: you can use match to find the index\
    \ of a value in a vector\n  # Hint: you can use is.na to check if a value", "\n\
    \  # TODO: complete this function\n  return(c(2, 3, 1, 3))\n}\n", "\n  # TODO:\
    \ Implement this function\n  # Hint: You can use the function parse_parens() defined\
    \ above\n  # Hint: You can use the function parse_parens() defined above\n  paren_string\
    \ <- strsplit(paren_string, \" \")\n  paren_string <- unlist(paren_string)\n \
    \ paren_string <- lapply(paren_string, parse_parens)\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- lapply(paren_string, function(x) {\n    if (x == \"\") {\n\
    \      return(0)\n    } else {\n      return(max(str_count(x, \"(\")))\n    }\n\
    \  })\n  return(paren_string)\n}\n", "\n  # YOUR CODE HERE\n  paren_string <-\
    \ strsplit(paren_string, \" \")\n  paren_string <- unlist(paren_string)\n  paren_string\
    \ <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren_string != \")\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren_string\
    \ != \")\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[", "\n  # TODO: Write your code here\n\
    \  return(c(2, 3, 1, 3))\n}\n", "\n  # TODO: Implement this function\n  return(0)\n\
    }\n", "\n  # TODO\n}\n", "\n  # Your code here\n}\n", "\n    # YOUR CODE HERE\n\
    \    paren_string <- strsplit(paren_string, \" \")\n    paren_string <- unlist(paren_string)\n\
    \    paren_string <- strsplit(paren_string, \"\")\n    paren_string <- unlist(paren_string)\n\
    \    paren_string <- paren_string[paren_string != \"\"]\n    paren_string <- paren_string[paren_string\
    \ != \" \"]\n    paren_string <- paren_string[paren_string != \"(\"]\n    paren_string\
    \ <- paren_string[paren_string != \")\"]\n    paren_string <- paren_string[paren_string\
    \ != \"\"]\n    paren_string <- paren_string[paren_string != \" \"]\n    paren_string\
    \ <- paren_string[paren_string != \"(\"]\n    paren_string <- paren_string[paren_string\
    \ != \")\"]\n    paren_string <- paren_string[paren_string != \"\"]\n    paren_string\
    \ <- paren_string[paren_string != \" \"]\n    paren_string <- paren_string[paren_string\
    \ != \"(\"]\n    paren_string <- paren_string[paren_string != \")\"]\n    paren_string\
    \ <- paren_string[paren_string != \"\"]\n    paren_string <- paren_string[paren_string\
    \ != \" \"]\n    paren_string <- paren_string[paren_string != \"(\"]\n    paren_string\
    \ <- paren_string[paren_string != \")\"]\n    paren_string <- paren_string[paren_string\
    \ != \"\"]\n    paren_string <- paren_string[paren_string != \" \"]\n    paren_string\
    \ <- paren_string[paren_string != \"(\"]\n    paren_string <- paren_string[paren_string\
    \ != \")\"]\n    paren_string <- paren_string[paren_string != \"\"]\n    paren_string\
    \ <- paren_string[paren_string != \" \"]\n    paren_string <- paren_string[paren_string\
    \ != \"(\"]\n    paren_string <- paren_string[paren", "\n  # TODO: implement this\
    \ function\n  # Hint: use the function parse_parens()\n  # Hint: use the function\
    \ parse_parens()\n  paren_string <- strsplit(paren_string, \" \")\n  paren_string\
    \ <- unlist(paren_string)\n  paren_string <- parse_parens(paren_string)\n  paren_string\
    \ <- unlist(paren_string)\n  paren_string <- max(paren_string)\n  return(paren_string)\n\
    }\n", "\n  # Write your code here\n}\n", "\n  # YOUR CODE HERE\n  paren_string\
    \ = strsplit(paren_string, \" \")[[1]]\n  max_nest = c()\n  for (i in 1:length(paren_string))\
    \ {\n    paren_string[i] = strsplit(paren_string[i], \"\")[[1]]\n    nest = 0\n\
    \    max_nest[i] = 0\n    for (j in 1:length(paren_string[i])) {\n      if (paren_string[i][j]\
    \ == \"(\") {\n        nest = nest + 1\n      } else if (paren_string[i][j] ==\
    \ \")\") {\n        nest = nest - 1\n      }\n      if (nest > max_nest[i]) {\n\
    \        max_nest[i] = nest\n      }\n    }\n  }\n  return(max_nest)\n}\n", "\n\
    \  # TODO: Write your code here\n  # Hint: You can use strsplit() to split the\
    \ string into groups.\n  # Hint: You can use str_count() to count the number of\
    \ parentheses.\n  # Hint: You can use str_sub() to remove the outermost parentheses.\n\
    \  # Hint: You can use str_length() to count the number of characters.\n  # Hint:\
    \ You can use str_detect() to detect if there are parentheses.\n  # Hint: You\
    \ can use recursion to solve this problem.\n  # Hint: You can use unlist() to\
    \ convert a list to a vector.\n  # Hint: You can use is.na() to check if a value\
    \ is NA.\n  # Hint: You can use is.na() to check if a value is NA.\n  # Hint:\
    \ You can use is.na() to check if a value is NA.\n  # Hint: You can use is.na()\
    \ to check if a value is NA.\n  # Hint: You can use is.na() to check if a value\
    \ is NA.\n  # Hint: You can use is.na() to check if a value is NA.\n  # Hint:\
    \ You can use is.na() to check if a value is NA.\n  # Hint: You can use is.na()\
    \ to check if a value is NA.\n  # Hint: You can use is.na() to check if a value\
    \ is NA.\n  # Hint: You can use is.na() to check if a value is NA.\n  # Hint:\
    \ You can use is.na() to check if a value is NA.\n  # Hint: You can use is.na()\
    \ to check if a value is NA.\n  # Hint: You can use is.na() to check if a value\
    \ is NA.\n  # Hint: You can use is.na() to check if a value is NA.\n  # Hint:\
    \ You can use is.na() to check if a value is NA.\n  # Hint: You can use is.na()\
    \ to check if a value is NA.\n  # Hint: You can use is.na() to check if a value\
    \ is NA.\n  # Hint: You can", "\n  # YOUR CODE HERE\n  # Hint: use strsplit()\
    \ to split the string into groups.\n  # Hint: use str_count() to count the number\
    \ of parentheses.\n  # Hint: use str_match() to extract the deepest level of nesting.\n\
    }\n", "\n    # YOUR CODE HERE\n    paren_string <- strsplit(paren_string, \" \"\
    )\n    paren_string <- unlist(paren_string)\n    paren_string <- strsplit(paren_string,\
    \ \"\")\n    paren_string <- unlist(paren_string)\n    paren_string <- paren_string[paren_string\
    \ != \"\"]\n    paren_string <- paren_string[paren_string != \" \"]\n    paren_string\
    \ <- paren_string[paren_string != \"(\"]\n    paren_string <- paren_string[paren_string\
    \ != \")\"]\n    paren_string <- paren_string[paren_string != \"\"]\n    paren_string\
    \ <- paren_string[paren_string != \" \"]\n    paren_string <- paren_string[paren_string\
    \ != \"(\"]\n    paren_string <- paren_string[paren_string != \")\"]\n    paren_string\
    \ <- paren_string[paren_string != \"\"]\n    paren_string <- paren_string[paren_string\
    \ != \" \"]\n    paren_string <- paren_string[paren_string != \"(\"]\n    paren_string\
    \ <- paren_string[paren_string != \")\"]\n    paren_string <- paren_string[paren_string\
    \ != \"\"]\n    paren_string <- paren_string[paren_string != \" \"]\n    paren_string\
    \ <- paren_string[paren_string != \"(\"]\n    paren_string <- paren_string[paren_string\
    \ != \")\"]\n    paren_string <- paren_string[paren_string != \"\"]\n    paren_string\
    \ <- paren_string[paren_string != \" \"]\n    paren_string <- paren_string[paren_string\
    \ != \"(\"]\n    paren_string <- paren_string[paren_string != \")\"]\n    paren_string\
    \ <- paren_string[paren_string != \"\"]\n    paren_string <- paren_string[paren_string\
    \ != \" \"]\n    paren_string <- paren_string[paren_string != \"(\"]\n    paren_string\
    \ <- paren_string[paren", "\n  # TODO: Implement this function\n  # Hint: You\
    \ can use strsplit to split the string into groups\n  # Hint: You can use strsplit\
    \ again to split each group into characters\n  # Hint: You can use sapply to apply\
    \ the same function to each group\n  # Hint: You can use the function you wrote\
    \ above to count the maximum nesting level for each group\n  # Hint: You can use\
    \ unlist to convert the list to a vector\n  # Hint: You can use as.numeric to\
    \ convert the vector to a numeric vector\n  # Hint: You can use the function you\
    \ wrote above to count the maximum nesting level for each group\n  # Hint: You\
    \ can use unlist to convert the list to a vector\n  # Hint: You can use as.numeric\
    \ to convert the vector to a numeric vector\n  # Hint: You can use the function\
    \ you wrote above to count the maximum nesting level for each group\n  # Hint:\
    \ You can use unlist to convert the list to a vector\n  # Hint: You can use as.numeric\
    \ to convert the vector to a numeric vector\n  # Hint: You can use the function\
    \ you wrote above to count the maximum nesting level for each group\n  # Hint:\
    \ You can use unlist to convert the list to a vector\n  # Hint: You can use as.numeric\
    \ to convert the vector to a numeric vector\n  # Hint: You can use the function\
    \ you wrote above to count the maximum nesting level for each group\n  # Hint:\
    \ You can use unlist to convert the list to a vector\n  # Hint: You can use as.numeric\
    \ to convert the vector to a numeric vector\n  # Hint: You can use the function\
    \ you wrote above to count the maximum nesting level for each group\n  # Hint:\
    \ You can use unlist to convert the list to a vector\n  # Hint: You can use as.numeric\
    \ to convert the vector to a numeric vector\n  # Hint: You can use the function\
    \ you wrote above to count the maximum nesting level for each group\n  # Hint:\
    \ You can use unlist to convert the list to a vector\n  # Hint: You can use as.numeric\
    \ to convert the vector to a numeric vector\n  # Hint: You can use the function\
    \ you wrote", "\n  # TODO: Implement\n  return(c(2, 3, 1, 3))\n}\n", "\n  # Your\
    \ code here\n  # Hint: Use strsplit() to split the string into groups\n  # Hint:\
    \ Use str_count() to count the number of parentheses\n  # Hint: Use str_locate()\
    \ to find the location of parentheses\n  # Hint: Use str_sub() to extract the\
    \ substring\n  # Hint: Use str_detect() to detect if the substring contains parentheses\n\
    \  # Hint: Use max() to find the maximum value\n  # Hint: Use sapply() to apply\
    \ the function to each group\n  # Hint: Use unlist() to convert the list to a\
    \ vector\n}\n", "\n  # Your code here\n  # Hint: use strsplit() to split the string\
    \ into groups\n  # Hint: use str_count() to count the number of parentheses in\
    \ each group\n  # Hint: use str_match() to find the deepest level of nesting of\
    \ parentheses in each group\n  # Hint: use str_match_all() to find all the matches\
    \ of parentheses in each group\n  # Hint: use str_sub() to extract the deepest\
    \ level of nesting of parentheses in each group\n  # Hint: use str_replace() to\
    \ remove the parentheses in each group\n  # Hint: use str_replace_all() to remove\
    \ the parentheses in each group\n  # Hint: use str_split() to split the string\
    \ into groups\n  # Hint: use str_count() to count the number of parentheses in\
    \ each group\n  # Hint: use str_match() to find the deepest level of nesting of\
    \ parentheses in each group\n  # Hint: use str_match_all() to find all the matches\
    \ of parentheses in each group\n  # Hint: use str_sub() to extract the deepest\
    \ level of nesting of parentheses in each group\n  # Hint: use str_replace() to\
    \ remove the parentheses in each group\n  # Hint: use str_replace_all() to remove\
    \ the parentheses in each group\n  # Hint: use str_split() to split the string\
    \ into groups\n  # Hint: use str_count() to count the number of parentheses in\
    \ each group\n  # Hint: use str_match() to find the deepest level of nesting of\
    \ parentheses in each group\n  # Hint: use str_match_all() to find all the matches\
    \ of parentheses in each group\n  # Hint: use str_sub() to extract the deepest\
    \ level of nesting of parentheses in each group\n  # Hint: use str_replace() to\
    \ remove the parentheses in each group\n  # Hint: use str_replace_all() to remove\
    \ the parentheses in each group\n  # Hint: use str_split() to split the string\
    \ into groups\n  # Hint: use str_count() to count the number of parentheses in\
    \ each group\n  # Hint: use str_match() to find the deepest level of nesting of\
    \ parentheses in each group\n  # Hint: use str_match_all() to", "\n  # YOUR CODE\
    \ HERE\n  paren_string <- strsplit(paren_string, \" \")[[1]]\n  paren_string <-\
    \ sapply(paren_string, function(x) {\n    x <- strsplit(x, \"\")[[1]]\n    x <-\
    \ x[x != \"\"]\n    x <- paste(x, collapse = \"\")\n    x <- strsplit(x, \"\"\
    )[[1]]\n    x <- x[x != \"\"]\n    x <- paste(x, collapse = \"\")\n    x <- strsplit(x,\
    \ \"\")[[1]]\n    x <- x[x != \"\"]\n    x <- paste(x, collapse = \"\")\n    x\
    \ <- strsplit(x, \"\")[[1]]\n    x <- x[x != \"\"]\n    x <- paste(x, collapse\
    \ = \"\")\n    x <- strsplit(x, \"\")[[1]]\n    x <- x[x != \"\"]\n    x <- paste(x,\
    \ collapse = \"\")\n    x <- strsplit(x, \"\")[[1]]\n    x <- x[x != \"\"]\n \
    \   x <- paste(x, collapse = \"\")\n    x <- strsplit(x, \"\")[[1]]\n    x <-\
    \ x[x != \"\"]\n    x <- paste(x, collapse = \"\")\n    x <- strsplit(x, \"\"\
    )[[1]]\n    x <- x[x != \"\"]\n    x <- paste(x, collapse = \"\")\n    x <- strsplit(x,\
    \ \"\")[[1]]\n    x <- x[x != \"\"]\n    x <- paste(x, collapse = \"\")\n    x\
    \ <- strsplit(x, \"\")[[1]]\n    x <- x[x != \"\"]\n    x <- paste(x, collapse\
    \ = \"\")\n    x <- strsplit(x, \"\")[[1]]\n    x <- x[x != \"\"]\n    x <- paste(x,\
    \ collapse = \"\")\n    x <- strsplit(x, \"\")[[1]]\n    x <- x[x != \"\"]\n \
    \   x <- paste(x, collapse = \"\")\n    x <- strsplit(x, \"\")[[1]]\n    x <-\
    \ x[x != \"\"]\n    x <- paste(x, collapse", "\n  # TODO: Implement this function\n\
    \  paren_string <- strsplit(paren_string, \" \")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- gsub(\"\\\\(\", \" ( \", paren_string)\n  paren_string <- gsub(\"\
    \\\\)\", \" ) \", paren_string)\n  paren_string <- strsplit(paren_string, \" \"\
    )\n  paren_string <- unlist(paren_string)\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"  \"]\n  paren_string <- paren_string[paren_string\
    \ != \"   \"]\n  paren_string <- paren_string[paren_string != \"    \"]\n  paren_string\
    \ <- paren_string[paren_string != \"     \"]\n  paren_string <- paren_string[paren_string\
    \ != \"      \"]\n  paren_string <- paren_string[paren_string != \"       \"]\n\
    \  paren_string <- paren_string[paren_string != \"        \"]\n  paren_string\
    \ <- paren_string[paren_string != \"         \"]\n  paren_string <- paren_string[paren_string\
    \ != \"          \"]\n  paren_string <- paren_string[paren_string != \"      \
    \     \"]\n  paren_string <- paren_string[paren_string != \"            \"]\n\
    \  paren_string <- paren_string[paren_string != \"             \"]\n  paren_string\
    \ <- paren_string[paren_string != \"              \"]\n  paren_string <- paren_string[paren_string\
    \ != \"               \"]\n  paren_string <- paren_string[paren_string != \" \
    \               \"]\n  paren_string <- paren_string[paren_string != \"       \
    \          \"]\n  paren_string <- paren_string[paren_string != \"            \
    \      \"]\n  paren_string <- paren_string[paren_string != \"                \
    \   \"]\n ", "\n  # Your code here\n  # Hint: Use the function parse_parens()\
    \ defined above\n  # Hint: Use the function parse_parens() defined above\n  #\
    \ Hint: Use the function parse_parens() defined above\n  # Hint: Use the function\
    \ parse_parens() defined above\n  # Hint: Use the function parse_parens() defined\
    \ above\n  # Hint: Use the function parse_parens() defined above\n  # Hint: Use\
    \ the function parse_parens() defined above\n  # Hint: Use the function parse_parens()\
    \ defined above\n  # Hint: Use the function parse_parens() defined above\n  #\
    \ Hint: Use the function parse_parens() defined above\n  # Hint: Use the function\
    \ parse_parens() defined above\n  # Hint: Use the function parse_parens() defined\
    \ above\n  # Hint: Use the function parse_parens() defined above\n  # Hint: Use\
    \ the function parse_parens() defined above\n  # Hint: Use the function parse_parens()\
    \ defined above\n  # Hint: Use the function parse_parens() defined above\n  #\
    \ Hint: Use the function parse_parens() defined above\n  # Hint: Use the function\
    \ parse_parens() defined above\n  # Hint: Use the function parse_parens() defined\
    \ above\n  # Hint: Use the function parse_parens() defined above\n  # Hint: Use\
    \ the function parse_parens() defined above\n  # Hint: Use the function parse_parens()\
    \ defined above\n  # Hint: Use the function parse_parens() defined above\n  #\
    \ Hint: Use the function parse_parens() defined above\n  # Hint: Use the function\
    \ parse_parens() defined above\n  # Hint: Use the function parse_parens() defined\
    \ above\n  # Hint: Use the function parse_parens() defined above\n  # Hint: Use\
    \ the function parse_parens() defined above\n  # Hint: Use the function parse_parens()\
    \ defined above\n  # Hint: Use the function parse_parens() defined above\n  #\
    \ Hint: Use the function parse_parens() defined above\n  # Hint: Use the function",
  "\n  # Your code here\n}\n", "\n  # Create a vector of strings, each representing\
    \ a group of nested parentheses\n  paren_groups <- strsplit(paren_string, ' ')[[1]]\n\
    \  # Create a vector of integers, each representing the deepest level of nesting\
    \ of parentheses\n  # in the corresponding group\n  paren_levels <- sapply(paren_groups,\
    \ function(group) {\n    # Create a vector of integers, each representing the\
    \ number of open parentheses\n    # at the corresponding position in the group\n\
    \    open_parens <- cumsum(strsplit(group, '')[[1]] == '(')\n    # Create a vector\
    \ of integers, each representing the number of close parentheses\n    # at the\
    \ corresponding position in the group\n    close_parens <- cumsum(strsplit(group,\
    \ '')[[1]] == ')')\n    # Create a vector of integers, each representing the number\
    \ of open parentheses\n    # minus the number of close parentheses at the corresponding\
    \ position in the group\n    paren_level <- open_parens - close_parens\n    #\
    \ Return the maximum of the vector of integers\n    max(paren_level)\n  })\n \
    \ # Return the vector of integers\n  paren_levels\n}\n", "\n  # TODO: fill in\
    \ the code here\n}\n", "\n  # YOUR CODE HERE\n  paren_string <- strsplit(paren_string,\
    \ \" \")\n  paren_string <- unlist(paren_string)\n  paren_string <- lapply(paren_string,\
    \ function(x) {\n    x <- strsplit(x, \"\")\n    x <- unlist(x)\n    x <- x[x\
    \ != \"\"]\n    x <- paste(x, collapse = \"\")\n    x <- strsplit(x, \"\")\n \
    \   x <- unlist(x)\n    x <- x[x != \"\"]\n    x <- paste(x, collapse = \"\")\n\
    \    x <- strsplit(x, \"\")\n    x <- unlist(x)\n    x <- x[x != \"\"]\n    x\
    \ <- paste(x, collapse = \"\")\n    x <- strsplit(x, \"\")\n    x <- unlist(x)\n\
    \    x <- x[x != \"\"]\n    x <- paste(x, collapse = \"\")\n    x <- strsplit(x,\
    \ \"\")\n    x <- unlist(x)\n    x <- x[x != \"\"]\n    x <- paste(x, collapse\
    \ = \"\")\n    x <- strsplit(x, \"\")\n    x <- unlist(x)\n    x <- x[x != \"\"\
    ]\n    x <- paste(x, collapse = \"\")\n    x <- strsplit(x, \"\")\n    x <- unlist(x)\n\
    \    x <- x[x != \"\"]\n    x <- paste(x, collapse = \"\")\n    x <- strsplit(x,\
    \ \"\")\n    x <- unlist(x)\n    x <- x[x != \"\"]\n    x <- paste(x, collapse\
    \ = \"\")\n    x <- strsplit(x, \"\")\n    x <- unlist(x)\n    x <- x[x != \"\"\
    ]\n    x <- paste(x, collapse = \"\")\n    x <- strsplit(x, \"\")\n    x <- unlist(x)\n\
    \    x <- x[x != \"\"]\n    x <- paste(x, collapse = \"\")\n    x <- strsplit(x,\
    \ \"\")\n    x <- unlist(x)\n    x <- x[x != \"\"]\n    x <- paste", "\n  # Your\
    \ code here\n  paren_string <- strsplit(paren_string, \" \")\n  paren_string <-\
    \ unlist(paren_string)\n  paren_string <- strsplit(paren_string, \"\")\n  paren_string\
    \ <- unlist(paren_string)\n  paren_string <- paren_string[paren_string != \"\"\
    ]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren_string != \")\"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren_string\
    \ != \")\"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren_string != \")\"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren",
  "\n  # Your code here\n  paren_string <- unlist(strsplit(paren_string, \" \"))\n\
    \  paren_string <- gsub(\"\\\\(\", \"1\", paren_string)\n  paren_string <- gsub(\"\
    \\\\)\", \"0\", paren_string)\n  paren_string <- as.numeric(unlist(strsplit(paren_string,\
    \ \"\")))\n  paren_string <- cumsum(paren_string)\n  paren_string <- paren_string[paren_string\
    \ == 0]\n  paren_string <- paren_string[-1]\n  paren_string <- paren_string[-length(paren_string)]\n\
    \  paren_string <- paren_string[paren_string != 0]\n  paren_string <- paren_string[paren_string\
    \ != 1]\n  paren_string <- paren_string[paren_string != -1]\n  paren_string <-\
    \ paren_string[paren_string != -2]\n  paren_string <- paren_string[paren_string\
    \ != -3]\n  paren_string <- paren_string[paren_string != -4]\n  paren_string <-\
    \ paren_string[paren_string != -5]\n  paren_string <- paren_string[paren_string\
    \ != -6]\n  paren_string <- paren_string[paren_string != -7]\n  paren_string <-\
    \ paren_string[paren_string != -8]\n  paren_string <- paren_string[paren_string\
    \ != -9]\n  paren_string <- paren_string[paren_string != -10]\n  paren_string\
    \ <- paren_string[paren_string != -11]\n  paren_string <- paren_string[paren_string\
    \ != -12]\n  paren_string <- paren_string[paren_string != -13]\n  paren_string\
    \ <- paren_string[paren_string != -14]\n  paren_string <- paren_string[paren_string\
    \ != -15]\n  paren_string <- paren_string[paren_string != -16]\n  paren_string\
    \ <- paren_string[paren", "\n  # TODO: Write code here\n  # Hint: Use strsplit\
    \ to split the string into a list of strings\n  # Hint: Use str_count to count\
    \ the number of '(' and ')'\n  # Hint: Use abs to get the absolute value of the\
    \ difference between the number of '(' and ')'\n  # Hint: Use max to get the maximum\
    \ value\n  # Hint: Use unlist to convert the list to a vector\n  # Hint: Use as.integer\
    \ to convert the vector to an integer vector\n  # Hint: Use sapply to apply the\
    \ above steps to each element of the list\n}\n", "\n  # Write your code here\n\
    }\n", "\n  # Your code here\n}\n", "\n  # TODO: implement this function\n  return(c(2,\
    \ 3, 1, 3))\n}\n", "\n  # TODO: complete this function\n  # Hint: you can use\
    \ strsplit to split the string into a list of strings\n  # Hint: you can use str_count\
    \ to count the number of parentheses in a string\n  # Hint: you can use str_replace_all\
    \ to remove the outermost parentheses\n  # Hint: you can use sapply to apply a\
    \ function to each element of a list\n  # Hint: you can use recursion\n  # Hint:\
    \ you can use unlist to convert a list to a vector\n  # Hint: you can use max\
    \ to find the maximum value of a vector\n  # Hint: you can use paste to concatenate\
    \ strings\n  # Hint: you can use paste0 to concatenate strings\n  # Hint: you\
    \ can use paste0 to concatenate strings\n  # Hint: you can use paste0 to concatenate\
    \ strings\n  # Hint: you can use paste0 to concatenate strings\n  # Hint: you\
    \ can use paste0 to concatenate strings\n  # Hint: you can use paste0 to concatenate\
    \ strings\n  # Hint: you can use paste0 to concatenate strings\n  # Hint: you\
    \ can use paste0 to concatenate strings\n  # Hint: you can use paste0 to concatenate\
    \ strings\n  # Hint: you can use paste0 to concatenate strings\n  # Hint: you\
    \ can use paste0 to concatenate strings\n  # Hint: you can use paste0 to concatenate\
    \ strings\n  # Hint: you can use paste0 to concatenate strings\n  # Hint: you\
    \ can use paste0 to concatenate strings\n  # Hint: you can use paste0 to concatenate\
    \ strings\n  # Hint: you can use paste0 to concatenate strings\n  # Hint: you\
    \ can use paste0 to concatenate strings\n  # Hint: you can use paste0 to concatenate\
    \ strings\n  # Hint: you can use paste0 to concatenate strings\n  # Hint: you\
    \ can use paste0 to concatenate strings\n  # Hint: you can use paste0 to concatenate\
    \ strings\n  # Hint: you can use paste0 to concatenate strings\n  # Hint", "\n\
    \  # TODO: Implement this function\n}\n", "\n  # TODO: Write your code here\n\
    \  # Hint: Use strsplit to split the string into groups.\n  # Hint: Use str_count\
    \ to count the number of parentheses in each group.\n  # Hint: Use str_count to\
    \ count the number of parentheses in each group.\n  # Hint: Use str_count to count\
    \ the number of parentheses in each group.\n  # Hint: Use str_count to count the\
    \ number of parentheses in each group.\n  # Hint: Use str_count to count the number\
    \ of parentheses in each group.\n  # Hint: Use str_count to count the number of\
    \ parentheses in each group.\n  # Hint: Use str_count to count the number of parentheses\
    \ in each group.\n  # Hint: Use str_count to count the number of parentheses in\
    \ each group.\n  # Hint: Use str_count to count the number of parentheses in each\
    \ group.\n  # Hint: Use str_count to count the number of parentheses in each group.\n\
    \  # Hint: Use str_count to count the number of parentheses in each group.\n \
    \ # Hint: Use str_count to count the number of parentheses in each group.\n  #\
    \ Hint: Use str_count to count the number of parentheses in each group.\n  # Hint:\
    \ Use str_count to count the number of parentheses in each group.\n  # Hint: Use\
    \ str_count to count the number of parentheses in each group.\n  # Hint: Use str_count\
    \ to count the number of parentheses in each group.\n  # Hint: Use str_count to\
    \ count the number of parentheses in each group.\n  # Hint: Use str_count to count\
    \ the number of parentheses in each group.\n  # Hint: Use str_count to count the\
    \ number of parentheses in each group.\n  # Hint: Use str_count to count the number\
    \ of parentheses in each group.\n  # Hint: Use str_count to count the number of\
    \ parentheses in each group.\n  # Hint: Use str_count to count the number of parentheses\
    \ in each group.\n  # Hint: Use str_count to count the number of parentheses in\
    \ each group.\n  # Hint: Use str_count to count the number of parentheses in each\
    \ group.\n  # Hint", "\n  # YOUR CODE HERE\n  # Hint: Use strsplit() and parse_parens()\n\
    \  # Hint: Use sapply() to apply parse_parens() to each group\n  # Hint: Use unlist()\
    \ to convert the result to a vector\n  paren_string <- strsplit(paren_string,\
    \ \" \")\n  paren_string <- sapply(paren_string, parse_parens)\n  paren_string\
    \ <- unlist(paren_string)\n  return(paren_string)\n}\n", "\n  # Write your code\
    \ here\n}\n", "\n  # TODO: Implement this function\n  paren_string <- strsplit(paren_string,\
    \ \" \")\n  paren_string <- unlist(paren_string)\n  paren_string <- strsplit(paren_string,\
    \ \"\")\n  paren_string <- lapply(paren_string, unlist)\n  paren_string <- lapply(paren_string,\
    \ function(x) {\n    if (x[1] == \"(\" & x[length(x)] == \")\") {\n      return(x[2:length(x)-1])\n\
    \    } else {\n      return(x)\n    }\n  })\n  paren_string <- lapply(paren_string,\
    \ function(x) {\n    if (length(x) == 0) {\n      return(0)\n    } else {\n  \
    \    return(max(paren_string_helper(x)))\n    }\n  })\n  paren_string <- unlist(paren_string)\n\
    \  return(paren_string)\n}\n", "\n  # Your code here\n}\n ", "\n  # Write your\
    \ code here\n  return(c(2, 3, 1, 3))\n}\n", "\n  # TODO\n  paren_string <- strsplit(paren_string,\
    \ \" \")\n  paren_string <- unlist(paren_string)\n  paren_string <- strsplit(paren_string,\
    \ \"\")\n  paren_string <- unlist(paren_string)\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren_string\
    \ != \")\"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren_string != \")\"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren_string\
    \ != \")\"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren_string != \")\"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_", "\n  # TODO: Write your code here\n  return(c(2, 3,\
    \ 1, 3))\n}\n", "\n  # YOUR CODE HERE\n  # Hint: Use strsplit to split the string\
    \ into a list of strings.\n  # Hint: Use parse_parens to parse each of the strings\
    \ in the list.\n  # Hint: Use sapply to apply parse_parens to each of the strings\
    \ in the list.\n  # Hint: Use unlist to convert the list to a vector.\n  # Hint:\
    \ Use as.integer to convert the character vector to an integer vector.\n  # Hint:\
    \ Use return to return the result.\n  # Hint: Use the function body below as a\
    \ template.\n  # Hint: Use the function body below as a template.\n  # Hint: Use\
    \ the function body below as a template.\n  # Hint: Use the function body below\
    \ as a template.\n  # Hint: Use the function body below as a template.\n  # Hint:\
    \ Use the function body below as a template.\n  # Hint: Use the function body\
    \ below as a template.\n  # Hint: Use the function body below as a template.\n\
    \  # Hint: Use the function body below as a template.\n  # Hint: Use the function\
    \ body below as a template.\n  # Hint: Use the function body below as a template.\n\
    \  # Hint: Use the function body below as a template.\n  # Hint: Use the function\
    \ body below as a template.\n  # Hint: Use the function body below as a template.\n\
    \  # Hint: Use the function body below as a template.\n  # Hint: Use the function\
    \ body below as a template.\n  # Hint: Use the function body below as a template.\n\
    \  # Hint: Use the function body below as a template.\n  # Hint: Use the function\
    \ body below as a template.\n  # Hint: Use the function body below as a template.\n\
    \  # Hint: Use the function body below as a template.\n  # Hint: Use the function\
    \ body below as a template.\n  # Hint: Use the function body below as a template.\n\
    \  # Hint: Use the function body below as a template.\n  # Hint: Use the function\
    \ body below as a template.\n  # Hint: Use the function body below as a template.",
  "\n  # TODO: Write your code here\n  # Hint: You can use the parse_parens function\
    \ you wrote above.\n  # Hint: You can use the sapply function to apply a function\
    \ to each element of a list.\n  # Hint: You can use the unlist function to convert\
    \ a list to a vector.\n  # Hint: You can use the max function to find the maximum\
    \ value in a vector.\n  # Hint: You can use the is.na function to check if a value\
    \ is NA.\n  # Hint: You can use the which function to find the index of the maximum\
    \ value in a vector.\n  # Hint: You can use the length function to find the length\
    \ of a vector.\n  # Hint: You can use the sum function to sum the values in a\
    \ vector.\n  # Hint: You can use the cumsum function to find the cumulative sum\
    \ of a vector.\n  # Hint: You can use the diff function to find the difference\
    \ between consecutive elements in a vector.\n  # Hint: You can use the which function\
    \ to find the indices of elements in a vector that satisfy a condition.\n  # Hint:\
    \ You can use the rev function to reverse a vector.\n  # Hint: You can use the\
    \ sort function to sort a vector.\n  # Hint: You can use the unique function to\
    \ find the unique elements in a vector.\n  # Hint: You can use the match function\
    \ to find the indices of elements in a vector that match a pattern.\n  # Hint:\
    \ You can use the any function to check if any element in a vector satisfies a\
    \ condition.\n  # Hint: You can use the all function to check if all elements\
    \ in a vector satisfy a condition.\n  # Hint: You can use the which.max function\
    \ to find the index of the maximum value in a vector.\n  # Hint: You can use the\
    \ which.min function to find the index of the minimum value in a vector.\n  #\
    \ Hint: You can use the which.min function to find the index of the minimum value\
    \ in a vector.\n  # Hint: You can use the which.min function to find the index\
    \ of the minimum value in a vector.\n  # Hint: You can use the which.min function\
    \ to find the index of the minimum value in a", "\n  # Write your code here\n\
    \  return(c(2, 3, 1, 3))\n}\n", "\n  # Your code here\n  # Hint: Use strsplit()\
    \ and parse_nested_parens_helper()\n  # Hint: Use sapply() to apply parse_nested_parens_helper()\
    \ to each element of the list returned by strsplit()\n  # Hint: Use unlist() to\
    \ convert the list returned by sapply() to a vector\n  # Hint: Use as.numeric()\
    \ to convert the vector returned by unlist() to a numeric vector\n}\n", "\n  #\
    \ your code here\n}\n", "\n  # TODO: Implement this function\n  # Hint: You can\
    \ use the parse_parens function you implemented above\n  # Hint: You can use the\
    \ sapply function to apply a function to each element of a list\n  # Hint: You\
    \ can use the max function to find the maximum of a vector\n  # Hint: You can\
    \ use the unlist function to convert a list to a vector\n  # Hint: You can use\
    \ the strsplit function to split a string into a list of strings\n  # Hint: You\
    \ can use the paste function to concatenate strings\n  # Hint: You can use the\
    \ paste0 function to concatenate strings without a space\n  # Hint: You can use\
    \ the c function to concatenate vectors\n  # Hint: You can use the as.numeric\
    \ function to convert a vector to a numeric vector\n  # Hint: You can use the\
    \ as.character function to convert a vector to a character vector\n  # Hint: You\
    \ can use the as.list function to convert a vector to a list\n  # Hint: You can\
    \ use the as.integer function to convert a vector to an integer vector\n  # Hint:\
    \ You can use the as.logical function to convert a vector to a logical vector\n\
    \  # Hint: You can use the as.double function to convert a vector to a double\
    \ vector\n  # Hint: You can use the as.complex function to convert a vector to\
    \ a complex vector\n  # Hint: You can use the as.raw function to convert a vector\
    \ to a raw vector\n  # Hint: You can use the as.factor function to convert a vector\
    \ to a factor vector\n  # Hint: You can use the as.data.frame function to convert\
    \ a vector to a data frame\n  # Hint: You can use the as.matrix function to convert\
    \ a vector to a matrix\n  # Hint: You can use the as.array function to convert\
    \ a vector to an array\n  # Hint: You can use the as.vector function to convert\
    \ a vector to a vector\n  # Hint: You can use the as.expression function to convert\
    \ a vector to an expression\n  # Hint: You can use the as.call function to convert\
    \ a vector to a call\n  # Hint: You can use the as.environment function to", "\n\
    \  # YOUR CODE HERE\n  # Hint: Use strsplit and sapply\n  # Hint: Use parse_parens\n\
    \  # Hint: Use max\n  # Hint: Use unlist\n  paren_string <- strsplit(paren_string,\
    \ \" \")\n  paren_string <- sapply(paren_string, parse_parens)\n  paren_string\
    \ <- sapply(paren_string, max)\n  paren_string <- unlist(paren_string)\n  return(paren_string)\n\
    }\n", "\n  # YOUR CODE HERE\n  paren_string <- strsplit(paren_string, \" \")\n\
    \  paren_string <- unlist(paren_string)\n  paren_string <- strsplit(paren_string,\
    \ \"\")\n  paren_string <- unlist(paren_string)\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- p", "\n  # Write your code here\n  return(NULL)\n}\n", "\n    # YOUR CODE\
    \ HERE\n    paren_string = strsplit(paren_string, \" \")\n    paren_string = unlist(paren_string)\n\
    \    paren_string = gsub(\"[()]\", \"\", paren_string)\n    paren_string = strsplit(paren_string,\
    \ \"\")\n    paren_string = unlist(paren_string)\n    paren_string = as.numeric(paren_string)\n\
    \    paren_string = cumsum(paren_string)\n    paren_string = max(paren_string)\n\
    \    return(paren_string)\n}\n", "\n  # Split the string by space\n  paren_groups\
    \ <- strsplit(paren_string, ' ')[[1]]\n  # For each group, count the number of\
    \ opening parentheses\n  # and the number of closing parentheses.\n  # If the\
    \ number of opening parentheses is greater than the number of closing parentheses,\n\
    \  # then we have nested parentheses.\n  # The difference between the number of\
    \ opening parentheses and the number of closing parentheses\n  # is the level\
    \ of nesting.\n  # If the number of opening parentheses is less than the number\
    \ of closing parentheses,\n  # then we have an invalid group.\n  # If the number\
    \ of opening parentheses is equal to the number of closing parentheses,\n  # then\
    \ we have a group with no nesting.\n  # We can use the sum function to count the\
    \ number of opening parentheses and the number of closing parentheses.\n  # The\
    \ sum function takes a vector of TRUE/FALSE values and returns the number of TRUE\
    \ values.\n  # We can use the == operator to compare if two values are equal.\n\
    \  # We can use the | operator to combine two TRUE/FALSE values into a single\
    \ TRUE/FALSE value.\n  # We can use the & operator to combine two TRUE/FALSE values\
    \ into a single TRUE/FALSE value.\n  # We can use the ! operator to negate a TRUE/FALSE\
    \ value.\n  # We can use the sum function to count the number of opening parentheses\
    \ and the number of closing parentheses.\n  # The sum function takes a vector\
    \ of TRUE/FALSE values and returns the number of TRUE values.\n  # We can use\
    \ the == operator to compare if two values are equal.\n  # We can use the | operator\
    \ to combine two TRUE/FALSE values into a single TRUE/FALSE value.\n  # We can\
    \ use the & operator to combine two TRUE/FALSE values into a single TRUE/FALSE\
    \ value.\n  # We can use the ! operator to negate a TRUE/FALSE value.\n  # We\
    \ can use the sum function to count the number of opening parentheses and the\
    \ number of closing parentheses.\n  # The sum function takes a vector of TRUE/FALSE\
    \ values and returns the number of TRUE values.\n  # We can use the == operator\
    \ to compare if two values are equal.\n  # We can use the | operator to combine\
    \ two TRUE/FALSE values into a single", "\n  # TODO: Implement this function\n\
    \  # Hint: You may find the function strsplit useful\n  # Hint: You may find the\
    \ function str_count useful\n  # Hint: You may find the function str_detect useful\n\
    \  # Hint: You may find the function str_subset useful\n  # Hint: You may find\
    \ the function str_replace_all useful\n  # Hint: You may find the function str_extract_all\
    \ useful\n  # Hint: You may find the function str_extract useful\n  # Hint: You\
    \ may find the function str_length useful\n  # Hint: You may find the function\
    \ max useful\n  # Hint: You may find the function unlist useful\n  # Hint: You\
    \ may find the function as.numeric useful\n  # Hint: You may find the function\
    \ sapply useful\n  # Hint: You may find the function paste useful\n  # Hint: You\
    \ may find the function paste0 useful\n  # Hint: You may find the function str_trim\
    \ useful\n  # Hint: You may find the function str_split useful\n  # Hint: You\
    \ may find the function str_replace useful\n  # Hint: You may find the function\
    \ str_replace_all useful\n  # Hint: You may find the function str_replace_all_fixed\
    \ useful\n  # Hint: You may find the function str_replace_all_regex useful\n \
    \ # Hint: You may find the function str_replace_all_regex_fixed useful\n  # Hint:\
    \ You may find the function str_replace_all_regex_fixed useful\n  # Hint: You\
    \ may find the function str_replace_all_regex_fixed useful\n  # Hint: You may\
    \ find the function str_replace_all_regex_fixed useful\n  # Hint: You may find\
    \ the function str_replace_all_regex_fixed useful\n  # Hint: You may find the\
    \ function str_replace_all_regex_fixed useful\n  # Hint: You may find the function\
    \ str_replace_all_regex_fixed useful\n  # Hint: You may find the function str_replace_all_regex_fixed\
    \ useful\n  # Hint: You may find the function str", "\n  # split the string into\
    \ groups\n  paren_groups <- unlist(strsplit(paren_string, ' '))\n  # for each\
    \ group, count the number of open parens\n  paren_counts <- sapply(paren_groups,\
    \ function(x) {\n    sum(strsplit(x, '')[[1]] == '(')\n  })\n  # return the maximum\
    \ count for each group\n  return(sapply(split(paren_counts, cumsum(paren_counts\
    \ == 0)), max))\n}\n", "\n  # YOUR CODE HERE\n  paren_string <- strsplit(paren_string,\
    \ \" \")[[1]]\n  paren_string <- sapply(paren_string, function(x) {\n    x <-\
    \ strsplit(x, \"\")[[1]]\n    x <- x[x != \"\"]\n    x <- paste(x, collapse =\
    \ \"\")\n    return(x)\n  })\n  paren_string <- sapply(paren_string, function(x)\
    \ {\n    count <- 0\n    max <- 0\n    for (i in 1:nchar(x)) {\n      if (substr(x,\
    \ i, i) == \"(\") {\n        count <- count + 1\n      } else {\n        count\
    \ <- count - 1\n      }\n      if (count > max) {\n        max <- count\n    \
    \  }\n    }\n    return(max)\n  })\n  return(paren_string)\n}\n", "\n  # Your\
    \ code here\n  return(c(2, 3, 1, 3))\n}\n", "\n  # Your code here\n  # Hint: Use\
    \ strsplit() to split the string into a list of strings, and then use lapply()\
    \ to apply parse_parens() to each string.\n  # You can use unlist() to convert\
    \ the list of integers to a vector of integers.\n  return(unlist(lapply(strsplit(paren_string,\
    \ \" \"), parse_parens)))\n}\n", "\n  # TODO\n}\n", "\n  # your code here\n}\n\
    \ ", "\n  # TODO: implement this function\n  return(c(2, 3, 1, 3))\n}\n", "\n\
    \  # Your code here\n  # Hint: You can use strsplit to split the string into a\
    \ list of strings\n  # Hint: You can use strsplit to split the string into a list\
    \ of strings\n  # Hint: You can use strsplit to split the string into a list of\
    \ strings\n  # Hint: You can use strsplit to split the string into a list of strings\n\
    \  # Hint: You can use strsplit to split the string into a list of strings\n \
    \ # Hint: You can use strsplit to split the string into a list of strings\n  #\
    \ Hint: You can use strsplit to split the string into a list of strings\n  # Hint:\
    \ You can use strsplit to split the string into a list of strings\n  # Hint: You\
    \ can use strsplit to split the string into a list of strings\n  # Hint: You can\
    \ use strsplit to split the string into a list of strings\n  # Hint: You can use\
    \ strsplit to split the string into a list of strings\n  # Hint: You can use strsplit\
    \ to split the string into a list of strings\n  # Hint: You can use strsplit to\
    \ split the string into a list of strings\n  # Hint: You can use strsplit to split\
    \ the string into a list of strings\n  # Hint: You can use strsplit to split the\
    \ string into a list of strings\n  # Hint: You can use strsplit to split the string\
    \ into a list of strings\n  # Hint: You can use strsplit to split the string into\
    \ a list of strings\n  # Hint: You can use strsplit to split the string into a\
    \ list of strings\n  # Hint: You can use strsplit to split the string into a list\
    \ of strings\n  # Hint: You can use strsplit to split the string into a list of\
    \ strings\n  # Hint: You can use strsplit to split the string into a list of strings\n\
    \  # Hint: You can use strsplit to split the string into a list of strings\n \
    \ # Hint: You can use strsplit to split the string into a list of strings\n  #\
    \ Hint: You can use strsplit to split the string into a list of strings\n  # Hint:\
    \ You can use strsplit to split the string into a list of strings\n  # Hint",
  "\n  # TODO: Implement this function\n  # Hint: You can use strsplit to split the\
    \ string into groups\n  # Hint: You can use str_count to count the number of parentheses\n\
    \  # Hint: You can use str_replace_all to remove parentheses\n  # Hint: You can\
    \ use str_length to count the number of characters\n  # Hint: You can use str_sub\
    \ to extract a substring\n  # Hint: You can use str_detect to detect whether a\
    \ string contains a pattern\n  # Hint: You can use str_replace to replace a pattern\
    \ with another string\n  # Hint: You can use str_c to concatenate strings\n  #\
    \ Hint: You can use str_trim to remove leading and trailing whitespace\n  # Hint:\
    \ You can use str_split to split a string into a vector of strings\n  # Hint:\
    \ You can use paste to concatenate strings\n  # Hint: You can use unlist to convert\
    \ a list to a vector\n  # Hint: You can use as.numeric to convert a vector to\
    \ a numeric vector\n  # Hint: You can use max to find the maximum value in a vector\n\
    \  # Hint: You can use which.max to find the index of the maximum value in a vector\n\
    \  # Hint: You can use ifelse to create a vector of values based on a condition\n\
    \  # Hint: You can use rep to repeat a value\n  # Hint: You can use cumsum to\
    \ compute the cumulative sum of a vector\n  # Hint: You can use rev to reverse\
    \ a vector\n  # Hint: You can use c to combine vectors\n  # Hint: You can use\
    \ unique to find unique values in a vector\n  # Hint: You can use diff to compute\
    \ the difference between adjacent elements in a vector\n  # Hint: You can use\
    \ which to find the indices of elements that satisfy a condition\n  # Hint: You\
    \ can use match to find the indices of elements that match a value\n  # Hint:\
    \ You can use sort to sort a vector\n  # Hint: You can use order to sort a vector\n\
    \  # Hint: You can use rbind to combine two matrices by rows\n  # Hint: You can\
    \ use cbind to combine two matrices by", "\n  # Your code here\n}\n", "\n  # YOUR\
    \ CODE HERE\n  paren_string <- strsplit(paren_string, \" \")[[1]]\n  paren_string\
    \ <- gsub(\"\\\\(\", \" ( \", paren_string)\n  paren_string <- gsub(\"\\\\)\"\
    , \" ) \", paren_string)\n  paren_string <- unlist(strsplit(paren_string, \" \"\
    ))\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"  \"]\n  paren_string\
    \ <- paren_string[paren_string != \"   \"]\n  paren_string <- paren_string[paren_string\
    \ != \"    \"]\n  paren_string <- paren_string[paren_string != \"     \"]\n  paren_string\
    \ <- paren_string[paren_string != \"      \"]\n  paren_string <- paren_string[paren_string\
    \ != \"       \"]\n  paren_string <- paren_string[paren_string != \"        \"\
    ]\n  paren_string <- paren_string[paren_string != \"         \"]\n  paren_string\
    \ <- paren_string[paren_string != \"          \"]\n  paren_string <- paren_string[paren_string\
    \ != \"           \"]\n  paren_string <- paren_string[paren_string != \"     \
    \       \"]\n  paren_string <- paren_string[paren_string != \"             \"\
    ]\n  paren_string <- paren_string[paren_string != \"              \"]\n  paren_string\
    \ <- paren_string[paren_string != \"               \"]\n  paren_string <- paren_string[paren_string\
    \ != \"                \"]\n  paren_string <- paren_string[paren_string != \"\
    \                 \"]\n  paren_string <- paren_string[paren_string != \"     \
    \             \"]\n  paren_string <- paren_string[paren_string != \"         \
    \          \"]\n  paren_string <- paren_string[paren_string != \"            \
    \        \"]\n  paren_string <-", "\n  # YOUR CODE HERE\n  paren_string <- strsplit(paren_string,\
    \ \" \")\n  paren_string <- unlist(paren_string)\n  paren_string <- strsplit(paren_string,\
    \ \"\")\n  paren_string <- unlist(paren_string)\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]", "\n  # TODO: implement this function\n\
    \  # Hint: you can use strsplit to split the string into a list of strings\n \
    \ # Hint: you can use str_count to count the number of parentheses in a string\n\
    \  # Hint: you can use str_replace_all to remove all parentheses from a string\n\
    \  # Hint: you can use str_count to count the number of parentheses in a string\n\
    \  # Hint: you can use str_replace_all to remove all parentheses from a string\n\
    \  # Hint: you can use str_count to count the number of parentheses in a string\n\
    \  # Hint: you can use str_replace_all to remove all parentheses from a string\n\
    \  # Hint: you can use str_count to count the number of parentheses in a string\n\
    \  # Hint: you can use str_replace_all to remove all parentheses from a string\n\
    \  # Hint: you can use str_count to count the number of parentheses in a string\n\
    \  # Hint: you can use str_replace_all to remove all parentheses from a string\n\
    \  # Hint: you can use str_count to count the number of parentheses in a string\n\
    \  # Hint: you can use str_replace_all to remove all parentheses from a string\n\
    \  # Hint: you can use str_count to count the number of parentheses in a string\n\
    \  # Hint: you can use str_replace_all to remove all parentheses from a string\n\
    \  # Hint: you can use str_count to count the number of parentheses in a string\n\
    \  # Hint: you can use str_replace_all to remove all parentheses from a string\n\
    \  # Hint: you can use str_count to count the number of parentheses in a string\n\
    \  # Hint: you can use str_replace_all to remove all parentheses from a string\n\
    \  # Hint: you can use str_count to count the number of parentheses in a string\n\
    \  # Hint: you can use str_replace_all to remove all parentheses from a string\n\
    \  # Hint: you can use str_count to count the number of parentheses in a string\n\
    \  # Hint: you can use str_replace_all to remove all parentheses from a string\n\
    \  # Hint: you can use str_count to count the number of parentheses in a", "\n\
    \  # Write your code here\n}\n", "\n  # Your code here\n  # Hint: You can use\
    \ the function you wrote in the previous question\n  # to get the level of nesting\
    \ for each group.\n  # You can also use the function you wrote in the first question\n\
    \  # to split the string into groups.\n  # You can use the paste() function to\
    \ convert a vector of numbers\n  # to a string separated by spaces.\n  # You can\
    \ use the strsplit() function to split a string into a vector of strings.\n  #\
    \ You can use the as.numeric() function to convert a vector of strings to a vector\
    \ of numbers.\n  # You can use the unlist() function to convert a list to a vector.\n\
    \  # You can use the c() function to concatenate vectors.\n  # You can use the\
    \ append() function to append elements to a vector.\n  # You can use the length()\
    \ function to get the length of a vector.\n  # You can use the rep() function\
    \ to replicate elements of a vector.\n  # You can use the which() function to\
    \ get the indices of elements that satisfy a condition.\n  # You can use the which.max()\
    \ function to get the index of the maximum element.\n  # You can use the which.min()\
    \ function to get the index of the minimum element.\n  # You can use the sort()\
    \ function to sort a vector.\n  # You can use the rev() function to reverse a\
    \ vector.\n  # You can use the unique() function to get the unique elements of\
    \ a vector.\n  # You can use the sum() function to sum the elements of a vector.\n\
    \  # You can use the prod() function to compute the product of the elements of\
    \ a vector.\n  # You can use the cumsum() function to compute the cumulative sum\
    \ of the elements of a vector.\n  # You can use the cumprod() function to compute\
    \ the cumulative product of the elements of a vector.\n  # You can use the diff()\
    \ function to compute the differences between adjacent elements of a vector.\n\
    \  # You can use the head() function to get the first few elements of a vector.\n\
    \  # You can use the tail() function to get the last few elements of a vector.\n\
    \  # You can use the is.na() function to check if an element is NA.\n  # You can\
    \ use the is.nan()", "\n  # YOUR CODE HERE\n  # Hint: Use strsplit() to split\
    \ the string into a list of strings.\n  # Hint: Use str_count() to count the number\
    \ of parentheses in each string.\n  # Hint: Use str_count() to count the number\
    \ of parentheses in each string.\n  # Hint: Use str_count() to count the number\
    \ of parentheses in each string.\n  # Hint: Use str_count() to count the number\
    \ of parentheses in each string.\n  # Hint: Use str_count() to count the number\
    \ of parentheses in each string.\n  # Hint: Use str_count() to count the number\
    \ of parentheses in each string.\n  # Hint: Use str_count() to count the number\
    \ of parentheses in each string.\n  # Hint: Use str_count() to count the number\
    \ of parentheses in each string.\n  # Hint: Use str_count() to count the number\
    \ of parentheses in each string.\n  # Hint: Use str_count() to count the number\
    \ of parentheses in each string.\n  # Hint: Use str_count() to count the number\
    \ of parentheses in each string.\n  # Hint: Use str_count() to count the number\
    \ of parentheses in each string.\n  # Hint: Use str_count() to count the number\
    \ of parentheses in each string.\n  # Hint: Use str_count() to count the number\
    \ of parentheses in each string.\n  # Hint: Use str_count() to count the number\
    \ of parentheses in each string.\n  # Hint: Use str_count() to count the number\
    \ of parentheses in each string.\n  # Hint: Use str_count() to count the number\
    \ of parentheses in each string.\n  # Hint: Use str_count() to count the number\
    \ of parentheses in each string.\n  # Hint: Use str_count() to count the number\
    \ of parentheses in each string.\n  # Hint: Use str_count() to count the number\
    \ of parentheses in each string.\n  # Hint: Use str_count() to count the number\
    \ of parentheses in each string.\n  # Hint: Use str_count() to count the number\
    \ of parentheses in each string.\n  # Hint: Use str_count() to count the number\
    \ of parentheses in each string.\n ", "\n  # TODO: Write your code here\n}\n",
  "\n  # YOUR CODE HERE\n  paren_string = strsplit(paren_string, \" \")\n  paren_string\
    \ = unlist(paren_string)\n  paren_string = gsub(\"\\\\(\", \" ( \", paren_string)\n\
    \  paren_string = gsub(\"\\\\)\", \" ) \", paren_string)\n  paren_string = strsplit(paren_string,\
    \ \" \")\n  paren_string = unlist(paren_string)\n  paren_string = paren_string[paren_string\
    \ != \"\"]\n  paren_string = paren_string[paren_string != \" \"]\n  paren_string\
    \ = paren_string[paren_string != \"  \"]\n  paren_string = paren_string[paren_string\
    \ != \"   \"]\n  paren_string = paren_string[paren_string != \"    \"]\n  paren_string\
    \ = paren_string[paren_string != \"     \"]\n  paren_string = paren_string[paren_string\
    \ != \"      \"]\n  paren_string = paren_string[paren_string != \"       \"]\n\
    \  paren_string = paren_string[paren_string != \"        \"]\n  paren_string =\
    \ paren_string[paren_string != \"         \"]\n  paren_string = paren_string[paren_string\
    \ != \"          \"]\n  paren_string = paren_string[paren_string != \"       \
    \    \"]\n  paren_string = paren_string[paren_string != \"            \"]\n  paren_string\
    \ = paren_string[paren_string != \"             \"]\n  paren_string = paren_string[paren_string\
    \ != \"              \"]\n  paren_string = paren_string[paren_string != \"   \
    \            \"]\n  paren_string = paren_string[paren_string != \"           \
    \     \"]\n  paren_string = paren_string[paren_string != \"                 \"\
    ]\n  paren_string = paren_string[paren_string != \"                  \"]\n  paren_string\
    \ = paren_string[paren_string != \"                   \"]\n  paren_", "\n  # Your\
    \ code here\n  paren_string <- strsplit(paren_string, \" \")\n  paren_string <-\
    \ unlist(paren_string)\n  paren_string <- strsplit(paren_string, \"\")\n  paren_string\
    \ <- unlist(paren_string)\n  paren_string <- paren_string[paren_string != \"\"\
    ]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren_string != \")\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren_string\
    \ != \")\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren_string != \")\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[", "\n\
    \  # your code here\n}\n", "\n  # YOUR CODE HERE\n  # split the string into groups\n\
    \  groups <- strsplit(paren_string, \" \")[[1]]\n  # initialize the output list\n\
    \  output <- list()\n  # for each group\n  for (group in groups) {\n    # initialize\
    \ the counter\n    counter <- 0\n    # initialize the maximum counter\n    max_counter\
    \ <- 0\n    # for each character in the group\n    for (char in group) {\n   \
    \   # if the character is a left parenthesis\n      if (char == \"(\") {\n   \
    \     # increase the counter\n        counter <- counter + 1\n        # if the\
    \ counter is greater than the maximum counter\n        if (counter > max_counter)\
    \ {\n          # update the maximum counter\n          max_counter <- counter\n\
    \        }\n      }\n      # if the character is a right parenthesis\n      if\
    \ (char == \")\") {\n        # decrease the counter\n        counter <- counter\
    \ - 1\n      }\n    }\n    # add the maximum counter to the output list\n    output\
    \ <- c(output, max_counter)\n  }\n  # return the output list\n  return(output)\n\
    }\n", "\n  # TODO: Implement this function\n  return(c(2, 3, 1, 3))\n}\n", "\n\
    \  # Your code here\n}\n", "\n  # Write your code here\n}\n", "\n  # TODO: Implement\
    \ this function\n  # Hint: You can use the function you wrote in the previous\
    \ question\n  # Hint: You can use the function you wrote in the previous question\n\
    \  # Hint: You can use the function you wrote in the previous question\n  # Hint:\
    \ You can use the function you wrote in the previous question\n  # Hint: You can\
    \ use the function you wrote in the previous question\n  # Hint: You can use the\
    \ function you wrote in the previous question\n  # Hint: You can use the function\
    \ you wrote in the previous question\n  # Hint: You can use the function you wrote\
    \ in the previous question\n  # Hint: You can use thefunction you wrote in the\
    \ previous question\n  # Hint: You can use the function you wrote in the previous\
    \ question\n  # Hint: You can use the function you wrote in the previous question\n\
    \  # Hint: You can use the function you wrote in the previous question\n  # Hint:\
    \ You can use the function you wrote in the previous question\n  # Hint: You can\
    \ use the function you wrote in the previous question\n  # Hint: You can use the\
    \ function you wrote in the previous question\n  # Hint: You can use the function\
    \ you wrote in the previous question\n  # Hint: You can use the function you wrote\
    \ in the previous question\n  # Hint: You can use the function you wrote in the\
    \ previous question\n  # Hint: You can use the function you wrote in the previous\
    \ question\n  # Hint: You can use the function you wrote in the previous question\n\
    \  # Hint: You can use the function you wrote in the previous question\n  # Hint:\
    \ You can use the function you wrote in the previous question\n  # Hint: You can\
    \ use the function you wrote in the previous question\n  # Hint: You can use the\
    \ function you wrote in the previous question\n  # Hint: You can use the function\
    \ you wrote in the previous question\n  # Hint: You can use the function you wrote\
    \ in the previous question\n  # Hint: You can use the function you wrote in the\
    \ previous question\n  # Hint: You can use the function you wrote in the previous\
    \ question\n  # Hint: You can use the function you wrote in the previous question\n\
    \  # Hint: You can use", "\n  # Your code here\n  return(c(2, 3, 1, 3))\n}\n",
  "\n  # TODO: Write code here\n  paren_string <- strsplit(paren_string, \" \")\n\
    \  paren_string <- unlist(paren_string)\n  paren_string <- gsub(\"[()]\", \"\"\
    , paren_string)\n  paren_string <- strsplit(paren_string, \"\")\n  paren_string\
    \ <- unlist(paren_string)\n  paren_string <- str_count(paren_string, \"\\\\(\"\
    ) - str_count(paren_string, \"\\\\)\")\n  paren_string <- abs(paren_string)\n\
    \  return(paren_string)\n}\n", "\n  # split the string into groups\n  groups <-\
    \ strsplit(paren_string, ' ')[[1]]\n  # for each group, count the number of opening\
    \ and closing parentheses\n  # and take the difference\n  sapply(groups, function(x)\
    \ {\n    sum(strsplit(x, '')[[1]] == '(') - sum(strsplit(x, '')[[1]] == ')')\n\
    \  })\n}\n", "\n  # TODO: Fill in the function body\n  # Hint: Use strsplit to\
    \ split the string into a list of strings, each of which represents a group of\
    \ parentheses.\n  # Hint: Use str_count to count the number of parentheses in\
    \ each group.\n  # Hint: Use str_match to find the deepest level of nesting of\
    \ parentheses.\n  # Hint: Use sapply to apply the above functions to each group.\n\
    \  # Hint: Use as.numeric to convert the result to a numeric vector.\n}\n", "\n\
    \  # TODO: Write your code here\n  # Hint: You can use the function parse_parens()\n\
    \  # Hint: You can use the function parse_parens()\n  paren_string <- strsplit(paren_string,\
    \ \" \")\n  paren_string <- unlist(paren_string)\n  paren_string <- lapply(paren_string,\
    \ parse_parens)\n  paren_string <- unlist(paren_string)\n  paren_string <- lapply(paren_string,\
    \ function(x) max(x))\n  paren_string <- unlist(paren_string)\n  return(paren_string)\n\
    }\n", "\n  # Write your code here\n  paren_string <- strsplit(paren_string, \"\
    \ \")\n  paren_string <- unlist(paren_string)\n  paren_string <- strsplit(paren_string,\
    \ \"\")\n  paren_string <- unlist(paren_string)\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren_string\
    \ != \")\"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren_string != \")\"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren_string\
    \ != \")\"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren_string != \")\"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[", "\n  # Your code goes here\n}\n", "\n  # Your code here\n\
    \  paren_string <- strsplit(paren_string, \" \")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren_string\
    \ != \")\"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren_string != \")\"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren_string\
    \ != \")\"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren", "\n  # Your code here\n}\n",
  "\n  # Write your code here\n  # You can create other functions as well\n  # You\
    \ can use the strsplit() function to split the string into groups\n  # You can\
    \ use the str_count() function from the stringr package to count the number of\
    \ parentheses\n  # You can use the max() function to find the maximum number of\
    \ parentheses\n  # You can use the unlist() function to convert a list to a vector\n\
    \  # You can use the as.integer() function to convert a character to an integer\n\
    }\n", "\n  # Your code here\n  return(c(2, 3, 1, 3))\n}\n", "\n  # TODO: Write\
    \ code here\n  paren_string <- strsplit(paren_string, \" \")\n  paren_string <-\
    \ unlist(paren_string)\n  paren_string <- strsplit(paren_string, \"\")\n  paren_string\
    \ <- unlist(paren_string)\n  paren_string <- paren_string[paren_string != \"\"\
    ]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_", "\n  # TODO: Complete this\
    \ function\n  # Hint: Use the parse_parens function you wrote above\n  # Hint:\
    \ Use the sapply function\n  # Hint: Use the max function\n  # Hint: Use the strsplit\
    \ function\n  # Hint: Use the unlist function\n}\n", "\n  # your code here\n \
    \ paren_string <- strsplit(paren_string, \" \")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren_string\
    \ != \")\"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren_string != \")\"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren_string\
    \ != \")\"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren", "\n  # YOUR CODE HERE\n  #\
    \ Hint: You can use the function parse_parens() that you wrote above.\n  # Hint:\
    \ You can use the function parse_parens() that you wrote above.\n  # Hint: You\
    \ can use the function parse_parens() that you wrote above.\n  # Hint: You can\
    \ use the function parse_parens() that you wrote above.\n  # Hint: You can use\
    \ the function parse_parens() that you wrote above.\n  # Hint: You can use the\
    \ function parse_parens() that you wrote above.\n  # Hint: You can use the function\
    \ parse_parens() that you wrote above.\n  # Hint: You can use the function parse_parens()\
    \ that you wrote above.\n  # Hint: You can use the function parse_parens() that\
    \ you wrote above.\n  # Hint: You can use the function parse_parens() that you\
    \ wrote above.\n  # Hint: You can use the function parse_parens() that you wrote\
    \ above.\n  # Hint: You can use the function parse_parens() that you wrote above.\n\
    \  # Hint: You can use the function parse_parens() that you wrote above.\n  #\
    \ Hint: You can use the function parse_parens() that you wrote above.\n  # Hint:\
    \ You can use the function parse_parens() that you wrote above.\n  # Hint: You\
    \ can use the function parse_parens() that you wrote above.\n  # Hint: You can\
    \ use the function parse_parens() that you wrote above.\n  # Hint: You can use\
    \ the function parse_parens() that you wrote above.\n  # Hint: You can use the\
    \ function parse_parens() that you wrote above.\n  # Hint: You can use the function\
    \ parse_parens() that you wrote above.\n  # Hint: You can use the function parse_parens()\
    \ that you wrote above.\n  # Hint: You can use the function parse_parens() that\
    \ you wrote above.\n  # Hint: You can use the function parse_parens() that you\
    \ wrote above.\n  # Hint: You can use the function parse_parens() that you wrote\
    \ above.\n", "\n  # Your code here\n  # Hint: Use regex to find the groups and\
    \ then use the function you wrote above.\n  # Hint: Use the function unlist to\
    \ convert the list of lists to a single list.\n  # Hint: Use the function sapply\
    \ to apply a function to each element of a list.\n  # Hint: Use the function max\
    \ to find the maximum value of a vector.\n  # Hint: Use the function which to\
    \ find the index of the maximum value of a vector.\n  # Hint: Use the function\
    \ sort to sort a vector.\n  # Hint: Use the function rev to reverse a vector.\n\
    \  # Hint: Use the function which.max to find the index of the maximum value of\
    \ a vector.\n  # Hint: Use the function which.min to find the index of the minimum\
    \ value of a vector.\n  # Hint: Use the function which.min to find the index of\
    \ the minimum value of a vector.\n  # Hint: Use the function which.min to find\
    \ the index of the minimum value of a vector.\n  # Hint: Use the function which.min\
    \ to find the index of the minimum value of a vector.\n  # Hint: Use the function\
    \ which.min to find the index of the minimum value of a vector.\n  # Hint: Use\
    \ the function which.min to find the index of the minimum value of a vector.\n\
    \  # Hint: Use the function which.min to find the index of the minimum value of\
    \ a vector.\n  # Hint: Use the function which.min to find the index of the minimum\
    \ value of a vector.\n  # Hint: Use the function which.min to find the index of\
    \ the minimum value of a vector.\n  # Hint: Use the function which.min to find\
    \ the index of the minimum value of a vector.\n  # Hint: Use the function which.min\
    \ to find the index of the minimum value of a vector.\n  # Hint: Use the function\
    \ which.min to find the index of the minimum value of a vector.\n  # Hint: Use\
    \ the function which.min to find the index of the minimum value of a vector.\n\
    \  # Hint: Use the function which.min to find the index of the minimum value of\
    \ a vector.\n  # Hint: Use the", "\n  # TODO: Implement this function\n  # Hint:\
    \ You can use the stack data structure to keep track of the current level of nesting.\n\
    \  # Hint: You can use the stringr package to split the string into groups.\n\
    \  # Hint: You can use the stringi package to iterate over the characters in each\
    \ group.\n  # Hint: You can use the stringr package to remove the outer parentheses\
    \ from each group.\n  # Hint: You can use the stringr package to remove the inner\
    \ parentheses from each group.\n  # Hint: You can use the stringr package to count\
    \ the number of parentheses in each group.\n  # Hint: You can use the stringr\
    \ package to count the number of parentheses in each group.\n  # Hint: You can\
    \ use the stringr package to count the number of parentheses in each group.\n\
    \  # Hint: You can use the stringr package to count the number of parentheses\
    \ in each group.\n  # Hint: You can use the stringr package to count the number\
    \ of parentheses in each group.\n  # Hint: You can use the stringr package to\
    \ count the number of parentheses in each group.\n  # Hint: You can use the stringr\
    \ package to count the number of parentheses in each group.\n  # Hint: You can\
    \ use the stringr package to count the number of parentheses in each group.\n\
    \  # Hint: You can use the stringr package to count the number of parentheses\
    \ in each group.\n  # Hint: You can use the stringr package to count the number\
    \ of parentheses in each group.\n  # Hint: You can use the stringr package to\
    \ count the number of parentheses in each group.\n  # Hint: You can use the stringr\
    \ package to count the number of parentheses in each group.\n  # Hint: You can\
    \ use the stringr package to count the number of parentheses in each group.\n\
    \  # Hint: You can use the stringr package to count the number of parentheses\
    \ in each group.\n  # Hint: You can use the stringr package to count the number\
    \ of parentheses in each group.\n  # Hint: You can use the stringr package to\
    \ count the number of parentheses in each group.\n  # Hint: You can use the stringr\
    \ package to count the number of parentheses in each group.\n", "\n  # Your code\
    \ here\n}\n", "\n  # Split the string into groups\n  groups <- strsplit(paren_string,\
    \ ' ')[[1]]\n  # For each group, count the number of open and close parentheses\n\
    \  num_open <- sapply(groups, function(x) sum(strsplit(x, '')[[1]] == '('))\n\
    \  num_close <- sapply(groups, function(x) sum(strsplit(x, '')[[1]] == ')'))\n\
    \  # The deepest level of nesting is the maximum number of open parentheses minus\
    \ the number of close parentheses\n  max(num_open - num_close)\n}\n", "\n  # YOUR\
    \ CODE HERE\n  paren_string <- strsplit(paren_string, ' ')[[1]]\n  paren_string\
    \ <- gsub('\\\\(', ' ( ', paren_string)\n  paren_string <- gsub('\\\\)', ' ) ',\
    \ paren_string)\n  paren_string <- strsplit(paren_string, ' ')[[1]]\n  paren_string\
    \ <- paren_string[paren_string != '']\n  paren_string <- paren_string[paren_string\
    \ != ' ']\n  paren_string <- paren_string[paren_string != '(']\n  paren_string\
    \ <- paren_string[paren_string != ')']\n  paren_string <- paren_string[paren_string\
    \ != '()']\n  paren_string <- paren_string[paren_string != '()()']\n  paren_string\
    \ <- paren_string[paren_string != '()()()']\n  paren_string <- paren_string[paren_string\
    \ != '()()()()']\n  paren_string <- paren_string[paren_string != '()()()()()']\n\
    \  paren_string <- paren_string[paren_string != '()()()()()()']\n  paren_string\
    \ <- paren_string[paren_string != '()()()()()()()']\n  paren_string <- paren_string[paren_string\
    \ != '()()()()()()()()']\n  paren_string <- paren_string[paren_string != '()()()()()()()()()']\n\
    \  paren_string <- paren_string[paren_string != '()()()()()()()()()()']\n  paren_string\
    \ <- paren_string[paren_string != '()()()()()()()()()()()']\n  paren_string <-\
    \ paren_string[paren_string != '()()()()()()()()()()()()']\n  paren_string <-\
    \ paren_string[paren_string != '()()()()()()()()()()()()()']\n  paren_string <-\
    \ paren_string[paren_string != '()()()()()()", "\n  # Split the string by spaces\n\
    \  paren_groups <- strsplit(paren_string, ' ')[[1]]\n  # For each group, count\
    \ the maximum number of nested parentheses\n  max_nested_parens <- sapply(paren_groups,\
    \ function(group) {\n    # Initialize a counter to keep track of the number of\
    \ nested parentheses\n    counter <- 0\n    # Initialize a max counter to keep\
    \ track of the maximum number of nested parentheses\n    max_counter <- 0\n  \
    \  # For each character in the group\n    for (i in 1:nchar(group)) {\n      #\
    \ If the character is an opening parenthesis, increment the counter\n      if\
    \ (substr(group, i, i) == '(') {\n        counter <- counter + 1\n      }\n  \
    \    # If the character is a closing parenthesis, decrement the counter\n    \
    \  if (substr(group, i, i) == ')') {\n        counter <- counter - 1\n      }\n\
    \      # If the counter is greater than the max counter, update the max counter\n\
    \      if (counter > max_counter) {\n        max_counter <- counter\n      }\n\
    \    }\n    # Return the max counter\n    return(max_counter)\n  })\n  # Return\
    \ the max counter for each group\n  return(max_nested_parens)\n}\n", "\n  # YOUR\
    \ CODE HERE\n  # Hint: You can use the function you wrote in the previous question\n\
    \  # Hint: You can use the function you wrote in the previous question\n  # Hint:\
    \ You can use the function you wrote in the previous question\n  # Hint: You can\
    \ use the function you wrote in the previous question\n  # Hint: You can use the\
    \ function you wrote in the previous question\n  # Hint: You can use the function\
    \ you wrote in the previous question\n  # Hint: You can use the function you wrote\
    \ in the previous question\n  # Hint: You can use the function you wrote in the\
    \ previous question\n  # Hint: You can use the function you wrote in the previous\
    \ question\n  # Hint: You can use the function you wrote in the previous question\n\
    \  # Hint: You can use the function you wrote in the previous question\n  # Hint:\
    \ You can use the function you wrote in the previous question\n  # Hint: You can\
    \ use the function you wrote in the previous question\n  # Hint: You can use the\
    \ function you wrote in the previous question\n  # Hint: You can use the function\
    \ you wrote in the previous question\n  # Hint: You can use the function you wrote\
    \ in the previous question\n  # Hint: You can use the function you wrote in the\
    \ previous question\n  # Hint: You can use the function you wrote in the previous\
    \ question\n  # Hint: You can use the function you wrote in the previous question\n\
    \  # Hint: You can use the function you wrote in the previous question\n  # Hint:\
    \ You can use the function you wrote in the previous question\n  # Hint: You can\
    \ use the function you wrote in the previous question\n  # Hint: You can use the\
    \ function you wrote in the previous question\n  # Hint: You can use the function\
    \ you wrote in the previous question\n  # Hint: You can use the function you wrote\
    \ in the previous question\n  # Hint: You can use the function you wrote in the\
    \ previous question\n  # Hint: You can use the function you wrote in the previous\
    \ question\n  # Hint: You can use the function you wrote in the previous question\n\
    \  # Hint: You can use the function you wrote in the previous question\n  # Hint:\
    \ You can use the function you", "\n  # TODO: Write code here\n}\n", "\n  # Your\
    \ code here\n}\n", "\n  # YOUR CODE HERE\n  # Hint: Use strsplit() and str_count()\n\
    \  # Hint: Use sapply()\n  # Hint: Use str_count()\n  # Hint: Use str_count()\n\
    \  # Hint: Use str_count()\n  # Hint: Use str_count()\n  # Hint: Use str_count()\n\
    \  # Hint: Use str_count()\n  # Hint: Use str_count()\n  # Hint: Use str_count()\n\
    \  # Hint: Use str_count()\n  # Hint: Use str_count()\n  # Hint: Use str_count()\n\
    \  # Hint: Use str_count()\n  # Hint: Use str_count()\n  # Hint: Use str_count()\n\
    \  # Hint: Use str_count()\n  # Hint: Use str_count()\n  # Hint: Use str_count()\n\
    \  # Hint: Use str_count()\n  # Hint: Use str_count()\n  # Hint: Use str_count()\n\
    \  # Hint: Use str_count()\n  # Hint: Use str_count()\n  # Hint: Use str_count()\n\
    \  # Hint: Use str_count()\n  # Hint: Use str_count()\n  # Hint: Use str_count()\n\
    \  # Hint: Use str_count()\n  # Hint: Use str_count()\n  # Hint: Use str_count()\n\
    \  # Hint: Use str_count()\n  # Hint: Use str_count()\n  # Hint: Use str_count()\n\
    \  # Hint: Use str_count()\n  # Hint: Use str_count()\n  # Hint: Use str_count()\n\
    \  # Hint: Use str_count()\n  # Hint: Use str_count()\n  # Hint: Use str_count()\n\
    \  # Hint: Use str_count()\n  # Hint: Use str_count()\n  # Hint: Use str_count()\n\
    \  # Hint: Use str_count()\n  # Hint: Use str_count()\n  # Hint:", "\n  # TODO:\
    \ implement this function\n  # Hint: use regex to match parentheses\n  # Hint:\
    \ use str_count to count the number of parentheses\n  # Hint: use str_split to\
    \ split the string by space\n  # Hint: use str_replace to remove the parentheses\n\
    \  # Hint: use str_count to count the number of parentheses\n  # Hint: use str_replace\
    \ to remove the parentheses\n  # Hint: use str_count to count the number of parentheses\n\
    \  # Hint: use str_replace to remove the parentheses\n  # Hint: use str_count\
    \ to count the number of parentheses\n  # Hint: use str_replace to remove the\
    \ parentheses\n  # Hint: use str_count to count the number of parentheses\n  #\
    \ Hint: use str_replace to remove the parentheses\n  # Hint: use str_count to\
    \ count the number of parentheses\n  # Hint: use str_replace to remove the parentheses\n\
    \  # Hint: use str_count to count the number of parentheses\n  # Hint: use str_replace\
    \ to remove the parentheses\n  # Hint: use str_count to count the number of parentheses\n\
    \  # Hint: use str_replace to remove the parentheses\n  # Hint: use str_count\
    \ to count the number of parentheses\n  # Hint: use str_replace to remove the\
    \ parentheses\n  # Hint: use str_count to count the number of parentheses\n  #\
    \ Hint: use str_replace to remove the parentheses\n  # Hint: use str_count to\
    \ count the number of parentheses\n  # Hint: use str_replace to remove the parentheses\n\
    \  # Hint: use str_count to count the number of parentheses\n  # Hint: use str_replace\
    \ to remove the parentheses\n  # Hint: use str_count to count the number of parentheses\n\
    \  # Hint: use str_replace to remove the parentheses\n  # Hint: use str_count\
    \ to count the number of parentheses\n  # Hint: use str_replace to remove the\
    \ parentheses\n  # Hint: use str_count to count the number of parentheses\n  #\
    \ Hint: use str_replace to remove the parentheses\n  # Hint: use str_count to\
    \ count the number of parentheses\n  # Hint: use str_", "\n  # TODO: Write code\
    \ here\n  # Hint: Use strsplit and parse_parens\n  # Hint: Use sapply to apply\
    \ parse_parens to each element of the list returned by strsplit\n  strsplit(paren_string,\
    \ \" \")[[1]]\n  sapply(strsplit(paren_string, \" \")[[1]], parse_parens)\n}\n",
  "\n  # Split the string into groups\n  groups <- strsplit(paren_string, ' ')[[1]]\n\
    \  # For each group, count the number of opening and closing parentheses\n  counts\
    \ <- sapply(groups, function(group) {\n    sum(strsplit(group, '')[[1]] == '(')\
    \ - sum(strsplit(group, '')[[1]] == ')')\n  })\n  # For each group, count the\
    \ number of opening parentheses\n  opens <- sapply(groups, function(group) {\n\
    \    sum(strsplit(group, '')[[1]] == '(')\n  })\n  # For each group, count the\
    \ number of closing parentheses\n  closes <- sapply(groups, function(group) {\n\
    \    sum(strsplit(group, '')[[1]] == ')')\n  })\n  # For each group, count the\
    \ number of opening parentheses that are not closed\n  unclosed <- sapply(groups,\
    \ function(group) {\n    # Split the group into characters\n    chars <- strsplit(group,\
    \ '')[[1]]\n    # Initialize the count of unclosed parentheses\n    unclosed <-\
    \ 0\n    # For each character, update the count of unclosed parentheses\n    for\
    \ (char in chars) {\n      if (char == '(') {\n        unclosed <- unclosed +\
    \ 1\n      } else if (char == ')') {\n        unclosed <- unclosed - 1\n     \
    \ }\n    }\n    # Return the count of unclosed parentheses\n    unclosed\n  })\n\
    \  # For each group, count the number of closing parentheses that are not opened\n\
    \  unopened <- sapply(groups, function(group) {\n    # Split the group into characters\n\
    \    chars <- strsplit(group, '')[[1]]\n    # Initialize the count of unopened\
    \ parentheses\n    unopened <- 0\n    # For each character, update the count of\
    \ unopened parentheses\n    for (char in chars) {\n      if (char == ')') {\n\
    \        unopened <- unopened + 1\n      } else if (char == '(') {\n        unopened\
    \ <- unopened - 1\n      }\n    }\n    # Return the count of unopened parentheses\n\
    \    unopened\n  })\n  # For", "\n  # Your code here\n}\n", "\n  # YOUR CODE HERE\n\
    \  paren_string <- strsplit(paren_string, \" \")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- p", "\n  # TODO: Implement this function\n  paren_string\
    \ <- strsplit(paren_string, \" \")\n  paren_string <- unlist(paren_string)\n \
    \ paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren_string\
    \ != \")\"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren_string != \")\"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren_string\
    \ != \")\"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_"]
stop_tokens:
- "\n#"
- "\n```"
