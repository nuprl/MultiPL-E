name: HumanEval_120_maximum
language: humaneval_to_r.py
prompt: "# Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
  \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr =\
  \ [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2, 1, 2,\
  \ -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array will be\
  \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
  \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum <- function(arr, k) {"
tests: "test_humaneval <- function() {\ncandidate <- maximum\n    if(!identical(candidate(c(-3,\
  \ -4, 5), 3), c(-4, -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4, -4,\
  \ 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3, 2, 1, 2, -1,\
  \ -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123, -123, 20,\
  \ 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
  \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
  \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n    if(!identical(candidate(c(-1,\
  \ 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(1,\
  \ 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4, -4), 2),\
  \ c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10), 2), c(-10,\
  \ 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23, 243, -400, 0),\
  \ 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n    if (length(arr) == 0) {\n        return(NULL)\n    }\n    if\
    \ (length(arr) == 1) {\n        return(arr)\n    }\n    if (k == 1) {\n      \
    \  return(max(arr))\n    }\n    if (k == length(arr)) {\n        return(sort(arr,\
    \ decreasing = TRUE))\n    }\n    if (k > length(arr)) {\n        return(NULL)\n\
    \    }\n    if (k < 1) {\n        return(NULL)\n    }\n    if (k < length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE)[1:k])\n    }\n}\n", "\n    #\
    \ Sort the array in descending order.\n    arr <- sort(arr, decreasing = TRUE)\n\
    \    # Return the first k elements of the sorted array.\n    return(arr[1:k])\n\
    }\n", "\n    # write your code here\n    if (length(arr) == 0) {\n        return(arr)\n\
    \    }\n    if (k == 0) {\n        return(c())\n    }\n    if (k > length(arr))\
    \ {\n        return(arr)\n    }\n    if (k == 1) {\n        return(max(arr))\n\
    \    }\n    if (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k < length(arr)) {\n        return(sort(arr, decreasing = TRUE)[1:k])\n\
    \    }\n}\n", "\n    # Write your code here\n    # Sort the array in descending\
    \ order\n    arr <- sort(arr, decreasing = TRUE)\n    # Return the first k elements\n\
    \    return(arr[1:k])\n}", "\n    # Write your code here\n    # Sort the array\
    \ in descending order\n    sort(arr, decreasing = TRUE)[1:k]\n}\n", "\n    sort(arr,\
    \ decreasing = TRUE)[1:k]\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\n\
    maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n    if (k == 0) {\n        return(NULL)\n\
    \    }\n    if (k == 1) {\n        return(max(arr))\n    }\n    if (k == length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE))\n    }\n    if (k > length(arr))\
    \ {\n        stop(\"k should be smaller than the length of arr\")\n    }\n   \
    \ # create a vector of length k\n    result <- vector(mode = \"numeric\", length\
    \ = k)\n    # fill the vector with the first k elements of arr\n    result[1:k]\
    \ <- arr[1:k]\n    # sort the vector\n    result <- sort(result, decreasing =\
    \ TRUE)\n    # loop through the rest of the elements in arr\n    for (i in (k\
    \ + 1):length(arr)) {\n        # if the element is larger than the smallest element\
    \ in the vector\n        if (arr[i] > result[k]) {\n            # replace the\
    \ smallest element with the element\n            result[k] <- arr[i]\n       \
    \     # sort the vector\n            result <- sort(result, decreasing = TRUE)\n\
    \        }\n    }\n    return(result)\n}", "\n    if (k == 1) {\n        return(max(arr))\n\
    \    }\n    if (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k > length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k < 1) {\n        return(NULL)\n    }\n    if (k == 2) {\n   \
    \     return(sort(arr, decreasing = TRUE)[1:2])\n    }\n    if (k == 3) {\n  \
    \      return(sort(arr, decreasing = TRUE)[1:3])\n    }\n    if (k == 4) {\n \
    \       return(sort(arr, decreasing = TRUE)[1:4])\n    }\n    if (k == 5) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:5])\n    }\n    if (k == 6) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:6])\n    }\n    if (k == 7) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:7])\n    }\n    if (k == 8) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:8])\n    }\n    if (k == 9) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:9])\n    }\n    if (k == 10) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:10])\n    }\n    if (k == 11) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:11])\n    }\n    if (k == 12) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:12])\n    }\n    if (k == 13) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:13])\n    }\n    if (k == 14) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:14])\n    }\n    if (k == 15) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:15])\n    }\n    if (k == 16) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:16])\n    }\n", "\n    if (k ==\
    \ 1) {\n        return(max(arr))\n    }\n    if (k == length(arr)) {\n       \
    \ return(sort(arr, decreasing = TRUE))\n    }\n    result <- arr[1:k]\n    result\
    \ <- sort(result, decreasing = TRUE)\n    for (i in (k + 1):length(arr)) {\n \
    \       if (arr[i] > result[k]) {\n            result[k] <- arr[i]\n         \
    \   result <- sort(result, decreasing = TRUE)\n        }\n    }\n    return(result)\n\
    }\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1,\
    \ -2, 1), 1)\n", "\n    if (k == 0) return(integer(0))\n    if (k == 1) return(max(arr))\n\
    \    if (k == length(arr)) return(sort(arr, decreasing = TRUE))\n    if (k > length(arr))\
    \ return(arr)\n    # if (k < length(arr))\n    #     return(sort(arr, decreasing\
    \ = TRUE)[1:k])\n    # else\n    #     return(arr)\n}\n", "\n    arr <- sort(arr,\
    \ decreasing = TRUE)\n    arr[1:k]\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4,\
    \ -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n    # Write your code\
    \ here.\n    return(sort(arr, decreasing = TRUE)[1:k])\n}\n", "\n    if (k ==\
    \ 1) {\n        return(max(arr))\n    }\n    if (k == length(arr)) {\n       \
    \ return(sort(arr, decreasing = TRUE))\n    }\n    if (k > length(arr)) {\n  \
    \      return(sort(arr, decreasing = TRUE))\n    }\n    if (k < 1) {\n       \
    \ return(NULL)\n    }\n    arr <- sort(arr, decreasing = TRUE)\n    return(arr[1:k])\n\
    }\n", "\n    if (k == 0) {\n        return(NULL)\n    }\n    if (k == 1) {\n \
    \       return(max(arr))\n    }\n    if (k == length(arr)) {\n        return(sort(arr,\
    \ decreasing = TRUE))\n    }\n    if (k > length(arr)) {\n        return(sort(arr,\
    \ decreasing = TRUE))\n    }\n    if (k < length(arr)) {\n        return(sort(arr,\
    \ decreasing = TRUE)[1:k])\n    }\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4,\
    \ 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n    if (k == 1) {\n   \
    \     return(max(arr))\n    }\n    if (k == length(arr)) {\n        return(sort(arr,\
    \ decreasing = TRUE))\n    }\n    if (k > length(arr)) {\n        return(sort(arr,\
    \ decreasing = TRUE))\n    }\n    if (k < 1) {\n        return(NULL)\n    }\n\
    \    return(sort(arr, decreasing = TRUE)[1:k])\n}\nmaximum(c(-3, -4, 5), 3)\n\
    maximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n    # Sort\
    \ the array in descending order\n    arr <- sort(arr, decreasing = TRUE)\n   \
    \ # Return the first k elements\n    return(arr[1:k])\n}\narr <- c(-3, -4, 5)\n\
    k <- 3\nmaximum(arr, k)\narr <- c(4, -4, 4)\nk <- 2\nmaximum(arr, k)\narr <- c(-3,\
    \ 2, 1, 2, -1, -2, 1)\nk <- 1\nmaximum(arr, k)\n", "\n    if (k == 1) {\n    \
    \    return(max(arr))\n    }\n    if (k == length(arr)) {\n        return(sort(arr,\
    \ decreasing = TRUE))\n    }\n    if (k > length(arr)) {\n        stop(\"k is\
    \ greater than length of arr\")\n    }\n    if (k < 1) {\n        stop(\"k is\
    \ less than 1\")\n    }\n    if (length(arr) == 1) {\n        return(arr)\n  \
    \  }\n    if (length(arr) == 2) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (length(arr) == 3) {\n        return(sort(arr, decreasing = TRUE)[1:k])\n\
    \    }\n    if (length(arr) > 3) {\n        return(sort(arr, decreasing = TRUE)[1:k])\n\
    \    }\n}\n", "\n    arr <- sort(arr, decreasing = TRUE)\n    return(arr[1:k])\n\
    }\n", "\n    # Write your code here\n    # Sort the array in descending order\n\
    \    arr <- sort(arr, decreasing = TRUE)\n    # Return the first k elements\n\
    \    return(arr[1:k])\n}\n", "\n    # Write your code here\n    return(sort(arr,\
    \ decreasing = TRUE)[1:k])\n}\n", "\n    sort(arr, decreasing = TRUE)[1:k]\n}\n\
    maximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1,\
    \ -2, 1), 1)\n", "\n    # Sort the array in descending order.\n    arr <- sort(arr,\
    \ decreasing = TRUE)\n    # Return the first k elements.\n    return(arr[1:k])\n\
    }\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1,\
    \ -2, 1), 1)\n", "\n    arr[order(arr, decreasing = TRUE)][1:k]\n}\nmaximum(c(-3,\
    \ -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n",
  "\n    if (k == 0) {\n        return(NULL)\n    }\n    if (k == 1) {\n        return(max(arr))\n\
    \    }\n    if (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k > length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k < length(arr)) {\n        return(sort(arr, decreasing = TRUE)[1:k])\n\
    \    }\n}\n", "\n    if (k == 1) {\n        return(max(arr))\n    }\n    if (k\
    \ == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n    }\n   \
    \ if (k > length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n    }\n\
    \    if (k < 1) {\n        return(NULL)\n    }\n    # create a vector of length\
    \ k\n    max_k <- rep(0, k)\n    # loop through arr\n    for (i in 1:length(arr))\
    \ {\n        # if arr[i] is greater than the smallest value in max_k\n       \
    \ if (arr[i] > min(max_k)) {\n            # replace the smallest value in max_k\
    \ with arr[i]\n            max_k[which.min(max_k)] <- arr[i]\n        }\n    }\n\
    \    return(sort(max_k, decreasing = TRUE))\n}", "\n    # Write your code here\n\
    \    # Sort the array in descending order\n    # Return the first k elements\n\
    \    return(sort(arr, decreasing = TRUE)[1:k])\n}\n", "\n    # Write your code\
    \ here\n    max <- arr[1]\n    for (i in 2:length(arr)) {\n        if (arr[i]\
    \ > max) {\n            max <- arr[i]\n        }\n    }\n    return(max)\n}\n\n\
    maximum_k <- function(arr, k) {\n    # Write your code here\n    max_k <- arr[1:k]\n\
    \    for (i in (k+1):length(arr)) {\n        max <- maximum(max_k, k)\n      \
    \  if (arr[i] > max) {\n            max_k <- arr[i]\n            for (j in 1:(k-1))\
    \ {\n                max_k[j] <- max_k[j+1]\n            }\n        }\n    }\n\
    \    return(max_k)\n}\n", "\n    # Write your code here\n    arr <- sort(arr,\
    \ decreasing = TRUE)\n    return(arr[1:k])\n}\n", "\n    # Write your code here\n\
    \    arr <- sort(arr, decreasing = TRUE)\n    return(arr[1:k])\n}\n", "\n    if\
    \ (k == 1) {\n        return(max(arr))\n    }\n    if (k == length(arr)) {\n \
    \       return(sort(arr, decreasing = TRUE))\n    }\n    if (k > length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE))\n    }\n    if (k < 1) {\n \
    \       return(NULL)\n    }\n    # Create a vector of length k\n    max_k <- rep(0,\
    \ k)\n    # Iterate through the array\n    for (i in 1:length(arr)) {\n      \
    \  # If the current element is greater than the minimum of the max_k vector\n\
    \        if (arr[i] > min(max_k)) {\n            # Replace the minimum with the\
    \ current element\n            max_k[which.min(max_k)] <- arr[i]\n        }\n\
    \    }\n    # Return the sorted max_k vector\n    return(sort(max_k, decreasing\
    \ = TRUE))\n}\n", "\n    # Write your code here\n    arr <- sort(arr, decreasing\
    \ = TRUE)\n    return(arr[1:k])\n}\n", "\n    if (k == 1) {\n        return(max(arr))\n\
    \    }\n    if (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    arr <- sort(arr, decreasing = TRUE)\n    return(arr[1:k])\n}\n", "\n\
    \    if (length(arr) < k) {\n        return(arr)\n    }\n    if (k == 1) {\n \
    \       return(max(arr))\n    }\n    if (k == length(arr)) {\n        return(sort(arr,\
    \ decreasing = TRUE))\n    }\n    max_arr <- arr[1]\n    for (i in 2:k) {\n  \
    \      if (arr[i] > max_arr) {\n            max_arr <- arr[i]\n        }\n   \
    \ }\n    return(c(max_arr, maximum(arr[-which(arr == max_arr)], k - 1)))\n}\n\
    maximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1,\
    \ -2, 1), 1)\n", "\n    # write your code here\n    sort(arr, decreasing = TRUE)[1:k]\n\
    }", "\n    # Write your code here\n    # Sort the array in descending order\n\
    \    # Return the first k elements\n    sort(arr, decreasing = TRUE)[1:k]\n}\n",
  "\n    if (k == 0) return(integer(0))\n    if (k == 1) return(max(arr))\n    if\
    \ (k == length(arr)) return(sort(arr, decreasing = TRUE))\n    if (k > length(arr))\
    \ return(arr)\n    if (k < length(arr)) {\n        max_arr <- arr[1]\n       \
    \ for (i in 2:length(arr)) {\n            if (arr[i] > max_arr) {\n          \
    \      max_arr <- arr[i]\n            }\n        }\n        return(max_arr)\n\
    \    }\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2,\
    \ 1, 2, -1, -2, 1), 1)\n", "\n    arr <- sort(arr, decreasing = TRUE)\n    return(arr[1:k])\n\
    }\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1,\
    \ -2, 1), 1)\n", "\n    if (k == 1) {\n        return(max(arr))\n    }\n    if\
    \ (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n    }\n\
    \    if (k > length(arr)) {\n        stop(\"k is larger than length of arr\")\n\
    \    }\n    if (k < 1) {\n        stop(\"k is less than 1\")\n    }\n    if (length(arr)\
    \ == 1) {\n        return(arr)\n    }\n    if (length(arr) == 2) {\n        if\
    \ (arr[1] > arr[2]) {\n            return(c(arr[1], arr[2]))\n        } else {\n\
    \            return(c(arr[2], arr[1]))\n        }\n    }\n    if (length(arr)\
    \ == 3) {\n        if (arr[1] > arr[2]) {\n            if (arr[1] > arr[3]) {\n\
    \                if (arr[2] > arr[3]) {\n                    return(c(arr[1],\
    \ arr[2], arr[3]))\n                } else {\n                    return(c(arr[1],\
    \ arr[3], arr[2]))\n                }\n            } else {\n                return(c(arr[3],\
    \ arr[1], arr[2]))\n            }\n        } else {\n            if (arr[2] >\
    \ arr[3]) {\n                if (arr[1] > arr[3]) {\n                    return(c(arr[2],\
    \ arr[1], arr[3]))\n                } else {\n                    return(c(arr[2],\
    \ arr[3], arr[1]))\n                }\n            } else {\n                return(c(arr[3],\
    \ arr[2], arr[1]))\n            }\n        }\n    }\n    if (length(arr) > 3)\
    \ {\n        if (k == 2) {\n            if (arr[1] > arr[2]) {\n             \
    \   if (arr[1] > arr[3]) {\n                    if (arr[2] > arr[3]) {\n     \
    \                   return(c(arr[1], arr[2]))\n                    } else {\n\
    \                        return(c(arr", "\n    # Sort the array in descending\
    \ order\n    arr <- sort(arr, decreasing = TRUE)\n    # Return the first k elements\n\
    \    return(arr[1:k])\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\n\
    maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n    # Write your code here\n    #\
    \ Sort the array in descending order\n    arr <- sort(arr, decreasing = TRUE)\n\
    \    # Return the first k elements\n    return(arr[1:k])\n}", "\n    # Write your\
    \ code here\n    if (length(arr) < k) {\n        return(arr)\n    }\n    for (i\
    \ in 1:(length(arr) - k)) {\n        j <- i\n        while (j < length(arr) &&\
    \ arr[j + 1] > arr[j]) {\n            tmp <- arr[j]\n            arr[j] <- arr[j\
    \ + 1]\n            arr[j + 1] <- tmp\n            j <- j + 1\n        }\n   \
    \ }\n    return(arr[1:k])\n}\n", "\n    # Write your code here\n    return(sort(arr,\
    \ decreasing = TRUE)[1:k])\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4),\
    \ 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n    # sort the array\n    arr\
    \ <- sort(arr)\n    # return the last k elements\n    return(arr[(length(arr)\
    \ - k + 1):length(arr)])\n}\n", "\n    # Write your code here\n    arr[order(arr,\
    \ decreasing = TRUE)][1:k]\n}\n", "\n    if (k == 1) {\n        return(max(arr))\n\
    \    }\n    if (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k > length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k < 1) {\n        return(c())\n    }\n    max_list <- c()\n  \
    \  for (i in 1:k) {\n        max_list <- c(max_list, max(arr))\n        arr <-\
    \ arr[arr != max(arr)]\n    }\n    return(max_list)\n}\nmaximum(c(-3, -4, 5),\
    \ 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\nmaximum(c(-3,\
    \ 2, 1, 2, -1, -2, 1), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 3)\nmaximum(c(-3,\
    \ 2, 1, 2, -1, -2, 1), 4)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 5)\nmaximum(c(-3,\
    \ 2, 1, 2, -1, -2, 1), 6)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 7)\nmaximum(c(-3,\
    \ 2, 1, 2, -1, -2, 1), 8)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 0)\nmaximum(c(-3,\
    \ 2, 1, 2, -1, -2, 1), -1)\n", "\n    # Write your code here\n    arr[order(arr,\
    \ decreasing = TRUE)[1:k]]\n}\n", "\n    # Write your code here\n    # Sort the\
    \ array in descending order\n    # Return the first k elements\n    return(sort(arr,\
    \ decreasing = TRUE)[1:k])\n}\n", "\n    # Write your code here\n    return(sort(arr,\
    \ decreasing = TRUE)[1:k])\n}\n", "\n    if (k == 1) {\n        return(max(arr))\n\
    \    }\n    if (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k > length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k < 1) {\n        return(NULL)\n    }\n    if (k < length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE)[1:k])\n    }\n}\n", "\n    if\
    \ (k == 0) {\n        return(integer(0))\n    }\n    if (k == 1) {\n        return(max(arr))\n\
    \    }\n    if (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k > length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    return(sort(arr, decreasing = TRUE)[1:k])\n}\nmaximum(c(-3, -4, 5),\
    \ 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n \
    \   if (k == 0) {\n        return(c())\n    }\n    if (k == 1) {\n        return(max(arr))\n\
    \    }\n    if (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k > length(arr)) {\n        stop(\"k is greater than length of\
    \ arr\")\n    }\n    if (k < 0) {\n        stop(\"k is negative\")\n    }\n  \
    \  if (k < length(arr)) {\n        return(sort(arr, decreasing = TRUE)[1:k])\n\
    \    }\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2,\
    \ 1, 2, -1, -2, 1), 1)\n", "\n    # Write your code here\n    arr[order(arr, decreasing\
    \ = TRUE)][1:k]\n}\n\nmaximum(c(-3, -4, 5), 3)\n\nmaximum(c(4, -4, 4), 2)\n\n\
    maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n    # Write your code here\n    if\
    \ (k == 0) {\n        return(NULL)\n    }\n    if (k == 1) {\n        return(max(arr))\n\
    \    }\n    if (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k > length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k < length(arr)) {\n        return(sort(arr, decreasing = TRUE)[1:k])\n\
    \    }\n}\n", "\n    if (k == 1) {\n        return(max(arr))\n    }\n    if (k\
    \ == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n    }\n   \
    \ if (k > length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n    }\n\
    \    if (k < 1) {\n        return(NULL)\n    }\n    return(sort(arr, decreasing\
    \ = TRUE)[1:k])\n}", "\n    # Write your code here\n    # Sort the array in descending\
    \ order\n    arr <- sort(arr, decreasing = TRUE)\n    # Return the first k elements\n\
    \    return(arr[1:k])\n}\n", "\n    if (k == 1) {\n        return(max(arr))\n\
    \    }\n    if (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k > length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k < 1) {\n        return(NULL)\n    }\n    return(sort(arr, decreasing\
    \ = TRUE)[1:k])\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3,\
    \ 2, 1, 2, -1, -2, 1), 1)\n", "\n    if (k == 0) {\n        return(NULL)\n   \
    \ }\n    if (k == 1) {\n        return(max(arr))\n    }\n    if (k == length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE))\n    }\n    if (k > length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE))\n    }\n    if (k < length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE)[1:k])\n    }\n}\nmaximum(c(-3,\
    \ -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n",
  "\n    # Write your code here\n    # Sort the array in descending order\n    arr\
    \ <- sort(arr, decreasing = TRUE)\n    # Return the first k elements\n    return(arr[1:k])\n\
    }\n", "\n    # Write your code here\n    return(sort(arr, decreasing = TRUE)[1:k])\n\
    }\n", "\n    if (k == 1) {\n        return(max(arr))\n    }\n    if (k == length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE))\n    }\n    if (k > length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE))\n    }\n    if (k < 1) {\n \
    \       return(NULL)\n    }\n    max_arr <- arr[1]\n    for (i in 2:length(arr))\
    \ {\n        if (arr[i] > max_arr) {\n            max_arr <- arr[i]\n        }\n\
    \    }\n    max_arr <- c(max_arr, maximum(arr[arr != max_arr], k - 1))\n    return(max_arr)\n\
    }\n", "\n    if (k == 0) return(NULL)\n    if (k == 1) return(max(arr))\n    if\
    \ (k == length(arr)) return(sort(arr, decreasing = TRUE))\n    if (k > length(arr))\
    \ return(NULL)\n    if (k < length(arr)) {\n        arr <- sort(arr, decreasing\
    \ = TRUE)\n        return(arr[1:k])\n    }\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4,\
    \ -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n    # Write your code\
    \ here\n    arr <- sort(arr, decreasing = TRUE)\n    return(arr[1:k])\n}\n", "\n\
    \    if (k == 1) {\n        return(max(arr))\n    }\n    if (k == length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE))\n    }\n    arr <- sort(arr,\
    \ decreasing = TRUE)\n    return(arr[1:k])\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4,\
    \ -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n    # Sort the array\
    \ in descending order.\n    arr <- sort(arr, decreasing = TRUE)\n    # Return\
    \ the first k elements.\n    return(arr[1:k])\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4,\
    \ -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n    # Write your code\
    \ here\n    # Sort the array in descending order\n    arr <- sort(arr, decreasing\
    \ = TRUE)\n    # Return the first k elements\n    return(arr[1:k])\n}\n", "\n\
    \    # Write your code here\n    arr <- sort(arr, decreasing = TRUE)\n    return(arr[1:k])\n\
    }\n", "\n    arr[order(arr, decreasing = TRUE)[1:k]]\n}\nmaximum(c(-3, -4, 5),\
    \ 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n \
    \   # Write your code here\n    # Sort the array in descending order\n    arr\
    \ <- sort(arr, decreasing = TRUE)\n    # Return the first k elements\n    return(arr[1:k])\n\
    }\n", "\n    if (length(arr) == k) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (length(arr) < k) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (length(arr) > k) {\n        return(sort(arr, decreasing = TRUE)[1:k])\n\
    \    }\n}\nmaximum(c(-3, -4, 5), 3)\n", "\n    arr <- sort(arr, decreasing = TRUE)\n\
    \    return(arr[1:k])\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\n\
    maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n    # Write your code here\n    #\
    \ return(sort(arr, decreasing = TRUE)[1:k])\n    return(sort(arr, decreasing =\
    \ TRUE)[seq_len(k)])\n}\n", "\n    # Write your code here\n    return(sort(arr,\
    \ decreasing = TRUE)[1:k])\n}\n", "\n    if (k == 0) {\n        return(c())\n\
    \    }\n    if (k == 1) {\n        return(max(arr))\n    }\n    if (k == length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE))\n    }\n    if (k > length(arr))\
    \ {\n        stop(\"k must be less than or equal to length of arr\")\n    }\n\
    \    # Create a vector of length k\n    result <- vector(\"numeric\", k)\n   \
    \ # Initialize the first k elements of the vector with the first k elements of\
    \ arr\n    result[1:k] <- arr[1:k]\n    # Sort the vector\n    result <- sort(result,\
    \ decreasing = TRUE)\n    # Loop through the remaining elements of arr\n    for\
    \ (i in (k + 1):length(arr)) {\n        # If the current element of arr is greater\
    \ than the smallest element of result\n        if (arr[i] > result[k]) {\n   \
    \         # Replace the smallest element of result with the current element of\
    \ arr\n            result[k] <- arr[i]\n            # Sort the vector\n      \
    \      result <- sort(result, decreasing = TRUE)\n        }\n    }\n    return(result)\n\
    }\n", "\n    # Write your code here\n    # Sort the array\n    # Return the first\
    \ k elements\n    return(sort(arr, decreasing = TRUE)[1:k])\n}\n", "\n    # Write\
    \ your code here\n    return(sort(arr, decreasing = TRUE)[1:k])\n}", "\n    #\
    \ Write your code here\n    # arr <- sort(arr, decreasing = TRUE)\n    # return(arr[1:k])\n\
    \    arr <- sort(arr, decreasing = TRUE)\n    return(arr[1:k])\n}\n", "\n    #\
    \ Write your code here\n    return(sort(arr, decreasing = TRUE)[1:k])\n}\n", "\n\
    \    if (k == 1) {\n        return(max(arr))\n    }\n    if (k == length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE))\n    }\n    if (k > length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE))\n    }\n    if (k < 1) {\n \
    \       return(NULL)\n    }\n    # create a vector of length k\n    max_k <- rep(0,\
    \ k)\n    # create a vector of length k\n    max_k_index <- rep(0, k)\n    # initialize\
    \ the first k elements of the vector\n    for (i in 1:k) {\n        max_k[i] <-\
    \ arr[i]\n        max_k_index[i] <- i\n    }\n    # find the minimum of the first\
    \ k elements\n    min_k <- min(max_k)\n    min_k_index <- which(max_k == min_k)\n\
    \    # loop through the rest of the elements\n    for (i in (k + 1):length(arr))\
    \ {\n        # if the current element is greater than the minimum of the first\
    \ k elements\n        if (arr[i] > min_k) {\n            # replace the minimum\
    \ of the first k elements with the current element\n            max_k[min_k_index]\
    \ <- arr[i]\n            max_k_index[min_k_index] <- i\n            # find the\
    \ new minimum of the first k elements\n            min_k <- min(max_k)\n     \
    \       min_k_index <- which(max_k == min_k)\n        }\n    }\n    return(sort(max_k,\
    \ decreasing = TRUE))\n}", "\n    if (length(arr) == 0) {\n        return(NULL)\n\
    \    }\n    if (length(arr) == 1) {\n        return(arr)\n    }\n    if (length(arr)\
    \ == 2) {\n        if (arr[1] > arr[2]) {\n            return(arr[1])\n      \
    \  } else {\n            return(arr[2])\n        }\n    }\n    if (length(arr)\
    \ == 3) {\n        if (arr[1] > arr[2]) {\n            if (arr[1] > arr[3]) {\n\
    \                return(arr[1])\n            } else {\n                return(arr[3])\n\
    \            }\n        } else {\n            if (arr[2] > arr[3]) {\n       \
    \         return(arr[2])\n            } else {\n                return(arr[3])\n\
    \            }\n        }\n    }\n    if (length(arr) == 4) {\n        if (arr[1]\
    \ > arr[2]) {\n            if (arr[1] > arr[3]) {\n                if (arr[1]\
    \ > arr[4]) {\n                    return(arr[1])\n                } else {\n\
    \                    return(arr[4])\n                }\n            } else {\n\
    \                if (arr[3] > arr[4]) {\n                    return(arr[3])\n\
    \                } else {\n                    return(arr[4])\n              \
    \  }\n            }\n        } else {\n            if (arr[2] > arr[3]) {\n  \
    \              if (arr[2] > arr[4]) {\n                    return(arr[2])\n  \
    \              } else {\n                    return(arr[4])\n                }\n\
    \            } else {\n                if (arr[3] > arr[4]) {\n              \
    \      return(arr[3])\n                } else {\n                    return(arr[4])\n\
    \                }\n            }\n        }\n    }\n    if (length(arr) == 5)\
    \ {\n        if (arr[1] > arr[2]) {\n            if (arr[1] > arr[3]) {\n    \
    \            if (arr[1] > arr[4]) {\n                    if (arr[1] > arr[5])\
    \ {\n                       ", "\n    # Write your code here\n    # Sort the array\
    \ in descending order\n    arr <- sort(arr, decreasing = TRUE)\n    # Return the\
    \ first k elements\n    return(arr[1:k])\n}\n", "\n    # Write your code here\n\
    \    arr <- sort(arr, decreasing = TRUE)\n    return(arr[1:k])\n}\n", "\n    sort(arr,\
    \ decreasing = TRUE)[1:k]\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\n\
    maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n    # Write your code here\n    sort(arr,\
    \ decreasing = TRUE)[1:k]\n}\n", "\n    if (k == 0) {\n        return(NULL)\n\
    \    }\n    if (length(arr) == k) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (length(arr) < k) {\n        return(NULL)\n    }\n    if (length(arr)\
    \ > k) {\n        return(sort(arr, decreasing = TRUE)[1:k])\n    }\n}\n ", "\n\
    \    # Write your code here\n    if (length(arr) == k) {\n        return(arr)\n\
    \    }\n    if (length(arr) < k) {\n        return(c(arr, rep(0, k - length(arr))))\n\
    \    }\n    if (length(arr) > k) {\n        return(arr[order(arr, decreasing =\
    \ TRUE)[1:k]])\n    }\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\n\
    maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n    # write your code here\n    if\
    \ (k == 1) {\n        return(max(arr))\n    }\n    if (k == length(arr)) {\n \
    \       return(sort(arr, decreasing = TRUE))\n    }\n    if (k > length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE))\n    }\n    if (k < 1) {\n \
    \       return(NULL)\n    }\n    if (k == 2) {\n        return(sort(arr, decreasing\
    \ = TRUE)[1:2])\n    }\n    if (k == 3) {\n        return(sort(arr, decreasing\
    \ = TRUE)[1:3])\n    }\n    if (k == 4) {\n        return(sort(arr, decreasing\
    \ = TRUE)[1:4])\n    }\n    if (k == 5) {\n        return(sort(arr, decreasing\
    \ = TRUE)[1:5])\n    }\n    if (k == 6) {\n        return(sort(arr, decreasing\
    \ = TRUE)[1:6])\n    }\n    if (k == 7) {\n        return(sort(arr, decreasing\
    \ = TRUE)[1:7])\n    }\n    if (k == 8) {\n        return(sort(arr, decreasing\
    \ = TRUE)[1:8])\n    }\n    if (k == 9) {\n        return(sort(arr, decreasing\
    \ = TRUE)[1:9])\n    }\n    if (k == 10) {\n        return(sort(arr, decreasing\
    \ = TRUE)[1:10])\n    }\n    if (k == 11) {\n        return(sort(arr, decreasing\
    \ = TRUE)[1:11])\n    }\n    if (k == 12) {\n        return(sort(arr, decreasing\
    \ = TRUE)[1:12])\n    }\n    if (k == 13) {\n        return(sort(arr, decreasing\
    \ = TRUE)[1:13])\n    }\n    if (k == 14) {\n        return(sort(arr, decreasing\
    \ = TRUE)[1:14])\n    }\n    if (k == 15) {\n        return(sort(arr, decreasing\
    \ = TRUE)[1:15])\n    }\n    if (k == 16) {\n        return(sort(arr, decreasing\
    \ = TRUE)[1", "\n    # write your code here\n    return(sort(arr, decreasing =\
    \ TRUE)[1:k])\n}\n", "\n    sort(arr, decreasing = TRUE)[1:k]\n}\nmaximum(c(-3,\
    \ -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n",
  "\n    if (k == 0) {\n        return(c())\n    }\n    if (k == 1) {\n        return(max(arr))\n\
    \    }\n    if (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k > length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k < length(arr)) {\n        return(sort(arr, decreasing = TRUE)[1:k])\n\
    \    }\n}\narr <- c(-3, -4, 5)\nk <- 3\nmaximum(arr, k)\narr <- c(4, -4, 4)\n\
    k <- 2\nmaximum(arr, k)\narr <- c(-3, 2, 1, 2, -1, -2, 1)\nk <- 1\nmaximum(arr,\
    \ k)\n", "\n    # Create a vector of length k\n    max_vec <- rep(0, k)\n    #\
    \ Iterate through the array\n    for (i in 1:length(arr)) {\n        # Iterate\
    \ through the vector\n        for (j in 1:k) {\n            # If the array value\
    \ is greater than the vector value\n            if (arr[i] > max_vec[j]) {\n \
    \               # Shift the vector values\n                for (l in 1:(k - j))\
    \ {\n                    max_vec[k - l + 1] <- max_vec[k - l]\n              \
    \  }\n                # Insert the array value\n                max_vec[j] <-\
    \ arr[i]\n                # Break the loop\n                break\n          \
    \  }\n        }\n    }\n    # Return the vector\n    return(max_vec)\n}", "\n\
    \    if (k == 1) {\n        return(max(arr))\n    }\n    if (k == length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE))\n    }\n    if (k > length(arr))\
    \ {\n        stop(\"k should be less than or equal to the length of the array\"\
    )\n    }\n    if (k < 1) {\n        stop(\"k should be a positive integer\")\n\
    \    }\n    if (k == 2) {\n        return(sort(arr, decreasing = TRUE)[1:2])\n\
    \    }\n    if (k == 3) {\n        return(sort(arr, decreasing = TRUE)[1:3])\n\
    \    }\n    if (k == 4) {\n        return(sort(arr, decreasing = TRUE)[1:4])\n\
    \    }\n    if (k == 5) {\n        return(sort(arr, decreasing = TRUE)[1:5])\n\
    \    }\n    if (k == 6) {\n        return(sort(arr, decreasing = TRUE)[1:6])\n\
    \    }\n    if (k == 7) {\n        return(sort(arr, decreasing = TRUE)[1:7])\n\
    \    }\n    if (k == 8) {\n        return(sort(arr, decreasing = TRUE)[1:8])\n\
    \    }\n    if (k == 9) {\n        return(sort(arr, decreasing = TRUE)[1:9])\n\
    \    }\n    if (k == 10) {\n        return(sort(arr, decreasing = TRUE)[1:10])\n\
    \    }\n    if (k == 11) {\n        return(sort(arr, decreasing = TRUE)[1:11])\n\
    \    }\n    if (k == 12) {\n        return(sort(arr, decreasing = TRUE)[1:12])\n\
    \    }\n    if (k == 13) {\n        return(sort(arr, decreasing = TRUE)[1:13])\n\
    \    }\n    if (k == 14) {\n        return(sort(arr, decreasing = TRUE)[1:14])\n\
    \    }\n    if (k == 15) {\n        return(sort(arr, decreasing = TRUE)[1:15])\n\
    \    }\n    if (k == 16) {\n        return(sort(arr, decreasing", "\n    # write\
    \ your code here\n    if (k == 0) {\n        return(NULL)\n    }\n    if (k ==\
    \ 1) {\n        return(max(arr))\n    }\n    if (k == length(arr)) {\n       \
    \ return(sort(arr, decreasing = TRUE))\n    }\n    if (k > length(arr)) {\n  \
    \      return(sort(arr, decreasing = TRUE))\n    }\n    if (k < length(arr)) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:k])\n    }\n}\n", "\n    # Write\
    \ your code here\n    return(sort(arr, decreasing = TRUE)[1:k])\n}\n", "\n   \
    \ arr <- sort(arr, decreasing = TRUE)\n    return(arr[1:k])\n}\n", "\n    # Create\
    \ a heap of size k\n    heap <- arr[1:k]\n    # Heapify the heap\n    heap <-\
    \ heapify(heap)\n    # Iterate through the rest of the array\n    for (i in (k\
    \ + 1):length(arr)) {\n        # If the current element is greater than the root\
    \ of the heap,\n        # replace the root with the current element and heapify\
    \ the heap\n        if (arr[i] > heap[1]) {\n            heap[1] <- arr[i]\n \
    \           heap <- heapify(heap)\n        }\n    }\n    # Return the heap\n \
    \   return(heap)\n}\n", "\n    # Write your code here\n    # Sort the array in\
    \ descending order\n    arr <- sort(arr, decreasing = TRUE)\n    # Return the\
    \ first k elements\n    return(arr[1:k])\n}", "\n    # write your code here\n\
    }\n ", "\n    # Write your code here\n    # Sort the array in descending order\n\
    \    arr <- sort(arr, decreasing = TRUE)\n    # Return the first k elements\n\
    \    return(arr[1:k])\n}\n", "\n    if (length(arr) == 0) {\n        return(NULL)\n\
    \    }\n    if (length(arr) == 1) {\n        return(arr)\n    }\n    if (length(arr)\
    \ == 2) {\n        if (arr[1] > arr[2]) {\n            return(arr[1])\n      \
    \  } else {\n            return(arr[2])\n        }\n    }\n    if (length(arr)\
    \ == 3) {\n        if (arr[1] > arr[2]) {\n            if (arr[1] > arr[3]) {\n\
    \                return(arr[1])\n            } else {\n                return(arr[3])\n\
    \            }\n        } else {\n            if (arr[2] > arr[3]) {\n       \
    \         return(arr[2])\n            } else {\n                return(arr[3])\n\
    \            }\n        }\n    }\n    if (length(arr) > 3) {\n        if (arr[1]\
    \ > arr[2]) {\n            if (arr[1] > arr[3]) {\n                if (arr[1]\
    \ > arr[4]) {\n                    return(arr[1])\n                } else {\n\
    \                    return(arr[4])\n                }\n            } else {\n\
    \                if (arr[3] > arr[4]) {\n                    return(arr[3])\n\
    \                } else {\n                    return(arr[4])\n              \
    \  }\n            }\n        } else {\n            if (arr[2] > arr[3]) {\n  \
    \              if (arr[2] > arr[4]) {\n                    return(arr[2])\n  \
    \              } else {\n                    return(arr[4])\n                }\n\
    \            } else {\n                if (arr[3] > arr[4]) {\n              \
    \      return(arr[3])\n                } else {\n                    return(arr[4])\n\
    \                }\n            }\n        }\n    }\n}\n\nmaximum_k <- function(arr,\
    \ k) {\n    if (length(arr) == 0) {\n        return(NULL)\n    }\n    if (length(arr)\
    \ == 1) {\n        return(arr)\n    }\n    if (length(arr) == 2) {\n", "\n   \
    \ # Write your code here\n    arr <- sort(arr, decreasing = TRUE)\n    return(arr[1:k])\n\
    }\nmaximum(arr = c(-3, -4, 5), k = 3)\nmaximum(arr = c(4, -4, 4), k = 2)\nmaximum(arr\
    \ = c(-3, 2, 1, 2, -1, -2, 1), k = 1)\n", "\n    if (k == 1) {\n        return(max(arr))\n\
    \    }\n    if (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k > length(arr)) {\n        stop(\"k is larger than the length\
    \ of the array\")\n    }\n    # Create a vector of length k\n    max_k <- rep(0,\
    \ k)\n    # Fill the vector with the first k elements of the array\n    for (i\
    \ in 1:k) {\n        max_k[i] <- arr[i]\n    }\n    # Sort the vector\n    max_k\
    \ <- sort(max_k, decreasing = TRUE)\n    # Loop through the rest of the array\n\
    \    for (i in (k + 1):length(arr)) {\n        # If the current element is greater\
    \ than the smallest element in the vector\n        if (arr[i] > max_k[k]) {\n\
    \            # Replace the smallest element with the current element\n       \
    \     max_k[k] <- arr[i]\n            # Sort the vector\n            max_k <-\
    \ sort(max_k, decreasing = TRUE)\n        }\n    }\n    return(max_k)\n}\n", "\n\
    \    # Write your code here\n    if (length(arr) == 0) {\n        return(arr)\n\
    \    }\n    if (k == 0) {\n        return(c())\n    }\n    if (k == 1) {\n   \
    \     return(max(arr))\n    }\n    if (k >= length(arr)) {\n        return(sort(arr,\
    \ decreasing = TRUE))\n    }\n    if (k < length(arr)) {\n        return(sort(arr,\
    \ decreasing = TRUE)[1:k])\n    }\n}\n ", "\n    if (k == 1) {\n        return(max(arr))\n\
    \    }\n    else {\n        return(c(maximum(arr[-which.max(arr)], k - 1), max(arr)))\n\
    \    }\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2,\
    \ 1, 2, -1, -2, 1), 1)\n", "\n    if (k == 0) {\n        return(c())\n    }\n\
    \    if (k == 1) {\n        return(c(max(arr)))\n    }\n    if (k == length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE))\n    }\n    if (k > length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE))\n    }\n    if (k < length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE)[1:k])\n    }\n}\narr <- c(-3,\
    \ -4, 5)\nk <- 3\nmaximum(arr, k)\narr <- c(4, -4, 4)\nk <- 2\nmaximum(arr, k)\n\
    arr <- c(-3, 2, 1, 2, -1, -2, 1)\nk <- 1\nmaximum(arr, k)\n", "\n    if (length(arr)\
    \ == 0) {\n        return(NULL)\n    }\n    if (length(arr) == 1) {\n        return(arr)\n\
    \    }\n    if (k == 1) {\n        return(max(arr))\n    }\n    if (k == length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE))\n    }\n    if (k > length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE))\n    }\n    if (k < 1) {\n \
    \       return(NULL)\n    }\n    if (k < length(arr)) {\n        return(sort(arr,\
    \ decreasing = TRUE)[1:k])\n    }\n}\n", "\n    # Write your code here\n    return(sort(arr,\
    \ decreasing = TRUE)[1:k])\n}\n", "\n    # Write your code here\n    # arr <-\
    \ sort(arr, decreasing = TRUE)\n    # return(arr[1:k])\n    arr <- sort(arr, decreasing\
    \ = TRUE)\n    return(arr[1:k])\n}\n\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4,\
    \ 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n    max <- arr[1]\n   \
    \ for (i in 2:length(arr)) {\n        if (arr[i] > max) {\n            max <-\
    \ arr[i]\n        }\n    }\n    return(max)\n}\n\nmaximum_k <- function(arr, k)\
    \ {\n    max_k <- arr[1:k]\n    for (i in (k+1):length(arr)) {\n        if (arr[i]\
    \ > maximum(max_k, k)) {\n            max_k <- arr[i:(i+k-1)]\n        }\n   \
    \ }\n    return(max_k)\n}\n\narr <- c(-3, -4, 5)\nk <- 3\nmaximum_k(arr, k)\n\n\
    arr <- c(4, -4, 4)\nk <- 2\nmaximum_k(arr, k)\n\narr <- c(-3, 2, 1, 2, -1, -2,\
    \ 1)\nk <- 1\nmaximum_k(arr, k)\n", "\n    if (length(arr) < k) {\n        return(arr)\n\
    \    }\n    if (length(arr) == k) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k == 1) {\n        return(max(arr))\n    }\n    if (k == 2) {\n\
    \        return(sort(c(max(arr), min(arr)), decreasing = TRUE))\n    }\n    if\
    \ (k == 3) {\n        return(sort(c(max(arr), min(arr), median(arr)), decreasing\
    \ = TRUE))\n    }\n    if (k == 4) {\n        return(sort(c(max(arr), min(arr),\
    \ median(arr), median(arr[arr != median(arr)])), decreasing = TRUE))\n    }\n\
    \    if (k == 5) {\n        return(sort(c(max(arr), min(arr), median(arr), median(arr[arr\
    \ != median(arr)]), median(arr[arr != median(arr) & arr != median(arr[arr != median(arr)])])),\
    \ decreasing = TRUE))\n    }\n    if (k == 6) {\n        return(sort(c(max(arr),\
    \ min(arr), median(arr), median(arr[arr != median(arr)]), median(arr[arr != median(arr)\
    \ & arr != median(arr[arr != median(arr)])]), median(arr[arr != median(arr) &\
    \ arr != median(arr[arr != median(arr)]) & arr != median(arr[arr != median(arr)\
    \ & arr != median(arr[arr != median(arr)])])])), decreasing = TRUE))\n    }\n\
    \    if (k == 7) {\n        return(sort(c(max(arr), min(arr), median(arr), median(arr[arr\
    \ != median(arr)]), median(arr[arr != median(arr) & arr != median(arr[arr != median(arr)])]),\
    \ median(arr[arr != median(arr) & arr != median(arr[arr != median(arr)]) & arr\
    \ != median(arr[arr != median(arr) & arr != median(arr[arr != median(arr)])])]),\
    \ median(arr[arr != median(arr)", "\n    # Sort the array\n    arr <- sort(arr)\n\
    \    # Return the last k elements\n    return(arr[(length(arr) - k + 1):length(arr)])\n\
    }\n", "\n    # Write your code here\n    arr[order(arr, decreasing = TRUE)][1:k]\n\
    }\nmaximum(c(-3, -4, 5), 3)\n", "\n    if (k == 0) return(c())\n    if (k == 1)\
    \ return(max(arr))\n    if (k == length(arr)) return(sort(arr, decreasing = TRUE))\n\
    \    if (k > length(arr)) return(sort(arr, decreasing = TRUE))\n    if (k < length(arr))\
    \ {\n        # find the max element\n        max_element <- max(arr)\n       \
    \ # find the index of the max element\n        max_index <- which(arr == max_element)\n\
    \        # remove the max element from the array\n        arr <- arr[-max_index]\n\
    \        # add the max element to the result\n        result <- c(max_element)\n\
    \        # recursively find the max k-1 elements\n        result <- c(result,\
    \ maximum(arr, k-1))\n        return(result)\n    }\n}\n", "\n    # Write your\
    \ code here\n    return(sort(arr, decreasing = TRUE)[1:k])\n}\n\nmaximum(c(-3,\
    \ -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n",
  "\n    n <- length(arr)\n    if (k == n) {\n        return(sort(arr, decreasing\
    \ = TRUE))\n    }\n    if (k == 1) {\n        return(max(arr))\n    }\n    if\
    \ (k == 2) {\n        return(sort(c(max(arr), min(arr)), decreasing = TRUE))\n\
    \    }\n    if (k == 3) {\n        return(sort(c(max(arr), min(arr), median(arr)),\
    \ decreasing = TRUE))\n    }\n    if (k == 4) {\n        return(sort(c(max(arr),\
    \ min(arr), median(arr), median(arr[arr != median(arr)])), decreasing = TRUE))\n\
    \    }\n    if (k == 5) {\n        return(sort(c(max(arr), min(arr), median(arr),\
    \ median(arr[arr != median(arr)]), median(arr[arr != median(arr) & arr != median(arr[arr\
    \ != median(arr)])])), decreasing = TRUE))\n    }\n    if (k == 6) {\n       \
    \ return(sort(c(max(arr), min(arr), median(arr), median(arr[arr != median(arr)]),\
    \ median(arr[arr != median(arr) & arr != median(arr[arr != median(arr)])]), median(arr[arr\
    \ != median(arr) & arr != median(arr[arr != median(arr)]) & arr != median(arr[arr\
    \ != median(arr) & arr != median(arr[arr != median(arr)])])])), decreasing = TRUE))\n\
    \    }\n    if (k == 7) {\n        return(sort(c(max(arr), min(arr), median(arr),\
    \ median(arr[arr != median(arr)]), median(arr[arr != median(arr) & arr != median(arr[arr\
    \ != median(arr)])]), median(arr[arr != median(arr) & arr != median(arr[arr !=\
    \ median(arr)]) & arr != median(arr[arr != median(arr) & arr != median(arr[arr\
    \ != median(arr)])])]), median(arr[arr != median(arr) & arr != median(arr[arr\
    \ != median(arr)]) & arr", "\n    # Write your code here\n    arr <- sort(arr,\
    \ decreasing = TRUE)\n    return(arr[1:k])\n}\n", "\n    if (length(arr) == 0)\
    \ {\n        return(arr)\n    }\n    if (k == 0) {\n        return(c())\n    }\n\
    \    if (k >= length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n \
    \   }\n    return(sort(arr, decreasing = TRUE)[1:k])\n}\n", "\n    # Write your\
    \ code here\n    if (k == 1) {\n        return(max(arr))\n    }\n    if (k ==\
    \ length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n    }\n    arr\
    \ <- sort(arr, decreasing = TRUE)\n    return(arr[1:k])\n}\n", "\n    # Write\
    \ your code here\n    return(sort(arr, decreasing = TRUE)[1:k])\n}\n", "\n   \
    \ # Sort the array in descending order.\n    arr <- sort(arr, decreasing = TRUE)\n\
    \    # Return the first k elements.\n    return(arr[1:k])\n}", "\n    if (k ==\
    \ 1) {\n        return(max(arr))\n    }\n    if (k == length(arr)) {\n       \
    \ return(sort(arr, decreasing = TRUE))\n    }\n    if (k > length(arr)) {\n  \
    \      stop(\"k should be less than or equal to the length of the array\")\n \
    \   }\n    max_arr <- arr[1]\n    for (i in 2:k) {\n        max_arr <- c(max_arr,\
    \ arr[i])\n    }\n    max_arr <- sort(max_arr, decreasing = TRUE)\n    for (i\
    \ in (k + 1):length(arr)) {\n        if (arr[i] > max_arr[k]) {\n            max_arr[k]\
    \ <- arr[i]\n            max_arr <- sort(max_arr, decreasing = TRUE)\n       \
    \ }\n    }\n    return(max_arr)\n}\n", "\n    # Sort the array in descending order.\n\
    \    arr <- sort(arr, decreasing = TRUE)\n    # Return the first k elements.\n\
    \    return(arr[1:k])\n}", "\n    if (k == 1) {\n        return(max(arr))\n  \
    \  }\n    if (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k > length(arr)) {\n        stop(\"k is greater than length of\
    \ arr\")\n    }\n    if (k < 1) {\n        stop(\"k is less than 1\")\n    }\n\
    \    if (k < length(arr)) {\n        return(sort(arr, decreasing = TRUE)[1:k])\n\
    \    }\n}\n", "\n    if (length(arr) == k) {\n        return(sort(arr, decreasing\
    \ = TRUE))\n    }\n    if (length(arr) < k) {\n        return(arr)\n    }\n  \
    \  if (k == 1) {\n        return(max(arr))\n    }\n    if (k == 2) {\n       \
    \ return(sort(arr, decreasing = TRUE)[1:2])\n    }\n    if (k == 3) {\n      \
    \  return(sort(arr, decreasing = TRUE)[1:3])\n    }\n    if (k == 4) {\n     \
    \   return(sort(arr, decreasing = TRUE)[1:4])\n    }\n    if (k == 5) {\n    \
    \    return(sort(arr, decreasing = TRUE)[1:5])\n    }\n    if (k == 6) {\n   \
    \     return(sort(arr, decreasing = TRUE)[1:6])\n    }\n    if (k == 7) {\n  \
    \      return(sort(arr, decreasing = TRUE)[1:7])\n    }\n    if (k == 8) {\n \
    \       return(sort(arr, decreasing = TRUE)[1:8])\n    }\n    if (k == 9) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:9])\n    }\n    if (k == 10) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:10])\n    }\n    if (k == 11) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:11])\n    }\n    if (k == 12) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:12])\n    }\n    if (k == 13) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:13])\n    }\n    if (k == 14) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:14])\n    }\n    if (k == 15) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:15])\n    }\n    if (k == 16) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:16])\n    }\n    if (k == 17) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:", "\n    if (k == 0) {\n     \
    \   return(c())\n    }\n    if (k == 1) {\n        return(max(arr))\n    }\n \
    \   if (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n  \
    \  }\n    if (k > length(arr)) {\n        stop(\"k is larger than the length of\
    \ arr\")\n    }\n    if (k < 0) {\n        stop(\"k is negative\")\n    }\n  \
    \  return(sort(arr, decreasing = TRUE)[1:k])\n}\n", "\n    if (k == 0) return(c())\n\
    \    if (k == 1) return(max(arr))\n    if (k == length(arr)) return(sort(arr,\
    \ decreasing = TRUE))\n    if (k > length(arr)) return(arr)\n    # if (k < length(arr))\n\
    \    #     return(sort(arr, decreasing = TRUE)[1:k])\n    # if (k < length(arr))\n\
    \    #     return(sort(arr, decreasing = TRUE)[1:k])\n    # if (k < length(arr))\n\
    \    #     return(sort(arr, decreasing = TRUE)[1:k])\n    # if (k < length(arr))\n\
    \    #     return(sort(arr, decreasing = TRUE)[1:k])\n    # if (k < length(arr))\n\
    \    #     return(sort(arr, decreasing = TRUE)[1:k])\n    # if (k < length(arr))\n\
    \    #     return(sort(arr, decreasing = TRUE)[1:k])\n    # if (k < length(arr))\n\
    \    #     return(sort(arr, decreasing = TRUE)[1:k])\n    # if (k < length(arr))\n\
    \    #     return(sort(arr, decreasing = TRUE)[1:k])\n    # if (k < length(arr))\n\
    \    #     return(sort(arr, decreasing = TRUE)[1:k])\n    # if (k < length(arr))\n\
    \    #     return(sort(arr, decreasing = TRUE)[1:k])\n    # if (k < length(arr))\n\
    \    #     return(sort(arr, decreasing = TRUE)[1:k])\n    # if (k < length(arr))\n\
    \    #     return(sort(arr, decreasing = TRUE)[1:k])\n    # if (k < length(arr))\n\
    \    #     return(sort(arr, decreasing = TRUE)[1:k])\n    # if (k < length(arr))\n\
    \    #     return(sort(arr, decreasing = TRUE)[1:k])\n    # if (k < length(arr))\n\
    \    #     return(sort(arr, decreasing = TRUE)[1:k])\n    # if (k < length(arr))\n\
    \    #     return", "\n    # Write your code here\n    if (k == 0) {\n       \
    \ return(NULL)\n    }\n    if (k == 1) {\n        return(max(arr))\n    }\n  \
    \  if (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n   \
    \ }\n    if (k > length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k < length(arr)) {\n        return(sort(arr, decreasing = TRUE)[1:k])\n\
    \    }\n}\n", "\n    # Sort the array in descending order\n    arr <- sort(arr,\
    \ decreasing = TRUE)\n    # Return the first k elements\n    return(arr[1:k])\n\
    }", "\n    n <- length(arr)\n    if (k == n) {\n        return(sort(arr, decreasing\
    \ = TRUE))\n    }\n    if (k > n) {\n        return(arr)\n    }\n    if (k ==\
    \ 1) {\n        return(max(arr))\n    }\n    if (k == 0) {\n        return(NULL)\n\
    \    }\n    # k < n\n    # sort(arr, decreasing = TRUE)\n    # sort(arr, decreasing\
    \ = TRUE)[1:k]\n    # sort(arr, decreasing = TRUE)[1:k]\n    # sort(arr, decreasing\
    \ = TRUE)[1:k]\n    # sort(arr, decreasing = TRUE)[1:k]\n    # sort(arr, decreasing\
    \ = TRUE)[1:k]\n    # sort(arr, decreasing = TRUE)[1:k]\n    # sort(arr, decreasing\
    \ = TRUE)[1:k]\n    # sort(arr, decreasing = TRUE)[1:k]\n    # sort(arr, decreasing\
    \ = TRUE)[1:k]\n    # sort(arr, decreasing = TRUE)[1:k]\n    # sort(arr, decreasing\
    \ = TRUE)[1:k]\n    # sort(arr, decreasing = TRUE)[1:k]\n    # sort(arr, decreasing\
    \ = TRUE)[1:k]\n    # sort(arr, decreasing = TRUE)[1:k]\n    # sort(arr, decreasing\
    \ = TRUE)[1:k]\n    # sort(arr, decreasing = TRUE)[1:k]\n    # sort(arr, decreasing\
    \ = TRUE)[1:k]\n    # sort(arr, decreasing = TRUE)[1:k]\n    # sort(arr, decreasing\
    \ = TRUE)[1:k]\n    # sort(arr, decreasing = TRUE)[1:k]\n    # sort(arr, decreasing\
    \ = TRUE)[1:k]\n    # sort(arr, decreasing = TRUE)[1:k]\n    # sort(arr, decreasing\
    \ = TRUE)[1:k]\n    # sort(arr, decreasing = TRUE)[1:k]\n    # sort(arr, decreasing\
    \ = TRUE)[1:k]\n    # sort(arr, decreasing = TRUE)[1:k]\n    # sort(arr, decreasing\
    \ = TRUE)[1:k]\n", "\n    if (k == 1) {\n        return(max(arr))\n    }\n   \
    \ if (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n    }\n\
    \    if (k > length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n  \
    \  }\n    if (k < 1) {\n        return(NULL)\n    }\n    # create a vector to\
    \ store the result\n    res <- vector(mode = \"numeric\", length = k)\n    # create\
    \ a vector to store the index of the result\n    res_index <- vector(mode = \"\
    numeric\", length = k)\n    # initialize the first k elements in the result vector\n\
    \    for (i in 1:k) {\n        res[i] <- arr[i]\n        res_index[i] <- i\n \
    \   }\n    # sort the first k elements in the result vector\n    res <- sort(res,\
    \ decreasing = TRUE)\n    # find the minimum value in the result vector\n    min_value\
    \ <- res[k]\n    # find the minimum value's index in the result vector\n    min_index\
    \ <- which(res == min_value)\n    # find the minimum value's index in the original\
    \ vector\n    min_index_original <- res_index[min_index]\n    # find the maximum\
    \ value in the original vector\n    max_value <- max(arr[(min_index_original +\
    \ 1):length(arr)])\n    # find the maximum value's index in the original vector\n\
    \    max_index <- which(arr == max_value)\n    # replace the minimum value in\
    \ the result vector with the maximum value in the original vector\n    res[min_index]\
    \ <- max_value\n    # replace the minimum value's index in the result vector with\
    \ the maximum value's index in the original vector\n    res_index[min_index] <-\
    \ max_index\n    # sort the result vector\n    res <- sort(res, decreasing = TRUE)\n\
    \    return(res)\n}", "\n    if (k == 1) {\n        return(max(arr))\n    }\n\
    \    if (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n \
    \   }\n    arr <- sort(arr, decreasing = TRUE)\n    return(arr[1:k])\n}\n", "\n\
    \    arr <- sort(arr, decreasing = TRUE)\n    return(arr[1:k])\n}\n", "\n    #\
    \ Sort the array in descending order\n    arr <- sort(arr, decreasing = TRUE)\n\
    \    # Return the first k elements\n    return(arr[1:k])\n}", "\n    # Write your\
    \ code here\n    return(sort(arr, decreasing = TRUE)[1:k])\n}\n", "\n    if (k\
    \ == 1) {\n        return(max(arr))\n    }\n    if (k == length(arr)) {\n    \
    \    return(sort(arr, decreasing = TRUE))\n    }\n    if (k > length(arr)) {\n\
    \        return(sort(arr, decreasing = TRUE))\n    }\n    if (k < 1) {\n     \
    \   return(NULL)\n    }\n    max_list <- c()\n    for (i in 1:k) {\n        max_list\
    \ <- c(max_list, max(arr))\n        arr <- arr[arr != max(arr)]\n    }\n    return(max_list)\n\
    }\n", "\n    # Write your code here\n    sort(arr, decreasing = TRUE)[1:k]\n}\n",
  "\n    if (k == 1) {\n        return(max(arr))\n    }\n    if (k == length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE))\n    }\n    if (k > length(arr))\
    \ {\n        stop(\"k is greater than the length of arr\")\n    }\n    if (k <\
    \ 1) {\n        stop(\"k is less than 1\")\n    }\n    return(sort(arr, decreasing\
    \ = TRUE)[1:k])\n}\n", "\n    # Write your code here\n    if (k == 0) {\n    \
    \    return(NULL)\n    }\n    if (k == 1) {\n        return(max(arr))\n    }\n\
    \    if (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n \
    \   }\n    if (k > length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k < length(arr)) {\n        return(sort(arr, decreasing = TRUE)[1:k])\n\
    \    }\n}\n", "\n    arr[order(arr, decreasing = TRUE)[1:k]]\n}\n", "\n    if\
    \ (length(arr) < k) {\n        return(arr)\n    }\n    if (length(arr) == k) {\n\
    \        return(sort(arr, decreasing = TRUE))\n    }\n    if (k == 1) {\n    \
    \    return(max(arr))\n    }\n    arr <- sort(arr, decreasing = TRUE)\n    return(arr[1:k])\n\
    }\n", "\n    # Write your code here\n    return(sort(arr, decreasing = TRUE)[1:k])\n\
    }\nmaximum(arr = c(-3, -4, 5), k = 3)\nmaximum(arr = c(4, -4, 4), k = 2)\nmaximum(arr\
    \ = c(-3, 2, 1, 2, -1, -2, 1), k = 1)\n", "\n    # Write your code here\n    arr\
    \ <- sort(arr, decreasing = TRUE)\n    return(arr[1:k])\n}\n", "\n    if (k ==\
    \ 1) {\n        return(max(arr))\n    }\n    if (k == length(arr)) {\n       \
    \ return(sort(arr, decreasing = TRUE))\n    }\n    if (k > length(arr)) {\n  \
    \      return(sort(arr, decreasing = TRUE))\n    }\n    if (k < 1) {\n       \
    \ return(NULL)\n    }\n    if (k == 2) {\n        return(sort(c(max(arr), min(arr)),\
    \ decreasing = TRUE))\n    }\n    if (k == 3) {\n        return(sort(c(max(arr),\
    \ min(arr), median(arr)), decreasing = TRUE))\n    }\n    if (k == 4) {\n    \
    \    return(sort(c(max(arr), min(arr), median(arr), mean(arr)), decreasing = TRUE))\n\
    \    }\n    if (k == 5) {\n        return(sort(c(max(arr), min(arr), median(arr),\
    \ mean(arr), median(arr[arr < median(arr)])), decreasing = TRUE))\n    }\n   \
    \ if (k == 6) {\n        return(sort(c(max(arr), min(arr), median(arr), mean(arr),\
    \ median(arr[arr < median(arr)]), median(arr[arr > median(arr)])), decreasing\
    \ = TRUE))\n    }\n    if (k == 7) {\n        return(sort(c(max(arr), min(arr),\
    \ median(arr), mean(arr), median(arr[arr < median(arr)]), median(arr[arr > median(arr)]),\
    \ median(arr[arr < mean(arr)])), decreasing = TRUE))\n    }\n    if (k == 8) {\n\
    \        return(sort(c(max(arr), min(arr), median(arr), mean(arr), median(arr[arr\
    \ < median(arr)]), median(arr[arr > median(arr)]), median(arr[arr < mean(arr)]),\
    \ median(arr[arr > mean(arr)])), decreasing = TRUE))\n    }\n    if (k == 9) {\n\
    \        return(sort(c(max(arr), min(arr), median(arr), mean(arr), median(arr[arr\
    \ <", "\n    # Write your code here\n    return(sort(arr, decreasing = TRUE)[1:k])\n\
    }\nmaximum(arr = c(-3, -4, 5), k = 3)\n", "\n    if (k == 1) {\n        return(max(arr))\n\
    \    }\n    if (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k > length(arr)) {\n        stop(\"k must be less than or equal\
    \ to the length of arr.\")\n    }\n    if (k < 1) {\n        stop(\"k must be\
    \ a positive integer.\")\n    }\n    if (length(arr) == 1) {\n        return(arr)\n\
    \    }\n    if (length(arr) == 2) {\n        if (arr[1] > arr[2]) {\n        \
    \    return(c(arr[1], arr[2]))\n        } else {\n            return(c(arr[2],\
    \ arr[1]))\n        }\n    }\n    if (length(arr) == 3) {\n        if (arr[1]\
    \ > arr[2] & arr[1] > arr[3]) {\n            if (arr[2] > arr[3]) {\n        \
    \        return(c(arr[1], arr[2], arr[3]))\n            } else {\n           \
    \     return(c(arr[1], arr[3], arr[2]))\n            }\n        }\n        if\
    \ (arr[2] > arr[1] & arr[2] > arr[3]) {\n            if (arr[1] > arr[3]) {\n\
    \                return(c(arr[2], arr[1], arr[3]))\n            } else {\n   \
    \             return(c(arr[2], arr[3], arr[1]))\n            }\n        }\n  \
    \      if (arr[3] > arr[1] & arr[3] > arr[2]) {\n            if (arr[1] > arr[2])\
    \ {\n                return(c(arr[3], arr[1], arr[2]))\n            } else {\n\
    \                return(c(arr[3], arr[2], arr[1]))\n            }\n        }\n\
    \    }\n    if (length(arr) > 3) {\n        if (arr[1] > arr[2] & arr[1] > arr[3])\
    \ {\n            if (arr[2] > arr[", "\n    if (k > length(arr)) {\n        stop(\"\
    k must be less than or equal to length of arr\")\n    }\n    if (k == length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE))\n    }\n    if (k == 1) {\n\
    \        return(max(arr))\n    }\n    return(sort(arr, decreasing = TRUE)[1:k])\n\
    }\n", "\n    if (k == 0) return(NULL)\n    if (k == 1) return(max(arr))\n    if\
    \ (k == length(arr)) return(sort(arr, decreasing = TRUE))\n    if (k > length(arr))\
    \ return(NULL)\n    if (k < length(arr)) {\n        max_arr <- arr[1]\n      \
    \  for (i in 2:length(arr)) {\n            if (arr[i] > max_arr) {\n         \
    \       max_arr <- arr[i]\n            }\n        }\n        return(max_arr)\n\
    \    }\n}\n\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3,\
    \ 2, 1, 2, -1, -2, 1), 1)\n", "\n    if (length(arr) == 0) {\n        return(arr)\n\
    \    }\n    if (k == 0) {\n        return(c())\n    }\n    if (k >= length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE))\n    }\n    # The idea is to\
    \ use a priority queue to store the k largest elements.\n    # The priority queue\
    \ is implemented using a min-heap.\n    # The heap is initialized with the first\
    \ k elements of the array.\n    # Then for each element after the first k elements,\
    \ if it is larger than the\n    # root of the heap, replace the root with the\
    \ element and heapify the heap.\n    # The heap will always contain the k largest\
    \ elements.\n    # The time complexity is O(nlogk) and the space complexity is\
    \ O(k).\n    heap <- arr[1:k]\n    heap <- heap[order(heap)]\n    for (i in (k\
    \ + 1):length(arr)) {\n        if (arr[i] > heap[1]) {\n            heap[1] <-\
    \ arr[i]\n            heap <- heap[order(heap)]\n        }\n    }\n    return(sort(heap,\
    \ decreasing = TRUE))\n}\nprint(maximum(c(-3, -4, 5), 3))\nprint(maximum(c(4,\
    \ -4, 4), 2))\nprint(maximum(c(-3, 2, 1, 2, -1, -2, 1), 1))\n", "\n    if (k ==\
    \ 1) {\n        return(max(arr))\n    }\n    if (k == length(arr)) {\n       \
    \ return(sort(arr, decreasing = TRUE))\n    }\n    if (k > length(arr)) {\n  \
    \      return(sort(arr, decreasing = TRUE))\n    }\n    if (k < 1) {\n       \
    \ return(NULL)\n    }\n    return(sort(arr, decreasing = TRUE)[1:k])\n}\nmaximum(c(-3,\
    \ -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    maximum(c(-3, 2, 1, 2, -1, -2, 1), 0)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 8)\n",
  "\n    # Write your code here\n    return(sort(arr, decreasing = TRUE)[1:k])\n}\n\
    \ ", "\n    # Write your code here\n    return(sort(arr, decreasing = TRUE)[1:k])\n\
    }\n", "\n    # Write your code here\n    if (k == 1) {\n        return(max(arr))\n\
    \    }\n    if (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k > length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k < 1) {\n        return(NULL)\n    }\n    if (k == 2) {\n   \
    \     return(sort(arr, decreasing = TRUE)[1:2])\n    }\n    if (k == 3) {\n  \
    \      return(sort(arr, decreasing = TRUE)[1:3])\n    }\n    if (k == 4) {\n \
    \       return(sort(arr, decreasing = TRUE)[1:4])\n    }\n    if (k == 5) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:5])\n    }\n    if (k == 6) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:6])\n    }\n    if (k == 7) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:7])\n    }\n    if (k == 8) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:8])\n    }\n    if (k == 9) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:9])\n    }\n    if (k == 10) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:10])\n    }\n    if (k == 11) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:11])\n    }\n    if (k == 12) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:12])\n    }\n    if (k == 13) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:13])\n    }\n    if (k == 14) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:14])\n    }\n    if (k == 15) {\n\
    \        return(sort(arr, decreasing = TRUE)[1:15])\n    }\n    if (k == 16) {\n\
    \        return(sort(arr, decreasing = TRUE)[1", "\n    if (k == 1) {\n      \
    \  return(max(arr))\n    }\n    if (k == length(arr)) {\n        return(sort(arr,\
    \ decreasing = TRUE))\n    }\n    if (k > length(arr)) {\n        return(sort(arr,\
    \ decreasing = TRUE))\n    }\n    if (k < 1) {\n        return(NULL)\n    }\n\
    \    arr <- sort(arr, decreasing = TRUE)\n    return(arr[1:k])\n}\nmaximum(c(-3,\
    \ -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    maximum(c(-3, 2, 1, 2, -1, -2, 1), 7)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 8)\n\
    maximum(c(-3, 2, 1, 2, -1, -2, 1), 0)\n", "\n    # Write your code here\n    if\
    \ (k == 1) {\n        return(max(arr))\n    }\n    else {\n        return(c(maximum(arr[-which.max(arr)],\
    \ k-1), max(arr)))\n    }\n}", "\n    if (k == 0) {\n        return(NULL)\n  \
    \  }\n    if (k == 1) {\n        return(max(arr))\n    }\n    if (k == length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE))\n    }\n    if (k > length(arr))\
    \ {\n        stop(\"k is larger than the length of the array!\")\n    }\n    if\
    \ (k < 0) {\n        stop(\"k is smaller than 0!\")\n    }\n    # create a vector\
    \ of length k\n    result <- vector(mode = \"numeric\", length = k)\n    # initialize\
    \ the first k elements of the vector\n    for (i in 1:k) {\n        result[i]\
    \ <- arr[i]\n    }\n    # sort the first k elements\n    result <- sort(result,\
    \ decreasing = TRUE)\n    # loop through the rest of the elements\n    for (i\
    \ in (k + 1):length(arr)) {\n        # if the current element is larger than the\
    \ smallest element in the \n        # vector, replace the smallest element with\
    \ the current element\n        if (arr[i] > result[k]) {\n            result[k]\
    \ <- arr[i]\n            # sort the vector\n            result <- sort(result,\
    \ decreasing = TRUE)\n        }\n    }\n    return(result)\n}", "\n    # Write\
    \ your code here\n    return(sort(arr, decreasing = TRUE)[1:k])\n}\n", "\n   \
    \ if (k == 1) {\n        return(max(arr))\n    }\n    if (k == length(arr)) {\n\
    \        return(sort(arr, decreasing = TRUE))\n    }\n    if (k > length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE))\n    }\n    if (k < 1) {\n \
    \       return(NULL)\n    }\n    if (k == 2) {\n        return(sort(c(max(arr),\
    \ min(arr)), decreasing = TRUE))\n    }\n    if (k == 3) {\n        return(sort(c(max(arr),\
    \ median(arr), min(arr)), decreasing = TRUE))\n    }\n    if (k == 4) {\n    \
    \    return(sort(c(max(arr), median(arr), median(arr[arr != median(arr)]), min(arr)),\
    \ decreasing = TRUE))\n    }\n    if (k == 5) {\n        return(sort(c(max(arr),\
    \ median(arr), median(arr[arr != median(arr)]), median(arr[arr != median(arr[arr\
    \ != median(arr)])]), min(arr)), decreasing = TRUE))\n    }\n    if (k == 6) {\n\
    \        return(sort(c(max(arr), median(arr), median(arr[arr != median(arr)]),\
    \ median(arr[arr != median(arr[arr != median(arr)])]), median(arr[arr != median(arr[arr\
    \ != median(arr[arr != median(arr)])])]), min(arr)), decreasing = TRUE))\n   \
    \ }\n    if (k == 7) {\n        return(sort(c(max(arr), median(arr), median(arr[arr\
    \ != median(arr)]), median(arr[arr != median(arr[arr != median(arr)])]), median(arr[arr\
    \ != median(arr[arr != median(arr[arr != median(arr)])])]), median(arr[arr !=\
    \ median(arr[arr != median(arr[arr != median(arr[arr != median(arr)])])])]), min(arr)),\
    \ decreasing = TRUE))\n    }\n    if (k == 8) {\n        return(sort(c(max(arr),\
    \ median(arr), median(arr[", "\n    # Write your code here\n    # Use the built-in\
    \ function sort() to sort the array\n    # Return the first k elements of the\
    \ sorted array\n    sort(arr)[1:k]\n}\n ", "\n    if (k == 1) {\n        return(max(arr))\n\
    \    }\n    if (length(arr) == k) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (length(arr) < k) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (length(arr) > k) {\n        return(sort(arr, decreasing = TRUE)[1:k])\n\
    \    }\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2,\
    \ 1, 2, -1, -2, 1), 1)\n", "\n    if (k == 1) {\n        return(max(arr))\n  \
    \  }\n    if (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k > length(arr)) {\n        stop(\"k is greater than length of\
    \ arr\")\n    }\n    if (k < 1) {\n        stop(\"k is less than 1\")\n    }\n\
    \    if (length(arr) == 1) {\n        return(arr)\n    }\n    if (length(arr)\
    \ == 2) {\n        if (arr[1] > arr[2]) {\n            return(c(arr[1], arr[2]))\n\
    \        } else {\n            return(c(arr[2], arr[1]))\n        }\n    }\n \
    \   if (length(arr) == 3) {\n        if (arr[1] > arr[2] & arr[1] > arr[3]) {\n\
    \            if (arr[2] > arr[3]) {\n                return(c(arr[1], arr[2],\
    \ arr[3]))\n            } else {\n                return(c(arr[1], arr[3], arr[2]))\n\
    \            }\n        }\n        if (arr[2] > arr[1] & arr[2] > arr[3]) {\n\
    \            if (arr[1] > arr[3]) {\n                return(c(arr[2], arr[1],\
    \ arr[3]))\n            } else {\n                return(c(arr[2], arr[3], arr[1]))\n\
    \            }\n        }\n        if (arr[3] > arr[1] & arr[3] > arr[2]) {\n\
    \            if (arr[1] > arr[2]) {\n                return(c(arr[3], arr[1],\
    \ arr[2]))\n            } else {\n                return(c(arr[3], arr[2], arr[1]))\n\
    \            }\n        }\n    }\n    if (length(arr) > 3) {\n        if (k ==\
    \ 2) {\n            if (arr[1] > arr[2]) {\n                if (arr[1] > arr[3])\
    \ {\n                    if (", "\n    # Write your code here\n    # Sort the\
    \ array in descending order\n    arr <- sort(arr, decreasing = TRUE)\n    # Return\
    \ the first k elements\n    return(arr[1:k])\n}", "\n    if (k == 1) {\n     \
    \   return(max(arr))\n    }\n    if (k == length(arr)) {\n        return(sort(arr,\
    \ decreasing = TRUE))\n    }\n    if (k > length(arr)) {\n        return(arr)\n\
    \    }\n    if (k < 1) {\n        return(NULL)\n    }\n    if (k == 2) {\n   \
    \     return(sort(c(max(arr), min(arr)), decreasing = TRUE))\n    }\n    if (k\
    \ == 3) {\n        return(sort(c(max(arr), min(arr), median(arr)), decreasing\
    \ = TRUE))\n    }\n    if (k == 4) {\n        return(sort(c(max(arr), min(arr),\
    \ median(arr), median(arr[arr != median(arr)])), decreasing = TRUE))\n    }\n\
    \    if (k == 5) {\n        return(sort(c(max(arr), min(arr), median(arr), median(arr[arr\
    \ != median(arr)]), median(arr[arr != median(arr) & arr != median(arr[arr != median(arr)])])),\
    \ decreasing = TRUE))\n    }\n    if (k == 6) {\n        return(sort(c(max(arr),\
    \ min(arr), median(arr), median(arr[arr != median(arr)]), median(arr[arr != median(arr)\
    \ & arr != median(arr[arr != median(arr)])]), median(arr[arr != median(arr) &\
    \ arr != median(arr[arr != median(arr)]) & arr != median(arr[arr != median(arr)\
    \ & arr != median(arr[arr != median(arr)])])])), decreasing = TRUE))\n    }\n\
    \    if (k == 7) {\n        return(sort(c(max(arr), min(arr), median(arr), median(arr[arr\
    \ != median(arr)]), median(arr[arr != median(arr) & arr != median(arr[arr != median(arr)])]),\
    \ median(arr[arr != median(arr) & arr != median(arr[arr != median(arr)]) & arr\
    \ != median(arr[arr != median(arr) & arr != median(arr[arr != median", "\n   \
    \ if (k == 0) {\n        return(c())\n    }\n    if (k == 1) {\n        return(max(arr))\n\
    \    }\n    if (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k > length(arr)) {\n        stop(\"k is larger than the length\
    \ of arr\")\n    }\n    if (k < 0) {\n        stop(\"k is negative\")\n    }\n\
    \    if (k == 2) {\n        return(sort(arr, decreasing = TRUE)[1:2])\n    }\n\
    \    if (k == 3) {\n        return(sort(arr, decreasing = TRUE)[1:3])\n    }\n\
    \    if (k == 4) {\n        return(sort(arr, decreasing = TRUE)[1:4])\n    }\n\
    \    if (k == 5) {\n        return(sort(arr, decreasing = TRUE)[1:5])\n    }\n\
    \    if (k == 6) {\n        return(sort(arr, decreasing = TRUE)[1:6])\n    }\n\
    \    if (k == 7) {\n        return(sort(arr, decreasing = TRUE)[1:7])\n    }\n\
    \    if (k == 8) {\n        return(sort(arr, decreasing = TRUE)[1:8])\n    }\n\
    \    if (k == 9) {\n        return(sort(arr, decreasing = TRUE)[1:9])\n    }\n\
    \    if (k == 10) {\n        return(sort(arr, decreasing = TRUE)[1:10])\n    }\n\
    \    if (k == 11) {\n        return(sort(arr, decreasing = TRUE)[1:11])\n    }\n\
    \    if (k == 12) {\n        return(sort(arr, decreasing = TRUE)[1:12])\n    }\n\
    \    if (k == 13) {\n        return(sort(arr, decreasing = TRUE)[1:13])\n    }\n\
    \    if (k == 14) {\n        return(sort(arr, decreasing = TRUE)[1:14])\n    }\n\
    \    if (k == 15) {\n        return(sort(arr, decreasing = TRUE)[1:15])\n    }\n\
    \    if (k == 16)", "\n    # write your code here\n    return(sort(arr, decreasing\
    \ = TRUE)[1:k])\n}\n", "\n    if (k == 0) return(c())\n    if (k == 1) return(max(arr))\n\
    \    if (k == length(arr)) return(sort(arr, decreasing = TRUE))\n    #if (k ==\
    \ length(arr)) return(sort(arr, decreasing = TRUE))\n    #if (k == length(arr))\
    \ return(sort(arr, decreasing = TRUE))\n    #if (k == length(arr)) return(sort(arr,\
    \ decreasing = TRUE))\n    #if (k == length(arr)) return(sort(arr, decreasing\
    \ = TRUE))\n    #if (k == length(arr)) return(sort(arr, decreasing = TRUE))\n\
    \    #if (k == length(arr)) return(sort(arr, decreasing = TRUE))\n    #if (k ==\
    \ length(arr)) return(sort(arr, decreasing = TRUE))\n    #if (k == length(arr))\
    \ return(sort(arr, decreasing = TRUE))\n    #if (k == length(arr)) return(sort(arr,\
    \ decreasing = TRUE))\n    #if (k == length(arr)) return(sort(arr, decreasing\
    \ = TRUE))\n    #if (k == length(arr)) return(sort(arr, decreasing = TRUE))\n\
    \    #if (k == length(arr)) return(sort(arr, decreasing = TRUE))\n    #if (k ==\
    \ length(arr)) return(sort(arr, decreasing = TRUE))\n    #if (k == length(arr))\
    \ return(sort(arr, decreasing = TRUE))\n    #if (k == length(arr)) return(sort(arr,\
    \ decreasing = TRUE))\n    #if (k == length(arr)) return(sort(arr, decreasing\
    \ = TRUE))\n    #if (k == length(arr)) return(sort(arr, decreasing = TRUE))\n\
    \    #if (k == length(arr)) return(sort(arr, decreasing = TRUE))\n    #if (k ==\
    \ length(arr)) return(sort(arr, decreasing = TRUE))\n    #if (k == length(arr))\
    \ return(sort(arr, decreasing = TRUE))\n    #if (k == length(arr)) return(sort(arr,\
    \ decreasing = TRUE))\n    #if (k == length(arr)) return(sort(arr, decreasing\
    \ = TRUE))\n    #", "\n    arr <- sort(arr, decreasing = TRUE)\n    return(arr[1:k])\n\
    }\n\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2,\
    \ -1, -2, 1), 1)\n", "\n    # Write your code here\n    # Sort the array in descending\
    \ order\n    arr <- sort(arr, decreasing = TRUE)\n    # Return the first k elements\n\
    \    return(arr[1:k])\n}\n", "\n    if (k == 1) {\n        return(max(arr))\n\
    \    }\n    if (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k > length(arr)) {\n        stop(\"k must be less than or equal\
    \ to length of arr\")\n    }\n    if (k < 1) {\n        stop(\"k must be greater\
    \ than or equal to 1\")\n    }\n    if (k == 2) {\n        return(sort(c(max(arr),\
    \ min(arr)), decreasing = TRUE))\n    }\n    if (k == 3) {\n        return(sort(c(max(arr),\
    \ median(arr), min(arr)), decreasing = TRUE))\n    }\n    if (k == 4) {\n    \
    \    return(sort(c(max(arr), median(arr, na.rm = TRUE), median(arr, na.rm = TRUE),\
    \ min(arr)), decreasing = TRUE))\n    }\n    if (k == 5) {\n        return(sort(c(max(arr),\
    \ median(arr, na.rm = TRUE), median(arr, na.rm = TRUE), median(arr, na.rm = TRUE),\
    \ min(arr)), decreasing = TRUE))\n    }\n    if (k == 6) {\n        return(sort(c(max(arr),\
    \ median(arr, na.rm = TRUE), median(arr, na.rm = TRUE), median(arr, na.rm = TRUE),\
    \ median(arr, na.rm = TRUE), min(arr)), decreasing = TRUE))\n    }\n    if (k\
    \ == 7) {\n        return(sort(c(max(arr), median(arr, na.rm = TRUE), median(arr,\
    \ na.rm = TRUE), median(arr, na.rm = TRUE), median(arr, na.rm = TRUE), median(arr,\
    \ na.rm = TRUE), min(arr)), decreasing = TRUE))\n    }\n    if (k == 8) {\n  \
    \      return(sort(c(max(arr), median(arr, na.rm = TRUE), median(arr, na.rm =\
    \ TRUE), median(arr, na.rm = TRUE), median(arr, na.rm = TRUE), median(arr, na.rm\
    \ = TRUE), median(", "\n    if (k == 1) {\n        return(max(arr))\n    }\n \
    \   else {\n        return(c(maximum(arr[-which.max(arr)], k - 1), max(arr)))\n\
    \    }\n}\n", "\n    # Write your code here\n    # Sort the array in descending\
    \ order\n    arr <- sort(arr, decreasing = TRUE)\n    # Return the first k elements\n\
    \    return(arr[1:k])\n}\nmaximum(arr = c(-3, -4, 5), k = 3)\nmaximum(arr = c(4,\
    \ -4, 4), k = 2)\nmaximum(arr = c(-3, 2, 1, 2, -1, -2, 1), k = 1)\n", "\n    #\
    \ Write your code here\n    if (k == 1) {\n        return(max(arr))\n    }\n \
    \   if (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n  \
    \  }\n    if (k > length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k < 1) {\n        return(NULL)\n    }\n    return(sort(arr, decreasing\
    \ = TRUE)[1:k])\n}\n", "\n    if (k == 1) {\n        return(max(arr))\n    }\n\
    \    if (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n \
    \   }\n    if (k > length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k < 1) {\n        return(NULL)\n    }\n    if (k == 2) {\n   \
    \     return(sort(c(max(arr), min(arr)), decreasing = TRUE))\n    }\n    if (k\
    \ == 3) {\n        return(sort(c(max(arr), min(arr), median(arr)), decreasing\
    \ = TRUE))\n    }\n    if (k == 4) {\n        return(sort(c(max(arr), min(arr),\
    \ median(arr), median(arr[arr != median(arr)])), decreasing = TRUE))\n    }\n\
    \    if (k == 5) {\n        return(sort(c(max(arr), min(arr), median(arr), median(arr[arr\
    \ != median(arr)]), median(arr[arr != median(arr) & arr != median(arr[arr != median(arr)])])),\
    \ decreasing = TRUE))\n    }\n    if (k == 6) {\n        return(sort(c(max(arr),\
    \ min(arr), median(arr), median(arr[arr != median(arr)]), median(arr[arr != median(arr)\
    \ & arr != median(arr[arr != median(arr)])]), median(arr[arr != median(arr) &\
    \ arr != median(arr[arr != median(arr)]) & arr != median(arr[arr != median(arr)\
    \ & arr != median(arr[arr != median(arr)])])])), decreasing = TRUE))\n    }\n\
    \    if (k == 7) {\n        return(sort(c(max(arr), min(arr), median(arr), median(arr[arr\
    \ != median(arr)]), median(arr[arr != median(arr) & arr != median(arr[arr != median(arr)])]),\
    \ median(arr[arr != median(arr) & arr != median(arr[arr != median(arr)]) & arr\
    \ != median(arr[arr != median(arr) & arr != median", "\n    if (k == 0) {\n  \
    \      return(NULL)\n    }\n    if (k == 1) {\n        return(max(arr))\n    }\n\
    \    if (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n \
    \   }\n    if (k > length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k < length(arr)) {\n        return(sort(arr, decreasing = TRUE)[1:k])\n\
    \    }\n}\n", "\n    if (k == 1) {\n        return(max(arr))\n    }\n    if (k\
    \ == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n    }\n   \
    \ if (k > length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n    }\n\
    \    if (k < 1) {\n        return(NULL)\n    }\n    if (k == 2) {\n        return(sort(c(max(arr),\
    \ min(arr)), decreasing = TRUE))\n    }\n    if (k == 3) {\n        return(sort(c(max(arr),\
    \ min(arr), median(arr)), decreasing = TRUE))\n    }\n    if (k == 4) {\n    \
    \    return(sort(c(max(arr), min(arr), median(arr), median(arr[arr != median(arr)])),\
    \ decreasing = TRUE))\n    }\n    if (k == 5) {\n        return(sort(c(max(arr),\
    \ min(arr), median(arr), median(arr[arr != median(arr)]), median(arr[arr != median(arr)\
    \ & arr != median(arr[arr != median(arr)])])), decreasing = TRUE))\n    }\n  \
    \  if (k == 6) {\n        return(sort(c(max(arr), min(arr), median(arr), median(arr[arr\
    \ != median(arr)]), median(arr[arr != median(arr) & arr != median(arr[arr != median(arr)])]),\
    \ median(arr[arr != median(arr) & arr != median(arr[arr != median(arr)]) & arr\
    \ != median(arr[arr != median(arr) & arr != median(arr[arr != median(arr)])])])),\
    \ decreasing = TRUE))\n    }\n    if (k == 7) {\n        return(sort(c(max(arr),\
    \ min(arr), median(arr), median(arr[arr != median(arr)]), median(arr[arr != median(arr)\
    \ & arr != median(arr[arr != median(arr)])]), median(arr[arr != median(arr) &\
    \ arr != median(arr[arr != median(arr)]) & arr != median(arr[arr != median(arr)\
    \ & arr != median", "\n    n <- length(arr)\n    if (k == n) {\n        return(sort(arr,\
    \ decreasing = TRUE))\n    }\n    if (k == 1) {\n        return(max(arr))\n  \
    \  }\n    if (k == 0) {\n        return(NULL)\n    }\n    if (k > n) {\n     \
    \   return(NULL)\n    }\n    # sort the array in decreasing order\n    arr <-\
    \ sort(arr, decreasing = TRUE)\n    # return the first k elements\n    return(arr[1:k])\n\
    }\narr <- c(-3, -4, 5)\nk <- 3\nmaximum(arr, k)\n\narr <- c(4, -4, 4)\nk <- 2\n\
    maximum(arr, k)\n\narr <- c(-3, 2, 1, 2, -1, -2, 1)\nk <- 1\nmaximum(arr, k)\n\
    \narr <- c(-3, 2, 1, 2, -1, -2, 1)\nk <- 0\nmaximum(arr, k)\n\narr <- c(-3, 2,\
    \ 1, 2, -1, -2, 1)\nk <- 8\nmaximum(arr, k)\n\narr <- c(-3, 2, 1, 2, -1, -2, 1)\n\
    k <- -1\nmaximum(arr, k)\n\narr <- c(-3, 2, 1, 2, -1, -2, 1)\nk <- -8\nmaximum(arr,\
    \ k)\n\narr <- c(-3, 2, 1, 2, -1, -2, 1)\nk <- NULL\nmaximum(arr, k)\n ", "\n\
    \    if (k == 1) {\n        return(max(arr))\n    }\n    if (k == length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE))\n    }\n    if (k > length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE))\n    }\n    if (k < 1) {\n \
    \       return(NULL)\n    }\n    if (k < length(arr)) {\n        return(sort(arr,\
    \ decreasing = TRUE)[1:k])\n    }\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4,\
    \ 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n    if (length(arr) ==\
    \ k) {\n        return(sort(arr, decreasing = TRUE))\n    }\n    if (k == 1) {\n\
    \        return(max(arr))\n    }\n    if (k == 0) {\n        return(NULL)\n  \
    \  }\n    if (k > length(arr)) {\n        return(NULL)\n    }\n    if (k < 0)\
    \ {\n        return(NULL)\n    }\n    if (length(arr) == 0) {\n        return(NULL)\n\
    \    }\n    if (length(arr) == 1) {\n        return(arr)\n    }\n    if (length(arr)\
    \ == 2) {\n        return(sort(arr, decreasing = TRUE))\n    }\n    if (length(arr)\
    \ == 3) {\n        return(sort(arr, decreasing = TRUE)[1:k])\n    }\n    if (length(arr)\
    \ == 4) {\n        return(sort(arr, decreasing = TRUE)[1:k])\n    }\n    if (length(arr)\
    \ == 5) {\n        return(sort(arr, decreasing = TRUE)[1:k])\n    }\n    if (length(arr)\
    \ == 6) {\n        return(sort(arr, decreasing = TRUE)[1:k])\n    }\n    if (length(arr)\
    \ == 7) {\n        return(sort(arr, decreasing = TRUE)[1:k])\n    }\n    if (length(arr)\
    \ == 8) {\n        return(sort(arr, decreasing = TRUE)[1:k])\n    }\n    if (length(arr)\
    \ == 9) {\n        return(sort(arr, decreasing = TRUE)[1:k])\n    }\n    if (length(arr)\
    \ == 10) {\n        return(sort(arr, decreasing = TRUE)[1:k])\n    }\n    if (length(arr)\
    \ == 11) {\n        return(sort(arr, decreasing = TRUE)[1:k])\n    }\n    if (length(arr)\
    \ == 12) {\n        return(sort(arr, decreasing = TRUE)[1:k])\n    }\n    if (length(arr)\
    \ == 13) {\n        return(sort(arr, decreasing = TRUE)[1:k])\n", "\n    if (k\
    \ == 1) {\n        return(max(arr))\n    }\n    if (k == length(arr)) {\n    \
    \    return(sort(arr, decreasing = TRUE))\n    }\n    if (k > length(arr)) {\n\
    \        stop(\"k is larger than the length of the array.\")\n    }\n    if (k\
    \ < 1) {\n        stop(\"k is smaller than 1.\")\n    }\n    if (k < length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE)[1:k])\n    }\n}\n", "\n    #\
    \ Sort the array in descending order\n    arr <- sort(arr, decreasing = TRUE)\n\
    \    # Return the first k elements\n    return(arr[1:k])\n}\n", "\n    # write\
    \ your code here\n    if (length(arr) == 0) {\n        return(NULL)\n    }\n \
    \   if (k == 0) {\n        return(NULL)\n    }\n    if (k > length(arr)) {\n \
    \       return(arr)\n    }\n    if (k == 1) {\n        return(max(arr))\n    }\n\
    \    if (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n \
    \   }\n    if (k == 2) {\n        return(sort(arr, decreasing = TRUE)[1:2])\n\
    \    }\n    if (k == 3) {\n        return(sort(arr, decreasing = TRUE)[1:3])\n\
    \    }\n    if (k == 4) {\n        return(sort(arr, decreasing = TRUE)[1:4])\n\
    \    }\n    if (k == 5) {\n        return(sort(arr, decreasing = TRUE)[1:5])\n\
    \    }\n    if (k == 6) {\n        return(sort(arr, decreasing = TRUE)[1:6])\n\
    \    }\n    if (k == 7) {\n        return(sort(arr, decreasing = TRUE)[1:7])\n\
    \    }\n    if (k == 8) {\n        return(sort(arr, decreasing = TRUE)[1:8])\n\
    \    }\n    if (k == 9) {\n        return(sort(arr, decreasing = TRUE)[1:9])\n\
    \    }\n    if (k == 10) {\n        return(sort(arr, decreasing = TRUE)[1:10])\n\
    \    }\n    if (k == 11) {\n        return(sort(arr, decreasing = TRUE)[1:11])\n\
    \    }\n    if (k == 12) {\n        return(sort(arr, decreasing = TRUE)[1:12])\n\
    \    }\n    if (k == 13) {\n        return(sort(arr, decreasing = TRUE)[1:13])\n\
    \    }\n    if (k == 14) {\n        return(sort(arr, decreasing = TRUE)[1:14])\n\
    \    }\n    if (k == 15) {\n        return(sort(arr, decreasing = TRUE)[1:15])\n\
    \    }\n    if (k == 16", "\n    if (k == 1) {\n        return(max(arr))\n   \
    \ }\n    if (k == length(arr)) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    if (k > length(arr)) {\n        stop(\"k is larger than the length\
    \ of arr\")\n    }\n    if (k < 1) {\n        stop(\"k is smaller than 1\")\n\
    \    }\n    # create a list of length k\n    max_list <- vector(\"list\", k)\n\
    \    # initialize the list with the first k elements of arr\n    max_list[[1]]\
    \ <- arr[1]\n    for (i in 2:k) {\n        max_list[[i]] <- arr[i]\n        #\
    \ sort the list\n        max_list <- sort(max_list, decreasing = TRUE)\n    }\n\
    \    # loop through the rest of the elements in arr\n    for (i in (k + 1):length(arr))\
    \ {\n        # if the current element is larger than the smallest element in the\
    \ list\n        if (arr[i] > max_list[[k]]) {\n            # replace the smallest\
    \ element with the current element\n            max_list[[k]] <- arr[i]\n    \
    \        # sort the list\n            max_list <- sort(max_list, decreasing =\
    \ TRUE)\n        }\n    }\n    return(max_list)\n}\n", "\n    if (k == 1) {\n\
    \        return(max(arr))\n    }\n    if (k == length(arr)) {\n        return(sort(arr,\
    \ decreasing = TRUE))\n    }\n    if (k > length(arr)) {\n        return(sort(arr,\
    \ decreasing = TRUE))\n    }\n    if (k < 1) {\n        return(NULL)\n    }\n\
    \    if (k == 2) {\n        return(sort(c(max(arr), min(arr)), decreasing = TRUE))\n\
    \    }\n    if (k == 3) {\n        return(sort(c(max(arr), min(arr), arr[which(arr\
    \ != max(arr) & arr != min(arr))]), decreasing = TRUE))\n    }\n    if (k > 3)\
    \ {\n        return(sort(c(max(arr), min(arr), arr[which(arr != max(arr) & arr\
    \ != min(arr))]), decreasing = TRUE)[1:k])\n    }\n}", "\n    if (k == 1) {\n\
    \        return(max(arr))\n    }\n    if (k == length(arr)) {\n        return(sort(arr,\
    \ decreasing = TRUE))\n    }\n    if (k > length(arr)) {\n        return(sort(arr,\
    \ decreasing = TRUE))\n    }\n    if (k < 1) {\n        return(NULL)\n    }\n\
    \    if (k == 2) {\n        return(sort(c(max(arr), min(arr)), decreasing = TRUE))\n\
    \    }\n    if (k == 3) {\n        return(sort(c(max(arr), min(arr), median(arr)),\
    \ decreasing = TRUE))\n    }\n    if (k == 4) {\n        return(sort(c(max(arr),\
    \ min(arr), median(arr), median(arr[arr != median(arr)])), decreasing = TRUE))\n\
    \    }\n    if (k == 5) {\n        return(sort(c(max(arr), min(arr), median(arr),\
    \ median(arr[arr != median(arr)]), median(arr[arr != median(arr) & arr != median(arr[arr\
    \ != median(arr)])])), decreasing = TRUE))\n    }\n    if (k == 6) {\n       \
    \ return(sort(c(max(arr), min(arr), median(arr), median(arr[arr != median(arr)]),\
    \ median(arr[arr != median(arr) & arr != median(arr[arr != median(arr)])]), median(arr[arr\
    \ != median(arr) & arr != median(arr[arr != median(arr)]) & arr != median(arr[arr\
    \ != median(arr) & arr != median(arr[arr != median(arr)])])])), decreasing = TRUE))\n\
    \    }\n    if (k == 7) {\n        return(sort(c(max(arr), min(arr), median(arr),\
    \ median(arr[arr != median(arr)]), median(arr[arr != median(arr) & arr != median(arr[arr\
    \ != median(arr)])]), median(arr[arr != median(arr) & arr != median(arr[arr !=\
    \ median(arr)]) & arr != median(arr[arr != median(arr) & arr != median", "\n \
    \   # Sort the array in descending order\n    arr <- sort(arr, decreasing = TRUE)\n\
    \    # Return the first k elements\n    return(arr[1:k])\n}\n", "\n    if (k ==\
    \ 1) {\n        return(max(arr))\n    }\n    if (k == length(arr)) {\n       \
    \ return(sort(arr, decreasing = TRUE))\n    }\n    if (k > length(arr)) {\n  \
    \      return(sort(arr, decreasing = TRUE))\n    }\n    if (k < 1) {\n       \
    \ return(NULL)\n    }\n    return(sort(arr, decreasing = TRUE)[1:k])\n}\nmaximum(c(-3,\
    \ -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    maximum(c(-3, 2, 1, 2, -1, -2, 1), 7)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 8)\n\
    maximum(c(-3, 2, 1, 2, -1, -2, 1), 0)\n", "\n    # Write your code here\n    if\
    \ (k == 1) {\n        return(max(arr))\n    }\n    if (k == length(arr)) {\n \
    \       return(sort(arr, decreasing = TRUE))\n    }\n    arr <- sort(arr, decreasing\
    \ = TRUE)\n    return(arr[1:k])\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4,\
    \ 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n    # Write your code here\n\
    \    arr[order(arr, decreasing = TRUE)[1:k]]\n}\n", "\n    # Write your code here\n\
    \    # Sort the array\n    arr <- sort(arr)\n    # Return the last k elements\n\
    \    return(arr[(length(arr)-k+1):length(arr)])\n}\n", "\n    # Write your code\
    \ here\n    return(sort(arr, decreasing = TRUE)[1:k])\n}\n", "\n    if (k == 1)\
    \ {\n        return(max(arr))\n    }\n    else {\n        return(c(maximum(arr[-which.max(arr)],\
    \ k - 1), max(arr)))\n    }\n}\n\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4),\
    \ 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n    if (k == 1) {\n       \
    \ return(max(arr))\n    }\n    if (k == length(arr)) {\n        return(sort(arr,\
    \ decreasing = TRUE))\n    }\n    if (k > length(arr)) {\n        return(sort(arr,\
    \ decreasing = TRUE))\n    }\n    if (k < 1) {\n        return(NULL)\n    }\n\
    \    if (k == 2) {\n        return(sort(c(max(arr), min(arr)), decreasing = TRUE))\n\
    \    }\n    if (k == 3) {\n        return(sort(c(max(arr), min(arr), median(arr)),\
    \ decreasing = TRUE))\n    }\n    if (k == 4) {\n        return(sort(c(max(arr),\
    \ min(arr), median(arr), median(arr[arr != median(arr)])), decreasing = TRUE))\n\
    \    }\n    if (k == 5) {\n        return(sort(c(max(arr), min(arr), median(arr),\
    \ median(arr[arr != median(arr)]), median(arr[arr != median(arr) & arr != median(arr[arr\
    \ != median(arr)])])), decreasing = TRUE))\n    }\n    if (k == 6) {\n       \
    \ return(sort(c(max(arr), min(arr), median(arr), median(arr[arr != median(arr)]),\
    \ median(arr[arr != median(arr) & arr != median(arr[arr != median(arr)])]), median(arr[arr\
    \ != median(arr) & arr != median(arr[arr != median(arr)]) & arr != median(arr[arr\
    \ != median(arr) & arr != median(arr[arr != median(arr)])])])), decreasing = TRUE))\n\
    \    }\n    if (k == 7) {\n        return(sort(c(max(arr), min(arr), median(arr),\
    \ median(arr[arr != median(arr)]), median(arr[arr != median(arr) & arr != median(arr[arr\
    \ != median(arr)])]), median(arr[arr != median(arr) & arr != median(arr[arr !=\
    \ median(arr)]) & arr != median(arr[arr != median(arr) & arr != median", "\n \
    \   arr <- sort(arr, decreasing = TRUE)\n    return(arr[1:k])\n}\nmaximum(c(-3,\
    \ -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n",
  "\n    # Sort the array in descending order.\n    arr <- sort(arr, decreasing =\
    \ TRUE)\n    # Return the first k elements.\n    return(arr[1:k])\n}\nmaximum(c(-3,\
    \ -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n",
  "\n    return(sort(arr, decreasing = TRUE)[1:k])\n}\nmaximum(c(-3, -4, 5), 3)\n\
    maximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n    arr[order(arr,\
    \ decreasing = TRUE)][1:k]\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4),\
    \ 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n    if (k == 0) return(c())\n\
    \    if (k == 1) return(max(arr))\n    if (k == length(arr)) return(sort(arr,\
    \ decreasing = TRUE))\n    if (k > length(arr)) return(arr)\n    # if (k == 2)\
    \ return(c(max(arr), min(arr)))\n    # if (k == 3) return(c(max(arr), min(arr),\
    \ median(arr)))\n    # if (k == 4) return(c(max(arr), min(arr), median(arr), median(arr[arr\
    \ != median(arr)])))\n    # if (k == 5) return(c(max(arr), min(arr), median(arr),\
    \ median(arr[arr != median(arr)]), median(arr[arr != median(arr[arr != median(arr)])])))\n\
    \    # if (k == 6) return(c(max(arr), min(arr), median(arr), median(arr[arr !=\
    \ median(arr)]), median(arr[arr != median(arr[arr != median(arr)])]), median(arr[arr\
    \ != median(arr[arr != median(arr[arr != median(arr)])])])))\n    # if (k == 7)\
    \ return(c(max(arr), min(arr), median(arr), median(arr[arr != median(arr)]), median(arr[arr\
    \ != median(arr[arr != median(arr)])]), median(arr[arr != median(arr[arr != median(arr[arr\
    \ != median(arr)])])]), median(arr[arr != median(arr[arr != median(arr[arr !=\
    \ median(arr[arr != median(arr)])])])])))\n    # if (k == 8) return(c(max(arr),\
    \ min(arr), median(arr), median(arr[arr != median(arr)]), median(arr[arr != median(arr[arr\
    \ != median(arr)])]), median(arr[arr != median(arr[arr != median(arr[arr != median(arr)])])]),\
    \ median(arr[arr != median(arr[arr != median(arr[arr != median(arr[arr != median(arr)])])])]),\
    \ median(arr[arr != median(arr[arr", "\n    # Write your code here\n    if (k\
    \ == 1) {\n        return(max(arr))\n    }\n    if (k == length(arr)) {\n    \
    \    return(sort(arr, decreasing = TRUE))\n    }\n    if (k > length(arr)) {\n\
    \        return(sort(arr, decreasing = TRUE))\n    }\n    if (k < 1) {\n     \
    \   return(NULL)\n    }\n    return(sort(arr, decreasing = TRUE)[1:k])\n}", "\n\
    \    if (k == 1) {\n        return(max(arr))\n    }\n    if (k == length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE))\n    }\n    if (k > length(arr))\
    \ {\n        stop(\"k is larger than the length of the array!\")\n    }\n    if\
    \ (k < 1) {\n        stop(\"k is less than 1!\")\n    }\n    # Create a vector\
    \ of length k with the first k elements of arr\n    max_k <- arr[1:k]\n    # Sort\
    \ the vector in descending order\n    max_k <- sort(max_k, decreasing = TRUE)\n\
    \    # Loop through the rest of the elements in arr\n    for (i in (k + 1):length(arr))\
    \ {\n        # If the current element is larger than the smallest element in max_k\n\
    \        if (arr[i] > max_k[k]) {\n            # Replace the smallest element\
    \ in max_k with the current element\n            max_k[k] <- arr[i]\n        \
    \    # Sort the vector in descending order\n            max_k <- sort(max_k, decreasing\
    \ = TRUE)\n        }\n    }\n    return(max_k)\n}\n", "\n    if (k == 1) {\n \
    \       return(max(arr))\n    }\n    if (k == length(arr)) {\n        return(sort(arr,\
    \ decreasing = TRUE))\n    }\n    if (k > length(arr)) {\n        return(sort(arr,\
    \ decreasing = TRUE))\n    }\n    if (k < 1) {\n        return(NULL)\n    }\n\
    \    arr <- sort(arr, decreasing = TRUE)\n    return(arr[1:k])\n}\nprint(maximum(c(-3,\
    \ -4, 5), 3))\nprint(maximum(c(4, -4, 4), 2))\nprint(maximum(c(-3, 2, 1, 2, -1,\
    \ -2, 1), 1))\n", "\n    arr <- sort(arr, decreasing = TRUE)\n    return(arr[1:k])\n\
    }\n", "\n    sort(arr, decreasing = TRUE)[1:k]\n}\nmaximum(c(-3, -4, 5), 3)\n\
    maximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n"]
stop_tokens:
- "\n#"
- "\n```"
