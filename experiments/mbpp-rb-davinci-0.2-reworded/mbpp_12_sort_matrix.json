{
  "name": "mbpp_12_sort_matrix",
  "language": "rb",
  "prompt": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by {|row| row.inject(:+)}\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(0, :+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(0, :+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by {|row| row.inject(0, :+)}\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  # m.sort_by { |row| row.reduce(:+) }\n  m.sort_by { |row| row.sum }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(0, :+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.reduce(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend",
    "  m.sort_by { |row| row.inject(:+) }\nend"
  ]
}