{
  "name": "mbpp_728_sum_list",
  "language": "rb",
  "prompt": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_728_sum_list.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum_lst = []\n  lst1.each_with_index do |num, idx|\n    sum_lst << num + lst2[idx]\n  end\n  sum_lst\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptk_58cgr\nStarted\n.\nFinished in 0.000385513 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2593.95 tests/s, 7781.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum_lst = []\n  lst1.each_with_index do |num, idx|\n    sum_lst << num + lst2[idx]\n  end\n  sum_lst\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptk_58cgr\nStarted\n.\nFinished in 0.000385513 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2593.95 tests/s, 7781.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum_lst = []\n  lst1.each_with_index do |num, index|\n    sum_lst << num + lst2[index]\n  end\n  sum_lst\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfzvj2gyy\nStarted\n.\nFinished in 0.000380623 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2627.27 tests/s, 7881.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum = []\n  lst1.each_with_index do |num, index|\n    sum << num + lst2[index]\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcrctnk8\nStarted\n.\nFinished in 0.000387252 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2582.30 tests/s, 7746.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum_lst = []\n  lst1.each_with_index do |num, idx|\n    sum_lst << num + lst2[idx]\n  end\n  sum_lst\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptk_58cgr\nStarted\n.\nFinished in 0.000385513 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2593.95 tests/s, 7781.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map {|x, y| x + y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpq0tazbgq\nStarted\n.\nFinished in 0.000388899 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2571.36 tests/s, 7714.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum_lst = []\n  lst1.each_with_index do |num, idx|\n    sum_lst << num + lst2[idx]\n  end\n  sum_lst\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptk_58cgr\nStarted\n.\nFinished in 0.000385513 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2593.95 tests/s, 7781.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  result = []\n  lst1.each_with_index do |item, index|\n    result << item + lst2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcjonutgz\nStarted\n.\nFinished in 0.000401249 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2492.22 tests/s, 7476.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum_list = []\n  lst1.each_with_index do |num, index|\n    sum_list << num + lst2[index]\n  end\n  sum_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpg7z9eipp\nStarted\n.\nFinished in 0.000405106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2468.49 tests/s, 7405.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum_lst = []\n  lst1.each_with_index do |num, idx|\n    sum_lst << num + lst2[idx]\n  end\n  sum_lst\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptk_58cgr\nStarted\n.\nFinished in 0.000385513 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2593.95 tests/s, 7781.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum_lst = []\n  lst1.each_with_index do |num, i|\n    sum_lst << num + lst2[i]\n  end\n  sum_lst\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpljhdudh9\nStarted\n.\nFinished in 0.000395221 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2530.23 tests/s, 7590.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum_lst = []\n  lst1.each_with_index do |num, index|\n    sum_lst << num + lst2[index]\n  end\n  sum_lst\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfzvj2gyy\nStarted\n.\nFinished in 0.000380623 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2627.27 tests/s, 7881.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum = []\n  lst1.each_with_index do |num, index|\n    sum << num + lst2[index]\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcrctnk8\nStarted\n.\nFinished in 0.000387252 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2582.30 tests/s, 7746.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum = []\n  lst1.each_with_index do |num, i|\n    sum << num + lst2[i]\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4nqq8bey\nStarted\n.\nFinished in 0.000396327 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2523.17 tests/s, 7569.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum = []\n  lst1.each_with_index do |num, i|\n    sum << num + lst2[i]\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4nqq8bey\nStarted\n.\nFinished in 0.000396327 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2523.17 tests/s, 7569.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum_lst = []\n  lst1.each_with_index do |num, i|\n    sum_lst << num + lst2[i]\n  end\n  sum_lst\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpljhdudh9\nStarted\n.\nFinished in 0.000395221 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2530.23 tests/s, 7590.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum = []\n  lst1.each_with_index do |num, index|\n    sum << num + lst2[index]\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcrctnk8\nStarted\n.\nFinished in 0.000387252 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2582.30 tests/s, 7746.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  result = []\n  lst1.each_with_index do |num, index|\n    result << num + lst2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphef42flm\nStarted\n.\nFinished in 0.000380079 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2631.03 tests/s, 7893.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum_lst = []\n  lst1.each_with_index do |num, idx|\n    sum_lst << num + lst2[idx]\n  end\n  sum_lst\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptk_58cgr\nStarted\n.\nFinished in 0.000385513 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2593.95 tests/s, 7781.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum_lst = []\n  lst1.each_with_index do |num, idx|\n    sum_lst << num + lst2[idx]\n  end\n  sum_lst\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptk_58cgr\nStarted\n.\nFinished in 0.000385513 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2593.95 tests/s, 7781.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum = []\n  lst1.each_with_index do |num, index|\n    sum << num + lst2[index]\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcrctnk8\nStarted\n.\nFinished in 0.000387252 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2582.30 tests/s, 7746.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum = []\n  i = 0\n  while i < lst1.length\n    sum << lst1[i] + lst2[i]\n    i += 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphdh56kmp\nStarted\n.\nFinished in 0.000399444 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2503.48 tests/s, 7510.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map {|x, y| x + y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpq0tazbgq\nStarted\n.\nFinished in 0.000388899 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2571.36 tests/s, 7714.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map {|x, y| x + y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpq0tazbgq\nStarted\n.\nFinished in 0.000388899 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2571.36 tests/s, 7714.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |pair| pair.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2xszcw3f\nStarted\n.\nFinished in 0.000396896 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2519.55 tests/s, 7558.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map {|x, y| x + y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpq0tazbgq\nStarted\n.\nFinished in 0.000388899 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2571.36 tests/s, 7714.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.map.with_index { |num, i| num + lst2[i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpps_maiau\nStarted\n.\nFinished in 0.000732672 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1364.87 tests/s, 4094.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum = []\n  lst1.each_with_index do |num, i|\n    sum << num + lst2[i]\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4nqq8bey\nStarted\n.\nFinished in 0.000396327 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2523.17 tests/s, 7569.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum = []\n  lst1.each_with_index do |num, i|\n    sum << num + lst2[i]\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4nqq8bey\nStarted\n.\nFinished in 0.000396327 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2523.17 tests/s, 7569.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  result = []\n  lst1.each_with_index do |num, idx|\n    result << num + lst2[idx]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9fnshu39\nStarted\n.\nFinished in 0.000396857 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2519.80 tests/s, 7559.40 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  new_lst = []\n  lst1.each_with_index do |num, i|\n    new_lst << num + lst2[i]\n  end\n  new_lst\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpae6q877t\nStarted\n.\nFinished in 0.000389166 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2569.60 tests/s, 7708.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  i = 0\n  sum = []\n  while i < lst1.length\n    sum << lst1[i] + lst2[i]\n    i += 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxsy7wnlt\nStarted\n.\nFinished in 0.000392769 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2546.03 tests/s, 7638.08 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  result = []\n  lst1.each_with_index do |e, i|\n    result << e + lst2[i]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpya4k22z6\nStarted\n.\nFinished in 0.000390696 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2559.53 tests/s, 7678.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  result = []\n  lst1.each_with_index do |num, index|\n    result << num + lst2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphef42flm\nStarted\n.\nFinished in 0.000380079 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2631.03 tests/s, 7893.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum = []\n  lst1.each_with_index do |num, idx|\n    sum << num + lst2[idx]\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7t3lysv9\nStarted\n.\nFinished in 0.000393985 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.17 tests/s, 7614.50 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map {|x, y| x + y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpq0tazbgq\nStarted\n.\nFinished in 0.000388899 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2571.36 tests/s, 7714.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |pair| pair.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2xszcw3f\nStarted\n.\nFinished in 0.000396896 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2519.55 tests/s, 7558.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum = []\n  lst1.each_with_index do |item, index|\n    sum << item + lst2[index]\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvun62zwx\nStarted\n.\nFinished in 0.000383288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.00 tests/s, 7827.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum_lst = []\n  lst1.each_with_index do |num, index|\n    sum_lst << num + lst2[index]\n  end\n  sum_lst\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfzvj2gyy\nStarted\n.\nFinished in 0.000380623 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2627.27 tests/s, 7881.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk3ljztbr\nStarted\n.\nFinished in 0.000379632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.13 tests/s, 7902.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  result = []\n  lst1.each_with_index do |num, i|\n    result << num + lst2[i]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpior19vu2\nStarted\n.\nFinished in 0.000903017 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1107.40 tests/s, 3322.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum = []\n  lst1.each_with_index do |num, index|\n    sum << num + lst2[index]\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcrctnk8\nStarted\n.\nFinished in 0.000387252 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2582.30 tests/s, 7746.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum_lst = []\n  lst1.each_with_index do |num, i|\n    sum_lst << num + lst2[i]\n  end\n  sum_lst\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpljhdudh9\nStarted\n.\nFinished in 0.000395221 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2530.23 tests/s, 7590.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum_lst = []\n  lst1.each_with_index do |num, i|\n    sum_lst << num + lst2[i]\n  end\n  sum_lst\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpljhdudh9\nStarted\n.\nFinished in 0.000395221 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2530.23 tests/s, 7590.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncrp4xwp\nStarted\n.\nFinished in 0.000372761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.68 tests/s, 8048.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}