{
  "name": "mbpp_392_get_max_sum",
  "language": "rb",
  "prompt": "# Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef get_max_sum(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_max_sum\n    candidate = method(:get_max_sum)\n    assert_equal(106, candidate.call(60))\n    assert_equal(12, candidate.call(10))\n    assert_equal(2, candidate.call(2))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  return n if n < 12\n  return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) if n > 12\nend",
    "  return n if n <= 0\n  return n if n <= 2",
    "  return n if n <= 1\n  max_sum = [get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n].max\nend",
    "  return n if n <= 0\n  return n if n < 5\n  return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\nend",
    "  return n if n <= 5\n  return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) if n > 5\nend",
    "  return n if n <= 0\n  return n if n <= 4",
    "  return n if n <= 0\n  return n if n < 5\n  return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) if n > 5\nend",
    "  return n if n < 12\n  max_sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n  return max_sum if max_sum > n\n  n\nend",
    "  return n if n < 12\n  return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) if n >= 12\nend",
    "  return n if n < 12\n  return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) if n >= 12\nend",
    "  return n if n <= 0\n  return n if n <= 5\n  max_sum = [get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n].max\n  return max_sum\nend",
    "  return n if n < 12\n  return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) if n >= 12\nend",
    "  return n if n <= 0\n  return n if n <= 5\n  return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\nend",
    "  return n if n <= 0\n  return n if n <= 2\n  return n if n <= 4",
    "  return n if n < 12\n  return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) if n >= 12\nend",
    "  return n if n <= 11\n  return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) if n > 11\nend",
    "  return n if n <= 0\n  return n if n < 5\n  return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) if n >= 5\nend",
    "  return n if n <= 0\n  return n if n <= 5\n  return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\nend",
    "  return n if n <= 11\n  return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) if n > 11\nend",
    "  return n if n < 12\n  max_sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4)\n  max_sum > n ? max_sum : n\nend"
  ]
}