{
  "name": "mbpp_757_count_reverse_pairs",
  "language": "rb",
  "prompt": "# Write a function to count the pairs of reverse strings in the given string array. https://www.geeksforgeeks.org/rbthon-program-to-count-the-pairs-of-reverse-strings/\ndef count_reverse_pairs(test_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_reverse_pairs\n    candidate = method(:count_reverse_pairs)\n    assert_equal(2, candidate.call([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]))\n    assert_equal(1, candidate.call([\"geeks\", \"best\", \"for\", \"skeeg\"]))\n    assert_equal(2, candidate.call([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  count = 0\n  test_list.each_with_index do |element, index|\n    test_list[index+1..-1].each do |element2|\n      if element == element2.reverse\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..test_list.length-1\n    for j in i+1..test_list.length-1\n      if test_list[i] == test_list[j].reverse\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..test_list.length-1\n    for j in i+1..test_list.length-1\n      if test_list[i] == test_list[j].reverse\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  test_list.each_with_index do |element, index|\n    test_list[index+1..-1].each do |element2|\n      if element == element2.reverse\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  test_list.each_with_index do |str, index|\n    test_list[index + 1..-1].each do |str2|\n      count += 1 if str == str2.reverse\n    end\n  end\n  count\nend",
    "  count = 0\n  test_list.each do |word|\n    test_list.each do |word2|\n      if word == word2.reverse\n        count += 1\n      end\n    end\n  end\n  count / 2\nend",
    "  count = 0\n  test_list.each do |str|\n    test_list.each do |str2|\n      if str.reverse == str2\n        count += 1\n      end\n    end\n  end\n  count/2\nend",
    "  count = 0\n  for i in 0..test_list.length-1\n    for j in i+1..test_list.length-1\n      if test_list[i] == test_list[j].reverse\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  test_list.each do |str|\n    test_list.each do |str2|\n      if str == str2.reverse\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  test_list.each_with_index do |word, index|\n    test_list[index + 1..-1].each do |word2|\n      count += 1 if word == word2.reverse\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..test_list.length-1\n    for j in i+1..test_list.length-1\n      if test_list[i] == test_list[j].reverse\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  test_list.each_with_index do |val, index|\n    test_list[index+1..-1].each do |val2|\n      if val == val2.reverse\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  test_list.each_with_index do |item, index|\n    test_list.each_with_index do |item2, index2|\n      if index2 > index\n        if item == item2.reverse\n          count += 1\n        end\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  test_list.each_with_index do |word, index|\n    test_list[index + 1..-1].each do |word2|\n      count += 1 if word == word2.reverse\n    end\n  end\n  count\nend",
    "  count = 0\n  test_list.each_with_index do |word, index|\n    test_list[index+1..-1].each do |word2|\n      count += 1 if word == word2.reverse\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0...test_list.length\n    for j in i+1...test_list.length\n      if test_list[i] == test_list[j].reverse\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  test_list.each do |str|\n    test_list.each do |str2|\n      if str == str2.reverse\n        count += 1\n      end\n    end\n  end\n  count / 2\nend",
    "  count = 0\n  test_list.each do |str|\n    count += 1 if test_list.include?(str.reverse)\n  end\n  count\nend",
    "  count = 0\n  test_list.each_with_index do |str1, index1|\n    test_list.each_with_index do |str2, index2|\n      next if index1 == index2\n      count += 1 if str1 == str2.reverse\n    end\n  end\n  count\nend",
    "  count = 0\n  test_list.each do |str1|\n    test_list.each do |str2|\n      if str1 == str2.reverse\n        count += 1\n      end\n    end\n  end\n  count\nend"
  ]
}