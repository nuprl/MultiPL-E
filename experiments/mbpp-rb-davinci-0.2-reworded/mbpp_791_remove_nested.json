{
  "name": "mbpp_791_remove_nested",
  "language": "rb",
  "prompt": "# Write a function to remove arrays from the given array.\ndef remove_nested(test_tup)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_791_remove_nested.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_nested\n    candidate = method(:remove_nested)\n    assert_equal([1, 5, 7, 10], candidate.call([1, 5, 7, [4, 6], 10]))\n    assert_equal([2, 6, 8, 11], candidate.call([2, 6, 8, [5, 7], 11]))\n    assert_equal([3, 7, 9, 12], candidate.call([3, 7, 9, [6, 8], 12]))\n    assert_equal([3, 7, 9, 12], candidate.call([3, 7, 9, [6, 8], [5, 12], 12]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  test_tup.flatten\nend",
    "  test_tup.flatten\nend",
    "  test_tup.flatten\nend",
    "  test_tup.flatten\nend",
    "  test_tup.flatten\nend",
    "  test_tup.flatten.compact\nend",
    "  test_tup.flatten.compact\nend",
    "    test_tup.flatten\nend",
    "  test_tup.flatten\nend",
    "  test_tup.flatten\nend",
    "  test_tup.flatten\nend",
    "  test_tup.flatten\nend",
    "  test_tup.flatten\nend",
    "  test_tup.flatten.compact\nend",
    "  test_tup.flatten\nend",
    "  test_tup.flatten\nend",
    "  test_tup.flatten.compact\nend",
    "  test_tup.flatten\nend",
    "  test_tup.flatten\nend",
    "  test_tup.flatten.compact\nend"
  ]
}