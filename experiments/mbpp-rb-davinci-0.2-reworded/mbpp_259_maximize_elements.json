{
  "name": "mbpp_259_maximize_elements",
  "language": "rb",
  "prompt": "# Write a function to maximize the given two arrays.\ndef maximize_elements(test_tup1, test_tup2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_259_maximize_elements.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximize_elements\n    candidate = method(:maximize_elements)\n    assert_equal([[6, 7], [4, 9], [2, 9], [7, 10]], candidate.call([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]))\n    assert_equal([[7, 8], [5, 10], [3, 10], [8, 11]], candidate.call([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]))\n    assert_equal([[8, 9], [6, 11], [4, 11], [9, 12]], candidate.call([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  test_tup1.zip(test_tup2).map { |x, y| [x, y].max }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| [x, y].max }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x > y ? x : y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x > y ? x : y }\nend",
    "  # Write your code here\n  test_tup1.zip(test_tup2).map { |x, y| x > y ? x : y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| [x, y].max }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x > y ? x : y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x > y ? x : y }\nend",
    "  max_tup = []\n  test_tup1.each_with_index do |ele, i|\n    max_tup << [ele, test_tup2[i]].max\n  end\n  max_tup\nend",
    "  # Write your code here\n  result = []\n  test_tup1.each_with_index do |val, index|\n    result << [val, test_tup2[index]].max\n  end\n  result\nend",
    "  # Write your code here\n  test_tup1.zip(test_tup2).map{|x,y| x > y ? x : y}\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x > y ? x : y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| [x, y].max }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x > y ? x : y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| [x, y].max }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x > y ? x : y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x > y ? x : y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x > y ? x : y }\nend",
    "  # Write your code here\n  test_tup1.zip(test_tup2).map{|x,y| x > y ? x : y}\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x > y ? x : y }\nend"
  ]
}