{
  "name": "mbpp_618_div_list",
  "language": "rb",
  "prompt": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |n1, n2| n1 / n2 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp6h6k1mq_\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp6h6k1mq_.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.012851731 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n77.81 tests/s, 77.81 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |a, b| a / b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp9asei8ji\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp9asei8ji.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.013680873 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n73.09 tests/s, 73.09 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |n1, n2| n1 / n2 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp6h6k1mq_\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp6h6k1mq_.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.012851731 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n77.81 tests/s, 77.81 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |n1, n2| n1.to_f / n2 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6zfd7gq7\nStarted\n.\nFinished in 0.000397689 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.53 tests/s, 7543.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x.to_f / y.to_f }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8mcogu3g\nStarted\n.\nFinished in 0.000396659 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2521.06 tests/s, 7563.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  result = []\n  nums1.each_with_index do |num, index|\n    result << num / nums2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666122634,
      "stdout": "Loaded suite /tmp/tmpy06r99cy\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmpy06r99cy.rb:13:in `test_div_list'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_div_list\n     12:     candidate = method(:div_list)\n  => 13:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     14:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     15:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     16:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.010692066 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.53 tests/s, 93.53 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |n1, n2| n1 / n2 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp6h6k1mq_\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp6h6k1mq_.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.012851731 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n77.81 tests/s, 77.81 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  # Write your code here\n  result = []\n  nums1.each_with_index do |num, index|\n    result << num / nums2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666122634,
      "stdout": "Loaded suite /tmp/tmp5_1_hgeq\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp5_1_hgeq.rb:14:in `test_div_list'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_div_list\n     13:     candidate = method(:div_list)\n  => 14:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     15:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     16:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     17:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.010640723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.98 tests/s, 93.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x.to_f / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_oywxxe0\nStarted\n.\nFinished in 0.00039359 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2540.71 tests/s, 7622.14 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.map.with_index { |num, i| num / nums2[i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666122634,
      "stdout": "Loaded suite /tmp/tmpg4naoycn\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmpg4naoycn.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.010544666 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n94.83 tests/s, 94.83 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  if nums1.length != nums2.length\n    puts \"The arrays are not the same length\"\n    return\n  end\n  result = []\n  nums1.each_with_index do |num, index|\n    result << num / nums2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666122634,
      "stdout": "Loaded suite /tmp/tmpobqtby7l\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmpobqtby7l.rb:17:in `test_div_list'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_div_list\n     16:     candidate = method(:div_list)\n  => 17:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     18:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     19:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     20:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.010251821 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n97.54 tests/s, 97.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  # Write your code here\n  result = []\n  nums1.each_with_index do |num, index|\n    result << num / nums2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666122634,
      "stdout": "Loaded suite /tmp/tmp5_1_hgeq\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp5_1_hgeq.rb:14:in `test_div_list'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_div_list\n     13:     candidate = method(:div_list)\n  => 14:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     15:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     16:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     17:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.010640723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.98 tests/s, 93.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |a, b| a / b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp9asei8ji\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp9asei8ji.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.013680873 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n73.09 tests/s, 73.09 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map {|x, y| x / y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666122634,
      "stdout": "Loaded suite /tmp/tmp5xayfawe\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp5xayfawe.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.011051435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n90.49 tests/s, 90.49 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x.to_f / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_oywxxe0\nStarted\n.\nFinished in 0.00039359 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2540.71 tests/s, 7622.14 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  # nums1.zip(nums2).map { |x, y| x / y }\n  nums1.zip(nums2).map { |pair| pair.reduce(:/) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666122634,
      "stdout": "Loaded suite /tmp/tmp_j6gpcpn\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp_j6gpcpn.rb:10:in `test_div_list'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_div_list\n      9:     candidate = method(:div_list)\n  => 10:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     11:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     12:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     13:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.010784977 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n92.72 tests/s, 92.72 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |n1, n2| n1 / n2 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp6h6k1mq_\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp6h6k1mq_.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.012851731 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n77.81 tests/s, 77.81 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |nums| nums.reduce(:/) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666122634,
      "stdout": "Loaded suite /tmp/tmp9hrllp2f\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp9hrllp2f.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.010226238 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n97.79 tests/s, 97.79 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y.to_f }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpukqhn8ud\nStarted\n.\nFinished in 0.000821041 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1217.97 tests/s, 3653.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x.to_f / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_oywxxe0\nStarted\n.\nFinished in 0.00039359 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2540.71 tests/s, 7622.14 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |a, b| a / b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp9asei8ji\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp9asei8ji.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.013680873 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n73.09 tests/s, 73.09 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |a, b| a / b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp9asei8ji\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp9asei8ji.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.013680873 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n73.09 tests/s, 73.09 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x.to_f / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_oywxxe0\nStarted\n.\nFinished in 0.00039359 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2540.71 tests/s, 7622.14 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |a, b| a / b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp9asei8ji\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp9asei8ji.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.013680873 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n73.09 tests/s, 73.09 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |n1, n2| n1 / n2 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp6h6k1mq_\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp6h6k1mq_.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.012851731 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n77.81 tests/s, 77.81 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |a, b| a / b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp9asei8ji\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp9asei8ji.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.013680873 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n73.09 tests/s, 73.09 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |a, b| a / b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp9asei8ji\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp9asei8ji.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.013680873 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n73.09 tests/s, 73.09 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.map.with_index { |num, i| num / nums2[i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666122634,
      "stdout": "Loaded suite /tmp/tmpg4naoycn\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmpg4naoycn.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.010544666 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n94.83 tests/s, 94.83 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.map.with_index { |num, i| num / nums2[i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666122634,
      "stdout": "Loaded suite /tmp/tmpg4naoycn\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmpg4naoycn.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.010544666 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n94.83 tests/s, 94.83 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |a, b| a / b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp9asei8ji\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp9asei8ji.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.013680873 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n73.09 tests/s, 73.09 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.map.with_index { |num, i| num / nums2[i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666122634,
      "stdout": "Loaded suite /tmp/tmpg4naoycn\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmpg4naoycn.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.010544666 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n94.83 tests/s, 94.83 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x.to_f / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_oywxxe0\nStarted\n.\nFinished in 0.00039359 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2540.71 tests/s, 7622.14 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |n1, n2| n1 / n2 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp6h6k1mq_\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp6h6k1mq_.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.012851731 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n77.81 tests/s, 77.81 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x.to_f / y.to_f }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8mcogu3g\nStarted\n.\nFinished in 0.000396659 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2521.06 tests/s, 7563.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x / y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510126,
      "stdout": "Loaded suite /tmp/tmp8k8xallc\nStarted\nF\n===============================================================================\nFailure: test_div_list(TestHumanEval)\n/tmp/tmp8k8xallc.rb:9:in `test_div_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_div_list\n      8:     candidate = method(:div_list)\n  =>  9:     assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n     10:     assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n     11:     assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[4.0, 2.5, 2.0]> expected but was\n<[4, 2, 2]>\n\ndiff:\n? [4.0, 2.5, 2.0]\n===============================================================================\n\nFinished in 0.014646343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.28 tests/s, 68.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}