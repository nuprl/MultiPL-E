{
  "name": "mbpp_141_pancake_sort",
  "language": "rb",
  "prompt": "# Write a function to sort an array of elements.\ndef pancake_sort(nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pancake_sort\n    candidate = method(:pancake_sort)\n    assert_equal([15, 25, 38, 69, 79], candidate.call([15, 79, 25, 38, 69]))\n    assert_equal([12, 36, 54, 85, 98], candidate.call([98, 12, 54, 36, 85]))\n    assert_equal([12, 23, 32, 41, 42], candidate.call([41, 42, 32, 12, 23]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |i|\n    max_index = 0\n    (0..i).each do |j|\n      max_index = j if nums[j] > nums[max_index]\n    end\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1\n  (nums.length - 1).downto(1).each do |i|\n    max_index = nums[0..i].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  # Write your code here.\n  sorted_index = nums.length - 1\n  while sorted_index > 0\n    max_index = find_max(nums, sorted_index)\n    flip(nums, max_index)\n    flip(nums, sorted_index)\n    sorted_index -= 1\n  end\n  nums\nend",
    "  # Write your code here.\n  sorted_index = nums.length - 1\n  while sorted_index > 0\n    max_index = find_max(nums, sorted_index)\n    flip(nums, max_index)\n    flip(nums, sorted_index)\n    sorted_index -= 1\n  end\n  nums\nend",
    "  # Write your code here\n  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |size|\n    max_index = find_max_index(nums, size)\n    flip(nums, max_index)\n    flip(nums, size)\n  end\n  nums\nend",
    "  n = nums.length\n  (n - 1).downto(1) do |i|\n    max_index = find_max_index(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |i|\n    max_index = 0\n    (0..i).each do |j|\n      max_index = j if nums[j] > nums[max_index]\n    end\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1",
    "  # Write your code here\n  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |size|\n    max_index = find_max_index(nums, size)\n    flip(nums, max_index)\n    flip(nums, size)\n  end\n  nums\nend",
    "  n = nums.length\n  (n - 1).downto(1) do |i|\n    max_index = find_max_index(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  # Write your code here.\n  sorted_index = nums.length - 1\n  while sorted_index > 0\n    max_index = find_max(nums, sorted_index)\n    flip(nums, max_index)\n    flip(nums, sorted_index)\n    sorted_index -= 1\n  end\n  nums\nend",
    "  # Write your code here\n  n = nums.length\n  for i in 0..n-1\n    max_index = find_max_index(nums, n-i)\n    flip(nums, max_index)\n    flip(nums, n-i-1)\n  end\n  nums\nend",
    "  # Write your code here.\n  sorted_index = nums.length - 1\n  while sorted_index > 0\n    max_index = find_max(nums, sorted_index)\n    flip(nums, max_index)\n    flip(nums, sorted_index)\n    sorted_index -= 1\n  end\n  nums\nend",
    "  # Write your code here\n  return nums if nums.nil? || nums.length <= 1",
    "  # Write your code here.\n  i = nums.length - 1\n  while i > 0\n    max_index = find_max(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n    i -= 1\n  end\n  nums\nend",
    "  return nums if nums.length <= 1",
    "  return nums if nums.length <= 1\n  max_index = nums.length - 1\n  while max_index > 0\n    max_num = nums[0]\n    max_num_index = 0\n    (0..max_index).each do |i|\n      if nums[i] > max_num\n        max_num = nums[i]\n        max_num_index = i\n      end\n    end\n    flip(nums, max_num_index)\n    flip(nums, max_index)\n    max_index -= 1\n  end\n  nums\nend",
    "  n = nums.length\n  while n > 1\n    max_index = nums.index(nums[0...n].max)\n    if max_index != n - 1\n      flip(nums, max_index)\n      flip(nums, n - 1)\n    end\n    n -= 1\n  end\n  nums\nend",
    "  nums.length.downto(2) do |size|\n    max_index = nums.slice(0, size).each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, size - 1)\n  end\n  nums\nend",
    "  # Write your code here.\n  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |idx|\n    max_idx = find_max(nums, idx)\n    flip(nums, max_idx)\n    flip(nums, idx)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1\n  max_index = nums.index(nums.max)\n  flip(nums, max_index)\n  flip(nums, nums.length - 1)\n  pancake_sort(nums[0...-1]) + [nums.last]\nend",
    "  # Write your code here.\n  i = nums.length - 1\n  while i > 0\n    max_index = find_max(nums, i)\n    if max_index != i\n      flip(nums, max_index)\n      flip(nums, i)\n    end\n    i -= 1\n  end\n  nums\nend",
    "  return nums if nums.size <= 1\n  (nums.size - 1).downto(1) do |i|\n    max_index = nums[0..i].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  return nums if nums.size <= 1\n  max_index = nums.size - 1\n  while max_index > 0\n    max_value = nums[0]\n    max_value_index = 0\n    (0..max_index).each do |i|\n      if nums[i] > max_value\n        max_value = nums[i]\n        max_value_index = i\n      end\n    end\n    flip(nums, max_value_index)\n    flip(nums, max_index)\n    max_index -= 1\n  end\n  nums\nend",
    "  n = nums.length\n  for i in 0..n-1\n    max_index = find_max(nums, n-i)\n    flip(nums, max_index)\n    flip(nums, n-i-1)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1",
    "  # Write your code here.\n  return nums if nums.length <= 1",
    "  return nums if nums.length <= 1\n  max_index = nums.length - 1\n  while max_index > 0\n    max_index = find_max_index(nums, max_index)\n    flip(nums, max_index)\n    flip(nums, max_index - 1)\n    max_index -= 1\n  end\n  nums\nend",
    "  # return nums if nums.size <= 1\n  #\n  # max_idx = 0\n  # (1...nums.size).each do |i|\n  #   max_idx = i if nums[i] > nums[max_idx]\n  # end\n  #\n  # nums[0...max_idx+1] = nums[0...max_idx+1].reverse\n  # nums[0...-1] = pancake_sort(nums[0...-1])\n  # nums\n  return nums if nums.size <= 1",
    "  i = nums.length - 1\n  while i > 0\n    max_index = find_max_index(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n    i -= 1\n  end\n  nums\nend",
    "  return nums if nums.length <= 1",
    "  nums.each_with_index do |num, index|\n    max_index = nums.index(nums[0..index].max)\n    nums[0..max_index] = nums[0..max_index].reverse\n    nums[0..index] = nums[0..index].reverse\n  end\n  nums\nend",
    "  for i in 0..nums.length - 1\n    max_index = find_max(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  i = nums.length - 1\n  while i > 0\n    max_index = find_max_index(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n    i -= 1\n  end\n  nums\nend",
    "  (nums.length - 1).downto(1) do |i|\n    max_idx = nums[0...i].each_with_index.max[1]\n    flip(nums, max_idx)\n    flip(nums, i)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1",
    "  i = nums.length - 1\n  while i > 0\n    max_index = find_max_index(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n    i -= 1\n  end\n  nums\nend",
    "  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |i|\n    max_index = nums[0..i].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  # Write your code here\n  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |i|\n    max_index = find_max_index(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  n = nums.length\n  (n - 1).downto(1) do |i|\n    max_index = find_max(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  # Write your code here.\n  sorted_index = nums.length - 1\n  while sorted_index > 0\n    max_index = find_max(nums, sorted_index)\n    flip(nums, max_index)\n    flip(nums, sorted_index)\n    sorted_index -= 1\n  end\n  nums\nend",
    "  n = nums.length\n  (n - 1).downto(1) do |i|\n    max_index = max_index(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  # Write your code here.\n  sorted_index = nums.length - 1\n  while sorted_index > 0\n    max_index = find_max(nums, sorted_index)\n    flip(nums, max_index)\n    flip(nums, sorted_index)\n    sorted_index -= 1\n  end\n  nums\nend",
    "  size = nums.size\n  (size - 1).downto(1) do |i|\n    max_index = max_index(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  sorted = false\n  until sorted\n    sorted = true\n    (nums.length - 1).times do |i|\n      if nums[i] > nums[i + 1]\n        nums[i], nums[i + 1] = nums[i + 1], nums[i]\n        sorted = false\n      end\n    end\n  end\n  nums\nend",
    "  (nums.length - 1).downto(1) do |i|\n    max_index = nums[0...i].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1\n  n = nums.length\n  (n - 1).downto(1) do |i|\n    max_index = max_index(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  n = nums.length\n  (n - 1).downto(1) do |i|\n    max_index = find_max(nums, i)\n    if max_index != i\n      flip(nums, max_index)\n      flip(nums, i)\n    end\n  end\n  nums\nend",
    "  return nums if nums.length <= 1",
    "  # Write your code here.\n  sorted_index = nums.length - 1\n  while sorted_index > 0\n    max_index = find_max_index(nums, sorted_index)\n    if max_index != sorted_index\n      flip(nums, max_index)\n      flip(nums, sorted_index)\n    end\n    sorted_index -= 1\n  end\n  nums\nend",
    "  nums.size.downto(2) do |size|\n    max_index = nums[0...size].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, size - 1)\n  end\n  nums\nend",
    "  # Write your code here.\n  i = nums.length - 1\n  while i > 0\n    max_index = find_max(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n    i -= 1\n  end\n  nums\nend",
    "  n = nums.length\n  (n - 1).downto(1) do |i|\n    max_index = find_max_index(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  (nums.length - 1).downto(1).each do |size|\n    max_index = nums[0...size].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, size - 1)\n  end\n  nums\nend",
    "  # Write your code here.\n  i = nums.length - 1\n  while i > 0\n    max_index = find_max(nums, i)\n    if max_index != i\n      flip(nums, max_index)\n      flip(nums, i)\n    end\n    i -= 1\n  end\n  nums\nend",
    "  # Write your code here.\n  i = nums.length - 1\n  while i > 0\n    max_idx = find_max(nums, i)\n    flip(nums, max_idx)\n    flip(nums, i)\n    i -= 1\n  end\n  nums\nend",
    "  # Write your code here.\n  i = nums.length - 1\n  while i > 0\n    max_index = find_max(nums, i)\n    if max_index != i\n      flip(nums, max_index)\n      flip(nums, i)\n    end\n    i -= 1\n  end\n  nums\nend",
    "  n = nums.length\n  (n - 1).downto(1) do |i|\n    max_index = 0\n    (1..i).each do |j|\n      max_index = j if nums[j] > nums[max_index]\n    end\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  nums.size.downto(2) do |size|\n    max_index = nums.slice(0, size).each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, size - 1)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |i|\n    max_idx = nums[0..i].each_with_index.max[1]\n    flip(nums, max_idx)\n    flip(nums, i)\n  end\n  nums\nend",
    "  (nums.size - 1).downto(1).each do |size|\n    max_index = nums[0...size].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, size - 1)\n  end\n  nums\nend",
    "  return nums if nums.size <= 1\n  (nums.size - 1).downto(1) do |i|\n    max_index = nums[0..i].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |i|\n    max_index = find_max_index(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |i|\n    max_index = 0\n    (0..i).each do |j|\n      max_index = j if nums[j] > nums[max_index]\n    end\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  nums.each_with_index do |num, index|\n    max_index = nums[0..index].index(nums[0..index].max)\n    flip(nums, max_index)\n    flip(nums, index)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1\n  (nums.length - 1).downto(1).each do |i|\n    max_index = find_max_index(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  # Write your code here\n  return nums if nums.length <= 1\n  (nums.length - 1).downto(1).each do |i|\n    max_index = 0\n    (0..i).each do |j|\n      max_index = j if nums[j] > nums[max_index]\n    end\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  # Write your code here\n  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |i|\n    max_index = 0\n    (1..i).each do |j|\n      max_index = j if nums[j] > nums[max_index]\n    end\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  n = nums.length\n  (n-1).downto(1) do |i|\n    max_index = find_max_index(nums, i)\n    if max_index != i\n      flip(nums, max_index)\n      flip(nums, i)\n    end\n  end\n  nums\nend",
    "  # Write your code here.\n  sorted_index = nums.length - 1\n  while sorted_index > 0\n    max_index = find_max(nums, sorted_index)\n    flip(nums, max_index)\n    flip(nums, sorted_index)\n    sorted_index -= 1\n  end\n  nums\nend",
    "  len = nums.length\n  return nums if len <= 1\n  (len - 1).downto(1) do |i|\n    max_index = nums[0..i].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1\n  max_index = nums.index(nums.max)\n  nums = flip(nums, max_index)\n  nums = flip(nums, nums.length - 1)\n  pancake_sort(nums[0...-1]) + [nums[-1]]\nend",
    "  return nums if nums.size <= 1\n  (nums.size - 1).downto(1) do |size|\n    max_index = max_index(nums, size)\n    flip(nums, max_index)\n    flip(nums, size)\n  end\n  nums\nend",
    "  (nums.length - 1).downto(1) do |i|\n    max_index = nums[0..i].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  sorted = false\n  until sorted\n    sorted = true\n    (nums.length - 1).times do |i|\n      if nums[i] > nums[i + 1]\n        nums[i], nums[i + 1] = nums[i + 1], nums[i]\n        sorted = false\n      end\n    end\n  end\n  nums\nend",
    "  # Write your code here.\n  sorted_index = nums.length - 1\n  while sorted_index > 0\n    max_index = find_max(nums, sorted_index)\n    flip(nums, max_index)\n    flip(nums, sorted_index)\n    sorted_index -= 1\n  end\n  nums\nend",
    "  return nums if nums.length <= 1\n  max_index = nums.length - 1\n  (0..max_index).each do |i|\n    max_index = nums.index(nums[0..max_index].max)\n    nums = flip(nums, max_index)\n    nums = flip(nums, max_index - i)\n  end\n  nums\nend",
    "  # Write your code here.\n  (nums.length - 1).downto(1) do |size|\n    max_index = find_max(nums, size)\n    flip(nums, max_index)\n    flip(nums, size)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1",
    "  n = nums.length\n  (n - 1).downto(1) do |i|\n    max_index = 0\n    (0..i).each do |j|\n      max_index = j if nums[j] > nums[max_index]\n    end\n    if max_index != i\n      flip(nums, max_index)\n      flip(nums, i)\n    end\n  end\n  nums\nend",
    "  # Write your code here.\n  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |idx|\n    max_idx = max_idx(nums, idx)\n    flip(nums, max_idx)\n    flip(nums, idx)\n  end\n  nums\nend",
    "  nums.each_with_index do |num, index|\n    max_index = nums.index(nums[0..index].max)\n    flip(nums, max_index)\n    flip(nums, index)\n  end\n  nums\nend",
    "  (nums.length - 1).downto(1) do |i|\n    max_index = nums[0..i].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  return nums if nums.size <= 1\n  (nums.size - 1).downto(1) do |size|\n    max_index = find_max_index(nums, size)\n    flip(nums, max_index)\n    flip(nums, size)\n  end\n  nums\nend",
    "  n = nums.length\n  return nums if n <= 1",
    "  return nums if nums.length <= 1\n  max_index = nums.length - 1\n  while max_index > 0\n    max_value = 0\n    max_value_index = 0\n    (0..max_index).each do |i|\n      if nums[i] > max_value\n        max_value = nums[i]\n        max_value_index = i\n      end\n    end\n    flip(nums, max_value_index)\n    flip(nums, max_index)\n    max_index -= 1\n  end\n  nums\nend",
    "  # Write your code here.\n  sorted_index = nums.length - 1\n  while sorted_index > 0\n    max_index = find_max_index(nums, sorted_index)\n    if max_index != sorted_index\n      flip(nums, max_index)\n      flip(nums, sorted_index)\n    end\n    sorted_index -= 1\n  end\n  nums\nend",
    "  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |i|\n    max_index = nums[0..i].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  for i in 0..nums.length-1\n    max_index = find_max_index(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  # Write your code here\n  return nums if nums.length <= 1\n  (nums.length - 1).downto(1).each do |i|\n    max_index = find_max_index(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  return nums if nums.size <= 1",
    "  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |i|\n    max_index = nums[0..i].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  (nums.length - 1).downto(1) do |i|\n    max_index = nums[0..i].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  n = nums.length\n  i = n - 1\n  while i > 0\n    max_index = find_max_index(nums, i)\n    if max_index != i\n      flip(nums, max_index)\n      flip(nums, i)\n    end\n    i -= 1\n  end\n  nums\nend",
    "  # Write your code here.\n  sorted_index = nums.length - 1\n  while sorted_index > 0\n    max_index = find_max(nums, sorted_index)\n    flip(nums, max_index)\n    flip(nums, sorted_index)\n    sorted_index -= 1\n  end\n  nums\nend",
    "  # TODO: implement pancake sort\n  return nums if nums.length <= 1\n  max_index = nums.index(nums.max)\n  nums = flip(nums, max_index)\n  nums = flip(nums, nums.length - 1)\n  nums[0..-2] = pancake_sort(nums[0..-2])\n  nums\nend",
    "  (nums.length - 1).downto(1).each do |size|\n    max_index = nums[0...size].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, size - 1)\n  end\n  nums\nend",
    "  # Write your code here.\n  (nums.length - 1).downto(1) do |i|\n    max_index = max_index(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1",
    "  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |i|\n    max_index = nums[0..i].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  # Write your code here.\n  (nums.length - 1).downto(1) do |curr_size|\n    max_idx = find_max(nums, curr_size)\n    flip(nums, max_idx)\n    flip(nums, curr_size)\n  end\n  nums\nend",
    "  # Write your code here.\n  sorted_index = nums.length - 1\n  while sorted_index > 0\n    max_index = find_max(nums, sorted_index)\n    flip(nums, max_index)\n    flip(nums, sorted_index)\n    sorted_index -= 1\n  end\n  nums\nend",
    "  return nums if nums.length <= 1",
    "  return nums if nums.length <= 1",
    "  # Write your code here\n  return nums if nums.length <= 1",
    "  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |i|\n    max_index = nums[0..i].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  # Write your code here.\n  sorted_index = nums.length - 1\n  while sorted_index > 0\n    max_index = find_max(nums, sorted_index)\n    flip(nums, max_index)\n    flip(nums, sorted_index)\n    sorted_index -= 1\n  end\n  nums\nend",
    "  nums.sort.reverse\nend",
    "  nums.each_index do |i|\n    max_index = nums[0..nums.length - i - 1].each_with_index.max[1]\n    nums[0..max_index] = nums[0..max_index].reverse\n    nums[0..nums.length - i - 1] = nums[0..nums.length - i - 1].reverse\n  end\n  nums\nend",
    "  n = nums.length\n  for i in (1..n)\n    max_index = find_max(nums, n - i)\n    flip(nums, max_index)\n    flip(nums, n - i)\n  end\n  nums\nend",
    "  # Write your code here.\n  sorted_index = nums.length - 1\n  while sorted_index > 0\n    max_index = find_max_index(nums, sorted_index)\n    flip(nums, max_index)\n    flip(nums, sorted_index)\n    sorted_index -= 1\n  end\n  nums\nend",
    "  nums.length.downto(2) do |size|\n    max_index = nums[0...size].each_with_index.max[1]\n    flip(nums, max_index + 1)\n    flip(nums, size)\n  end\n  nums\nend",
    "  # Write your code here.\n  sorted_index = nums.length - 1\n  while sorted_index > 0\n    max_index = find_max_index(nums, sorted_index)\n    flip(nums, max_index)\n    flip(nums, sorted_index)\n    sorted_index -= 1\n  end\n  nums\nend",
    "  return nums if nums.length <= 1",
    "  (nums.length - 1).downto(1) do |size|\n    max_index = find_max(nums, size)\n    flip(nums, max_index)\n    flip(nums, size)\n  end\n  nums\nend",
    "  # Write your code here.\n  (nums.length - 1).downto(1).each do |idx|\n    max_idx = find_max(nums, idx)\n    flip(nums, max_idx)\n    flip(nums, idx)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |i|\n    max_index = find_max_index(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |i|\n    max_index = 0\n    (0..i).each do |j|\n      max_index = j if nums[j] > nums[max_index]\n    end\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1\n  max_index = nums.length - 1\n  while max_index > 0\n    max_index = find_max(nums, max_index)\n    flip(nums, max_index)\n    flip(nums, max_index - 1)\n    max_index -= 1\n  end\n  nums\nend",
    "  (nums.length - 1).downto(1) do |size|\n    max_index = nums[0...size].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, size - 1)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |i|\n    max_index = nums[0..i].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  # Write your code here.\n  sorted_index = nums.length - 1\n  while sorted_index > 0\n    max_index = find_max(nums, sorted_index)\n    flip(nums, max_index)\n    flip(nums, sorted_index)\n    sorted_index -= 1\n  end\n  nums\nend",
    "  n = nums.length\n  (n-1).downto(1) do |i|\n    max_index = find_max_index(nums, i)\n    if max_index != i\n      flip(nums, max_index)\n      flip(nums, i)\n    end\n  end\n  nums\nend",
    "  # Write your code here.\n  sorted_index = nums.length - 1\n  while sorted_index > 0\n    max_index = find_max(nums, sorted_index)\n    flip(nums, max_index)\n    flip(nums, sorted_index)\n    sorted_index -= 1\n  end\n  nums\nend",
    "  # Write your code here\n  return nums if nums.length <= 1",
    "  # Write your code here.\n  i = nums.length\n  while i > 1\n    max_index = find_max_index(nums, i)\n    flip(nums, max_index)\n    flip(nums, i - 1)\n    i -= 1\n  end\n  nums\nend",
    "  n = nums.length\n  for i in (0..n-2)\n    max_index = find_max_index(nums, n-i)\n    flip(nums, max_index)\n    flip(nums, n-i-1)\n  end\n  nums\nend",
    "  n = nums.length\n  (n - 1).downto(1) do |i|\n    max_index = max_index(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |i|\n    max_index = nums[0..i].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  # Write your code here.\n  sorted_index = nums.length - 1\n  while sorted_index > 0\n    max_index = find_max(nums, sorted_index)\n    flip(nums, max_index)\n    flip(nums, sorted_index)\n    sorted_index -= 1\n  end\n  nums\nend",
    "  (nums.length - 1).downto(1) do |size|\n    max_index = max_index(nums, size)\n    flip(nums, max_index)\n    flip(nums, size)\n  end\n  nums\nend",
    "  nums.sort!\nend",
    "  return nums if nums.length < 2\n  (nums.length - 1).downto(1) do |i|\n    max_index = nums[0..i].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  n = nums.length\n  (n-1).downto(1) do |i|\n    max_index = find_max_index(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  return nums if nums.size <= 1\n  (nums.size - 1).downto(1) do |size|\n    max_index = max_index(nums, size)\n    flip(nums, max_index)\n    flip(nums, size)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |i|\n    max_index = nums[0..i].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  n = nums.length\n  (n - 1).downto(1) do |i|\n    max_index = nums[0..i].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  return nums if nums.size <= 1\n  (nums.size - 1).downto(1) do |i|\n    max_index = 0\n    (0..i).each do |j|\n      max_index = j if nums[j] > nums[max_index]\n    end\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  (nums.length - 1).downto(1) do |i|\n    max_index = max_index(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  (nums.length - 1).downto(1) do |size|\n    max_index = 0\n    max_value = nums[0]\n    1.upto(size) do |i|\n      if nums[i] > max_value\n        max_value = nums[i]\n        max_index = i\n      end\n    end\n    flip(nums, max_index)\n    flip(nums, size)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |i|\n    max_index = 0\n    (0..i).each do |j|\n      max_index = j if nums[j] > nums[max_index]\n    end\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |i|\n    max_index = nums[0..i].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  nums.length.downto(2) do |size|\n    max_index = nums.slice(0, size).each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, size - 1)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1",
    "  # Write your code here\n  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |size|\n    max_index = find_max(nums, size)\n    flip(nums, max_index)\n    flip(nums, size)\n  end\n  nums\nend",
    "  return nums if nums.size < 2",
    "  return nums if nums.size <= 1",
    "  (nums.length - 1).downto(1) do |i|\n    max_index = max_index(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  return nums if nums.size <= 1",
    "  # Write your code here\n  return nums if nums.length <= 1",
    "  # Write your code here.\n  sorted_idx = nums.length - 1\n  while sorted_idx > 0\n    max_idx = find_max_idx(nums, sorted_idx)\n    flip(nums, max_idx)\n    flip(nums, sorted_idx)\n    sorted_idx -= 1\n  end\n  nums\nend",
    "  # Write your code here.\n  i = nums.length - 1\n  while i > 0\n    max_index = find_max(nums, i)\n    if max_index != i\n      flip(nums, max_index)\n      flip(nums, i)\n    end\n    i -= 1\n  end\n  nums\nend",
    "  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |i|\n    max_index = 0\n    (0..i).each do |j|\n      max_index = j if nums[j] > nums[max_index]\n    end\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  n = nums.length\n  (n - 1).downto(1) do |i|\n    max_index = max_index(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1\n  max_index = nums.length - 1\n  while max_index > 0\n    max_value = nums[0]\n    max_value_index = 0\n    (0..max_index).each do |i|\n      if nums[i] > max_value\n        max_value = nums[i]\n        max_value_index = i\n      end\n    end\n    flip(nums, max_value_index)\n    flip(nums, max_index)\n    max_index -= 1\n  end\n  nums\nend",
    "  return nums if nums.size <= 1\n  (nums.size - 1).downto(1) do |size|\n    max_index = find_max_index(nums, size)\n    flip(nums, max_index)\n    flip(nums, size)\n  end\n  nums\nend",
    "  n = nums.length\n  (n - 1).downto(1) do |i|\n    max_index = 0\n    (0..i).each do |j|\n      max_index = j if nums[j] > nums[max_index]\n    end\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  n = nums.length\n  (n - 1).downto(1) do |i|\n    max_index = nums[0..i].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  # Write your code here.\n  i = nums.length - 1\n  while i > 0\n    max_index = find_max(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n    i -= 1\n  end\n  nums\nend",
    "  for i in (0..nums.length - 1)\n    max_index = find_max_index(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  n = nums.length\n  i = n - 1\n  while i > 0\n    max_index = find_max_index(nums, i)\n    if max_index != i\n      flip(nums, max_index)\n      flip(nums, i)\n    end\n    i -= 1\n  end\n  nums\nend",
    "  return nums if nums.size <= 1\n  (nums.size - 1).downto(1) do |size|\n    max_index = max_index(nums, size)\n    flip(nums, max_index)\n    flip(nums, size)\n  end\n  nums\nend",
    "  return nums if nums.size <= 1\n  nums.size.downto(2) do |size|\n    max_index = nums[0...size].each_with_index.max[1]\n    flip(nums, max_index + 1)\n    flip(nums, size)\n  end\n  nums\nend",
    "  (nums.length - 1).downto(1) do |size|\n    max_index = find_max_index(nums, size)\n    flip(nums, max_index)\n    flip(nums, size)\n  end\nend",
    "  return nums if nums.length <= 1\n  max_index = nums.length - 1\n  while max_index > 0\n    max_value = nums[0]\n    max_value_index = 0\n    (0..max_index).each do |i|\n      if nums[i] > max_value\n        max_value = nums[i]\n        max_value_index = i\n      end\n    end\n    flip(nums, max_value_index)\n    flip(nums, max_index)\n    max_index -= 1\n  end\n  nums\nend",
    "  (nums.length - 1).downto(1) do |i|\n    max_index = nums[0..i].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  # Write your code here\n  return nums if nums.length <= 1\n  (nums.length - 1).downto(1).each do |i|\n    max_index = find_max_index(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |i|\n    max_index = 0\n    (1..i).each do |j|\n      max_index = j if nums[j] > nums[max_index]\n    end\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  n = nums.length\n  (n - 1).downto(1) do |i|\n    max_index = 0\n    (0..i).each do |j|\n      max_index = j if nums[j] > nums[max_index]\n    end\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  sorted = false\n  until sorted\n    sorted = true\n    (nums.length - 1).times do |i|\n      if nums[i] > nums[i + 1]\n        sorted = false\n        nums = flip(nums, i + 1)\n      end\n    end\n  end\n  nums\nend",
    "  return nums if nums.length <= 1",
    "  # Write your code here\n  return nums if nums.length <= 1\n  (nums.length-1).downto(1) do |i|\n    max_index = 0\n    (0..i).each do |j|\n      max_index = j if nums[j] > nums[max_index]\n    end\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  # Write your code here.\n  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |size|\n    max_idx = find_max(nums, size)\n    flip(nums, max_idx)\n    flip(nums, size)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1",
    "  n = nums.length\n  (n - 1).downto(1) do |i|\n    max_index = find_max_index(nums, i)\n    if max_index != i\n      flip(nums, max_index)\n      flip(nums, i)\n    end\n  end\n  nums\nend",
    "  return nums if nums.length <= 1",
    "  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |i|\n    max_index = 0\n    (0..i).each do |j|\n      max_index = j if nums[j] > nums[max_index]\n    end\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  return nums if nums.size <= 1\n  (nums.size - 1).downto(1).each do |size|\n    max_index = nums[0...size].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, size - 1)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1",
    "  i = nums.length - 1\n  while i > 0\n    max_index = find_max_index(nums, i)\n    if max_index != i\n      flip(nums, max_index)\n      flip(nums, i)\n    end\n    i -= 1\n  end\n  nums\nend",
    "  (nums.size - 1).downto(1).each do |size|\n    max_idx = max_idx(nums, size)\n    flip(nums, max_idx)\n    flip(nums, size)\n  end\n  nums\nend",
    "  n = nums.length\n  for i in (0..n-1)\n    max_index = find_max_index(nums, n-i)\n    flip(nums, max_index)\n    flip(nums, n-i-1)\n  end\n  nums\nend",
    "  return nums if nums.size <= 1",
    "  (nums.length - 1).downto(1) do |i|\n    max_index = nums[0..i].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  # Write your code here\n  return nums if nums.nil? || nums.length <= 1",
    "  (nums.size - 1).downto(1) do |size|\n    max_index = nums[0...size].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, size - 1)\n  end\n  nums\nend",
    "  (nums.length - 1).downto(1) do |i|\n    max_index = find_max_index(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |i|\n    max_index = nums[0..i].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  (nums.length - 1).downto(1) do |size|\n    max_index = find_max_index(nums, size)\n    flip(nums, max_index)\n    flip(nums, size)\n  end\nend",
    "  # Write your code here\n  return nums if nums.length <= 1\n  (nums.length - 1).downto(1).each do |i|\n    max_index = find_max_index(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |i|\n    max_index = nums[0...i].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1",
    "  # Write your code here.\n  i = nums.length\n  while i > 1\n    max_index = find_max(nums, i)\n    flip(nums, max_index)\n    flip(nums, i - 1)\n    i -= 1\n  end\n  nums\nend",
    "  (nums.length - 1).downto(1) do |i|\n    max_index = nums[0...i].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  (nums.length - 1).downto(1).each do |i|\n    max_index = nums[0...i].each_with_index.max[1]\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |i|\n    max_index = 0\n    (0..i).each do |j|\n      max_index = j if nums[j] > nums[max_index]\n    end\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  return nums if nums.length <= 1\n  (nums.length - 1).downto(1) do |i|\n    max_index = find_max_index(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n  end\n  nums\nend",
    "  n = nums.length\n  for i in (0...n)\n    max_index = find_max(nums, n - i)\n    flip(nums, max_index)\n    flip(nums, n - i - 1)\n  end\n  nums\nend",
    "  # Write your code here.\n  i = nums.length - 1\n  while i > 0\n    max_idx = find_max(nums, i)\n    if max_idx != i\n      flip(nums, max_idx)\n      flip(nums, i)\n    end\n    i -= 1\n  end\n  nums\nend",
    "  i = nums.length - 1\n  while i > 0\n    max_index = find_max_index(nums, i)\n    flip(nums, max_index)\n    flip(nums, i)\n    i -= 1\n  end\n  nums\nend"
  ]
}