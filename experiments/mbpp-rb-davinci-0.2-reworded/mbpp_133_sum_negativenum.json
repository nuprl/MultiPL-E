{
  "name": "mbpp_133_sum_negativenum",
  "language": "rb",
  "prompt": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_133_sum_negativenum.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  nums.select { |num| num < 0 }.reduce(0, :+)\nend",
    "  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend",
    "  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend",
    "  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend",
    "  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend",
    "  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend",
    "  nums.select { |num| num < 0 }.reduce(0, :+)\nend",
    "  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend",
    "  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend",
    "  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend",
    "  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend",
    "  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend",
    "  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend",
    "  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend",
    "  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend",
    "  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend",
    "  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend",
    "  nums.select { |num| num < 0 }.reduce(0, :+)\nend",
    "  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend",
    "  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend"
  ]
}