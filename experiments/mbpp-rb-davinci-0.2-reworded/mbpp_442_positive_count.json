{
  "name": "mbpp_442_positive_count",
  "language": "rb",
  "prompt": "# Write a function to find the ration of positive numbers in an array of integers.\ndef positive_count(nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_positive_count\n    candidate = method(:positive_count)\n    assert_equal(0.54, candidate.call([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]))\n    assert_equal(0.69, candidate.call([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]))\n    assert_equal(0.56, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  nums.count { |num| num > 0 } / nums.count.to_f\nend",
    "  nums.count { |num| num > 0 } / nums.length.to_f\nend",
    "  nums.count { |num| num > 0 } / nums.size.to_f\nend",
    "  nums.count { |num| num > 0 } / nums.count.to_f\nend",
    "  nums.count { |num| num > 0 } / nums.length.to_f\nend",
    "  nums.count { |num| num > 0 } / nums.size.to_f\nend",
    "  positive_nums = nums.select { |num| num > 0 }\n  positive_nums.length / nums.length.to_f\nend",
    "  nums.count { |num| num > 0 } / nums.length.to_f\nend",
    "  nums.count { |num| num > 0 } / nums.length.to_f\nend",
    "  nums.count { |num| num > 0 } / nums.length.to_f\nend",
    "  nums.count { |num| num > 0 } / nums.length.to_f\nend",
    "  nums.count { |num| num > 0 } / nums.length.to_f\nend",
    "  nums.count { |num| num > 0 } / nums.length.to_f\nend",
    "  nums.count { |num| num > 0 } / nums.length.to_f\nend",
    "  nums.count { |num| num > 0 } / nums.length.to_f\nend",
    "  nums.count { |num| num > 0 } / nums.count.to_f\nend",
    "  count = 0\n  nums.each do |num|\n    if num > 0\n      count += 1\n    end\n  end\n  count.to_f / nums.length\nend",
    "  nums.count { |num| num > 0 } / nums.length.to_f\nend",
    "  nums.count { |num| num > 0 } / nums.length.to_f\nend",
    "  nums.count { |num| num > 0 } / nums.size.to_f\nend"
  ]
}