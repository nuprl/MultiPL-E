{
  "name": "mbpp_644_reverse_Array_Upto_K",
  "language": "rb",
  "prompt": "# Write a rbthon function to reverse an array upto a given position.\ndef reverse_Array_Upto_K(input, k)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_reverse_Array_Upto_K\n    candidate = method(:reverse_Array_Upto_K)\n    assert_equal([4, 3, 2, 1, 5, 6], candidate.call([1, 2, 3, 4, 5, 6], 4))\n    assert_equal([5, 4, 6, 7], candidate.call([4, 5, 6, 7], 2))\n    assert_equal([7, 8, 9, 6, 5], candidate.call([9, 8, 7, 6, 5], 3))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  input[0..k].reverse + input[k+1..-1]\nend",
    "  input.reverse!\n  input[0..k-1].reverse!\n  input\nend",
    "  input[0..k].reverse + input[k+1..-1]\nend",
    "  input.reverse!\n  input[0..k-1].reverse!\n  input\nend",
    "  input[0..k].reverse + input[k+1..-1]\nend",
    "  input[0..k].reverse + input[k+1..-1]\nend",
    "  input.reverse!\n  input[0..k-1].reverse!\n  input\nend",
    "  input.reverse!\n  input[0..k-1].reverse!\n  input\nend",
    "  input[0..k].reverse + input[k+1..-1]\nend",
    "  input.reverse!\n  input[0..k-1].reverse!\n  input\nend",
    "  input.reverse!\n  input[0..k-1].reverse!\n  input\nend",
    "  input.reverse!\n  input[0..k-1].reverse!\nend",
    "  return input.reverse if k == input.length\n  return input if k == 0\n  input[0...k].reverse + input[k..-1]\nend",
    "  input.reverse!\n  input[0..k-1].reverse!\n  return input\nend",
    "  input[0..k].reverse + input[k+1..-1]\nend",
    "  input.reverse!\n  input[0..k-1].reverse!\n  input\nend",
    "  input.reverse!\n  input[0..k-1].reverse!\n  input\nend",
    "  input[0..k-1] = input[0..k-1].reverse\n  input\nend",
    "  input.reverse!\n  input[0..k-1].reverse!\n  return input\nend",
    "  input[0..k].reverse + input[k+1..-1]\nend"
  ]
}