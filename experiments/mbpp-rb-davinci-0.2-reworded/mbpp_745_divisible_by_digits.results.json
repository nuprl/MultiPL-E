{
  "name": "mbpp_745_divisible_by_digits",
  "language": "rb",
  "prompt": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmps_ijc1a9\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmps_ijc1a9.rb:3:in `%'\n/tmp/tmps_ijc1a9.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `all?'\n/tmp/tmps_ijc1a9.rb:3:in `block in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `each'\n/tmp/tmps_ijc1a9.rb:3:in `select'\n/tmp/tmps_ijc1a9.rb:3:in `divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:9:in `call'\n/tmp/tmps_ijc1a9.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00112883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n885.87 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n % n.to_s.split('').map(&:to_i).inject(:*) == 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmphijvtda4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmphijvtda4.rb:3:in `%'\n/tmp/tmphijvtda4.rb:3:in `block in divisible_by_digits'\n/tmp/tmphijvtda4.rb:3:in `each'\n/tmp/tmphijvtda4.rb:3:in `select'\n/tmp/tmphijvtda4.rb:3:in `divisible_by_digits'\n/tmp/tmphijvtda4.rb:9:in `call'\n/tmp/tmphijvtda4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001125649 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n888.38 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmps_ijc1a9\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmps_ijc1a9.rb:3:in `%'\n/tmp/tmps_ijc1a9.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `all?'\n/tmp/tmps_ijc1a9.rb:3:in `block in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `each'\n/tmp/tmps_ijc1a9.rb:3:in `select'\n/tmp/tmps_ijc1a9.rb:3:in `divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:9:in `call'\n/tmp/tmps_ijc1a9.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00112883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n885.87 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.all? { |d| n % d.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpcfclp3bv\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpcfclp3bv.rb:3:in `%'\n/tmp/tmpcfclp3bv.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpcfclp3bv.rb:3:in `all?'\n/tmp/tmpcfclp3bv.rb:3:in `block in divisible_by_digits'\n/tmp/tmpcfclp3bv.rb:3:in `each'\n/tmp/tmpcfclp3bv.rb:3:in `select'\n/tmp/tmpcfclp3bv.rb:3:in `divisible_by_digits'\n/tmp/tmpcfclp3bv.rb:9:in `call'\n/tmp/tmpcfclp3bv.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001181391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n846.46 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.all? { |c| n % c.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpmri9yxji\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpmri9yxji.rb:3:in `%'\n/tmp/tmpmri9yxji.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpmri9yxji.rb:3:in `all?'\n/tmp/tmpmri9yxji.rb:3:in `block in divisible_by_digits'\n/tmp/tmpmri9yxji.rb:3:in `each'\n/tmp/tmpmri9yxji.rb:3:in `select'\n/tmp/tmpmri9yxji.rb:3:in `divisible_by_digits'\n/tmp/tmpmri9yxji.rb:9:in `call'\n/tmp/tmpmri9yxji.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001167861 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n856.27 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmps_ijc1a9\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmps_ijc1a9.rb:3:in `%'\n/tmp/tmps_ijc1a9.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `all?'\n/tmp/tmps_ijc1a9.rb:3:in `block in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `each'\n/tmp/tmps_ijc1a9.rb:3:in `select'\n/tmp/tmps_ijc1a9.rb:3:in `divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:9:in `call'\n/tmp/tmps_ijc1a9.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00112883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n885.87 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.digits.all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp_hgi35sa\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp_hgi35sa.rb:3:in `%'\n/tmp/tmp_hgi35sa.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:3:in `all?'\n/tmp/tmp_hgi35sa.rb:3:in `block in divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:3:in `each'\n/tmp/tmp_hgi35sa.rb:3:in `select'\n/tmp/tmp_hgi35sa.rb:3:in `divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:9:in `call'\n/tmp/tmp_hgi35sa.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155593 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.36 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num % num.digits.reduce(:*) == 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzo3vf3tf\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzo3vf3tf.rb:3:in `%'\n/tmp/tmpzo3vf3tf.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzo3vf3tf.rb:3:in `each'\n/tmp/tmpzo3vf3tf.rb:3:in `select'\n/tmp/tmpzo3vf3tf.rb:3:in `divisible_by_digits'\n/tmp/tmpzo3vf3tf.rb:9:in `call'\n/tmp/tmpzo3vf3tf.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001123299 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n890.23 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.digits.all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp_hgi35sa\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp_hgi35sa.rb:3:in `%'\n/tmp/tmp_hgi35sa.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:3:in `all?'\n/tmp/tmp_hgi35sa.rb:3:in `block in divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:3:in `each'\n/tmp/tmp_hgi35sa.rb:3:in `select'\n/tmp/tmp_hgi35sa.rb:3:in `divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:9:in `call'\n/tmp/tmp_hgi35sa.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155593 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.36 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.split('').map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp3724ea12\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp3724ea12.rb:3:in `%'\n/tmp/tmp3724ea12.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp3724ea12.rb:3:in `all?'\n/tmp/tmp3724ea12.rb:3:in `block in divisible_by_digits'\n/tmp/tmp3724ea12.rb:3:in `each'\n/tmp/tmp3724ea12.rb:3:in `select'\n/tmp/tmp3724ea12.rb:3:in `divisible_by_digits'\n/tmp/tmp3724ea12.rb:9:in `call'\n/tmp/tmp3724ea12.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164973 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.39 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmps_ijc1a9\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmps_ijc1a9.rb:3:in `%'\n/tmp/tmps_ijc1a9.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `all?'\n/tmp/tmps_ijc1a9.rb:3:in `block in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `each'\n/tmp/tmps_ijc1a9.rb:3:in `select'\n/tmp/tmps_ijc1a9.rb:3:in `divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:9:in `call'\n/tmp/tmps_ijc1a9.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00112883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n885.87 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmps_ijc1a9\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmps_ijc1a9.rb:3:in `%'\n/tmp/tmps_ijc1a9.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `all?'\n/tmp/tmps_ijc1a9.rb:3:in `block in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `each'\n/tmp/tmps_ijc1a9.rb:3:in `select'\n/tmp/tmps_ijc1a9.rb:3:in `divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:9:in `call'\n/tmp/tmps_ijc1a9.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00112883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n885.87 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmps_ijc1a9\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmps_ijc1a9.rb:3:in `%'\n/tmp/tmps_ijc1a9.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `all?'\n/tmp/tmps_ijc1a9.rb:3:in `block in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `each'\n/tmp/tmps_ijc1a9.rb:3:in `select'\n/tmp/tmps_ijc1a9.rb:3:in `divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:9:in `call'\n/tmp/tmps_ijc1a9.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00112883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n885.87 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.digits.all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp_hgi35sa\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp_hgi35sa.rb:3:in `%'\n/tmp/tmp_hgi35sa.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:3:in `all?'\n/tmp/tmp_hgi35sa.rb:3:in `block in divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:3:in `each'\n/tmp/tmp_hgi35sa.rb:3:in `select'\n/tmp/tmp_hgi35sa.rb:3:in `divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:9:in `call'\n/tmp/tmp_hgi35sa.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155593 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.36 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmps_ijc1a9\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmps_ijc1a9.rb:3:in `%'\n/tmp/tmps_ijc1a9.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `all?'\n/tmp/tmps_ijc1a9.rb:3:in `block in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `each'\n/tmp/tmps_ijc1a9.rb:3:in `select'\n/tmp/tmps_ijc1a9.rb:3:in `divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:9:in `call'\n/tmp/tmps_ijc1a9.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00112883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n885.87 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmps_ijc1a9\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmps_ijc1a9.rb:3:in `%'\n/tmp/tmps_ijc1a9.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `all?'\n/tmp/tmps_ijc1a9.rb:3:in `block in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `each'\n/tmp/tmps_ijc1a9.rb:3:in `select'\n/tmp/tmps_ijc1a9.rb:3:in `divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:9:in `call'\n/tmp/tmps_ijc1a9.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00112883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n885.87 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmp2ylqxbub\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp2ylqxbub.rb:3:in `%'\n/tmp/tmp2ylqxbub.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:3:in `all?'\n/tmp/tmp2ylqxbub.rb:3:in `block in divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:3:in `each'\n/tmp/tmp2ylqxbub.rb:3:in `select'\n/tmp/tmp2ylqxbub.rb:3:in `divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:9:in `call'\n/tmp/tmp2ylqxbub.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001214141 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n823.63 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmplyycq1gn\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmplyycq1gn.rb:3:in `%'\n/tmp/tmplyycq1gn.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `all?'\n/tmp/tmplyycq1gn.rb:3:in `block in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `each'\n/tmp/tmplyycq1gn.rb:3:in `select'\n/tmp/tmplyycq1gn.rb:3:in `divisible_by_digits'\n/tmp/tmplyycq1gn.rb:9:in `call'\n/tmp/tmplyycq1gn.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001225445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n816.03 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| (num.to_s.chars.map(&:to_i).inject(:*) || 1) % num == 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmpq5nqwjc9\nStarted\nF\n===============================================================================\nFailure: test_divisible_by_digits(TestHumanEval)\n/tmp/tmpq5nqwjc9.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n<[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]> expected but was\n<[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20]>\n\ndiff:\n? [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n?                              0    0        \n?                              ?  - ????????        \n===============================================================================\n\nFinished in 0.014121928 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n70.81 tests/s, 70.81 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmplyycq1gn\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmplyycq1gn.rb:3:in `%'\n/tmp/tmplyycq1gn.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `all?'\n/tmp/tmplyycq1gn.rb:3:in `block in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `each'\n/tmp/tmplyycq1gn.rb:3:in `select'\n/tmp/tmplyycq1gn.rb:3:in `divisible_by_digits'\n/tmp/tmplyycq1gn.rb:9:in `call'\n/tmp/tmplyycq1gn.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001225445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n816.03 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmplyycq1gn\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmplyycq1gn.rb:3:in `%'\n/tmp/tmplyycq1gn.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `all?'\n/tmp/tmplyycq1gn.rb:3:in `block in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `each'\n/tmp/tmplyycq1gn.rb:3:in `select'\n/tmp/tmplyycq1gn.rb:3:in `divisible_by_digits'\n/tmp/tmplyycq1gn.rb:9:in `call'\n/tmp/tmplyycq1gn.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001225445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n816.03 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.all? { |d| n % d.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpcfclp3bv\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpcfclp3bv.rb:3:in `%'\n/tmp/tmpcfclp3bv.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpcfclp3bv.rb:3:in `all?'\n/tmp/tmpcfclp3bv.rb:3:in `block in divisible_by_digits'\n/tmp/tmpcfclp3bv.rb:3:in `each'\n/tmp/tmpcfclp3bv.rb:3:in `select'\n/tmp/tmpcfclp3bv.rb:3:in `divisible_by_digits'\n/tmp/tmpcfclp3bv.rb:9:in `call'\n/tmp/tmpcfclp3bv.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001181391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n846.46 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmps_ijc1a9\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmps_ijc1a9.rb:3:in `%'\n/tmp/tmps_ijc1a9.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `all?'\n/tmp/tmps_ijc1a9.rb:3:in `block in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `each'\n/tmp/tmps_ijc1a9.rb:3:in `select'\n/tmp/tmps_ijc1a9.rb:3:in `divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:9:in `call'\n/tmp/tmps_ijc1a9.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00112883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n885.87 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.split('').all? { |d| n % d.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmp__giikq5\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp__giikq5.rb:3:in `%'\n/tmp/tmp__giikq5.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp__giikq5.rb:3:in `all?'\n/tmp/tmp__giikq5.rb:3:in `block in divisible_by_digits'\n/tmp/tmp__giikq5.rb:3:in `each'\n/tmp/tmp__giikq5.rb:3:in `select'\n/tmp/tmp__giikq5.rb:3:in `divisible_by_digits'\n/tmp/tmp__giikq5.rb:9:in `call'\n/tmp/tmp__giikq5.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001320429 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n757.33 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.all? { |d| n % d.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpcfclp3bv\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpcfclp3bv.rb:3:in `%'\n/tmp/tmpcfclp3bv.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpcfclp3bv.rb:3:in `all?'\n/tmp/tmpcfclp3bv.rb:3:in `block in divisible_by_digits'\n/tmp/tmpcfclp3bv.rb:3:in `each'\n/tmp/tmpcfclp3bv.rb:3:in `select'\n/tmp/tmpcfclp3bv.rb:3:in `divisible_by_digits'\n/tmp/tmpcfclp3bv.rb:9:in `call'\n/tmp/tmpcfclp3bv.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001181391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n846.46 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmps_ijc1a9\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmps_ijc1a9.rb:3:in `%'\n/tmp/tmps_ijc1a9.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `all?'\n/tmp/tmps_ijc1a9.rb:3:in `block in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `each'\n/tmp/tmps_ijc1a9.rb:3:in `select'\n/tmp/tmps_ijc1a9.rb:3:in `divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:9:in `call'\n/tmp/tmps_ijc1a9.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00112883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n885.87 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmplyycq1gn\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmplyycq1gn.rb:3:in `%'\n/tmp/tmplyycq1gn.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `all?'\n/tmp/tmplyycq1gn.rb:3:in `block in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `each'\n/tmp/tmplyycq1gn.rb:3:in `select'\n/tmp/tmplyycq1gn.rb:3:in `divisible_by_digits'\n/tmp/tmplyycq1gn.rb:9:in `call'\n/tmp/tmplyycq1gn.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001225445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n816.03 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.all? { |digit| n % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmpb5wg4r6w\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpb5wg4r6w.rb:3:in `%'\n/tmp/tmpb5wg4r6w.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpb5wg4r6w.rb:3:in `all?'\n/tmp/tmpb5wg4r6w.rb:3:in `block in divisible_by_digits'\n/tmp/tmpb5wg4r6w.rb:3:in `each'\n/tmp/tmpb5wg4r6w.rb:3:in `select'\n/tmp/tmpb5wg4r6w.rb:3:in `divisible_by_digits'\n/tmp/tmpb5wg4r6w.rb:9:in `call'\n/tmp/tmpb5wg4r6w.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001203028 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n831.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.digits.all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp_hgi35sa\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp_hgi35sa.rb:3:in `%'\n/tmp/tmp_hgi35sa.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:3:in `all?'\n/tmp/tmp_hgi35sa.rb:3:in `block in divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:3:in `each'\n/tmp/tmp_hgi35sa.rb:3:in `select'\n/tmp/tmp_hgi35sa.rb:3:in `divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:9:in `call'\n/tmp/tmp_hgi35sa.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155593 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.36 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmplyycq1gn\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmplyycq1gn.rb:3:in `%'\n/tmp/tmplyycq1gn.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `all?'\n/tmp/tmplyycq1gn.rb:3:in `block in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `each'\n/tmp/tmplyycq1gn.rb:3:in `select'\n/tmp/tmplyycq1gn.rb:3:in `divisible_by_digits'\n/tmp/tmplyycq1gn.rb:9:in `call'\n/tmp/tmplyycq1gn.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001225445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n816.03 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmplyycq1gn\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmplyycq1gn.rb:3:in `%'\n/tmp/tmplyycq1gn.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `all?'\n/tmp/tmplyycq1gn.rb:3:in `block in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `each'\n/tmp/tmplyycq1gn.rb:3:in `select'\n/tmp/tmplyycq1gn.rb:3:in `divisible_by_digits'\n/tmp/tmplyycq1gn.rb:9:in `call'\n/tmp/tmplyycq1gn.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001225445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n816.03 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmp2ylqxbub\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp2ylqxbub.rb:3:in `%'\n/tmp/tmp2ylqxbub.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:3:in `all?'\n/tmp/tmp2ylqxbub.rb:3:in `block in divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:3:in `each'\n/tmp/tmp2ylqxbub.rb:3:in `select'\n/tmp/tmp2ylqxbub.rb:3:in `divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:9:in `call'\n/tmp/tmp2ylqxbub.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001214141 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n823.63 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.digits.all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp_hgi35sa\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp_hgi35sa.rb:3:in `%'\n/tmp/tmp_hgi35sa.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:3:in `all?'\n/tmp/tmp_hgi35sa.rb:3:in `block in divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:3:in `each'\n/tmp/tmp_hgi35sa.rb:3:in `select'\n/tmp/tmp_hgi35sa.rb:3:in `divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:9:in `call'\n/tmp/tmp_hgi35sa.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155593 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.36 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmplyycq1gn\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmplyycq1gn.rb:3:in `%'\n/tmp/tmplyycq1gn.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `all?'\n/tmp/tmplyycq1gn.rb:3:in `block in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `each'\n/tmp/tmplyycq1gn.rb:3:in `select'\n/tmp/tmplyycq1gn.rb:3:in `divisible_by_digits'\n/tmp/tmplyycq1gn.rb:9:in `call'\n/tmp/tmplyycq1gn.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001225445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n816.03 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.split('').map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp3724ea12\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp3724ea12.rb:3:in `%'\n/tmp/tmp3724ea12.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp3724ea12.rb:3:in `all?'\n/tmp/tmp3724ea12.rb:3:in `block in divisible_by_digits'\n/tmp/tmp3724ea12.rb:3:in `each'\n/tmp/tmp3724ea12.rb:3:in `select'\n/tmp/tmp3724ea12.rb:3:in `divisible_by_digits'\n/tmp/tmp3724ea12.rb:9:in `call'\n/tmp/tmp3724ea12.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164973 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.39 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num % num.to_s.chars.map(&:to_i).reduce(:*) == 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmplsjeug_z\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmplsjeug_z.rb:3:in `%'\n/tmp/tmplsjeug_z.rb:3:in `block in divisible_by_digits'\n/tmp/tmplsjeug_z.rb:3:in `each'\n/tmp/tmplsjeug_z.rb:3:in `select'\n/tmp/tmplsjeug_z.rb:3:in `divisible_by_digits'\n/tmp/tmplsjeug_z.rb:9:in `call'\n/tmp/tmplsjeug_z.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.002449349 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n408.27 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| (num.to_s.chars.map(&:to_i) - [0]).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmplnpeo64o\nStarted\nF\n===============================================================================\nFailure: test_divisible_by_digits(TestHumanEval)\n/tmp/tmplnpeo64o.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n<[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]> expected but was\n<[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22]>\n\ndiff:\n? [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22]\n===============================================================================\n\nFinished in 0.014189042 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n70.48 tests/s, 70.48 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n    (startnum..endnum).select {|num| num.to_s.chars.map(&:to_i).all? {|digit| num % digit == 0}}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmpabx2trok\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpabx2trok.rb:3:in `%'\n/tmp/tmpabx2trok.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpabx2trok.rb:3:in `all?'\n/tmp/tmpabx2trok.rb:3:in `block in divisible_by_digits'\n/tmp/tmpabx2trok.rb:3:in `each'\n/tmp/tmpabx2trok.rb:3:in `select'\n/tmp/tmpabx2trok.rb:3:in `divisible_by_digits'\n/tmp/tmpabx2trok.rb:9:in `call'\n/tmp/tmpabx2trok.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001194399 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n837.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmplyycq1gn\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmplyycq1gn.rb:3:in `%'\n/tmp/tmplyycq1gn.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `all?'\n/tmp/tmplyycq1gn.rb:3:in `block in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `each'\n/tmp/tmplyycq1gn.rb:3:in `select'\n/tmp/tmplyycq1gn.rb:3:in `divisible_by_digits'\n/tmp/tmplyycq1gn.rb:9:in `call'\n/tmp/tmplyycq1gn.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001225445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n816.03 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmps_ijc1a9\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmps_ijc1a9.rb:3:in `%'\n/tmp/tmps_ijc1a9.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `all?'\n/tmp/tmps_ijc1a9.rb:3:in `block in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `each'\n/tmp/tmps_ijc1a9.rb:3:in `select'\n/tmp/tmps_ijc1a9.rb:3:in `divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:9:in `call'\n/tmp/tmps_ijc1a9.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00112883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n885.87 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmp2ylqxbub\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp2ylqxbub.rb:3:in `%'\n/tmp/tmp2ylqxbub.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:3:in `all?'\n/tmp/tmp2ylqxbub.rb:3:in `block in divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:3:in `each'\n/tmp/tmp2ylqxbub.rb:3:in `select'\n/tmp/tmp2ylqxbub.rb:3:in `divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:9:in `call'\n/tmp/tmp2ylqxbub.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001214141 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n823.63 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmp2ylqxbub\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp2ylqxbub.rb:3:in `%'\n/tmp/tmp2ylqxbub.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:3:in `all?'\n/tmp/tmp2ylqxbub.rb:3:in `block in divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:3:in `each'\n/tmp/tmp2ylqxbub.rb:3:in `select'\n/tmp/tmp2ylqxbub.rb:3:in `divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:9:in `call'\n/tmp/tmp2ylqxbub.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001214141 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n823.63 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmplyycq1gn\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmplyycq1gn.rb:3:in `%'\n/tmp/tmplyycq1gn.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `all?'\n/tmp/tmplyycq1gn.rb:3:in `block in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `each'\n/tmp/tmplyycq1gn.rb:3:in `select'\n/tmp/tmplyycq1gn.rb:3:in `divisible_by_digits'\n/tmp/tmplyycq1gn.rb:9:in `call'\n/tmp/tmplyycq1gn.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001225445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n816.03 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num % num.to_s.split('').map(&:to_i).inject(:*) == 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmp08cowg3x\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp08cowg3x.rb:3:in `%'\n/tmp/tmp08cowg3x.rb:3:in `block in divisible_by_digits'\n/tmp/tmp08cowg3x.rb:3:in `each'\n/tmp/tmp08cowg3x.rb:3:in `select'\n/tmp/tmp08cowg3x.rb:3:in `divisible_by_digits'\n/tmp/tmp08cowg3x.rb:9:in `call'\n/tmp/tmp08cowg3x.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001165817 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n857.77 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmps_ijc1a9\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmps_ijc1a9.rb:3:in `%'\n/tmp/tmps_ijc1a9.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `all?'\n/tmp/tmps_ijc1a9.rb:3:in `block in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `each'\n/tmp/tmps_ijc1a9.rb:3:in `select'\n/tmp/tmps_ijc1a9.rb:3:in `divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:9:in `call'\n/tmp/tmps_ijc1a9.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00112883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n885.87 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmps_ijc1a9\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmps_ijc1a9.rb:3:in `%'\n/tmp/tmps_ijc1a9.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `all?'\n/tmp/tmps_ijc1a9.rb:3:in `block in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `each'\n/tmp/tmps_ijc1a9.rb:3:in `select'\n/tmp/tmps_ijc1a9.rb:3:in `divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:9:in `call'\n/tmp/tmps_ijc1a9.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00112883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n885.87 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmps_ijc1a9\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmps_ijc1a9.rb:3:in `%'\n/tmp/tmps_ijc1a9.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `all?'\n/tmp/tmps_ijc1a9.rb:3:in `block in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `each'\n/tmp/tmps_ijc1a9.rb:3:in `select'\n/tmp/tmps_ijc1a9.rb:3:in `divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:9:in `call'\n/tmp/tmps_ijc1a9.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00112883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n885.87 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmplyycq1gn\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmplyycq1gn.rb:3:in `%'\n/tmp/tmplyycq1gn.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `all?'\n/tmp/tmplyycq1gn.rb:3:in `block in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `each'\n/tmp/tmplyycq1gn.rb:3:in `select'\n/tmp/tmplyycq1gn.rb:3:in `divisible_by_digits'\n/tmp/tmplyycq1gn.rb:9:in `call'\n/tmp/tmplyycq1gn.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001225445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n816.03 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num % num.to_s.split('').map(&:to_i).inject(:*) == 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmp08cowg3x\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp08cowg3x.rb:3:in `%'\n/tmp/tmp08cowg3x.rb:3:in `block in divisible_by_digits'\n/tmp/tmp08cowg3x.rb:3:in `each'\n/tmp/tmp08cowg3x.rb:3:in `select'\n/tmp/tmp08cowg3x.rb:3:in `divisible_by_digits'\n/tmp/tmp08cowg3x.rb:9:in `call'\n/tmp/tmp08cowg3x.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001165817 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n857.77 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.digits.all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp_hgi35sa\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp_hgi35sa.rb:3:in `%'\n/tmp/tmp_hgi35sa.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:3:in `all?'\n/tmp/tmp_hgi35sa.rb:3:in `block in divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:3:in `each'\n/tmp/tmp_hgi35sa.rb:3:in `select'\n/tmp/tmp_hgi35sa.rb:3:in `divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:9:in `call'\n/tmp/tmp_hgi35sa.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155593 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.36 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmpndi4sw66\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpndi4sw66.rb:3:in `%'\n/tmp/tmpndi4sw66.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpndi4sw66.rb:3:in `all?'\n/tmp/tmpndi4sw66.rb:3:in `block in divisible_by_digits'\n/tmp/tmpndi4sw66.rb:3:in `each'\n/tmp/tmpndi4sw66.rb:3:in `select'\n/tmp/tmpndi4sw66.rb:3:in `divisible_by_digits'\n/tmp/tmpndi4sw66.rb:9:in `call'\n/tmp/tmpndi4sw66.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00118696 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n842.49 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmps_ijc1a9\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmps_ijc1a9.rb:3:in `%'\n/tmp/tmps_ijc1a9.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `all?'\n/tmp/tmps_ijc1a9.rb:3:in `block in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `each'\n/tmp/tmps_ijc1a9.rb:3:in `select'\n/tmp/tmps_ijc1a9.rb:3:in `divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:9:in `call'\n/tmp/tmps_ijc1a9.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00112883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n885.87 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.digits.all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp_hgi35sa\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp_hgi35sa.rb:3:in `%'\n/tmp/tmp_hgi35sa.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:3:in `all?'\n/tmp/tmp_hgi35sa.rb:3:in `block in divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:3:in `each'\n/tmp/tmp_hgi35sa.rb:3:in `select'\n/tmp/tmp_hgi35sa.rb:3:in `divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:9:in `call'\n/tmp/tmp_hgi35sa.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155593 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.36 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmps_ijc1a9\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmps_ijc1a9.rb:3:in `%'\n/tmp/tmps_ijc1a9.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `all?'\n/tmp/tmps_ijc1a9.rb:3:in `block in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `each'\n/tmp/tmps_ijc1a9.rb:3:in `select'\n/tmp/tmps_ijc1a9.rb:3:in `divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:9:in `call'\n/tmp/tmps_ijc1a9.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00112883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n885.87 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmplyycq1gn\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmplyycq1gn.rb:3:in `%'\n/tmp/tmplyycq1gn.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `all?'\n/tmp/tmplyycq1gn.rb:3:in `block in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `each'\n/tmp/tmplyycq1gn.rb:3:in `select'\n/tmp/tmplyycq1gn.rb:3:in `divisible_by_digits'\n/tmp/tmplyycq1gn.rb:9:in `call'\n/tmp/tmplyycq1gn.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001225445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n816.03 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num % num.digits.reduce(:*) == 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzo3vf3tf\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzo3vf3tf.rb:3:in `%'\n/tmp/tmpzo3vf3tf.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzo3vf3tf.rb:3:in `each'\n/tmp/tmpzo3vf3tf.rb:3:in `select'\n/tmp/tmpzo3vf3tf.rb:3:in `divisible_by_digits'\n/tmp/tmpzo3vf3tf.rb:9:in `call'\n/tmp/tmpzo3vf3tf.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001123299 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n890.23 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmpndi4sw66\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpndi4sw66.rb:3:in `%'\n/tmp/tmpndi4sw66.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpndi4sw66.rb:3:in `all?'\n/tmp/tmpndi4sw66.rb:3:in `block in divisible_by_digits'\n/tmp/tmpndi4sw66.rb:3:in `each'\n/tmp/tmpndi4sw66.rb:3:in `select'\n/tmp/tmpndi4sw66.rb:3:in `divisible_by_digits'\n/tmp/tmpndi4sw66.rb:9:in `call'\n/tmp/tmpndi4sw66.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00118696 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n842.49 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmplyycq1gn\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmplyycq1gn.rb:3:in `%'\n/tmp/tmplyycq1gn.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `all?'\n/tmp/tmplyycq1gn.rb:3:in `block in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `each'\n/tmp/tmplyycq1gn.rb:3:in `select'\n/tmp/tmplyycq1gn.rb:3:in `divisible_by_digits'\n/tmp/tmplyycq1gn.rb:9:in `call'\n/tmp/tmplyycq1gn.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001225445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n816.03 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmplyycq1gn\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmplyycq1gn.rb:3:in `%'\n/tmp/tmplyycq1gn.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `all?'\n/tmp/tmplyycq1gn.rb:3:in `block in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `each'\n/tmp/tmplyycq1gn.rb:3:in `select'\n/tmp/tmplyycq1gn.rb:3:in `divisible_by_digits'\n/tmp/tmplyycq1gn.rb:9:in `call'\n/tmp/tmplyycq1gn.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001225445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n816.03 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmps_ijc1a9\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmps_ijc1a9.rb:3:in `%'\n/tmp/tmps_ijc1a9.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `all?'\n/tmp/tmps_ijc1a9.rb:3:in `block in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `each'\n/tmp/tmps_ijc1a9.rb:3:in `select'\n/tmp/tmps_ijc1a9.rb:3:in `divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:9:in `call'\n/tmp/tmps_ijc1a9.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00112883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n885.87 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmplyycq1gn\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmplyycq1gn.rb:3:in `%'\n/tmp/tmplyycq1gn.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `all?'\n/tmp/tmplyycq1gn.rb:3:in `block in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `each'\n/tmp/tmplyycq1gn.rb:3:in `select'\n/tmp/tmplyycq1gn.rb:3:in `divisible_by_digits'\n/tmp/tmplyycq1gn.rb:9:in `call'\n/tmp/tmplyycq1gn.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001225445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n816.03 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmplyycq1gn\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmplyycq1gn.rb:3:in `%'\n/tmp/tmplyycq1gn.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `all?'\n/tmp/tmplyycq1gn.rb:3:in `block in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `each'\n/tmp/tmplyycq1gn.rb:3:in `select'\n/tmp/tmplyycq1gn.rb:3:in `divisible_by_digits'\n/tmp/tmplyycq1gn.rb:9:in `call'\n/tmp/tmplyycq1gn.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001225445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n816.03 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmplyycq1gn\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmplyycq1gn.rb:3:in `%'\n/tmp/tmplyycq1gn.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `all?'\n/tmp/tmplyycq1gn.rb:3:in `block in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `each'\n/tmp/tmplyycq1gn.rb:3:in `select'\n/tmp/tmplyycq1gn.rb:3:in `divisible_by_digits'\n/tmp/tmplyycq1gn.rb:9:in `call'\n/tmp/tmplyycq1gn.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001225445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n816.03 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmps_ijc1a9\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmps_ijc1a9.rb:3:in `%'\n/tmp/tmps_ijc1a9.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `all?'\n/tmp/tmps_ijc1a9.rb:3:in `block in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `each'\n/tmp/tmps_ijc1a9.rb:3:in `select'\n/tmp/tmps_ijc1a9.rb:3:in `divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:9:in `call'\n/tmp/tmps_ijc1a9.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00112883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n885.87 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmplyycq1gn\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmplyycq1gn.rb:3:in `%'\n/tmp/tmplyycq1gn.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `all?'\n/tmp/tmplyycq1gn.rb:3:in `block in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `each'\n/tmp/tmplyycq1gn.rb:3:in `select'\n/tmp/tmplyycq1gn.rb:3:in `divisible_by_digits'\n/tmp/tmplyycq1gn.rb:9:in `call'\n/tmp/tmplyycq1gn.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001225445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n816.03 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmps_ijc1a9\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmps_ijc1a9.rb:3:in `%'\n/tmp/tmps_ijc1a9.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `all?'\n/tmp/tmps_ijc1a9.rb:3:in `block in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `each'\n/tmp/tmps_ijc1a9.rb:3:in `select'\n/tmp/tmps_ijc1a9.rb:3:in `divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:9:in `call'\n/tmp/tmps_ijc1a9.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00112883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n885.87 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmps_ijc1a9\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmps_ijc1a9.rb:3:in `%'\n/tmp/tmps_ijc1a9.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `all?'\n/tmp/tmps_ijc1a9.rb:3:in `block in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `each'\n/tmp/tmps_ijc1a9.rb:3:in `select'\n/tmp/tmps_ijc1a9.rb:3:in `divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:9:in `call'\n/tmp/tmps_ijc1a9.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00112883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n885.87 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| (num.to_s.chars.map(&:to_i).inject(:*) || 1) % num == 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmpq5nqwjc9\nStarted\nF\n===============================================================================\nFailure: test_divisible_by_digits(TestHumanEval)\n/tmp/tmpq5nqwjc9.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n<[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]> expected but was\n<[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20]>\n\ndiff:\n? [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n?                              0    0        \n?                              ?  - ????????        \n===============================================================================\n\nFinished in 0.014121928 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n70.81 tests/s, 70.81 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmps_ijc1a9\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmps_ijc1a9.rb:3:in `%'\n/tmp/tmps_ijc1a9.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `all?'\n/tmp/tmps_ijc1a9.rb:3:in `block in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `each'\n/tmp/tmps_ijc1a9.rb:3:in `select'\n/tmp/tmps_ijc1a9.rb:3:in `divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:9:in `call'\n/tmp/tmps_ijc1a9.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00112883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n885.87 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmp2ylqxbub\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp2ylqxbub.rb:3:in `%'\n/tmp/tmp2ylqxbub.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:3:in `all?'\n/tmp/tmp2ylqxbub.rb:3:in `block in divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:3:in `each'\n/tmp/tmp2ylqxbub.rb:3:in `select'\n/tmp/tmp2ylqxbub.rb:3:in `divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:9:in `call'\n/tmp/tmp2ylqxbub.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001214141 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n823.63 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| (num.to_s.chars.map(&:to_i) - [0]).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmplnpeo64o\nStarted\nF\n===============================================================================\nFailure: test_divisible_by_digits(TestHumanEval)\n/tmp/tmplnpeo64o.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n<[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]> expected but was\n<[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22]>\n\ndiff:\n? [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22]\n===============================================================================\n\nFinished in 0.014189042 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n70.48 tests/s, 70.48 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.split('').map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp3724ea12\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp3724ea12.rb:3:in `%'\n/tmp/tmp3724ea12.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp3724ea12.rb:3:in `all?'\n/tmp/tmp3724ea12.rb:3:in `block in divisible_by_digits'\n/tmp/tmp3724ea12.rb:3:in `each'\n/tmp/tmp3724ea12.rb:3:in `select'\n/tmp/tmp3724ea12.rb:3:in `divisible_by_digits'\n/tmp/tmp3724ea12.rb:9:in `call'\n/tmp/tmp3724ea12.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164973 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.39 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmp2ylqxbub\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp2ylqxbub.rb:3:in `%'\n/tmp/tmp2ylqxbub.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:3:in `all?'\n/tmp/tmp2ylqxbub.rb:3:in `block in divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:3:in `each'\n/tmp/tmp2ylqxbub.rb:3:in `select'\n/tmp/tmp2ylqxbub.rb:3:in `divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:9:in `call'\n/tmp/tmp2ylqxbub.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001214141 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n823.63 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n % n.to_s.split('').map(&:to_i).inject(:*) == 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmphijvtda4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmphijvtda4.rb:3:in `%'\n/tmp/tmphijvtda4.rb:3:in `block in divisible_by_digits'\n/tmp/tmphijvtda4.rb:3:in `each'\n/tmp/tmphijvtda4.rb:3:in `select'\n/tmp/tmphijvtda4.rb:3:in `divisible_by_digits'\n/tmp/tmphijvtda4.rb:9:in `call'\n/tmp/tmphijvtda4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001125649 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n888.38 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmplyycq1gn\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmplyycq1gn.rb:3:in `%'\n/tmp/tmplyycq1gn.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `all?'\n/tmp/tmplyycq1gn.rb:3:in `block in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `each'\n/tmp/tmplyycq1gn.rb:3:in `select'\n/tmp/tmplyycq1gn.rb:3:in `divisible_by_digits'\n/tmp/tmplyycq1gn.rb:9:in `call'\n/tmp/tmplyycq1gn.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001225445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n816.03 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |x| x.to_s.split('').map(&:to_i).all? { |y| x % y == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmp5btmtn8h\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp5btmtn8h.rb:3:in `%'\n/tmp/tmp5btmtn8h.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp5btmtn8h.rb:3:in `all?'\n/tmp/tmp5btmtn8h.rb:3:in `block in divisible_by_digits'\n/tmp/tmp5btmtn8h.rb:3:in `each'\n/tmp/tmp5btmtn8h.rb:3:in `select'\n/tmp/tmp5btmtn8h.rb:3:in `divisible_by_digits'\n/tmp/tmp5btmtn8h.rb:9:in `call'\n/tmp/tmp5btmtn8h.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001232275 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n811.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.split('').map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp3724ea12\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp3724ea12.rb:3:in `%'\n/tmp/tmp3724ea12.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp3724ea12.rb:3:in `all?'\n/tmp/tmp3724ea12.rb:3:in `block in divisible_by_digits'\n/tmp/tmp3724ea12.rb:3:in `each'\n/tmp/tmp3724ea12.rb:3:in `select'\n/tmp/tmp3724ea12.rb:3:in `divisible_by_digits'\n/tmp/tmp3724ea12.rb:9:in `call'\n/tmp/tmp3724ea12.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164973 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.39 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.split('').map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp3724ea12\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp3724ea12.rb:3:in `%'\n/tmp/tmp3724ea12.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp3724ea12.rb:3:in `all?'\n/tmp/tmp3724ea12.rb:3:in `block in divisible_by_digits'\n/tmp/tmp3724ea12.rb:3:in `each'\n/tmp/tmp3724ea12.rb:3:in `select'\n/tmp/tmp3724ea12.rb:3:in `divisible_by_digits'\n/tmp/tmp3724ea12.rb:9:in `call'\n/tmp/tmp3724ea12.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164973 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.39 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmpndi4sw66\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpndi4sw66.rb:3:in `%'\n/tmp/tmpndi4sw66.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpndi4sw66.rb:3:in `all?'\n/tmp/tmpndi4sw66.rb:3:in `block in divisible_by_digits'\n/tmp/tmpndi4sw66.rb:3:in `each'\n/tmp/tmpndi4sw66.rb:3:in `select'\n/tmp/tmpndi4sw66.rb:3:in `divisible_by_digits'\n/tmp/tmpndi4sw66.rb:9:in `call'\n/tmp/tmpndi4sw66.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00118696 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n842.49 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmpndi4sw66\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpndi4sw66.rb:3:in `%'\n/tmp/tmpndi4sw66.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpndi4sw66.rb:3:in `all?'\n/tmp/tmpndi4sw66.rb:3:in `block in divisible_by_digits'\n/tmp/tmpndi4sw66.rb:3:in `each'\n/tmp/tmpndi4sw66.rb:3:in `select'\n/tmp/tmpndi4sw66.rb:3:in `divisible_by_digits'\n/tmp/tmpndi4sw66.rb:9:in `call'\n/tmp/tmpndi4sw66.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00118696 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n842.49 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |x| x.to_s.chars.map(&:to_i).all? { |y| x % y == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmprtlr2nie\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmprtlr2nie.rb:3:in `%'\n/tmp/tmprtlr2nie.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmprtlr2nie.rb:3:in `all?'\n/tmp/tmprtlr2nie.rb:3:in `block in divisible_by_digits'\n/tmp/tmprtlr2nie.rb:3:in `each'\n/tmp/tmprtlr2nie.rb:3:in `select'\n/tmp/tmprtlr2nie.rb:3:in `divisible_by_digits'\n/tmp/tmprtlr2nie.rb:9:in `call'\n/tmp/tmprtlr2nie.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001218772 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n820.50 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num % num.digits.reduce(:*) == 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzo3vf3tf\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzo3vf3tf.rb:3:in `%'\n/tmp/tmpzo3vf3tf.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzo3vf3tf.rb:3:in `each'\n/tmp/tmpzo3vf3tf.rb:3:in `select'\n/tmp/tmpzo3vf3tf.rb:3:in `divisible_by_digits'\n/tmp/tmpzo3vf3tf.rb:9:in `call'\n/tmp/tmpzo3vf3tf.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001123299 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n890.23 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmpndi4sw66\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpndi4sw66.rb:3:in `%'\n/tmp/tmpndi4sw66.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpndi4sw66.rb:3:in `all?'\n/tmp/tmpndi4sw66.rb:3:in `block in divisible_by_digits'\n/tmp/tmpndi4sw66.rb:3:in `each'\n/tmp/tmpndi4sw66.rb:3:in `select'\n/tmp/tmpndi4sw66.rb:3:in `divisible_by_digits'\n/tmp/tmpndi4sw66.rb:9:in `call'\n/tmp/tmpndi4sw66.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00118696 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n842.49 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.digits.all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp_hgi35sa\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp_hgi35sa.rb:3:in `%'\n/tmp/tmp_hgi35sa.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:3:in `all?'\n/tmp/tmp_hgi35sa.rb:3:in `block in divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:3:in `each'\n/tmp/tmp_hgi35sa.rb:3:in `select'\n/tmp/tmp_hgi35sa.rb:3:in `divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:9:in `call'\n/tmp/tmp_hgi35sa.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155593 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.36 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmp2ylqxbub\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp2ylqxbub.rb:3:in `%'\n/tmp/tmp2ylqxbub.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:3:in `all?'\n/tmp/tmp2ylqxbub.rb:3:in `block in divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:3:in `each'\n/tmp/tmp2ylqxbub.rb:3:in `select'\n/tmp/tmp2ylqxbub.rb:3:in `divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:9:in `call'\n/tmp/tmp2ylqxbub.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001214141 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n823.63 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select {|num| num.to_s.chars.all? {|digit| num % digit.to_i == 0}}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmpfzx2kie8\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpfzx2kie8.rb:3:in `%'\n/tmp/tmpfzx2kie8.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpfzx2kie8.rb:3:in `all?'\n/tmp/tmpfzx2kie8.rb:3:in `block in divisible_by_digits'\n/tmp/tmpfzx2kie8.rb:3:in `each'\n/tmp/tmpfzx2kie8.rb:3:in `select'\n/tmp/tmpfzx2kie8.rb:3:in `divisible_by_digits'\n/tmp/tmpfzx2kie8.rb:9:in `call'\n/tmp/tmpfzx2kie8.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001192465 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n838.60 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmplyycq1gn\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmplyycq1gn.rb:3:in `%'\n/tmp/tmplyycq1gn.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `all?'\n/tmp/tmplyycq1gn.rb:3:in `block in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `each'\n/tmp/tmplyycq1gn.rb:3:in `select'\n/tmp/tmplyycq1gn.rb:3:in `divisible_by_digits'\n/tmp/tmplyycq1gn.rb:9:in `call'\n/tmp/tmplyycq1gn.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001225445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n816.03 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmplyycq1gn\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmplyycq1gn.rb:3:in `%'\n/tmp/tmplyycq1gn.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `all?'\n/tmp/tmplyycq1gn.rb:3:in `block in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `each'\n/tmp/tmplyycq1gn.rb:3:in `select'\n/tmp/tmplyycq1gn.rb:3:in `divisible_by_digits'\n/tmp/tmplyycq1gn.rb:9:in `call'\n/tmp/tmplyycq1gn.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001225445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n816.03 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmpndi4sw66\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpndi4sw66.rb:3:in `%'\n/tmp/tmpndi4sw66.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpndi4sw66.rb:3:in `all?'\n/tmp/tmpndi4sw66.rb:3:in `block in divisible_by_digits'\n/tmp/tmpndi4sw66.rb:3:in `each'\n/tmp/tmpndi4sw66.rb:3:in `select'\n/tmp/tmpndi4sw66.rb:3:in `divisible_by_digits'\n/tmp/tmpndi4sw66.rb:9:in `call'\n/tmp/tmpndi4sw66.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00118696 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n842.49 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |i| i.to_s.chars.map(&:to_i).all? { |j| i % j == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmp6_5eb5kf\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp6_5eb5kf.rb:3:in `%'\n/tmp/tmp6_5eb5kf.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp6_5eb5kf.rb:3:in `all?'\n/tmp/tmp6_5eb5kf.rb:3:in `block in divisible_by_digits'\n/tmp/tmp6_5eb5kf.rb:3:in `each'\n/tmp/tmp6_5eb5kf.rb:3:in `select'\n/tmp/tmp6_5eb5kf.rb:3:in `divisible_by_digits'\n/tmp/tmp6_5eb5kf.rb:9:in `call'\n/tmp/tmp6_5eb5kf.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001202772 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n831.41 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmps_ijc1a9\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmps_ijc1a9.rb:3:in `%'\n/tmp/tmps_ijc1a9.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `all?'\n/tmp/tmps_ijc1a9.rb:3:in `block in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `each'\n/tmp/tmps_ijc1a9.rb:3:in `select'\n/tmp/tmps_ijc1a9.rb:3:in `divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:9:in `call'\n/tmp/tmps_ijc1a9.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00112883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n885.87 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n % n.digits.sum == 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmp0axlcacm\nStarted\nF\n===============================================================================\nFailure: test_divisible_by_digits(TestHumanEval)\n/tmp/tmp0axlcacm.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n<[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]> expected but was\n<[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 18, 20, 21]>\n\ndiff:\n? [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 2   2 ]\n?                              0       8   0,  1 \n?                              ?       ?   +++ + \n===============================================================================\n\nFinished in 0.014122666 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n70.81 tests/s, 70.81 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmplyycq1gn\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmplyycq1gn.rb:3:in `%'\n/tmp/tmplyycq1gn.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `all?'\n/tmp/tmplyycq1gn.rb:3:in `block in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `each'\n/tmp/tmplyycq1gn.rb:3:in `select'\n/tmp/tmplyycq1gn.rb:3:in `divisible_by_digits'\n/tmp/tmplyycq1gn.rb:9:in `call'\n/tmp/tmplyycq1gn.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001225445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n816.03 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmps_ijc1a9\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmps_ijc1a9.rb:3:in `%'\n/tmp/tmps_ijc1a9.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `all?'\n/tmp/tmps_ijc1a9.rb:3:in `block in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `each'\n/tmp/tmps_ijc1a9.rb:3:in `select'\n/tmp/tmps_ijc1a9.rb:3:in `divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:9:in `call'\n/tmp/tmps_ijc1a9.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00112883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n885.87 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmplyycq1gn\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmplyycq1gn.rb:3:in `%'\n/tmp/tmplyycq1gn.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `all?'\n/tmp/tmplyycq1gn.rb:3:in `block in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `each'\n/tmp/tmplyycq1gn.rb:3:in `select'\n/tmp/tmplyycq1gn.rb:3:in `divisible_by_digits'\n/tmp/tmplyycq1gn.rb:9:in `call'\n/tmp/tmplyycq1gn.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001225445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n816.03 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.split('').map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp3724ea12\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp3724ea12.rb:3:in `%'\n/tmp/tmp3724ea12.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp3724ea12.rb:3:in `all?'\n/tmp/tmp3724ea12.rb:3:in `block in divisible_by_digits'\n/tmp/tmp3724ea12.rb:3:in `each'\n/tmp/tmp3724ea12.rb:3:in `select'\n/tmp/tmp3724ea12.rb:3:in `divisible_by_digits'\n/tmp/tmp3724ea12.rb:9:in `call'\n/tmp/tmp3724ea12.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164973 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.39 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmp2ylqxbub\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp2ylqxbub.rb:3:in `%'\n/tmp/tmp2ylqxbub.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:3:in `all?'\n/tmp/tmp2ylqxbub.rb:3:in `block in divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:3:in `each'\n/tmp/tmp2ylqxbub.rb:3:in `select'\n/tmp/tmp2ylqxbub.rb:3:in `divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:9:in `call'\n/tmp/tmp2ylqxbub.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001214141 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n823.63 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmplyycq1gn\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmplyycq1gn.rb:3:in `%'\n/tmp/tmplyycq1gn.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `all?'\n/tmp/tmplyycq1gn.rb:3:in `block in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `each'\n/tmp/tmplyycq1gn.rb:3:in `select'\n/tmp/tmplyycq1gn.rb:3:in `divisible_by_digits'\n/tmp/tmplyycq1gn.rb:9:in `call'\n/tmp/tmplyycq1gn.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001225445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n816.03 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.digits.all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp_hgi35sa\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp_hgi35sa.rb:3:in `%'\n/tmp/tmp_hgi35sa.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:3:in `all?'\n/tmp/tmp_hgi35sa.rb:3:in `block in divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:3:in `each'\n/tmp/tmp_hgi35sa.rb:3:in `select'\n/tmp/tmp_hgi35sa.rb:3:in `divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:9:in `call'\n/tmp/tmp_hgi35sa.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155593 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.36 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmps_ijc1a9\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmps_ijc1a9.rb:3:in `%'\n/tmp/tmps_ijc1a9.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `all?'\n/tmp/tmps_ijc1a9.rb:3:in `block in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `each'\n/tmp/tmps_ijc1a9.rb:3:in `select'\n/tmp/tmps_ijc1a9.rb:3:in `divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:9:in `call'\n/tmp/tmps_ijc1a9.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00112883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n885.87 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select {|n| n.to_s.chars.map(&:to_i).all? {|d| n % d == 0}}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmpmokift40\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpmokift40.rb:3:in `%'\n/tmp/tmpmokift40.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpmokift40.rb:3:in `all?'\n/tmp/tmpmokift40.rb:3:in `block in divisible_by_digits'\n/tmp/tmpmokift40.rb:3:in `each'\n/tmp/tmpmokift40.rb:3:in `select'\n/tmp/tmpmokift40.rb:3:in `divisible_by_digits'\n/tmp/tmpmokift40.rb:9:in `call'\n/tmp/tmpmokift40.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001230503 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n812.68 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmplyycq1gn\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmplyycq1gn.rb:3:in `%'\n/tmp/tmplyycq1gn.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `all?'\n/tmp/tmplyycq1gn.rb:3:in `block in divisible_by_digits'\n/tmp/tmplyycq1gn.rb:3:in `each'\n/tmp/tmplyycq1gn.rb:3:in `select'\n/tmp/tmplyycq1gn.rb:3:in `divisible_by_digits'\n/tmp/tmplyycq1gn.rb:9:in `call'\n/tmp/tmplyycq1gn.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001225445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n816.03 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmps_ijc1a9\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmps_ijc1a9.rb:3:in `%'\n/tmp/tmps_ijc1a9.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `all?'\n/tmp/tmps_ijc1a9.rb:3:in `block in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `each'\n/tmp/tmps_ijc1a9.rb:3:in `select'\n/tmp/tmps_ijc1a9.rb:3:in `divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:9:in `call'\n/tmp/tmps_ijc1a9.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00112883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n885.87 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.digits.all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp_hgi35sa\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp_hgi35sa.rb:3:in `%'\n/tmp/tmp_hgi35sa.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:3:in `all?'\n/tmp/tmp_hgi35sa.rb:3:in `block in divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:3:in `each'\n/tmp/tmp_hgi35sa.rb:3:in `select'\n/tmp/tmp_hgi35sa.rb:3:in `divisible_by_digits'\n/tmp/tmp_hgi35sa.rb:9:in `call'\n/tmp/tmp_hgi35sa.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155593 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.36 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmp2ylqxbub\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp2ylqxbub.rb:3:in `%'\n/tmp/tmp2ylqxbub.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:3:in `all?'\n/tmp/tmp2ylqxbub.rb:3:in `block in divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:3:in `each'\n/tmp/tmp2ylqxbub.rb:3:in `select'\n/tmp/tmp2ylqxbub.rb:3:in `divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:9:in `call'\n/tmp/tmp2ylqxbub.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001214141 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n823.63 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select {|n| n.to_s.split('').map(&:to_i).all? {|d| n % d == 0}}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmpckummisx\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpckummisx.rb:3:in `%'\n/tmp/tmpckummisx.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpckummisx.rb:3:in `all?'\n/tmp/tmpckummisx.rb:3:in `block in divisible_by_digits'\n/tmp/tmpckummisx.rb:3:in `each'\n/tmp/tmpckummisx.rb:3:in `select'\n/tmp/tmpckummisx.rb:3:in `divisible_by_digits'\n/tmp/tmpckummisx.rb:9:in `call'\n/tmp/tmpckummisx.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001246985 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n801.93 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmp2ylqxbub\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp2ylqxbub.rb:3:in `%'\n/tmp/tmp2ylqxbub.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:3:in `all?'\n/tmp/tmp2ylqxbub.rb:3:in `block in divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:3:in `each'\n/tmp/tmp2ylqxbub.rb:3:in `select'\n/tmp/tmp2ylqxbub.rb:3:in `divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:9:in `call'\n/tmp/tmp2ylqxbub.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001214141 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n823.63 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpaw7m53s_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpaw7m53s_.rb:3:in `%'\n/tmp/tmpaw7m53s_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `all?'\n/tmp/tmpaw7m53s_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:3:in `each'\n/tmp/tmpaw7m53s_.rb:3:in `select'\n/tmp/tmpaw7m53s_.rb:3:in `divisible_by_digits'\n/tmp/tmpaw7m53s_.rb:9:in `call'\n/tmp/tmpaw7m53s_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001162932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n859.90 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmp2ylqxbub\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp2ylqxbub.rb:3:in `%'\n/tmp/tmp2ylqxbub.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:3:in `all?'\n/tmp/tmp2ylqxbub.rb:3:in `block in divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:3:in `each'\n/tmp/tmp2ylqxbub.rb:3:in `select'\n/tmp/tmp2ylqxbub.rb:3:in `divisible_by_digits'\n/tmp/tmp2ylqxbub.rb:9:in `call'\n/tmp/tmp2ylqxbub.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001214141 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n823.63 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122598,
      "stdout": "Loaded suite /tmp/tmpndi4sw66\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpndi4sw66.rb:3:in `%'\n/tmp/tmpndi4sw66.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpndi4sw66.rb:3:in `all?'\n/tmp/tmpndi4sw66.rb:3:in `block in divisible_by_digits'\n/tmp/tmpndi4sw66.rb:3:in `each'\n/tmp/tmpndi4sw66.rb:3:in `select'\n/tmp/tmpndi4sw66.rb:3:in `divisible_by_digits'\n/tmp/tmpndi4sw66.rb:9:in `call'\n/tmp/tmpndi4sw66.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00118696 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n842.49 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmps_ijc1a9\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmps_ijc1a9.rb:3:in `%'\n/tmp/tmps_ijc1a9.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `all?'\n/tmp/tmps_ijc1a9.rb:3:in `block in divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:3:in `each'\n/tmp/tmps_ijc1a9.rb:3:in `select'\n/tmp/tmps_ijc1a9.rb:3:in `divisible_by_digits'\n/tmp/tmps_ijc1a9.rb:9:in `call'\n/tmp/tmps_ijc1a9.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00112883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n885.87 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpqp_o6ysu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpqp_o6ysu.rb:3:in `%'\n/tmp/tmpqp_o6ysu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `all?'\n/tmp/tmpqp_o6ysu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:3:in `each'\n/tmp/tmpqp_o6ysu.rb:3:in `select'\n/tmp/tmpqp_o6ysu.rb:3:in `divisible_by_digits'\n/tmp/tmpqp_o6ysu.rb:9:in `call'\n/tmp/tmpqp_o6ysu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001155753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n865.24 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}