{
  "name": "mbpp_282_sub_list",
  "language": "rb",
  "prompt": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  # Write your code here\n  result = []\n  nums1.each_with_index do |num, i|\n    result << num - nums2[i]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0yhoxhvb\nStarted\n.\nFinished in 0.0003767 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2654.63 tests/s, 7963.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map {|x, y| x - y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp735yjsbs\nStarted\n.\nFinished in 0.000478073 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2091.73 tests/s, 6275.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  result = []\n  nums1.each_with_index do |num, idx|\n    result << num - nums2[idx]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8oq70rlo\nStarted\n.\nFinished in 0.000391113 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2556.81 tests/s, 7670.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "Loaded suite /tmp/tmprvt715vp\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmprvt715vp.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006744484 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.27 tests/s, 148.27 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  # your code here\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwkdk17mp\nStarted\n.\nFinished in 0.000381236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2623.05 tests/s, 7869.14 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  # Write your code here\n  result = []\n  nums1.each_with_index do |num, index|\n    result << num - nums2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hk17bb\nStarted\n.\nFinished in 0.000732498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1365.19 tests/s, 4095.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |num1, num2| num1 - num2 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpurin4aw6\nStarted\n.\nFinished in 0.000763439 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1309.86 tests/s, 3929.59 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.map.with_index { |num, i| num - nums2[i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxlx0h7q8\nStarted\n.\nFinished in 0.000673789 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1484.14 tests/s, 4452.43 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "Loaded suite /tmp/tmprvt715vp\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmprvt715vp.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006744484 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.27 tests/s, 148.27 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map {|x, y| x - y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp735yjsbs\nStarted\n.\nFinished in 0.000478073 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2091.73 tests/s, 6275.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  # TODO: Write your code here\n  result = []\n  nums1.each_with_index do |num, index|\n    result << num - nums2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp597t290y\nStarted\n.\nFinished in 0.000756089 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1322.60 tests/s, 3967.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |a, b| a - b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpumbdv19_\nStarted\n.\nFinished in 0.000522849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1912.60 tests/s, 5737.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |a, b| a - b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpumbdv19_\nStarted\n.\nFinished in 0.000522849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1912.60 tests/s, 5737.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  result = []\n  nums1.each_with_index do |num, i|\n    result << num - nums2[i]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz9_pkp46\nStarted\n.\nFinished in 0.000810507 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1233.80 tests/s, 3701.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  result = []\n  nums1.each_with_index do |num, i|\n    result << num - nums2[i]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz9_pkp46\nStarted\n.\nFinished in 0.000810507 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1233.80 tests/s, 3701.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  result = []\n  nums1.each_with_index do |num, idx|\n    result << num - nums2[idx]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8oq70rlo\nStarted\n.\nFinished in 0.000391113 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2556.81 tests/s, 7670.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  result = []\n  nums1.each_with_index do |num, idx|\n    result << num - nums2[idx]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8oq70rlo\nStarted\n.\nFinished in 0.000391113 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2556.81 tests/s, 7670.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  result = []\n  nums1.each_with_index do |num, index|\n    result << num - nums2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps7kd9azj\nStarted\n.\nFinished in 0.000773726 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1292.45 tests/s, 3877.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |a, b| a - b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpumbdv19_\nStarted\n.\nFinished in 0.000522849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1912.60 tests/s, 5737.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  result = []\n  nums1.each_with_index do |num, i|\n    result << num - nums2[i]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz9_pkp46\nStarted\n.\nFinished in 0.000810507 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1233.80 tests/s, 3701.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.map.with_index { |num, index| num - nums2[index] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzg005nj6\nStarted\n.\nFinished in 0.000454805 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2198.74 tests/s, 6596.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |a, b| a - b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpumbdv19_\nStarted\n.\nFinished in 0.000522849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1912.60 tests/s, 5737.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  result = []\n  nums1.each_with_index do |num, index|\n    result << num - nums2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps7kd9azj\nStarted\n.\nFinished in 0.000773726 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1292.45 tests/s, 3877.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "Loaded suite /tmp/tmpnx02gbow\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmpnx02gbow.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009337498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.10 tests/s, 107.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  # Write your code here\n  result = []\n  nums1.each_with_index do |num, index|\n    result << num - nums2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hk17bb\nStarted\n.\nFinished in 0.000732498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1365.19 tests/s, 4095.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  # TODO: implement me\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfzkgk_wm\nStarted\n.\nFinished in 0.000690872 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1447.45 tests/s, 4342.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.map.with_index { |num, i| num - nums2[i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxlx0h7q8\nStarted\n.\nFinished in 0.000673789 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1484.14 tests/s, 4452.43 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "Loaded suite /tmp/tmprvt715vp\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmprvt715vp.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006744484 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.27 tests/s, 148.27 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.map.with_index { |num, i| num - nums2[i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxlx0h7q8\nStarted\n.\nFinished in 0.000673789 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1484.14 tests/s, 4452.43 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  # TODO\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "Loaded suite /tmp/tmpojgm3an0\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmpojgm3an0.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007678241 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.24 tests/s, 130.24 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.map.with_index { |num, i| num - nums2[i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxlx0h7q8\nStarted\n.\nFinished in 0.000673789 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1484.14 tests/s, 4452.43 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "Loaded suite /tmp/tmprvt715vp\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmprvt715vp.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006744484 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.27 tests/s, 148.27 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |a, b| a - b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpumbdv19_\nStarted\n.\nFinished in 0.000522849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1912.60 tests/s, 5737.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  # Write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "Loaded suite /tmp/tmpb2e_ovfu\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmpb2e_ovfu.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009090484 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n110.01 tests/s, 110.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  # TODO: implement me\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfzkgk_wm\nStarted\n.\nFinished in 0.000690872 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1447.45 tests/s, 4342.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  # Write your code here\n  result = []\n  nums1.each_with_index do |num, index|\n    result << num - nums2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hk17bb\nStarted\n.\nFinished in 0.000732498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1365.19 tests/s, 4095.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  # TODO: implement me\n  nums1.zip(nums2).map { |x,y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp96zkl0qa\nStarted\n.\nFinished in 0.000552923 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1808.57 tests/s, 5425.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  result = []\n  nums1.each_with_index do |num, idx|\n    result << num - nums2[idx]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8oq70rlo\nStarted\n.\nFinished in 0.000391113 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2556.81 tests/s, 7670.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  if nums1.length != nums2.length\n    return \"The arrays are not the same length\"\n  end\n  result = []\n  for i in 0..nums1.length - 1\n    result.push(nums1[i] - nums2[i])\n  end\n  return result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpurvrosop\nStarted\n.\nFinished in 0.000553645 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1806.21 tests/s, 5418.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  # Write your code here\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwst7rv_s\nStarted\n.\nFinished in 0.000681233 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1467.93 tests/s, 4403.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.map.with_index { |num, i| num - nums2[i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxlx0h7q8\nStarted\n.\nFinished in 0.000673789 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1484.14 tests/s, 4452.43 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "Loaded suite /tmp/tmprvt715vp\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmprvt715vp.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006744484 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.27 tests/s, 148.27 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.map.with_index { |num, i| num - nums2[i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxlx0h7q8\nStarted\n.\nFinished in 0.000673789 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1484.14 tests/s, 4452.43 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  result = []\n  nums1.each_with_index do |num, idx|\n    result << num - nums2[idx]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8oq70rlo\nStarted\n.\nFinished in 0.000391113 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2556.81 tests/s, 7670.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map {|x, y| x - y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp735yjsbs\nStarted\n.\nFinished in 0.000478073 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2091.73 tests/s, 6275.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  # nums1.zip(nums2).map { |x, y| x - y }\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzq2rxewr\nStarted\n.\nFinished in 0.00089386 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1118.74 tests/s, 3356.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  result = []\n  nums1.each_with_index do |num, i|\n    result << num - nums2[i]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz9_pkp46\nStarted\n.\nFinished in 0.000810507 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1233.80 tests/s, 3701.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  result = []\n  nums1.each_with_index do |num, i|\n    result << num - nums2[i]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz9_pkp46\nStarted\n.\nFinished in 0.000810507 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1233.80 tests/s, 3701.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map {|x, y| x - y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp735yjsbs\nStarted\n.\nFinished in 0.000478073 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2091.73 tests/s, 6275.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |a, b| a - b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpumbdv19_\nStarted\n.\nFinished in 0.000522849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1912.60 tests/s, 5737.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  result = []\n  nums1.each_with_index do |num, i|\n    result << num - nums2[i]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz9_pkp46\nStarted\n.\nFinished in 0.000810507 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1233.80 tests/s, 3701.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  # Write your code here\n  result = []\n  nums1.each_with_index do |num, index|\n    result << num - nums2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hk17bb\nStarted\n.\nFinished in 0.000732498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1365.19 tests/s, 4095.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  # Write your code here.\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_m_3tvnk\nStarted\n.\nFinished in 0.000467942 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2137.02 tests/s, 6411.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  # TODO: Implement this function\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9ltrf7f4\nStarted\n.\nFinished in 0.000756728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1321.48 tests/s, 3964.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "Loaded suite /tmp/tmprvt715vp\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmprvt715vp.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006744484 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.27 tests/s, 148.27 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.map.with_index { |num, i| num - nums2[i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxlx0h7q8\nStarted\n.\nFinished in 0.000673789 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1484.14 tests/s, 4452.43 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  result = []\n  nums1.each_with_index do |num, index|\n    result << num - nums2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps7kd9azj\nStarted\n.\nFinished in 0.000773726 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1292.45 tests/s, 3877.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fy13g_y\nStarted\n.\nFinished in 0.000431076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.78 tests/s, 6959.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n  # TODO: Implement me!\n  nums1.map.with_index { |num, i| num - nums2[i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptf__t1bw\nStarted\n.\nFinished in 0.000743995 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1344.10 tests/s, 4032.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}