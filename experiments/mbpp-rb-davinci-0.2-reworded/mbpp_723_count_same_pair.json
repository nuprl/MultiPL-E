{
  "name": "mbpp_723_count_same_pair",
  "language": "rb",
  "prompt": "# The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\ndef count_same_pair(nums1, nums2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_723_count_same_pair.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_same_pair\n    candidate = method(:count_same_pair)\n    assert_equal(4, candidate.call([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\n    assert_equal(11, candidate.call([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]))\n    assert_equal(1, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]))\n    assert_equal(3, candidate.call([0, 1, 1, 2], [0, 1, 2, 2]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  count = 0\n  nums1.each_with_index do |num, idx|\n    count += 1 if num == nums2[idx]\n  end\n  count\nend",
    "  count = 0\n  nums1.each_with_index do |num, idx|\n    count += 1 if num == nums2[idx]\n  end\n  count\nend",
    "  count = 0\n  nums1.each_with_index do |num, idx|\n    count += 1 if num == nums2[idx]\n  end\n  count\nend",
    "  count = 0\n  nums1.each_with_index do |num, index|\n    count += 1 if num == nums2[index]\n  end\n  count\nend",
    "  count = 0\n  nums1.each_with_index do |num, idx|\n    count += 1 if num == nums2[idx]\n  end\n  count\nend",
    "  count = 0\n  nums1.each_with_index do |num, idx|\n    count += 1 if num == nums2[idx]\n  end\n  count\nend",
    "  count = 0\n  nums1.each_with_index do |num, i|\n    count += 1 if num == nums2[i]\n  end\n  count\nend",
    "  count = 0\n  nums1.each_with_index do |num, idx|\n    count += 1 if num == nums2[idx]\n  end\n  count\nend",
    "  count = 0\n  nums1.each_with_index do |num, i|\n    count += 1 if num == nums2[i]\n  end\n  count\nend",
    "  count = 0\n  nums1.each_with_index do |num, i|\n    count += 1 if num == nums2[i]\n  end\n  count\nend",
    "  count = 0\n  nums1.each_with_index do |num, i|\n    count += 1 if num == nums2[i]\n  end\n  count\nend",
    "  count = 0\n  nums1.each_with_index do |num, idx|\n    count += 1 if num == nums2[idx]\n  end\n  count\nend",
    "  count = 0\n  nums1.each_with_index do |num, index|\n    count += 1 if num == nums2[index]\n  end\n  count\nend",
    "  count = 0\n  nums1.each_with_index do |num, i|\n    count += 1 if num == nums2[i]\n  end\n  count\nend",
    "  count = 0\n  nums1.each_with_index do |num, i|\n    count += 1 if num == nums2[i]\n  end\n  count\nend",
    "  count = 0\n  nums1.each_with_index do |num, i|\n    count += 1 if num == nums2[i]\n  end\n  count\nend",
    "  count = 0\n  nums1.each_with_index do |num, idx|\n    count += 1 if num == nums2[idx]\n  end\n  count\nend",
    "  count = 0\n  nums1.each_with_index do |num, index|\n    count += 1 if num == nums2[index]\n  end\n  count\nend",
    "  count = 0\n  nums1.each_with_index do |num, i|\n    count += 1 if num == nums2[i]\n  end\n  count\nend",
    "  count = 0\n  nums1.each_with_index do |num, index|\n    count += 1 if num == nums2[index]\n  end\n  count\nend"
  ]
}