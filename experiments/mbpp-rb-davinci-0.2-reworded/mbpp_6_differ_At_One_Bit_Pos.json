{
  "name": "mbpp_6_differ_At_One_Bit_Pos",
  "language": "rb",
  "prompt": "# Write a rbthon function to check whether the two numbers differ at one bit position only or not.\ndef differ_At_One_Bit_Pos(a, b)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_differ_At_One_Bit_Pos\n    candidate = method(:differ_At_One_Bit_Pos)\n    assert_equal(true, candidate.call(13, 9))\n    assert_equal(false, candidate.call(15, 8))\n    assert_equal(false, candidate.call(2, 4))\n    assert_equal(true, candidate.call(2, 3))\n    assert_equal(true, candidate.call(5, 1))\n    assert_equal(true, candidate.call(1, 5))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  count = 0\n  while c > 0\n    count += 1 if c & 1 == 1\n    c >>= 1\n  end\n  count == 1\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes, the two numbers differ at one bit position only\"\n  else\n    puts \"No, the two numbers differ at more than one bit position\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  if a == b\n    puts \"Both numbers are same\"\n  else\n    c = a ^ b\n    puts \"c = #{c}\"\n    if c & (c - 1) == 0\n      puts \"Numbers differ at one bit position only\"\n    else\n      puts \"Numbers differ at more than one bit position\"\n    end\n  end\nend",
    "  c = a ^ b\n  c = c - 1\n  d = c & a\n  if d == 0\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts 'Yes'\n  else\n    puts 'No'\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  c = c - 1\n  d = c & a\n  if d == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  count = 0\n  while c > 0\n    count += 1 if c & 1 == 1\n    c >>= 1\n  end\n  count == 1\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts 'true'\n  else\n    puts 'false'\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  c & (c - 1) == 0\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if (c & (c - 1)) == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  c = c - 1\n  d = c & a\n  if d == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  puts c\n  if c.to_s(2).count('1') == 1\n    puts 'True'\n  else\n    puts 'False'\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count(\"1\") == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  count = 0\n  while c > 0\n    count += 1 if c & 1 == 1\n    c >>= 1\n  end\n  count == 1\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Differ at one bit position only\"\n  else\n    puts \"Differ at more than one bit position\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  return (a ^ b) && !((a ^ b) & ((a ^ b) - 1))\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  if (a ^ b) == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c & (c - 1) == 0\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  c = c & (c - 1)\n  if c == 0\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  count = 0\n  while c > 0\n    c = c & (c - 1)\n    count += 1\n  end\n  count == 1\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"yes\"\n  else\n    puts \"no\"\n  end\nend",
    "  if (a ^ b) == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  c = c & (c - 1)\n  if c == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c == 0\n    puts \"No\"\n  else\n    puts \"Yes\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts 'Yes'\n  else\n    puts 'No'\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts 'Yes'\n  else\n    puts 'No'\n  end\nend",
    "  c = a ^ b\n  if c == 1\n    puts \"true\"\n  else\n    puts \"false\"\n  end\nend",
    "  c = a ^ b\n  count = 0\n  while c > 0\n    count += 1 if c & 1 == 1\n    c >>= 1\n  end\n  count == 1\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  c = c & (c - 1)\n  if c == 0\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c & (c - 1) == 0\n    puts \"Differ at one bit position only\"\n  else\n    puts \"Differ at more than one bit position\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  puts c\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c == 1\n    puts \"true\"\n  else\n    puts \"false\"\n  end\nend",
    "  c = a ^ b\n  count = 0\n  while c > 0\n    count += 1\n    c = c & (c - 1)\n  end\n  count == 1\nend",
    "  c = a ^ b\n  if c == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  c = c & (c - 1)\n  if c == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  if a == b\n    puts \"Both numbers are same\"\n  else\n    c = a ^ b\n    if c & (c - 1) == 0\n      puts \"Both numbers differ at one bit position only\"\n    else\n      puts \"Both numbers differ at more than one bit position\"\n    end\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  c = c & (c - 1)\n  return c == 0\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  c = c & (c - 1)\n  if c == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  x = a ^ b\n  return x & (x - 1) == 0\nend\nputs differ_At_One_Bit_Pos(10, 11)\nputs differ_At_One_Bit_Pos(10, 12)",
    "  c = a ^ b\n  if c == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count(\"1\") == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts 'Yes'\n  else\n    puts 'No'\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  count = 0\n  while c > 0\n    count += 1 if c & 1 == 1\n    c >>= 1\n  end\n  count == 1\nend",
    "  c = a ^ b\n  if c & (c - 1) == 0\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  c = c & (c - 1)\n  if c == 0\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  c & (c - 1) == 0\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts 'True'\n  else\n    puts 'False'\n  end\nend",
    "  c = a ^ b\n  count = 0\n  while c > 0\n    count += 1\n    c = c & (c - 1)\n  end\n  return count == 1\nend",
    "  c = a ^ b\n  if c == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  c & (c - 1) == 0\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"true\"\n  else\n    puts \"false\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count(\"1\") == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  count = 0\n  while c > 0\n    c = c & (c - 1)\n    count += 1\n  end\n  if count == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  diff = a ^ b\n  if diff == 1\n    puts \"Differ at one bit position only\"\n  else\n    puts \"Differ at more than one bit position\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts 'Yes'\n  else\n    puts 'No'\n  end\nend",
    "  c = a ^ b\n  count = 0\n  while c > 0\n    count += 1 if c & 1 == 1\n    c >>= 1\n  end\n  count == 1\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if (c & (c - 1)) == 0\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  if (a ^ b) == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  c = c & (c - 1)\n  if c == 0\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  c = c & (c - 1)\n  if c == 0\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count(\"1\") == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  if (a ^ b) == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  count = 0\n  while c > 0\n    count += 1\n    c = c & (c - 1)\n  end\n  count == 1\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  c = c & (c - 1)\n  if c == 0\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  c = c - 1\n  c = c & a\n  if c == 0\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  c = c & (c - 1)\n  if c == 0\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  c = c & (c - 1)\n  if c == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts 'Yes'\n  else\n    puts 'No'\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts 'Yes'\n  else\n    puts 'No'\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  count = 0\n  while c > 0\n    count += 1\n    c = c & (c - 1)\n  end\n  count == 1\nend",
    "  c = a ^ b\n  if c == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  count = 0\n  while c > 0\n    count += 1\n    c = c & (c - 1)\n  end\n  count == 1\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  c & (c - 1) == 0\nend",
    "  c = a ^ b\n  if c.to_s(2).count(\"1\") == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  c = c & (c - 1)\n  if c == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count(\"1\") == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  puts c\n  if c.to_s(2).count('1') == 1\n    puts \"yes\"\n  else\n    puts \"no\"\n  end\nend",
    "  x = a ^ b\n  return (x & (x - 1)) == 0\nend",
    "  c = a ^ b\n  count = 0\n  while c > 0\n    count += 1 if c & 1 == 1\n    c >>= 1\n  end\n  count == 1\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c & (c - 1) == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts 'Yes'\n  else\n    puts 'No'\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c == 1\n    puts \"Differ at one bit position\"\n  else\n    puts \"Differ at more than one bit position\"\n  end\nend",
    "  c = a ^ b\n  if c == 0\n    puts \"Both numbers are equal\"\n  elsif c & (c - 1) == 0\n    puts \"Both numbers differ at one bit position only\"\n  else\n    puts \"Both numbers differ at more than one bit position\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  count = 0\n  while c > 0\n    count += 1 if c & 1 == 1\n    c >>= 1\n  end\n  count == 1\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"The two numbers differ at one bit position only\"\n  else\n    puts \"The two numbers differ at more than one bit position\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  c = c & (c - 1)\n  if c == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  count = 0\n  while c > 0\n    count += 1 if c & 1 == 1\n    c >>= 1\n  end\n  count == 1\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  c = c - 1\n  c = c & a\n  if c == 0\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"true\"\n  else\n    puts \"false\"\n  end\nend",
    "  c = a ^ b\n  c = c & (c - 1)\n  if c == 0\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  return ((c & (c - 1)) == 0)\nend",
    "  c = a ^ b\n  count = 0\n  while c > 0\n    count += 1 if c & 1 == 1\n    c >>= 1\n  end\n  count == 1\nend",
    "  c = a ^ b\n  count = 0\n  while c > 0\n    count += 1 if c & 1 == 1\n    c >>= 1\n  end\n  count == 1\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts 'Yes'\n  else\n    puts 'No'\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts 'Yes'\n  else\n    puts 'No'\n  end\nend",
    "  c = a ^ b\n  c = c & (c - 1)\n  if c == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  count = 0\n  while c > 0\n    count += 1 if c & 1 == 1\n    c >>= 1\n  end\n  count == 1\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  count = 0\n  while c > 0\n    count += 1 if c & 1 == 1\n    c >>= 1\n  end\n  count == 1\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  count = 0\n  while c > 0\n    count += 1 if c & 1 == 1\n    c >>= 1\n  end\n  count == 1\nend"
  ]
}