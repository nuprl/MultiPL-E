{
  "name": "mbpp_119_search",
  "language": "rb",
  "prompt": "# Write a rbthon function to find the element that appears only once in a sorted array.\ndef search(arr)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_search\n    candidate = method(:search)\n    assert_equal(3, candidate.call([1, 1, 2, 2, 3]))\n    assert_equal(8, candidate.call([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]))\n    assert_equal(1, candidate.call([1, 2, 2, 3, 3, 4, 4]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  arr.each_with_index do |e, i|\n    if arr[i] != arr[i + 1] && arr[i] != arr[i - 1]\n      return arr[i]\n    end\n  end\nend",
    "  arr.each_with_index do |val, index|\n    if arr[index] != arr[index-1] && arr[index] != arr[index+1]\n      return arr[index]\n    end\n  end\nend",
    "  arr.each_with_index do |x, i|\n    return x if arr[i] != arr[i+1] && arr[i] != arr[i-1]\n  end\nend",
    "  arr.each_with_index do |val, index|\n    if index == 0\n      return val if val != arr[index + 1]\n    elsif index == arr.length - 1\n      return val if val != arr[index - 1]\n    else\n      return val if val != arr[index - 1] && val != arr[index + 1]\n    end\n  end\nend",
    "  arr.each_with_index do |e, i|\n    if arr[i] != arr[i+1] && arr[i] != arr[i-1]\n      return arr[i]\n    end\n  end\nend",
    "  arr.each_with_index do |e, i|\n    if arr[i] != arr[i+1] && arr[i] != arr[i-1]\n      return arr[i]\n    end\n  end\nend",
    "  arr.each_with_index do |e, i|\n    return e if arr[i] != arr[i+1] && arr[i] != arr[i-1]\n  end\nend",
    "  arr.each_with_index do |x,i|\n    if i == 0\n      if arr[i] != arr[i+1]\n        return arr[i]\n      end\n    elsif i == arr.length-1\n      if arr[i] != arr[i-1]\n        return arr[i]\n      end\n    else\n      if arr[i] != arr[i-1] && arr[i] != arr[i+1]\n        return arr[i]\n      end\n    end\n  end\nend",
    "  arr.each_with_index do |e, i|\n    if e != arr[i-1] && e != arr[i+1]\n      return e\n    end\n  end\nend",
    "  arr.each_with_index do |num, index|\n    if arr[index] != arr[index + 1] && arr[index] != arr[index - 1]\n      return arr[index]\n    end\n  end\nend",
    "  arr.each_with_index do |val, index|\n    if arr[index] != arr[index+1]\n      return val\n    end\n  end\nend",
    "  arr.each_with_index do |e, i|\n    if i == 0\n      return e if arr[i+1] != e\n    elsif i == arr.length - 1\n      return e if arr[i-1] != e\n    else\n      return e if arr[i-1] != e && arr[i+1] != e\n    end\n  end\nend",
    "  arr.each do |i|\n    if arr.count(i) == 1\n      return i\n    end\n  end\nend",
    "  arr.each_with_index do |e, i|\n    return e if arr[i] != arr[i-1] && arr[i] != arr[i+1]\n  end\nend",
    "  arr.each_with_index do |x, i|\n    if arr[i] != arr[i+1]\n      return arr[i]\n    end\n  end\nend",
    "  arr.each do |i|\n    if arr.count(i) == 1\n      return i\n    end\n  end\nend",
    "  arr.each_with_index do |n, i|\n    if arr[i] != arr[i+1]\n      return arr[i]\n    end\n  end\nend",
    "  arr.each_with_index do |num, index|\n    if index == 0\n      return num if arr[index] != arr[index + 1]\n    elsif index == arr.length - 1\n      return num if arr[index] != arr[index - 1]\n    else\n      return num if arr[index] != arr[index + 1] && arr[index] != arr[index - 1]\n    end\n  end\nend",
    "  arr.each_with_index do |e, i|\n    if arr[i] != arr[i+1] && arr[i] != arr[i-1]\n      return arr[i]\n    end\n  end\nend",
    "  arr.each_with_index do |item, index|\n    if index == 0\n      if arr[index] != arr[index + 1]\n        return item\n      end\n    elsif index == arr.length - 1\n      if arr[index] != arr[index - 1]\n        return item\n      end\n    else\n      if arr[index] != arr[index - 1] && arr[index] != arr[index + 1]\n        return item\n      end\n    end\n  end\nend"
  ]
}