{
  "name": "mbpp_408_k_smallest_pairs",
  "language": "rb",
  "prompt": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4qffgt2k\nStarted\n.\nFinished in 0.000424557 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2355.40 tests/s, 7066.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcoc88hv3\nStarted\n.\nFinished in 0.000429288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2329.44 tests/s, 6988.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxicr2zli\nStarted\n.\nFinished in 0.00042987 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2326.28 tests/s, 6978.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  nums1.sort!\n  nums2.sort!\n  result = []\n  i = 0\n  j = 0\n  while i < nums1.length && j < nums2.length && k > 0\n    if nums1[i] < nums2[j]\n      result << [nums1[i], nums2[j]]\n      i += 1\n    else\n      result << [nums1[i], nums2[j]]\n      j += 1\n    end\n    k -= 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "Loaded suite /tmp/tmp8b01x5v5\nStarted\nF\n===============================================================================\nFailure: test_k_smallest_pairs(TestHumanEval)\n/tmp/tmp8b01x5v5.rb:24:in `test_k_smallest_pairs'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_k_smallest_pairs\n     23:     candidate = method(:k_smallest_pairs)\n  => 24:     assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n     25:     assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n     26:     assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n     27:   end\n<[[1, 2], [1, 4]]> expected but was\n<[[1, 2], [3, 2]]>\n\ndiff:\n? [[1, 2], [1, 4]]\n?           3  2  \n?           ?  ?  \n===============================================================================\n\nFinished in 0.009931953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n100.69 tests/s, 100.69 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair[0] + pair[1] }\n  result[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz7cltlxr\nStarted\n.\nFinished in 0.0004305 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2322.88 tests/s, 6968.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5p5_eblq\nStarted\n.\nFinished in 0.000436506 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2290.92 tests/s, 6872.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4qffgt2k\nStarted\n.\nFinished in 0.000424557 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2355.40 tests/s, 7066.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuq8xsbj2\nStarted\n.\nFinished in 0.000441624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2264.37 tests/s, 6793.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      res << [num1, num2]\n    end\n  end\n  res.sort_by! { |pair| pair.sum }\n  res.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphddvwkjf\nStarted\n.\nFinished in 0.000437223 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2287.16 tests/s, 6861.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5p5_eblq\nStarted\n.\nFinished in 0.000436506 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2290.92 tests/s, 6872.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  nums1.product(nums2).sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9n2adsbp\nStarted\n.\nFinished in 0.00091947 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1087.58 tests/s, 3262.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpioqd4pq3\nStarted\n.\nFinished in 0.000437276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2286.89 tests/s, 6860.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpioqd4pq3\nStarted\n.\nFinished in 0.000437276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2286.89 tests/s, 6860.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.reduce(:+) }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcr4utrwa\nStarted\n.\nFinished in 0.000416468 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2401.14 tests/s, 7203.43 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuq8xsbj2\nStarted\n.\nFinished in 0.000441624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2264.37 tests/s, 6793.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.first + pair.last }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjiae1x7l\nStarted\n.\nFinished in 0.000430798 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.27 tests/s, 6963.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcjh9brix\nStarted\n.\nFinished in 0.000424512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2355.65 tests/s, 7066.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5n4puwnp\nStarted\n.\nFinished in 0.000423787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2359.68 tests/s, 7079.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcjh9brix\nStarted\n.\nFinished in 0.000424512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2355.65 tests/s, 7066.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  k = [k, nums1.size * nums2.size].min\n  nums1.sort!\n  nums2.sort!\n  result = []\n  i = 0\n  j = 0\n  while result.size < k\n    if nums1[i] + nums2[j] < nums1[i] + nums2[j + 1]\n      result << [nums1[i], nums2[j]]\n      j += 1\n    else\n      result << [nums1[i], nums2[j + 1]]\n      i += 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "Loaded suite /tmp/tmpfnqt7yae\nStarted\nE\n===============================================================================\nError: test_k_smallest_pairs(TestHumanEval): TypeError: nil can't be coerced into Integer\n/tmp/tmpfnqt7yae.rb:11:in `+'\n/tmp/tmpfnqt7yae.rb:11:in `k_smallest_pairs'\n/tmp/tmpfnqt7yae.rb:27:in `call'\n/tmp/tmpfnqt7yae.rb:27:in `test_k_smallest_pairs'\n     24:     candidate = method(:k_smallest_pairs)\n     25:     assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n     26:     assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n  => 27:     assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n     28:   end\n     29: end\n===============================================================================\n\nFinished in 0.00119624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n835.95 tests/s, 1671.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.first + pair.last }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpiocese7t\nStarted\n.\nFinished in 0.000454847 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2198.54 tests/s, 6595.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpioqd4pq3\nStarted\n.\nFinished in 0.000437276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2286.89 tests/s, 6860.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxicr2zli\nStarted\n.\nFinished in 0.00042987 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2326.28 tests/s, 6978.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      res << [num1, num2]\n    end\n  end\n  res.sort_by! { |pair| pair[0] + pair[1] }\n  res[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpo2_ooneq\nStarted\n.\nFinished in 0.000447885 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2232.72 tests/s, 6698.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxicr2zli\nStarted\n.\nFinished in 0.00042987 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2326.28 tests/s, 6978.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  queue = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      queue << [num1, num2]\n      queue.sort_by! { |pair| pair[0] + pair[1] }\n      queue.pop if queue.size > k\n    end\n  end\n  queue\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph3nv3std\nStarted\n.\nFinished in 0.001106411 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n903.82 tests/s, 2711.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.sum }\n  result[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyhgxzppf\nStarted\n.\nFinished in 0.000432725 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2310.94 tests/s, 6932.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.sum }\n  result[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyhgxzppf\nStarted\n.\nFinished in 0.000432725 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2310.94 tests/s, 6932.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6tp20zgh\nStarted\n.\nFinished in 0.000465705 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2147.28 tests/s, 6441.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4qffgt2k\nStarted\n.\nFinished in 0.000424557 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2355.40 tests/s, 7066.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxicr2zli\nStarted\n.\nFinished in 0.00042987 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2326.28 tests/s, 6978.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcgb7xm0y\nStarted\n.\nFinished in 0.000478068 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2091.75 tests/s, 6275.26 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  # nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\n  nums1.product(nums2).sort_by { |a, b| a + b }[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpo7hzbxjf\nStarted\n.\nFinished in 0.000458525 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2180.91 tests/s, 6542.72 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpioqd4pq3\nStarted\n.\nFinished in 0.000437276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2286.89 tests/s, 6860.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.inject(:+) }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcrgj97t6\nStarted\n.\nFinished in 0.000458443 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2181.30 tests/s, 6543.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      res << [n1, n2]\n    end\n  end\n  res.sort_by! { |a, b| a + b }\n  res[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphphke8ez\nStarted\n.\nFinished in 0.000477569 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2093.94 tests/s, 6281.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn159sxa4\nStarted\n.\nFinished in 0.000480121 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2082.81 tests/s, 6248.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair[0] + pair[1] }\n  result[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz7cltlxr\nStarted\n.\nFinished in 0.0004305 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2322.88 tests/s, 6968.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  # return [] if nums1.empty? || nums2.empty?\n  # return nums1.map { |n| [n, nums2[0]] } if nums2.size == 1\n  # return nums2.map { |n| [nums1[0], n] } if nums1.size == 1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122949,
      "stdout": "",
      "stderr": "/tmp/tmpe3yfiamh.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpe3yfiamh.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp96f4yfsy\nStarted\n.\nFinished in 0.000499873 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2000.51 tests/s, 6001.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcjh9brix\nStarted\n.\nFinished in 0.000424512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2355.65 tests/s, 7066.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsagmk0bc\nStarted\n.\nFinished in 0.000515913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1938.31 tests/s, 5814.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4qffgt2k\nStarted\n.\nFinished in 0.000424557 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2355.40 tests/s, 7066.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpioqd4pq3\nStarted\n.\nFinished in 0.000437276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2286.89 tests/s, 6860.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcoc88hv3\nStarted\n.\nFinished in 0.000429288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2329.44 tests/s, 6988.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5p5_eblq\nStarted\n.\nFinished in 0.000436506 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2290.92 tests/s, 6872.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcjh9brix\nStarted\n.\nFinished in 0.000424512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2355.65 tests/s, 7066.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4qffgt2k\nStarted\n.\nFinished in 0.000424557 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2355.40 tests/s, 7066.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcjh9brix\nStarted\n.\nFinished in 0.000424512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2355.65 tests/s, 7066.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      res << [num1, num2]\n    end\n  end\n  res.sort_by! { |pair| pair[0] + pair[1] }\n  res[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpo2_ooneq\nStarted\n.\nFinished in 0.000447885 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2232.72 tests/s, 6698.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.sum }\n  result[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyhgxzppf\nStarted\n.\nFinished in 0.000432725 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2310.94 tests/s, 6932.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5p5_eblq\nStarted\n.\nFinished in 0.000436506 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2290.92 tests/s, 6872.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.sum }\n  result[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyhgxzppf\nStarted\n.\nFinished in 0.000432725 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2310.94 tests/s, 6932.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5p5_eblq\nStarted\n.\nFinished in 0.000436506 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2290.92 tests/s, 6872.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuq8xsbj2\nStarted\n.\nFinished in 0.000441624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2264.37 tests/s, 6793.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5n4puwnp\nStarted\n.\nFinished in 0.000423787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2359.68 tests/s, 7079.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprcucugls\nStarted\n.\nFinished in 0.000450482 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2219.84 tests/s, 6659.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.sum }\n  result[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyhgxzppf\nStarted\n.\nFinished in 0.000432725 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2310.94 tests/s, 6932.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.inject(:+) }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcrgj97t6\nStarted\n.\nFinished in 0.000458443 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2181.30 tests/s, 6543.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp96f4yfsy\nStarted\n.\nFinished in 0.000499873 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2000.51 tests/s, 6001.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair[0] + pair[1] }\n  result[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz7cltlxr\nStarted\n.\nFinished in 0.0004305 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2322.88 tests/s, 6968.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprcucugls\nStarted\n.\nFinished in 0.000450482 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2219.84 tests/s, 6659.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.reduce(:+) }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdjpo6gow\nStarted\n.\nFinished in 0.000479732 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2084.50 tests/s, 6253.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  # return [] if nums1.empty? || nums2.empty?\n  #\n  # pairs = []\n  # nums1.each do |num1|\n  #   nums2.each do |num2|\n  #     pairs << [num1, num2]\n  #   end\n  # end\n  #\n  # pairs.sort_by { |pair| pair.sum }.take(k)\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122949,
      "stdout": "",
      "stderr": "/tmp/tmp19gjx9lo.rb:14: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp19gjx9lo.rb:21: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair[0] + pair[1] }\n  result[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz7cltlxr\nStarted\n.\nFinished in 0.0004305 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2322.88 tests/s, 6968.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.first + pair.last }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsskccji_\nStarted\n.\nFinished in 0.000440677 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2269.24 tests/s, 6807.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1vv9_ib6\nStarted\n.\nFinished in 0.000421316 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2373.52 tests/s, 7120.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxicr2zli\nStarted\n.\nFinished in 0.00042987 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2326.28 tests/s, 6978.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxicr2zli\nStarted\n.\nFinished in 0.00042987 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2326.28 tests/s, 6978.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuq8xsbj2\nStarted\n.\nFinished in 0.000441624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2264.37 tests/s, 6793.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.reduce(:+) }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdjpo6gow\nStarted\n.\nFinished in 0.000479732 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2084.50 tests/s, 6253.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      result << [n1, n2]\n    end\n  end\n  result.sort_by! { |pair| pair[0] + pair[1] }\n  result.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprcw0vhoy\nStarted\n.\nFinished in 0.000449727 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2223.57 tests/s, 6670.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5p5_eblq\nStarted\n.\nFinished in 0.000436506 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2290.92 tests/s, 6872.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  nums1.sort!\n  nums2.sort!\n  result = []\n  i = 0\n  j = 0\n  while i < nums1.length && j < nums2.length && k > 0\n    if nums1[i] + nums2[j] < nums1[i+1] + nums2[j]\n      result << [nums1[i], nums2[j]]\n      j += 1\n    else\n      result << [nums1[i], nums2[j]]\n      i += 1\n    end\n    k -= 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "Loaded suite /tmp/tmpt5oy5goy\nStarted\nF\n===============================================================================\nFailure: test_k_smallest_pairs(TestHumanEval)\n/tmp/tmpt5oy5goy.rb:26:in `test_k_smallest_pairs'\n     23:     candidate = method(:k_smallest_pairs)\n     24:     assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n     25:     assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n  => 26:     assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n     27:   end\n     28: end\n<[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]> expected but was\n<[[1, 2], [1, 4], [1, 6]]>\n\ndiff:\n? [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n===============================================================================\n\nFinished in 0.013269604 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n75.36 tests/s, 226.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4qffgt2k\nStarted\n.\nFinished in 0.000424557 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2355.40 tests/s, 7066.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.first + pair.last }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph8n0bha4\nStarted\n.\nFinished in 0.000436512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2290.89 tests/s, 6872.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  nums1.product(nums2).sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9n2adsbp\nStarted\n.\nFinished in 0.00091947 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1087.58 tests/s, 3262.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4qffgt2k\nStarted\n.\nFinished in 0.000424557 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2355.40 tests/s, 7066.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpioqd4pq3\nStarted\n.\nFinished in 0.000437276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2286.89 tests/s, 6860.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4qffgt2k\nStarted\n.\nFinished in 0.000424557 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2355.40 tests/s, 7066.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcoc88hv3\nStarted\n.\nFinished in 0.000429288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2329.44 tests/s, 6988.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpioqd4pq3\nStarted\n.\nFinished in 0.000437276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2286.89 tests/s, 6860.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair[0] + pair[1] }\n  result[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz7cltlxr\nStarted\n.\nFinished in 0.0004305 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2322.88 tests/s, 6968.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpioqd4pq3\nStarted\n.\nFinished in 0.000437276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2286.89 tests/s, 6860.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsagmk0bc\nStarted\n.\nFinished in 0.000515913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1938.31 tests/s, 5814.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5p5_eblq\nStarted\n.\nFinished in 0.000436506 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2290.92 tests/s, 6872.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5n4puwnp\nStarted\n.\nFinished in 0.000423787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2359.68 tests/s, 7079.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122949,
      "stdout": "",
      "stderr": "/tmp/tmpbmq3arct.rb:10: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpbmq3arct.rb:17: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.first + pair.last }\n  result.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpodwvto4u\nStarted\n.\nFinished in 0.000450959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2217.50 tests/s, 6652.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcgb7xm0y\nStarted\n.\nFinished in 0.000478068 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2091.75 tests/s, 6275.26 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.first + pair.last }\n  result[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpisakbtbl\nStarted\n.\nFinished in 0.000493066 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.13 tests/s, 6084.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp96f4yfsy\nStarted\n.\nFinished in 0.000499873 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2000.51 tests/s, 6001.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  arr = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      arr << [n1, n2]\n    end\n  end\n  arr.sort_by { |pair| pair.sum }[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc_th_uxz\nStarted\n.\nFinished in 0.000473026 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2114.05 tests/s, 6342.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuq8xsbj2\nStarted\n.\nFinished in 0.000441624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2264.37 tests/s, 6793.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair[0] + pair[1] }\n  result[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz7cltlxr\nStarted\n.\nFinished in 0.0004305 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2322.88 tests/s, 6968.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn159sxa4\nStarted\n.\nFinished in 0.000480121 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2082.81 tests/s, 6248.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn159sxa4\nStarted\n.\nFinished in 0.000480121 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2082.81 tests/s, 6248.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n    return [] if nums1.empty? || nums2.empty?\n    res = []\n    nums1.each do |n1|\n        nums2.each do |n2|\n            res << [n1, n2]\n        end\n    end\n    res.sort_by! { |pair| pair.sum }\n    res[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0uxn7z2k\nStarted\n.\nFinished in 0.000499047 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2003.82 tests/s, 6011.46 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      res << [n1, n2]\n    end\n  end\n  res.sort_by! { |pair| pair[0] + pair[1] }\n  res[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkzshj4oq\nStarted\n.\nFinished in 0.000455926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2193.34 tests/s, 6580.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.sum }\n  result[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyhgxzppf\nStarted\n.\nFinished in 0.000432725 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2310.94 tests/s, 6932.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair[0] + pair[1] }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvhpgsmim\nStarted\n.\nFinished in 0.000453477 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2205.18 tests/s, 6615.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcjh9brix\nStarted\n.\nFinished in 0.000424512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2355.65 tests/s, 7066.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      result << [n1, n2]\n    end\n  end\n  result.sort_by! { |pair| pair.first + pair.last }\n  result.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmc8kz0_n\nStarted\n.\nFinished in 0.000475872 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2101.41 tests/s, 6304.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4qffgt2k\nStarted\n.\nFinished in 0.000424557 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2355.40 tests/s, 7066.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcjh9brix\nStarted\n.\nFinished in 0.000424512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2355.65 tests/s, 7066.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1vv9_ib6\nStarted\n.\nFinished in 0.000421316 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2373.52 tests/s, 7120.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  nums1.product(nums2).sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9n2adsbp\nStarted\n.\nFinished in 0.00091947 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1087.58 tests/s, 3262.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5n4puwnp\nStarted\n.\nFinished in 0.000423787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2359.68 tests/s, 7079.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.reduce(:+) }[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7k7u4vvu\nStarted\n.\nFinished in 0.000482164 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2073.98 tests/s, 6221.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprcucugls\nStarted\n.\nFinished in 0.000450482 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2219.84 tests/s, 6659.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpioqd4pq3\nStarted\n.\nFinished in 0.000437276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2286.89 tests/s, 6860.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5p5_eblq\nStarted\n.\nFinished in 0.000436506 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2290.92 tests/s, 6872.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc8hpqrlm\nStarted\n.\nFinished in 0.000468669 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2133.70 tests/s, 6401.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  nums1.product(nums2).sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9n2adsbp\nStarted\n.\nFinished in 0.00091947 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1087.58 tests/s, 3262.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqgmxtrjy\nStarted\n.\nFinished in 0.000517565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1932.12 tests/s, 5796.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair[0] + pair[1] }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp41092n7p\nStarted\n.\nFinished in 0.000435947 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2293.86 tests/s, 6881.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |x|\n    nums2.each do |y|\n      pairs << [x, y]\n    end\n  end\n  pairs.sort_by! { |pair| pair.first + pair.last }\n  pairs.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmtgfgh94\nStarted\n.\nFinished in 0.000486182 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2056.84 tests/s, 6170.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  # nums1.product(nums2).sort_by { |x, y| x + y }.take(k)\n  nums1.product(nums2).sort_by(&:sum).take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5f8kz9wi\nStarted\n.\nFinished in 0.000442099 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2261.94 tests/s, 6785.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcjh9brix\nStarted\n.\nFinished in 0.000424512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2355.65 tests/s, 7066.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcjh9brix\nStarted\n.\nFinished in 0.000424512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2355.65 tests/s, 7066.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5p5_eblq\nStarted\n.\nFinished in 0.000436506 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2290.92 tests/s, 6872.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpioqd4pq3\nStarted\n.\nFinished in 0.000437276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2286.89 tests/s, 6860.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      result << [n1, n2]\n    end\n  end\n  result.sort_by { |pair| pair[0] + pair[1] }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfhztoyu2\nStarted\n.\nFinished in 0.000481125 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.46 tests/s, 6235.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuq8xsbj2\nStarted\n.\nFinished in 0.000441624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2264.37 tests/s, 6793.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuq8xsbj2\nStarted\n.\nFinished in 0.000441624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2264.37 tests/s, 6793.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5n4puwnp\nStarted\n.\nFinished in 0.000423787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2359.68 tests/s, 7079.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  nums1.product(nums2).sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9n2adsbp\nStarted\n.\nFinished in 0.00091947 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1087.58 tests/s, 3262.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5p5_eblq\nStarted\n.\nFinished in 0.000436506 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2290.92 tests/s, 6872.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5p5_eblq\nStarted\n.\nFinished in 0.000436506 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2290.92 tests/s, 6872.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp96f4yfsy\nStarted\n.\nFinished in 0.000499873 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2000.51 tests/s, 6001.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuq8xsbj2\nStarted\n.\nFinished in 0.000441624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2264.37 tests/s, 6793.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4qffgt2k\nStarted\n.\nFinished in 0.000424557 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2355.40 tests/s, 7066.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4qffgt2k\nStarted\n.\nFinished in 0.000424557 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2355.40 tests/s, 7066.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  k = nums1.size * nums2.size if k > nums1.size * nums2.size\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.reduce(:+) }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkombq3c3\nStarted\n.\nFinished in 0.000736504 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1357.77 tests/s, 4073.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5p5_eblq\nStarted\n.\nFinished in 0.000436506 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2290.92 tests/s, 6872.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5p5_eblq\nStarted\n.\nFinished in 0.000436506 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2290.92 tests/s, 6872.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxicr2zli\nStarted\n.\nFinished in 0.00042987 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2326.28 tests/s, 6978.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  nums1.product(nums2).sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9n2adsbp\nStarted\n.\nFinished in 0.00091947 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1087.58 tests/s, 3262.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.first + pair.last }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjiae1x7l\nStarted\n.\nFinished in 0.000430798 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.27 tests/s, 6963.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.reduce(:+) }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjx5l4eq6\nStarted\n.\nFinished in 0.00049623 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2015.19 tests/s, 6045.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5n4puwnp\nStarted\n.\nFinished in 0.000423787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2359.68 tests/s, 7079.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5n4puwnp\nStarted\n.\nFinished in 0.000423787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2359.68 tests/s, 7079.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      res << [n1, n2]\n    end\n  end\n  res.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcbvf5f60\nStarted\n.\nFinished in 0.000472599 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2115.96 tests/s, 6347.88 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5p5_eblq\nStarted\n.\nFinished in 0.000436506 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2290.92 tests/s, 6872.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpioqd4pq3\nStarted\n.\nFinished in 0.000437276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2286.89 tests/s, 6860.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqgmxtrjy\nStarted\n.\nFinished in 0.000517565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1932.12 tests/s, 5796.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxicr2zli\nStarted\n.\nFinished in 0.00042987 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2326.28 tests/s, 6978.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuq8xsbj2\nStarted\n.\nFinished in 0.000441624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2264.37 tests/s, 6793.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  nums1.product(nums2).sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9n2adsbp\nStarted\n.\nFinished in 0.00091947 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1087.58 tests/s, 3262.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp96f4yfsy\nStarted\n.\nFinished in 0.000499873 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2000.51 tests/s, 6001.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcjh9brix\nStarted\n.\nFinished in 0.000424512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2355.65 tests/s, 7066.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  k = nums1.length * nums2.length if k > nums1.length * nums2.length\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.reduce(:+) }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwx9fe1h1\nStarted\n.\nFinished in 0.000473268 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2112.97 tests/s, 6338.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  # sort the arrays\n  nums1.sort!\n  nums2.sort!\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "/tmp/tmpfn5um0og.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpfn5um0og.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpioqd4pq3\nStarted\n.\nFinished in 0.000437276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2286.89 tests/s, 6860.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp96f4yfsy\nStarted\n.\nFinished in 0.000499873 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2000.51 tests/s, 6001.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcoc88hv3\nStarted\n.\nFinished in 0.000429288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2329.44 tests/s, 6988.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  nums1.product(nums2).sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9n2adsbp\nStarted\n.\nFinished in 0.00091947 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1087.58 tests/s, 3262.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuq8xsbj2\nStarted\n.\nFinished in 0.000441624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2264.37 tests/s, 6793.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4qffgt2k\nStarted\n.\nFinished in 0.000424557 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2355.40 tests/s, 7066.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.sum }\n  result[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyhgxzppf\nStarted\n.\nFinished in 0.000432725 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2310.94 tests/s, 6932.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpq_e6js3_\nStarted\n.\nFinished in 0.000492235 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2031.55 tests/s, 6094.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair[0] + pair[1] }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp41092n7p\nStarted\n.\nFinished in 0.000435947 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2293.86 tests/s, 6881.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  nums1.product(nums2).map { |pair| pair.sum }.sort.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "Loaded suite /tmp/tmps0emuo44\nStarted\nF\n===============================================================================\nFailure: test_k_smallest_pairs(TestHumanEval)\n/tmp/tmps0emuo44.rb:9:in `test_k_smallest_pairs'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_k_smallest_pairs\n      8:     candidate = method(:k_smallest_pairs)\n  =>  9:     assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n     10:     assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n     11:     assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n     12:   end\n<[[1, 2], [1, 4]]> expected but was\n<[3, 5]>\n\ndiff:\n? [[1, 2], [1, 4]]\n?  3   5          \n?  ??   ? ---------\n===============================================================================\n\nFinished in 0.007982028 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n125.28 tests/s, 125.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxicr2zli\nStarted\n.\nFinished in 0.00042987 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2326.28 tests/s, 6978.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      res << [num1, num2]\n    end\n  end\n  res.sort_by! { |pair| pair.sum }\n  res[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqedvorgm\nStarted\n.\nFinished in 0.00044568 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2243.76 tests/s, 6731.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprcucugls\nStarted\n.\nFinished in 0.000450482 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2219.84 tests/s, 6659.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuq8xsbj2\nStarted\n.\nFinished in 0.000441624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2264.37 tests/s, 6793.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqgmxtrjy\nStarted\n.\nFinished in 0.000517565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1932.12 tests/s, 5796.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5p5_eblq\nStarted\n.\nFinished in 0.000436506 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2290.92 tests/s, 6872.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1vv9_ib6\nStarted\n.\nFinished in 0.000421316 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2373.52 tests/s, 7120.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4qffgt2k\nStarted\n.\nFinished in 0.000424557 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2355.40 tests/s, 7066.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      res << [n1, n2]\n    end\n  end\n  res.sort_by! { |pair| pair.sum }\n  res[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp53graxnr\nStarted\n.\nFinished in 0.000472031 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2118.50 tests/s, 6355.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuq8xsbj2\nStarted\n.\nFinished in 0.000441624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2264.37 tests/s, 6793.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.sum }\n  result[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyhgxzppf\nStarted\n.\nFinished in 0.000432725 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2310.94 tests/s, 6932.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuq8xsbj2\nStarted\n.\nFinished in 0.000441624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2264.37 tests/s, 6793.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  nums1.product(nums2).sort_by { |pair| pair.reduce(:+) }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpomf1zp1x\nStarted\n.\nFinished in 0.000463684 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2156.64 tests/s, 6469.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.inject(:+) }\n  result[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp04au05vi\nStarted\n.\nFinished in 0.000436741 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2289.69 tests/s, 6869.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  # nums1 = [1,7,11]\n  # nums2 = [2,4,6]\n  # k = 3\n  # output = [[1,2],[1,4],[1,6]]\n  #\n  # nums1 = [1,1,2]\n  # nums2 = [1,2,3]\n  # k = 2\n  # output = [[1,1],[1,1]]\n  #\n  # nums1 = [1,2]\n  # nums2 = [3]\n  # k = 3\n  # output = [[1,3],[2,3]]\n  #\n  # nums1 = [1,1,2]\n  # nums2 = [1,2,3]\n  # k = 10\n  # output = [[1,1],[1,1],[2,1],[1,2],[1,2],[2,2],[1,3],[1,3],[2,3]]\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "/tmp/tmp04t8bbwy.rb:23: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp04t8bbwy.rb:30: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      res << [n1, n2]\n    end\n  end\n  res.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcbvf5f60\nStarted\n.\nFinished in 0.000472599 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2115.96 tests/s, 6347.88 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      res << [num1, num2]\n    end\n  end\n  res.sort_by! { |pair| pair.sum }\n  res[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqedvorgm\nStarted\n.\nFinished in 0.00044568 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2243.76 tests/s, 6731.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxicr2zli\nStarted\n.\nFinished in 0.00042987 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2326.28 tests/s, 6978.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      res << [n1, n2]\n    end\n  end\n  res.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcbvf5f60\nStarted\n.\nFinished in 0.000472599 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2115.96 tests/s, 6347.88 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair[0] + pair[1] }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1hho64fz\nStarted\n.\nFinished in 0.000423624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2360.58 tests/s, 7081.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  nums1.product(nums2).sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph3lgcwh5\nStarted\n.\nFinished in 0.000354465 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2821.15 tests/s, 8463.46 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5n4puwnp\nStarted\n.\nFinished in 0.000423787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2359.68 tests/s, 7079.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5n4puwnp\nStarted\n.\nFinished in 0.000423787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2359.68 tests/s, 7079.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5n4puwnp\nStarted\n.\nFinished in 0.000423787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2359.68 tests/s, 7079.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  # return [] if nums1.empty? || nums2.empty?\n  #\n  # pairs = []\n  # nums1.each do |n1|\n  #   nums2.each do |n2|\n  #     pairs << [n1, n2]\n  #   end\n  # end\n  #\n  # pairs.sort_by { |pair| pair.sum }.first(k)\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "/tmp/tmp1tfdot48.rb:14: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp1tfdot48.rb:21: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn159sxa4\nStarted\n.\nFinished in 0.000480121 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2082.81 tests/s, 6248.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcjh9brix\nStarted\n.\nFinished in 0.000424512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2355.65 tests/s, 7066.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4qffgt2k\nStarted\n.\nFinished in 0.000424557 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2355.40 tests/s, 7066.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  nums1.product(nums2).sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9n2adsbp\nStarted\n.\nFinished in 0.00091947 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1087.58 tests/s, 3262.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.sum }\n  result.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpge27rf_7\nStarted\n.\nFinished in 0.000608585 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1643.16 tests/s, 4929.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  # return [] if nums1.empty? || nums2.empty?\n  #\n  # pairs = []\n  # nums1.each do |num1|\n  #   nums2.each do |num2|\n  #     pairs << [num1, num2]\n  #   end\n  # end\n  #\n  # pairs.sort_by { |pair| pair.sum }.take(k)\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122949,
      "stdout": "",
      "stderr": "/tmp/tmp19gjx9lo.rb:14: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp19gjx9lo.rb:21: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpioqd4pq3\nStarted\n.\nFinished in 0.000437276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2286.89 tests/s, 6860.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  nums1.product(nums2).sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9n2adsbp\nStarted\n.\nFinished in 0.00091947 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1087.58 tests/s, 3262.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.first + pair.last }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_lebzk94\nStarted\n.\nFinished in 0.000416762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2399.45 tests/s, 7198.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcjh9brix\nStarted\n.\nFinished in 0.000424512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2355.65 tests/s, 7066.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.reduce(:+) }\n  pairs[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1666122950,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjx5l4eq6\nStarted\n.\nFinished in 0.00049623 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2015.19 tests/s, 6045.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n  nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5n4puwnp\nStarted\n.\nFinished in 0.000423787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2359.68 tests/s, 7079.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}