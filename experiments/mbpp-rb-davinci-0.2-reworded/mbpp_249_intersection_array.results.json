{
  "name": "mbpp_249_intersection_array",
  "language": "rb",
  "prompt": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj113rf10\nStarted\n.\nFinished in 0.000572527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.64 tests/s, 5239.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp09k7_kuf\nStarted\n.\nFinished in 0.000377093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2651.87 tests/s, 7955.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1.select { |num| array_nums2.include?(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1666123258,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe8ixm5zt\nStarted\n.\nFinished in 0.000404567 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2471.78 tests/s, 7415.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1.select { |num| array_nums2.include?(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1666123258,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe8ixm5zt\nStarted\n.\nFinished in 0.000404567 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2471.78 tests/s, 7415.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj113rf10\nStarted\n.\nFinished in 0.000572527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.64 tests/s, 5239.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj113rf10\nStarted\n.\nFinished in 0.000572527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.64 tests/s, 5239.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp09k7_kuf\nStarted\n.\nFinished in 0.000377093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2651.87 tests/s, 7955.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp09k7_kuf\nStarted\n.\nFinished in 0.000377093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2651.87 tests/s, 7955.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp09k7_kuf\nStarted\n.\nFinished in 0.000377093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2651.87 tests/s, 7955.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp09k7_kuf\nStarted\n.\nFinished in 0.000377093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2651.87 tests/s, 7955.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1.select { |n| array_nums2.include?(n) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1666123258,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpke5d9v8r\nStarted\n.\nFinished in 0.000409481 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.12 tests/s, 7326.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  # Write your code here\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1666123258,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjysxp487\nStarted\n.\nFinished in 0.00043848 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2280.61 tests/s, 6841.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  return intersection_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1666123258,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6t7j2qnb\nStarted\n.\nFinished in 0.00047024 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2126.57 tests/s, 6379.72 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj113rf10\nStarted\n.\nFinished in 0.000572527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.64 tests/s, 5239.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj113rf10\nStarted\n.\nFinished in 0.000572527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.64 tests/s, 5239.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  hash_nums1 = {}\n  array_nums1.each do |num|\n    hash_nums1[num] = true\n  end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1666123258,
      "stdout": "",
      "stderr": "/tmp/tmpt90f8r2r.rb:8: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpt90f8r2r.rb:15: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp09k7_kuf\nStarted\n.\nFinished in 0.000377093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2651.87 tests/s, 7955.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1.select { |num| array_nums2.include?(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1666123258,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe8ixm5zt\nStarted\n.\nFinished in 0.000404567 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2471.78 tests/s, 7415.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1.select { |num| array_nums2.include?(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1666123258,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe8ixm5zt\nStarted\n.\nFinished in 0.000404567 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2471.78 tests/s, 7415.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp09k7_kuf\nStarted\n.\nFinished in 0.000377093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2651.87 tests/s, 7955.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  # Write your code here\n  intersection = []\n  array_nums1.each do |num1|\n    array_nums2.each do |num2|\n      if num1 == num2\n        intersection << num1\n      end\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1666123258,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpg_ta7zh5\nStarted\n.\nFinished in 0.000412519 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2424.13 tests/s, 7272.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1.select { |num| array_nums2.include?(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1666123258,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe8ixm5zt\nStarted\n.\nFinished in 0.000404567 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2471.78 tests/s, 7415.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj113rf10\nStarted\n.\nFinished in 0.000572527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.64 tests/s, 5239.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1.select { |num| array_nums2.include?(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1666123258,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe8ixm5zt\nStarted\n.\nFinished in 0.000404567 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2471.78 tests/s, 7415.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp09k7_kuf\nStarted\n.\nFinished in 0.000377093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2651.87 tests/s, 7955.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj113rf10\nStarted\n.\nFinished in 0.000572527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.64 tests/s, 5239.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp09k7_kuf\nStarted\n.\nFinished in 0.000377093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2651.87 tests/s, 7955.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1.select { |num| array_nums2.include?(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1666123258,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe8ixm5zt\nStarted\n.\nFinished in 0.000404567 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2471.78 tests/s, 7415.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1.select { |num| array_nums2.include?(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1666123258,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe8ixm5zt\nStarted\n.\nFinished in 0.000404567 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2471.78 tests/s, 7415.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp09k7_kuf\nStarted\n.\nFinished in 0.000377093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2651.87 tests/s, 7955.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1.select { |num| array_nums2.include?(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1666123258,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe8ixm5zt\nStarted\n.\nFinished in 0.000404567 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2471.78 tests/s, 7415.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1.select { |num| array_nums2.include?(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1666123258,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe8ixm5zt\nStarted\n.\nFinished in 0.000404567 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2471.78 tests/s, 7415.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  # Write your code here\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1666123258,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpizn1hbtb\nStarted\n.\nFinished in 0.000493455 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2026.53 tests/s, 6079.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj113rf10\nStarted\n.\nFinished in 0.000572527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.64 tests/s, 5239.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj113rf10\nStarted\n.\nFinished in 0.000572527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.64 tests/s, 5239.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj113rf10\nStarted\n.\nFinished in 0.000572527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.64 tests/s, 5239.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    intersection << num if array_nums2.include?(num)\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1666123258,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp641q6fzi\nStarted\n.\nFinished in 0.000400317 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2498.02 tests/s, 7494.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array.push(num)\n    end\n  end\n  intersection_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1666123258,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf78ng5in\nStarted\n.\nFinished in 0.000535299 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1868.11 tests/s, 5604.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}