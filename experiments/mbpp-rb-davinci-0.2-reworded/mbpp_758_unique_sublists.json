{
  "name": "mbpp_758_unique_sublists",
  "language": "rb",
  "prompt": "# Write a function to count arrays within an array. The function should return a hash where every array is converted to an array and the value of such array is the number of its occurencies in the original array.\ndef unique_sublists(list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_758_unique_sublists.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_sublists\n    candidate = method(:unique_sublists)\n    assert_equal({[1, 3] => 2, [5, 7] => 2, [13, 15, 17] => 1, [9, 11] => 1}, candidate.call([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]))\n    assert_equal({[\"green\", \"orange\"] => 2, [\"black\"] => 1, [\"white\"] => 1}, candidate.call([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]))\n    assert_equal({[10, 20, 30, 40] => 1, [60, 70, 50, 50] => 1, [90, 100, 200] => 1}, candidate.call([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]]))\n    assert_equal({[\"john\"] => 1}, candidate.call([[\"john\"]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  list1.uniq.map { |x| [x, list1.count(x)] }.to_h\nend",
    "  list1.each_with_object(Hash.new(0)) { |sublist, hash| hash[sublist] += 1 }\nend",
    "  list1.uniq.map { |e| [e, list1.count(e)] }.to_h\nend",
    "  list1.uniq.map { |sublist| [sublist, list1.count(sublist)] }.to_h\nend",
    "  list1.uniq.map { |e| [e, list1.count(e)] }.to_h\nend",
    "  list1.uniq.map { |e| [e, list1.count(e)] }.to_h\nend",
    "  hash = Hash.new(0)\n  list1.each do |i|\n    hash[i] += 1\n  end\n  hash\nend",
    "  list1.group_by(&:itself).map { |k, v| [k, v.count] }.to_h\nend",
    "  list1.each_with_object(Hash.new(0)) { |sublist, hash| hash[sublist] += 1 }\nend",
    "  list1.each_with_object(Hash.new(0)) { |list, hash| hash[list] += 1 }\nend",
    "  list1.each_with_object(Hash.new(0)) { |sublist, hash| hash[sublist] += 1 }\nend",
    "  # Write your code here\n  result = Hash.new(0)\n  list1.each do |list|\n    result[list] += 1\n  end\n  result\nend",
    "  list1.uniq.map { |e| [e, list1.count(e)] }.to_h\nend",
    "  list1.uniq.map { |e| [e, list1.count(e)] }.to_h\nend",
    "  list1.uniq.map { |e| [e, list1.count(e)] }.to_h\nend",
    "  list1.uniq.map { |e| [e, list1.count(e)] }.to_h\nend",
    "  list1.uniq.each_with_object({}) { |sublist, hash| hash[sublist] = list1.count(sublist) }\nend",
    "  list1.uniq.map { |e| [e, list1.count(e)] }.to_h\nend",
    "  list1.uniq.map { |sublist| [sublist, list1.count(sublist)] }.to_h\nend",
    "  # TODO: implement this method\n  hash = Hash.new(0)\n  list1.each do |element|\n    hash[element] += 1\n  end\n  hash\nend"
  ]
}