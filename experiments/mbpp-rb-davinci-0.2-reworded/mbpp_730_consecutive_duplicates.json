{
  "name": "mbpp_730_consecutive_duplicates",
  "language": "rb",
  "prompt": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  new_arr = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      new_arr << num\n    end\n  end\n  new_arr\nend",
    "  result = []\n  nums.each_with_index do |num, index|\n    result << num if num != nums[index + 1]\n  end\n  result\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  new_array = []\n  nums.each do |num|\n    new_array << num unless new_array.last == num\n  end\n  new_array\nend",
    "  new_array = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      new_array << num\n    end\n  end\n  new_array\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  new_arr = []\n  nums.each_with_index do |num, idx|\n    new_arr << num unless num == nums[idx + 1]\n  end\n  new_arr\nend",
    "  result = []\n  nums.each_with_index do |num, index|\n    result << num unless num == nums[index + 1]\n  end\n  result\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk(&:itself).map(&:first)\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  result = []\n  nums.each_with_index do |num, idx|\n    result << num unless num == nums[idx + 1]\n  end\n  result\nend",
    "  new_nums = []\n  nums.each_with_index do |num, i|\n    new_nums << num if num != nums[i + 1]\n  end\n  new_nums\nend",
    "  new_nums = []\n  nums.each do |num|\n    new_nums << num unless new_nums.last == num\n  end\n  new_nums\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  result = []\n  nums.each_with_index do |num, i|\n    result << num unless num == nums[i + 1]\n  end\n  result\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  new_nums = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend",
    "  result = []\n  nums.each_with_index do |num, idx|\n    result << num unless num == nums[idx + 1]\n  end\n  result\nend",
    "  result = []\n  nums.each_with_index do |num, i|\n    result << num if num != nums[i + 1]\n  end\n  result\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  new_nums = []\n  nums.each_with_index do |num, index|\n    if index == 0\n      new_nums << num\n    elsif num != nums[index - 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.inject([]) do |result, num|\n    result << num unless result.last == num\n    result\n  end\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  (0...nums.length).each do |i|\n    if nums[i] == nums[i + 1]\n      nums.delete_at(i)\n    end\n  end\n  nums\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  new_arr = []\n  nums.each_with_index do |num, i|\n    if nums[i] != nums[i + 1]\n      new_arr << num\n    end\n  end\n  new_arr\nend",
    "  result = []\n  nums.each_with_index do |num, i|\n    result << num unless num == nums[i + 1]\n  end\n  result\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  result = []\n  nums.each_with_index do |num, index|\n    result << num unless num == nums[index + 1]\n  end\n  result\nend",
    "  nums.chunk{|n| n}.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  i = 0\n  while i < nums.length\n    if nums[i] == nums[i + 1]\n      nums.delete_at(i)\n    else\n      i += 1\n    end\n  end\n  nums\nend",
    "  result = []\n  nums.each_with_index do |num, i|\n    result << num unless num == nums[i + 1]\n  end\n  result\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  result = []\n  nums.each_with_index do |num, i|\n    result << num unless num == nums[i + 1]\n  end\n  result\nend",
    "  new_nums = []\n  nums.each_with_index do |num, index|\n    if nums[index] != nums[index + 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend",
    "  nums.each_with_object([]) do |num, arr|\n    arr << num unless arr.last == num\n  end\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  new_arr = []\n  nums.each_with_index do |num, idx|\n    if idx == 0\n      new_arr << num\n    elsif num != nums[idx - 1]\n      new_arr << num\n    end\n  end\n  new_arr\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  (0...nums.length).each do |i|\n    if nums[i] == nums[i + 1]\n      nums.delete_at(i)\n      i -= 1\n    end\n  end\n  nums\nend",
    "  new_arr = []\n  nums.each_with_index do |num, i|\n    new_arr << num if num != nums[i+1]\n  end\n  new_arr\nend",
    "  result = []\n  nums.each do |num|\n    if result.last != num\n      result << num\n    end\n  end\n  result\nend",
    "  new_nums = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  # Write your code here\n  new_arr = []\n  nums.each_with_index do |num, index|\n    if num != nums[index + 1]\n      new_arr << num\n    end\n  end\n  new_arr\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  (0...nums.length).each do |i|\n    if nums[i] == nums[i+1]\n      nums.delete_at(i)\n      i -= 1\n    end\n  end\n  nums\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  new_nums = []\n  nums.each_with_index do |num, index|\n    if index == 0\n      new_nums << num\n    elsif num != nums[index - 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  (0...nums.length).each do |i|\n    nums.delete_at(i) if nums[i] == nums[i + 1]\n  end\n  nums\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  new_nums = []\n  nums.each_with_index do |num, idx|\n    new_nums << num if num != nums[idx + 1]\n  end\n  new_nums\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  result = []\n  nums.each_with_index do |num, index|\n    if index == 0\n      result << num\n    elsif num != nums[index - 1]\n      result << num\n    end\n  end\n  result\nend",
    "  new_nums = []\n  nums.each_with_index do |num, index|\n    if num != nums[index + 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend",
    "  new_nums = []\n  nums.each_with_index do |num, index|\n    if num != nums[index + 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend",
    "  # Write your code here\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  result = []\n  nums.each_with_index do |num, i|\n    if num != nums[i+1]\n      result << num\n    end\n  end\n  result\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  nums.chunk(&:itself).map(&:first)\nend",
    "  result = []\n  nums.each_with_index do |num, i|\n    result << num unless num == nums[i+1]\n  end\n  result\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  result = []\n  nums.each_with_index do |num, index|\n    result << num if num != nums[index + 1]\n  end\n  result\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  result = []\n  nums.each do |num|\n    if result.last != num\n      result << num\n    end\n  end\n  result\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  nums.each_with_object([]) do |num, result|\n    result << num unless result.last == num\n  end\nend",
    "  new_nums = []\n  nums.each_with_index do |num, index|\n    new_nums << num if num != nums[index + 1]\n  end\n  new_nums\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  result = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      result << num\n    end\n  end\n  result\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  new_arr = []\n  nums.each_with_index do |num, index|\n    if num != nums[index + 1]\n      new_arr << num\n    end\n  end\n  new_arr\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  result = []\n  nums.each_with_index do |num, i|\n    result << num if num != nums[i + 1]\n  end\n  result\nend",
    "  result = []\n  nums.each do |num|\n    if result.last != num\n      result << num\n    end\n  end\n  result\nend",
    "  new_nums = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend",
    "  nums.chunk{|n| n}.map(&:first)\nend",
    "  nums.chunk(&:itself).map(&:first)\nend",
    "  new_arr = []\n  nums.each_with_index do |num, i|\n    new_arr << num unless num == nums[i + 1]\n  end\n  new_arr\nend",
    "  result = []\n  nums.each_with_index do |num, index|\n    if num != nums[index + 1]\n      result << num\n    end\n  end\n  result\nend",
    "  result = []\n  nums.each_with_index do |num, i|\n    result << num unless num == nums[i + 1]\n  end\n  result\nend",
    "  nums.each_with_object([]) do |num, result|\n    result << num unless result.last == num\n  end\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  result = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      result << num\n    end\n  end\n  result\nend",
    "  (0...nums.length).each do |i|\n    nums.delete_at(i) if nums[i] == nums[i + 1]\n  end\n  nums\nend",
    "  result = []\n  nums.each_with_index do |num, idx|\n    result << num unless num == nums[idx + 1]\n  end\n  result\nend",
    "  result = []\n  nums.each_with_index do |num, index|\n    if num != nums[index + 1]\n      result << num\n    end\n  end\n  result\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  (0...nums.length).each do |i|\n    if nums[i] == nums[i+1]\n      nums.delete_at(i)\n    end\n  end\n  nums\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  result = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      result << num\n    end\n  end\n  result\nend",
    "  new_arr = []\n  nums.each_with_index do |num, idx|\n    if num != nums[idx + 1]\n      new_arr << num\n    end\n  end\n  new_arr\nend",
    "  new_nums = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend",
    "  new_nums = []\n  nums.each_with_index do |num, i|\n    if num != nums[i+1]\n      new_nums << num\n    end\n  end\n  new_nums\nend",
    "  result = []\n  nums.each_with_index do |num, index|\n    if num != nums[index + 1]\n      result << num\n    end\n  end\n  result\nend",
    "  result = []\n  nums.each do |num|\n    if result.last != num\n      result << num\n    end\n  end\n  result\nend",
    "  new_nums = []\n  nums.each_with_index do |num, i|\n    new_nums << num if num != nums[i + 1]\n  end\n  new_nums\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  result = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      result << num\n    end\n  end\n  result\nend",
    "  result = []\n  nums.each_with_index do |num, index|\n    result << num unless num == nums[index + 1]\n  end\n  result\nend",
    "  new_nums = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  result = []\n  nums.each_with_index do |num, i|\n    result << num if num != nums[i + 1]\n  end\n  result\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  result = []\n  nums.each_with_index do |num, i|\n    result << num unless num == nums[i + 1]\n  end\n  result\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  new_arr = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      new_arr << num\n    end\n  end\n  new_arr\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  nums.each_with_object([]) do |num, result|\n    result << num unless result.last == num\n  end\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  result = []\n  nums.each_with_index do |num, index|\n    if num != nums[index + 1]\n      result << num\n    end\n  end\n  result\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  result = []\n  nums.each do |num|\n    if result.last != num\n      result << num\n    end\n  end\n  result\nend",
    "  # Write your code here\n  result = []\n  nums.each do |num|\n    if result.last != num\n      result << num\n    end\n  end\n  result\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  i = 0\n  while i < nums.length\n    if nums[i] == nums[i + 1]\n      nums.delete_at(i)\n    else\n      i += 1\n    end\n  end\n  nums\nend",
    "  new_nums = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.each_with_index do |num, index|\n    if num == nums[index + 1]\n      nums.delete_at(index)\n    end\n  end\n  nums\nend",
    "  result = []\n  nums.each_with_index do |num, index|\n    result << num unless num == nums[index + 1]\n  end\n  result\nend",
    "  (0...nums.length).each do |i|\n    if nums[i] == nums[i + 1]\n      nums.delete_at(i)\n    end\n  end\n  nums\nend",
    "  (0...nums.length).each do |i|\n    if nums[i] == nums[i+1]\n      nums.delete_at(i)\n      i -= 1\n    end\n  end\n  nums\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  nums.chunk(&:itself).map(&:first)\nend",
    "  new_nums = []\n  nums.each_with_index do |num, index|\n    if index == 0\n      new_nums << num\n    elsif num != nums[index - 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  new_arr = []\n  nums.each_with_index do |num, index|\n    if num != nums[index + 1]\n      new_arr << num\n    end\n  end\n  new_arr\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  result = []\n  nums.each_with_index do |num, i|\n    result << num if num != nums[i + 1]\n  end\n  result\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  new_nums = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend",
    "  result = []\n  nums.each_with_index do |num, index|\n    result << num unless num == nums[index + 1]\n  end\n  result\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.each_with_object([]) do |num, new_nums|\n    new_nums << num unless new_nums.last == num\n  end\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  new_nums = []\n  nums.each_with_index do |num, idx|\n    if num != nums[idx + 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  new_arr = []\n  nums.each_with_index do |num, i|\n    if num != nums[i+1]\n      new_arr << num\n    end\n  end\n  new_arr\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  (0...nums.length).each do |i|\n    if nums[i] == nums[i + 1]\n      nums.delete_at(i)\n    end\n  end\n  nums\nend",
    "  # Write your code here\n  result = []\n  nums.each do |num|\n    if result.last != num\n      result << num\n    end\n  end\n  result\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  result = []\n  nums.each_with_index do |num, i|\n    result << num unless num == nums[i + 1]\n  end\n  result\nend",
    "  new_array = []\n  nums.each_with_index do |num, index|\n    if num != nums[index + 1]\n      new_array << num\n    end\n  end\n  new_array\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  new_array = []\n  nums.each_with_index do |num, i|\n    if num != nums[i+1]\n      new_array << num\n    end\n  end\n  new_array\nend",
    "  result = []\n  nums.each_with_index do |num, i|\n    result << num unless num == nums[i + 1]\n  end\n  result\nend",
    "  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  result = []\n  nums.each_with_index do |num, idx|\n    result << num unless num == nums[idx + 1]\n  end\n  result\nend"
  ]
}