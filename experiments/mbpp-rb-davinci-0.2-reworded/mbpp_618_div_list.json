{
  "name": "mbpp_618_div_list",
  "language": "rb",
  "prompt": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |n1, n2| n1 / n2 }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |a, b| a / b }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |n1, n2| n1 / n2 }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |n1, n2| n1.to_f / n2 }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x.to_f / y.to_f }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  result = []\n  nums1.each_with_index do |num, index|\n    result << num / nums2[index]\n  end\n  result\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |n1, n2| n1 / n2 }\nend",
    "  # Write your code here\n  result = []\n  nums1.each_with_index do |num, index|\n    result << num / nums2[index]\n  end\n  result\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x.to_f / y }\nend",
    "  nums1.map.with_index { |num, i| num / nums2[i] }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  if nums1.length != nums2.length\n    puts \"The arrays are not the same length\"\n    return\n  end\n  result = []\n  nums1.each_with_index do |num, index|\n    result << num / nums2[index]\n  end\n  result\nend",
    "  # Write your code here\n  result = []\n  nums1.each_with_index do |num, index|\n    result << num / nums2[index]\n  end\n  result\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |a, b| a / b }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map {|x, y| x / y}\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x.to_f / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  # nums1.zip(nums2).map { |x, y| x / y }\n  nums1.zip(nums2).map { |pair| pair.reduce(:/) }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |n1, n2| n1 / n2 }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |nums| nums.reduce(:/) }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y.to_f }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x.to_f / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |a, b| a / b }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |a, b| a / b }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x.to_f / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |a, b| a / b }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |n1, n2| n1 / n2 }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |a, b| a / b }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |a, b| a / b }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.map.with_index { |num, i| num / nums2[i] }\nend",
    "  nums1.map.with_index { |num, i| num / nums2[i] }\nend",
    "  nums1.zip(nums2).map { |a, b| a / b }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.map.with_index { |num, i| num / nums2[i] }\nend",
    "  nums1.zip(nums2).map { |x, y| x.to_f / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |n1, n2| n1 / n2 }\nend",
    "  nums1.zip(nums2).map { |x, y| x.to_f / y.to_f }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend",
    "  nums1.zip(nums2).map { |x, y| x / y }\nend"
  ]
}