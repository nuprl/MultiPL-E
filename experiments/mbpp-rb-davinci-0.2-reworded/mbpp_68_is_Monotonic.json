{
  "name": "mbpp_68_is_Monotonic",
  "language": "rb",
  "prompt": "# Write a rbthon function to check whether the given array is monotonic or not.\ndef is_Monotonic(a)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_Monotonic\n    candidate = method(:is_Monotonic)\n    assert_equal(true, candidate.call([6, 5, 4, 4]))\n    assert_equal(true, candidate.call([1, 2, 2, 3]))\n    assert_equal(false, candidate.call([1, 3, 2]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  return true if a.size <= 2\n  sign = a[1] - a[0]\n  (1...a.size).each do |i|\n    if sign * (a[i] - a[i - 1]) < 0\n      return false\n    end\n  end\n  true\nend",
    "  return true if a.size <= 1\n  sign = a[1] - a[0]\n  a.each_cons(2) do |a, b|\n    if (a - b) * sign < 0\n      return false\n    end\n  end\n  true\nend",
    "  return true if a.size <= 1\n  sign = a[1] - a[0]\n  (1...a.size).each do |i|\n    if sign == 0\n      sign = a[i] - a[i - 1]\n      next\n    end\n    if sign * (a[i] - a[i - 1]) < 0\n      return false\n    end\n  end\n  true\nend",
    "  return true if a.size <= 1\n  sign = a[1] - a[0]\n  for i in 1...a.size\n    if sign * (a[i] - a[i - 1]) < 0\n      return false\n    end\n  end\n  return true\nend",
    "  return true if a.size <= 1\n  i = 0\n  while i < a.size - 1\n    return false if a[i] > a[i + 1]\n    i += 1\n  end\n  true\nend",
    "  return true if a.size <= 2\n  sign = a[1] - a[0]\n  (2...a.size).each do |i|\n    if sign * (a[i] - a[i - 1]) < 0\n      return false\n    end\n  end\n  true\nend",
    "  return true if a.size <= 2\n  direction = a[1] - a[0]\n  for i in 1...a.size\n    if direction == 0\n      direction = a[i] - a[i - 1]\n      next\n    end\n    if breaks_direction(direction, a[i - 1], a[i])\n      return false\n    end\n  end\n  return true\nend",
    "  return true if a.size <= 2\n  sign = a[1] <=> a[0]\n  (1...a.size).each do |i|\n    if sign.zero?\n      sign = a[i] <=> a[i - 1]\n      next\n    end\n    return false if sign != (a[i] <=> a[i - 1])\n  end\n  true\nend",
    "  return true if a.size <= 2\n  sign = a[1] - a[0]\n  (1...a.size).each do |i|\n    if sign * (a[i] - a[i - 1]) < 0\n      return false\n    end\n  end\n  true\nend",
    "  return true if a.size <= 2\n  direction = a[1] - a[0]\n  for i in 1...a.size\n    if direction == 0\n      direction = a[i] - a[i - 1]\n      next\n    end\n    if breaks_direction?(direction, a[i - 1], a[i])\n      return false\n    end\n  end\n  return true\nend",
    "  return true if a.size <= 1\n  sign = a[1] - a[0]\n  (1...a.size).each do |i|\n    if sign == 0\n      sign = a[i] - a[i - 1]\n      next\n    end\n    if (a[i] - a[i - 1]) * sign < 0\n      return false\n    end\n  end\n  true\nend",
    "  return true if a.size <= 2\n  sign = a[1] <=> a[0]\n  a.each_cons(2) do |x, y|\n    return false if sign != (x <=> y)\n  end\n  true\nend",
    "  return true if a.size <= 2\n  sign = a[1] <=> a[0]\n  (1...a.size).each do |i|\n    if sign.zero?\n      sign = a[i] <=> a[i - 1]\n      next\n    end",
    "  return true if a.size <= 2\n  direction = a[1] - a[0]\n  for i in 1...a.size\n    if direction == 0\n      direction = a[i] - a[i - 1]\n      next\n    end\n    if breaks_direction(direction, a[i - 1], a[i])\n      return false\n    end\n  end\n  return true\nend",
    "  return true if a.length <= 2\n  return true if a.sort == a\n  return true if a.sort.reverse == a\n  false\nend",
    "  a.sort == a || a.sort.reverse == a\nend",
    "  return true if a.size <= 2\n  direction = a[1] - a[0]\n  for i in 1...a.size\n    if direction == 0\n      direction = a[i] - a[i - 1]\n      next\n    end\n    if breaks_direction(direction, a[i - 1], a[i])\n      return false\n    end\n  end\n  return true\nend",
    "  return true if a.size <= 2\n  sign = a[1] <=> a[0]\n  (1...a.size).each do |i|\n    if sign.zero?\n      sign = a[i] <=> a[i - 1]\n      next\n    end\n    return false if sign * (a[i] <=> a[i - 1]) < 0\n  end\n  true\nend",
    "  return true if a.size <= 2\n  sign = a[1] <=> a[0]\n  (1...a.size).each do |i|\n    if sign.zero?\n      sign = a[i] <=> a[i - 1]\n      next\n    end\n    return false if sign * (a[i] <=> a[i - 1]) < 0\n  end\n  true\nend",
    "  return true if a.size <= 2\n  direction = a[1] - a[0]\n  for i in 1...a.size\n    if direction == 0\n      direction = a[i] - a[i - 1]\n      next\n    end\n    if breaks_direction(a[i - 1], a[i], direction)\n      return false\n    end\n  end\n  true\nend"
  ]
}