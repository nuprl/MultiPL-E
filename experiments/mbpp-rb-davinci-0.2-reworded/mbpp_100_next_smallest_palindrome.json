{
  "name": "mbpp_100_next_smallest_palindrome",
  "language": "rb",
  "prompt": "# Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\ndef next_smallest_palindrome(num)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_next_smallest_palindrome\n    candidate = method(:next_smallest_palindrome)\n    assert_equal(101, candidate.call(99))\n    assert_equal(1331, candidate.call(1221))\n    assert_equal(121, candidate.call(120))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  return num if num.to_s == num.to_s.reverse\n  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until is_palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  return num if num.to_s == num.to_s.reverse\n  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  # if num is a palindrome, return num\n  return num if num.to_s == num.to_s.reverse",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  return num if num.to_s == num.to_s.reverse\n  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  return num if is_palindrome?(num)\n  num += 1\n  num += 1 until is_palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend"
  ]
}