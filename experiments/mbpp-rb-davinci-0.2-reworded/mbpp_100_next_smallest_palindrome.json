{
  "name": "mbpp_100_next_smallest_palindrome",
  "language": "rb",
  "prompt": "# Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\ndef next_smallest_palindrome(num)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_next_smallest_palindrome\n    candidate = method(:next_smallest_palindrome)\n    assert_equal(101, candidate.call(99))\n    assert_equal(1331, candidate.call(1221))\n    assert_equal(121, candidate.call(120))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  return num if num.to_s == num.to_s.reverse\n  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until is_palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  return num if num.to_s == num.to_s.reverse\n  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  # if num is a palindrome, return num\n  return num if num.to_s == num.to_s.reverse",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  return num if num.to_s == num.to_s.reverse\n  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  return num if is_palindrome?(num)\n  num += 1\n  num += 1 until is_palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until is_palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  return num if num.to_s == num.to_s.reverse\n  num += 1\n  num = num.to_s\n  mid = num.length / 2\n  left = num[0...mid]\n  right = num[mid..-1]\n  while left != right.reverse\n    num = (num.to_i + 1).to_s\n    mid = num.length / 2\n    left = num[0...mid]\n    right = num[mid..-1]\n  end\n  num.to_i\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  while !is_palindrome?(num)\n    num += 1\n  end\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until is_palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  # First, we need to find the next smallest palindrome.\n  # We can do this by incrementing the number until we find a palindrome.\n  # We can check if a number is a palindrome by converting it to a string and checking if the string is the same forwards and backwards.\n  # We can convert an integer to a string by calling the #to_s method on it.\n  # We can check if a string is the same forwards and backwards by comparing it to its reverse.\n  # We can get the reverse of a string by calling the #reverse method on it.\n  # We can increment a number by adding 1 to it.\n  # We can add 1 to a number by using the += operator.\n  # We can add 1 to a number by using the #succ method.\n  # We can add 1 to a number by using the #next method.\n  # We can add 1 to a number by using the #+ method.\n  # We can add 1 to a number by using the #upto method.\n  # We can add 1 to a number by using the #times method.\n  # We can add 1 to a number by using the #step method.\n  # We can add 1 to a number by using the #map method.\n  # We can add 1 to a number by using the #collect method.\n  # We can add 1 to a number by using the #map! method.\n  # We can add 1 to a number by using the #collect! method.\n  # We can add 1 to a number by using the #each method.\n  # We can add 1 to a number by using the #each_with_index method.\n  # We can add 1 to a number by using the #each_with_object method.\n  # We can add 1 to a number by using the #each_index method.\n  # We can add 1 to a number by using the #each_entry method.\n  # We can add 1 to a number by using the #each_cons method.\n  # We can add 1 to a number by using the #each_slice method.\n  # We can add 1 to a number by using the #each_char method.\n  # We can add 1 to a number by using the #each_byte method.\n  #",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  # if num is a palindrome, increment by 1 and return\n  return num + 1 if is_palindrome?(num)",
    "  num += 1\n  num += 1 until is_palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  return num if num.to_s == num.to_s.reverse\n  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  return num if num.to_s == num.to_s.reverse\n  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  return num if num.to_s == num.to_s.reverse\n  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until is_palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num.to_s)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  while !is_palindrome?(num)\n    num += 1\n  end\n  num\nend",
    "  return num if num.to_s.reverse == num.to_s\n  num += 1\n  num = num.to_s.reverse.to_i if num.to_s.length.odd?\n  num = num.to_s.reverse.to_i if num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  return num if num.to_s == num.to_s.reverse\n  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  return num if num.to_s == num.to_s.reverse\n  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  return num if num.to_s.length == 1\n  return num + 1 if num.to_s.length == 2 && num % 11 == 0\n  return num + 2 if num.to_s.length == 2 && num % 11 != 0\n  return num + 11 if num.to_s.length == 3 && num % 111 == 0\n  return num + 101 if num.to_s.length == 3 && num % 111 != 0\n  return num + 11 if num.to_s.length == 4 && num % 1111 == 0\n  return num + 101 if num.to_s.length == 4 && num % 1111 != 0\n  return num + 1001 if num.to_s.length == 5 && num % 11111 == 0\n  return num + 10001 if num.to_s.length == 5 && num % 11111 != 0\n  return num + 100001 if num.to_s.length == 6 && num % 111111 == 0\n  return num + 1000001 if num.to_s.length == 6 && num % 111111 != 0\n  return num + 10000001 if num.to_s.length == 7 && num % 11111111 == 0\n  return num + 100000001 if num.to_s.length == 7 && num % 11111111 != 0\n  return num + 1000000001 if num.to_s.length == 8 && num % 111111111 == 0\n  return num + 10000000001 if num.to_s.length == 8 && num % 111111111 != 0\n  return num + 100000000001 if num.to_s.length == 9 && num % 11111111111 == 0\n  return num + 1000000000001 if num.to_s.length == 9 && num % 11111111111 != 0\n  return num + 10000000000001 if num.to_s.length == 10 && num % 1111111111111 == 0\n  return num + 100000000000001 if num.to_s.length == 10 && num % 1111111111111 != 0\n  return num + 1000000000000001 if num.to_s.length == 11 && num % 111111111111111 == 0\n  return num + 10000000000000001 if num.to_s.length == 11 && num % 111111111111111 != 0\n ",
    "  return num if num.to_s.reverse == num.to_s\n  num += 1\n  num = num.to_s.reverse.to_i if num.to_s.length.odd?\n  num = num.to_s.reverse.to_i if num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  # if num is a palindrome, increment by 1\n  if is_palindrome?(num)\n    num += 1\n  end",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  return num if num.to_s == num.to_s.reverse\n  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  return num if num.to_s == num.to_s.reverse\n  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  return num if num.to_s.length == 1\n  return num + 1 if num.to_s.length == 2 && num.to_s[0] != num.to_s[1]\n  return num + 2 if num.to_s.length == 2 && num.to_s[0] == num.to_s[1]\n  return num + 11 if num.to_s.length == 3 && num.to_s[0] != num.to_s[2]\n  return num + 1 if num.to_s.length == 3 && num.to_s[0] == num.to_s[2]\n  return num + 101 if num.to_s.length == 4 && num.to_s[0] != num.to_s[3]\n  return num + 1 if num.to_s.length == 4 && num.to_s[0] == num.to_s[3]\n  return num + 1001 if num.to_s.length == 5 && num.to_s[0] != num.to_s[4]\n  return num + 1 if num.to_s.length == 5 && num.to_s[0] == num.to_s[4]\n  return num + 10001 if num.to_s.length == 6 && num.to_s[0] != num.to_s[5]\n  return num + 1 if num.to_s.length == 6 && num.to_s[0] == num.to_s[5]\n  return num + 100001 if num.to_s.length == 7 && num.to_s[0] != num.to_s[6]\n  return num + 1 if num.to_s.length == 7 && num.to_s[0] == num.to_s[6]\n  return num + 1000001 if num.to_s.length == 8 && num.to_s[0] != num.to_s[7]\n  return num + 1 if num.to_s.length == 8 && num.to_s[0] == num.to_s[7]\n  return num + 10000001 if num.to_s.length == 9",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  return num if num.to_s == num.to_s.reverse\n  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  return num if is_palindrome?(num)\n  num += 1\n  num = num.to_s\n  mid = num.length / 2\n  left = num[0...mid]\n  right = num[mid..-1]\n  while left != right.reverse\n    num = (num.to_i + 1).to_s\n    mid = num.length / 2\n    left = num[0...mid]\n    right = num[mid..-1]\n  end\n  num.to_i\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  return num if num.to_s == num.to_s.reverse\n  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  return num if num.to_s == num.to_s.reverse\n  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "\treturn num if num.to_s == num.to_s.reverse\n\tnum += 1\n\tnum += 1 until num.to_s == num.to_s.reverse\n\tnum\nend",
    "  return num if num.to_s == num.to_s.reverse\n  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  return num if num.to_s == num.to_s.reverse\n  next_smallest_palindrome(num - 1)\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  return num if is_palindrome?(num)\n  num += 1\n  num += 1 until is_palindrome?(num)\n  num\nend",
    "  return num if num.to_s == num.to_s.reverse\n  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  # if num is a palindrome, increment by 1\n  return num + 1 if num.to_s == num.to_s.reverse",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  while !is_palindrome?(num)\n    num += 1\n  end\n  num\nend",
    "  num += 1\n  while !is_palindrome?(num)\n    num += 1\n  end\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  return num if is_palindrome?(num)",
    "  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until is_palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  return num if num.to_s == num.to_s.reverse\n  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  return num if num.to_s.reverse == num.to_s\n  num += 1\n  num = num.to_s.reverse.to_i if num.to_s.length.odd?\n  num = num.to_s.reverse.to_i if num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  while !is_palindrome?(num)\n    num += 1\n  end\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until is_palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  return num if num.to_s.reverse == num.to_s\n  num += 1\n  num = num.to_s.reverse.to_i if num.to_s.length.odd?\n  num = num.to_s.reverse.to_i if num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  return num if num.to_s == num.to_s.reverse\n  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  while !is_palindrome?(num)\n    num += 1\n  end\n  num\nend",
    "  # If the number is already a palindrome, return it\n  return num if num.to_s == num.to_s.reverse",
    "  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  # Convert number to string\n  num_str = num.to_s\n  # Find the length of the number\n  num_len = num_str.length\n  # Find the middle index of the number\n  mid_idx = num_len / 2\n  # Find the middle digit of the number\n  mid_digit = num_str[mid_idx]\n  # Find the left half of the number\n  left_half = num_str[0..mid_idx - 1]\n  # Find the right half of the number\n  right_half = num_str[mid_idx + 1..-1]\n  # If the number is a palindrome, return the next palindrome\n  if left_half == right_half.reverse\n    # If the number is a single digit, return the next palindrome\n    if num_len == 1\n      return num + 1\n    # If the number is a two digit number and the middle digit is 9, return the next palindrome\n    elsif num_len == 2 && mid_digit == \"9\"\n      return num + 11\n    # If the number is a two digit number and the middle digit is not 9, return the next palindrome\n    elsif num_len == 2 && mid_digit != \"9\"\n      return num + 1\n    # If the number is an odd digit number and the middle digit is 9, return the next palindrome\n    elsif num_len.odd? && mid_digit == \"9\"\n      return num + 2\n    # If the number is an odd digit number and the middle digit is not 9, return the next palindrome\n    elsif num_len.odd? && mid_digit != \"9\"\n      return num + 1\n    # If the number is an even digit number and the middle digit is 9, return the next palindrome\n    elsif num_len.even? && mid_digit == \"9\"\n      return num + 2\n    # If the number is an even digit number and the middle digit is not 9, return the next palindrome\n    elsif num_len.even? && mid_digit != \"9\"\n      return num + 1\n    end\n  # If the number is not a",
    "  num += 1\n  num += 1 until is_palindrome?(num)\n  num\nend",
    "  return num if num.to_s == num.to_s.reverse\n  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  while !is_palindrome?(num)\n    num += 1\n  end\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  while !is_palindrome?(num)\n    num += 1\n  end\n  num\nend",
    "  num = num + 1\n  while !is_palindrome?(num)\n    num = num + 1\n  end\n  num\nend",
    "  return num if palindrome?(num)\n  num += 1 until palindrome?(num)\n  num\nend",
    "  # if num is a palindrome, increment it by 1\n  if is_palindrome?(num)\n    num += 1\n  end",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  return num if num.to_s.reverse == num.to_s\n  next_smallest_palindrome(num - 1)\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  return num if num.to_s == num.to_s.reverse\n  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until is_palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  # check if num is palindrome\n  return num if is_palindrome?(num)\n  # if not, find next smallest palindrome\n  # if num is odd, increment middle digit by 1\n  # if num is even, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n  # if middle digit is 9, increment middle digit by 1\n ",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  return num if num.to_s == num.to_s.reverse\n  num += 1\n  num += 1 until num.to_s == num.to_s.reverse\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend",
    "  num += 1\n  num += 1 until palindrome?(num)\n  num\nend"
  ]
}