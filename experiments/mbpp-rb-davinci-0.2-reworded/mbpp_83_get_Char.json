{
  "name": "mbpp_83_get_Char",
  "language": "rb",
  "prompt": "# Write a rbthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\ndef get_Char(strr)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_83_get_Char.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_Char\n    candidate = method(:get_Char)\n    assert_equal(\"f\", candidate.call(\"abc\"))\n    assert_equal(\"t\", candidate.call(\"gfg\"))\n    assert_equal(\"c\", candidate.call(\"ab\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  sum = 0\n  strr.each_byte do |c|\n    sum = sum + c\n  end\n  puts \"The character made by adding the ASCII value of all the characters of the given string modulo 26 is #{(sum % 26).chr}\"\nend",
    "  sum = 0\n  strr.each_byte do |c|\n    sum += c\n  end\n  return (sum % 26 + 65).chr\nend",
    "  strr.chars.map { |c| c.ord }.sum % 26\nend",
    "  sum = 0\n  strr.each_byte do |c|\n    sum = sum + c\n  end\n  return (sum % 26 + 65).chr\nend",
    "  sum = 0\n  strr.each_byte do |c|\n    sum += c\n  end\n  puts sum % 26\nend",
    "  sum = 0\n  strr.each_byte do |c|\n    sum += c\n  end\n  return (sum % 26 + 65).chr\nend",
    "  sum = 0\n  strr.each_char do |c|\n    sum += c.ord\n  end\n  return (sum % 26 + 65).chr\nend",
    "  sum = 0\n  strr.each_byte do |c|\n    sum += c\n  end\n  return (sum % 26 + 65).chr\nend",
    "  sum = 0\n  strr.each_byte do |c|\n    sum += c\n  end\n  return (sum % 26 + 65).chr\nend",
    "  sum = 0\n  strr.each_byte do |c|\n    sum = sum + c\n  end\n  return (sum % 26 + 65).chr\nend",
    "  sum = 0\n  strr.each_char do |ch|\n    sum += ch.ord\n  end\n  return (sum % 26 + 65).chr\nend",
    "  sum = 0\n  strr.each_char do |char|\n    sum += char.ord\n  end\n  return (sum % 26).chr\nend",
    "  sum = 0\n  strr.each_byte do |c|\n    sum += c\n  end\n  return (sum % 26).chr\nend",
    "  sum = 0\n  strr.each_char do |c|\n    sum += c.ord\n  end\n  return (sum % 26 + 65).chr\nend",
    "  sum = 0\n  strr.each_byte {|x| sum += x }\n  return (sum % 26 + 65).chr\nend",
    "  sum = 0\n  strr.each_byte do |c|\n    sum += c\n  end\n  return (sum % 26 + 65).chr\nend\nputs get_Char(\"ABC\")",
    "  sum = 0\n  strr.each_byte do |c|\n    sum = sum + c\n  end\n  return (sum % 26).chr\nend",
    "  sum = 0\n  strr.each_byte do |c|\n    sum += c\n  end\n  return (sum % 26 + 65).chr\nend\nputs get_Char(\"abc\")\nputs get_Char(\"abcdefghijklmnopqrstuvwxyz\")\nputs get_Char(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\nputs get_Char(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")",
    "  sum = 0\n  strr.each_byte do |c|\n    sum += c\n  end\n  return (sum % 26 + 65).chr\nend",
    "  sum = 0\n  strr.each_char do |ch|\n    sum += ch.ord\n  end\n  return (sum % 26).chr\nend"
  ]
}