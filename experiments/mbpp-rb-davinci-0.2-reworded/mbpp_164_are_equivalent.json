{
  "name": "mbpp_164_are_equivalent",
  "language": "rb",
  "prompt": "# Write a function to determine if the sum of the divisors of two integers are the same.\ndef are_equivalent(num1, num2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_are_equivalent\n    candidate = method(:are_equivalent)\n    assert_equal(false, candidate.call(36, 57))\n    assert_equal(false, candidate.call(2, 4))\n    assert_equal(true, candidate.call(23, 47))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  sum_divisors(num1) == sum_divisors(num2)\nend",
    "  sum_divisors(num1) == sum_divisors(num2)\nend",
    "  sum_of_divisors(num1) == sum_of_divisors(num2)\nend",
    "  sum_of_divisors(num1) == sum_of_divisors(num2)\nend",
    "  sum_divisors(num1) == sum_divisors(num2)\nend",
    "  divisors(num1).sum == divisors(num2).sum\nend",
    "  sum_divisors(num1) == sum_divisors(num2)\nend",
    "  sum_of_divisors(num1) == sum_of_divisors(num2)\nend",
    "  divisors(num1) == divisors(num2)\nend",
    "  sum_divisors(num1) == sum_divisors(num2)\nend",
    "  sum_divisors(num1) == sum_divisors(num2)\nend",
    "  sum_of_divisors(num1) == sum_of_divisors(num2)\nend",
    "  divisors_sum(num1) == divisors_sum(num2)\nend",
    "  divisors(num1) == divisors(num2)\nend",
    "  sum_of_divisors(num1) == sum_of_divisors(num2)\nend",
    "  sum_divisors(num1) == sum_divisors(num2)\nend",
    "  sum_of_divisors(num1) == sum_of_divisors(num2)\nend",
    "  divisors_sum(num1) == divisors_sum(num2)\nend",
    "  sum_of_divisors(num1) == sum_of_divisors(num2)\nend",
    "  sum_divisors(num1) == sum_divisors(num2)\nend"
  ]
}