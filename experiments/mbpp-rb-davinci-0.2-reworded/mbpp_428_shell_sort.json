{
  "name": "mbpp_428_shell_sort",
  "language": "rb",
  "prompt": "# Write a function to sort the given array by using shell sort.\ndef shell_sort(my_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_428_shell_sort.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_shell_sort\n    candidate = method(:shell_sort)\n    assert_equal([2, 3, 4, 5, 12, 12, 23, 56, 81, 95], candidate.call([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]))\n    assert_equal([22, 24, 34, 39, 68, 73, 87], candidate.call([24, 22, 39, 34, 87, 73, 68]))\n    assert_equal([16, 30, 32, 74, 82, 83, 96], candidate.call([32, 30, 16, 96, 82, 83, 74]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  n = my_list.length\n  gap = n / 2\n  while gap > 0\n    (gap...n).each do |i|\n      temp = my_list[i]\n      j = i\n      while j >= gap && my_list[j - gap] > temp\n        my_list[j] = my_list[j - gap]\n        j -= gap\n      end\n      my_list[j] = temp\n    end\n    gap /= 2\n  end\n  my_list\nend",
    "  n = my_list.length\n  gap = n / 2\n  while gap > 0\n    i = gap\n    while i < n\n      temp = my_list[i]\n      j = i\n      while j >= gap && my_list[j - gap] > temp\n        my_list[j] = my_list[j - gap]\n        j -= gap\n      end\n      my_list[j] = temp\n      i += 1\n    end\n    gap /= 2\n  end\n  my_list\nend",
    "  # TODO: implement shell sort here\n  gap = my_list.length / 2\n  while gap > 0\n    for i in gap...my_list.length\n      j = i\n      while j >= gap and my_list[j - gap] > my_list[j]\n        my_list[j - gap], my_list[j] = my_list[j], my_list[j - gap]\n        j -= gap\n      end\n    end\n    gap /= 2\n  end\n  my_list\nend",
    "  n = my_list.length\n  gap = n / 2\n  while gap > 0\n    i = gap\n    while i < n\n      temp = my_list[i]\n      j = i\n      while j >= gap and my_list[j - gap] > temp\n        my_list[j] = my_list[j - gap]\n        j -= gap\n      end\n      my_list[j] = temp\n      i += 1\n    end\n    gap /= 2\n  end\n  my_list\nend",
    "  n = my_list.length\n  gap = n / 2\n  while gap > 0\n    i = gap\n    while i < n\n      temp = my_list[i]\n      j = i\n      while j >= gap and my_list[j - gap] > temp\n        my_list[j] = my_list[j - gap]\n        j -= gap\n      end\n      my_list[j] = temp\n      i += 1\n    end\n    gap /= 2\n  end\n  my_list\nend",
    "  gap = my_list.length / 2\n  while gap > 0\n    for i in gap...my_list.length\n      temp = my_list[i]\n      j = i\n      while j >= gap and my_list[j - gap] > temp\n        my_list[j] = my_list[j - gap]\n        j -= gap\n      end\n      my_list[j] = temp\n    end\n    gap /= 2\n  end\n  my_list\nend",
    "  n = my_list.length\n  gap = n / 2\n  while gap > 0\n    i = gap\n    while i < n\n      temp = my_list[i]\n      j = i\n      while j >= gap && my_list[j - gap] > temp\n        my_list[j] = my_list[j - gap]\n        j -= gap\n      end\n      my_list[j] = temp\n      i += 1\n    end\n    gap /= 2\n  end\n  my_list\nend",
    "  n = my_list.length\n  gap = n / 2\n  while gap > 0\n    i = gap\n    while i < n\n      temp = my_list[i]\n      j = i\n      while j >= gap and my_list[j - gap] > temp\n        my_list[j] = my_list[j - gap]\n        j -= gap\n      end\n      my_list[j] = temp\n      i += 1\n    end\n    gap /= 2\n  end\n  my_list\nend",
    "  n = my_list.length\n  gap = n / 2\n  while gap > 0\n    (gap...n).each do |i|\n      temp = my_list[i]\n      j = i\n      while j >= gap && my_list[j - gap] > temp\n        my_list[j] = my_list[j - gap]\n        j -= gap\n      end\n      my_list[j] = temp\n    end\n    gap /= 2\n  end\n  my_list\nend",
    "  n = my_list.length\n  gap = n / 2\n  while gap > 0\n    i = gap\n    while i < n\n      temp = my_list[i]\n      j = i\n      while j >= gap and my_list[j - gap] > temp\n        my_list[j] = my_list[j - gap]\n        j -= gap\n      end\n      my_list[j] = temp\n      i += 1\n    end\n    gap /= 2\n  end\n  my_list\nend",
    "  gap = my_list.length / 2\n  while gap > 0\n    for i in gap...my_list.length\n      temp = my_list[i]\n      j = i\n      while j >= gap and my_list[j - gap] > temp\n        my_list[j] = my_list[j - gap]\n        j -= gap\n      end\n      my_list[j] = temp\n    end\n    gap /= 2\n  end\n  my_list\nend",
    "  n = my_list.length\n  gap = n / 2\n  while gap > 0\n    i = gap\n    while i < n\n      temp = my_list[i]\n      j = i\n      while j >= gap && my_list[j - gap] > temp\n        my_list[j] = my_list[j - gap]\n        j -= gap\n      end\n      my_list[j] = temp\n      i += 1\n    end\n    gap /= 2\n  end\n  my_list\nend",
    "  n = my_list.length\n  gap = n / 2\n  while gap > 0\n    i = gap\n    while i < n\n      temp = my_list[i]\n      j = i\n      while j >= gap && my_list[j - gap] > temp\n        my_list[j] = my_list[j - gap]\n        j -= gap\n      end\n      my_list[j] = temp\n      i += 1\n    end\n    gap /= 2\n  end\n  my_list\nend",
    "  # Start with a big gap, then reduce the gap\n  n = my_list.length\n  gap = n / 2\n  # Do a gapped insertion sort for this gap size.\n  # The first gap elements a[0..gap-1] are already in gapped order\n  # keep adding one more element until the entire array is gap sorted\n  while gap > 0\n    (gap...n).each do |i|\n      # add a[i] to the elements that have been gap sorted\n      # save a[i] in temp and make a hole at position i\n      temp = my_list[i]\n      # shift earlier gap-sorted elements up until the correct location for a[i] is found\n      j = i\n      while j >= gap && my_list[j - gap] > temp\n        my_list[j] = my_list[j - gap]\n        j -= gap\n      end\n      # put temp (the original a[i]) in its correct location\n      my_list[j] = temp\n    end\n    gap /= 2\n  end\n  my_list\nend",
    "  n = my_list.length\n  gap = n / 2\n  while gap > 0\n    (gap...n).each do |i|\n      temp = my_list[i]\n      j = i\n      while j >= gap && my_list[j - gap] > temp\n        my_list[j] = my_list[j - gap]\n        j -= gap\n      end\n      my_list[j] = temp\n    end\n    gap /= 2\n  end\n  my_list\nend",
    "  # Start with a big gap, then reduce the gap\n  gap = my_list.length / 2\n  while gap > 0\n    # Do a gapped insertion sort for this gap size.\n    # The first gap elements a[0..gap-1] are already in gapped order\n    # keep adding one more element until the entire array is gap sorted\n    (gap...my_list.length).each do |i|\n      # add a[i] to the elements that have been gap sorted\n      # save a[i] in temp and make a hole at position i\n      temp = my_list[i]\n      # shift earlier gap-sorted elements up until the correct location for a[i] is found\n      j = i\n      while j >= gap && my_list[j - gap] > temp\n        my_list[j] = my_list[j - gap]\n        j -= gap\n      end\n      # put temp (the original a[i]) in its correct location\n      my_list[j] = temp\n    end\n    gap /= 2\n  end\n  my_list\nend",
    "  # Start with a big gap, then reduce the gap\n  gap = my_list.length / 2\n  while gap > 0\n    # Do a gapped insertion sort for this gap size.\n    # The first gap elements a[0..gap-1] are already in gapped order\n    # keep adding one more element until the entire array is gap sorted\n    (gap...my_list.length).each do |i|\n      # add a[i] to the elements that have been gap sorted\n      # save a[i] in temp and make a hole at position i\n      temp = my_list[i]\n      # shift earlier gap-sorted elements up until the correct location for a[i] is found\n      j = i\n      while j >= gap && my_list[j - gap] > temp\n        my_list[j] = my_list[j - gap]\n        j -= gap\n      end\n      # put temp (the original a[i]) in its correct location\n      my_list[j] = temp\n    end\n    gap /= 2\n  end\n  my_list\nend",
    "  n = my_list.length\n  gap = n / 2\n  while gap > 0\n    (gap...n).each do |i|\n      temp = my_list[i]\n      j = i\n      while j >= gap && my_list[j - gap] > temp\n        my_list[j] = my_list[j - gap]\n        j -= gap\n      end\n      my_list[j] = temp\n    end\n    gap /= 2\n  end\n  my_list\nend",
    "  n = my_list.length\n  gap = n / 2\n  while gap > 0\n    for i in gap...n\n      temp = my_list[i]\n      j = i\n      while j >= gap and my_list[j - gap] > temp\n        my_list[j] = my_list[j - gap]\n        j -= gap\n      end\n      my_list[j] = temp\n    end\n    gap /= 2\n  end\n  my_list\nend",
    "  n = my_list.length\n  gap = n / 2\n  while gap > 0\n    i = gap\n    while i < n\n      temp = my_list[i]\n      j = i\n      while j >= gap and my_list[j - gap] > temp\n        my_list[j] = my_list[j - gap]\n        j -= gap\n      end\n      my_list[j] = temp\n      i += 1\n    end\n    gap /= 2\n  end\n  my_list\nend"
  ]
}