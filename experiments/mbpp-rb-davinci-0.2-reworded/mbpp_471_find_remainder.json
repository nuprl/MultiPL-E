{
  "name": "mbpp_471_find_remainder",
  "language": "rb",
  "prompt": "# Write a rbthon function to find the product of the array multiplication modulo n.\ndef find_remainder(arr, n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_remainder\n    candidate = method(:find_remainder)\n    assert_equal(9, candidate.call([100, 10, 5, 25, 35, 14], 11))\n    assert_equal(0, candidate.call([1, 1, 1], 1))\n    assert_equal(0, candidate.call([1, 2, 1], 2))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  # Write your code here\n  arr.inject(:*) % n\nend",
    "  arr.inject(:*) % n\nend",
    "  # Write your code here\n  arr.inject(:*) % n\nend",
    "  arr.inject(1) { |product, num| product * num % n }\nend",
    "  # Write your code here\n  product = 1\n  for i in 0..arr.length-1\n    product = (product * arr[i]) % n\n  end\n  return product\nend",
    "  arr.inject(:*) % n\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |i|\n    product = (product * i) % n\n  end\n  product\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |num|\n    product = (product * num) % n\n  end\n  product\nend",
    "  arr.inject(:*) % n\nend",
    "  # Write your code here\n  arr.inject(:*) % n\nend",
    "  arr.inject(:*) % n\nend",
    "  arr.inject(:*) % n\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |num|\n    product *= num\n  end\n  product % n\nend",
    "  arr.reduce(:*) % n\nend",
    "  # Write your code here\n  # To print results to the standard output you can use puts\n  # Example: puts \"Hello world!\"\n  arr.inject(1) { |prod, i| prod * i % n }\nend",
    "  # Write your code here\n  arr.inject(:*) % n\nend",
    "  arr.inject(:*) % n\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |i|\n    product = (product * i) % n\n  end\n  product\nend",
    "  # Write your code here\n  arr.inject(:*) % n\nend",
    "  arr.inject(:*) % n\nend"
  ]
}