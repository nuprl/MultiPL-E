{
  "name": "mbpp_74_is_samepatterns",
  "language": "rb",
  "prompt": "# Write a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_samepatterns\n    candidate = method(:is_samepatterns)\n    assert_equal(true, candidate.call([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]))\n    assert_equal(false, candidate.call([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]))\n    assert_equal(false, candidate.call([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  # Write your code here\n  return false if colors.length != patterns.length\n  return false if patterns.length == 0\n  return false if patterns.length == 1 && patterns[0] == 1\n  return false if patterns.length == 1 && patterns[0] == 0\n  return false if patterns.length == 2 && patterns[0] == 1 && patterns[1] == 0\n  return false if patterns.length == 2 && patterns[0] == 0 && patterns[1] == 1\n  return false if patterns.length == 2 && patterns[0] == 1 && patterns[1] == 1\n  return false if patterns.length == 2 && patterns[0] == 0 && patterns[1] == 0\n  return false if patterns.length == 3 && patterns[0] == 1 && patterns[1] == 0 && patterns[2] == 1\n  return false if patterns.length == 3 && patterns[0] == 0 && patterns[1] == 1 && patterns[2] == 0\n  return false if patterns.length == 3 && patterns[0] == 1 && patterns[1] == 1 && patterns[2] == 0\n  return false if patterns.length == 3 && patterns[0] == 0 && patterns[1] == 0 && patterns[2] == 1\n  return false if patterns.length == 3 && patterns[0] == 1 && patterns[1] == 0 && patterns[2] == 0\n  return false if patterns.length == 3 && patterns[0] == 0 && patterns[1] == 1 && patterns[2] == 1\n  return false if patterns.length == 3 && patterns[0] == 1 && patterns[1] == 1 && patterns[2] == 1\n  return false if patterns.length == 3 && patterns[0] == 0 && patterns[1] == 0 && patterns[2] == 0\n  return false if patterns.length == 4 && patterns[0] == 1 && patterns[1] == 0 && patterns[2] == 1 && patterns[3] == 0\n  return false if patterns.length == 4 && patterns[0] == 0 && patterns[1] == 1 && patterns[2] == 0 && patterns[3] == 1\n  return false if patterns.length == 4 && patterns[0] == 1 && patterns[1] == 1 && patterns[2]",
    "  # Write your code here\n  colors.each_with_index do |color, index|\n    if patterns[index] == 'any'\n      next\n    elsif patterns[index] != color\n      return false\n    end\n  end\n  true\nend",
    "  # Write your code here\n  return false if colors.length != patterns.length\n  patterns.each_with_index do |pattern, index|\n    return false if pattern == 'R' && colors[index] != 'R'\n    return false if pattern == 'G' && colors[index] != 'G'\n    return false if pattern == 'B' && colors[index] != 'B'\n  end\n  true\nend",
    "  # Write your code here\n  # To print results to the standard output you can use puts\n  # Example: puts \"Hello world!\"\n  patterns.each do |pattern|\n    return false if pattern.length > colors.length\n    return false if pattern.length == 0\n    return false if pattern.length == 1 && colors.length > 1\n    return false if pattern.length == 1 && colors.length == 1 && pattern[0] != colors[0]\n    return false if pattern.length == 2 && colors.length == 2 && pattern[0] != colors[0] && pattern[1] != colors[1]\n    return false if pattern.length == 2 && colors.length == 2 && pattern[0] == colors[0] && pattern[1] == colors[1]\n    return false if pattern.length == 2 && colors.length == 2 && pattern[0] == colors[1] && pattern[1] == colors[0]\n    return false if pattern.length == 2 && colors.length == 3 && pattern[0] == colors[0] && pattern[1] == colors[1]\n    return false if pattern.length == 2 && colors.length == 3 && pattern[0] == colors[0] && pattern[1] == colors[2]\n    return false if pattern.length == 2 && colors.length == 3 && pattern[0] == colors[1] && pattern[1] == colors[0]\n    return false if pattern.length == 2 && colors.length == 3 && pattern[0] == colors[1] && pattern[1] == colors[2]\n    return false if pattern.length == 2 && colors.length == 3 && pattern[0] == colors[2] && pattern[1] == colors[0]\n    return false if pattern.length == 2 && colors.length == 3 && pattern[0] == colors[2] && pattern[1] == colors[1]\n    return false if pattern.length == 3 && colors.length == 3 && pattern[0] == colors[0] && pattern[1] == colors[1] && pattern[2] == colors[2]\n    return false if pattern.length == 3 && colors.length == 3 && pattern[0] == colors[0] && pattern[1] == colors[2] && pattern",
    "  colors.each_with_index do |color, i|\n    return false if color != patterns[i % patterns.length]\n  end\n  true\nend",
    "  # Write your code here\n  return false if colors.length != patterns.length\n  return false if colors.length == 0\n  return false if patterns.length == 0\n  return false if colors.length == 1 && patterns[0] != \"*\"\n  return false if patterns.length == 1 && patterns[0] != \"*\"\n  return false if colors.length == 1 && patterns[0] == \"*\"\n  return false if patterns.length == 1 && patterns[0] == \"*\"\n  return false if colors.length == 2 && patterns[0] != \"*\" && patterns[1] != \"*\"\n  return false if patterns.length == 2 && patterns[0] != \"*\" && patterns[1] != \"*\"\n  return false if colors.length == 2 && patterns[0] == \"*\" && patterns[1] == \"*\"\n  return false if patterns.length == 2 && patterns[0] == \"*\" && patterns[1] == \"*\"\n  return false if colors.length == 2 && patterns[0] == \"*\" && patterns[1] != \"*\"\n  return false if patterns.length == 2 && patterns[0] == \"*\" && patterns[1] != \"*\"\n  return false if colors.length == 2 && patterns[0] != \"*\" && patterns[1] == \"*\"\n  return false if patterns.length == 2 && patterns[0] != \"*\" && patterns[1] == \"*\"\n  return false if colors.length == 3 && patterns[0] != \"*\" && patterns[1] != \"*\" && patterns[2] != \"*\"\n  return false if patterns.length == 3 && patterns[0] != \"*\" && patterns[1] != \"*\" && patterns[2] != \"*\"\n  return false if colors.length == 3 && patterns[0] == \"*\" && patterns[1] == \"*\" && patterns[2] == \"*\"\n  return false if patterns.length == 3 && patterns[0] == \"*\" && patterns[1] == \"*\" && patterns[2] == \"*\"\n  return false if colors.length == 3 && patterns[0] == \"*\" && patterns[1] ==",
    "  patterns.each_with_index do |pattern, index|\n    return false if colors[index] != pattern\n  end\n  true\nend",
    "  # Write your code here\n  return false if colors.length != patterns.length\n  colors.each_with_index do |color, index|\n    return false if color != patterns[index]\n  end\n  true\nend",
    "  # Write your code here\n  return false if colors.length != patterns.length\n  patterns.each_with_index do |pattern, index|\n    return false if pattern == 'R' && colors[index] != 'R'\n    return false if pattern == 'G' && colors[index] != 'G'\n    return false if pattern == 'B' && colors[index] != 'B'\n  end\n  true\nend",
    "  # Write your code here\n  return false if colors.length != patterns.length\n  patterns.each_with_index do |pattern, index|\n    return false if pattern != colors[index]\n  end\n  true\nend",
    "  colors.each_with_index do |color, index|\n    return false if color != patterns[index % patterns.length]\n  end\n  true\nend",
    "  # Write your code here\n  return false if patterns.length != colors.length\n  patterns.each_with_index do |pattern, index|\n    return false if pattern == \"*\" && colors[index] != colors[index-1]\n    return false if pattern == \"*\" && colors[index] == colors[index-1]\n    return false if pattern == \"R\" && colors[index] != \"R\"\n    return false if pattern == \"G\" && colors[index] != \"G\"\n    return false if pattern == \"B\" && colors[index] != \"B\"\n  end\n  true\nend",
    "  # Write your code here\n  return false if colors.length != patterns.length\n  return false if colors.length == 0\n  return false if patterns.length == 0\n  return false if colors.length == 1 && patterns[0] != 0\n  return false if patterns.length == 1 && patterns[0] != 0\n  return false if patterns.length == 2 && patterns[0] != 0 && patterns[1] != 1",
    "  # Write your code here\n  return false if colors.length != patterns.length\n  patterns.each_with_index do |pattern, index|\n    return false if pattern == \"R\" && colors[index] != \"R\"\n    return false if pattern == \"G\" && colors[index] != \"G\"\n    return false if pattern == \"B\" && colors[index] != \"B\"\n  end\n  true\nend",
    "  # Write your code here\n  return false if colors.length != patterns.length\n  patterns.each_with_index do |pattern, index|\n    return false if pattern == \"*\" && colors[index] == colors[index - 1]\n  end\n  true\nend",
    "  # Write your code here\n  # To print results to the standard output you can use puts\n  # Example: puts \"Hello world!\"\n  return false if colors.length != patterns.length\n  patterns.each_with_index do |pattern, index|\n    if pattern == 'R'\n      return false if colors[index] != 'R' && colors[index] != 'G'\n    elsif pattern == 'G'\n      return false if colors[index] != 'G' && colors[index] != 'B'\n    else\n      return false if colors[index] != 'B' && colors[index] != 'R'\n    end\n  end\n  true\nend",
    "  # Write your code here\n  return false if colors.length != patterns.length\n  patterns.each_with_index do |pattern, index|\n    return false if pattern == 'R' && colors[index] != 'R'\n    return false if pattern == 'G' && colors[index] != 'G'\n    return false if pattern == 'B' && colors[index] != 'B'\n  end\n  true\nend",
    "  patterns.each do |pattern|\n    return false if colors.index(pattern) == nil\n  end\n  true\nend",
    "  return false if colors.length != patterns.length\n  patterns.each_with_index do |pattern, i|\n    return false if colors[i] != pattern && pattern != '*'\n  end\n  true\nend",
    "  colors.each_with_index.all? do |color, i|\n    color == patterns[i % patterns.size]\n  end\nend"
  ]
}