{
  "name": "mbpp_91_find_substring",
  "language": "rb",
  "prompt": "# Write a function to check if a string is present as a substring in a given array of string values.\ndef find_substring(str1, sub_str)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_substring\n    candidate = method(:find_substring)\n    assert_equal(true, candidate.call([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"))\n    assert_equal(false, candidate.call([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"))\n    assert_equal(true, candidate.call([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  str1.include?(sub_str)\nend",
    "  str1.include?(sub_str)\nend",
    "  str1.include?(sub_str)\nend",
    "  str1.include?(sub_str)\nend",
    "  str1.include?(sub_str)\nend",
    "  str1.include?(sub_str)\nend",
    "  str1.include?(sub_str)\nend",
    "  str1.include?(sub_str)\nend",
    "  str1.include?(sub_str)\nend",
    "  str1.include?(sub_str)\nend",
    "  str1.include?(sub_str)\nend",
    "  str1.include?(sub_str)\nend",
    "  str1.include?(sub_str)\nend",
    "  str1.include?(sub_str)\nend",
    "  str1.include?(sub_str)\nend",
    "  str1.include?(sub_str)\nend",
    "  str1.include?(sub_str)\nend",
    "  str1.include?(sub_str)\nend",
    "  str1.include?(sub_str)\nend",
    "  str1.include?(sub_str)\nend"
  ]
}