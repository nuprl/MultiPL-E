{
  "name": "mbpp_166_find_even_pair",
  "language": "rb",
  "prompt": "# Write a function that counts the number of pairs of integers in an array that xor to an even number.\ndef find_even_pair(a)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_166_find_even_pair.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_even_pair\n    candidate = method(:find_even_pair)\n    assert_equal(4, candidate.call([5, 4, 7, 2, 1]))\n    assert_equal(9, candidate.call([7, 2, 8, 1, 0, 5, 11]))\n    assert_equal(1, candidate.call([1, 2, 3]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  count = 0\n  a.each_with_index do |num, i|\n    (i+1...a.length).each do |j|\n      count += 1 if (num ^ a[j]).even?\n    end\n  end\n  count\nend",
    "  count = 0\n  a.each_with_index do |x, i|\n    a.each_with_index do |y, j|\n      count += 1 if (x ^ y).even? && i < j\n    end\n  end\n  count\nend",
    "  count = 0\n  a.each_with_index do |x, i|\n    a[i+1..-1].each do |y|\n      count += 1 if (x ^ y).even?\n    end\n  end\n  count\nend",
    "  even_pairs = 0\n  a.each_with_index do |num, i|\n    a[i+1..-1].each do |num2|\n      even_pairs += 1 if (num ^ num2).even?\n    end\n  end\n  even_pairs\nend",
    "  count = 0\n  a.each_with_index do |x, i|\n    a.each_with_index do |y, j|\n      count += 1 if (x ^ y).even? && i < j\n    end\n  end\n  count\nend",
    "  even_count = 0\n  a.each_with_index do |num, idx|\n    a[idx + 1..-1].each do |num2|\n      even_count += 1 if (num ^ num2).even?\n    end\n  end\n  even_count\nend",
    "  # Write your code here\n  count = 0\n  a.each_with_index do |x, i|\n    a.each_with_index do |y, j|\n      count += 1 if (x ^ y).even? && i < j\n    end\n  end\n  count\nend",
    "  a.combination(2).count { |x, y| (x ^ y).even? }\nend",
    "  even_count = 0\n  a.each_with_index do |x, i|\n    (i+1..a.length-1).each do |j|\n      even_count += 1 if (x ^ a[j]).even?\n    end\n  end\n  even_count\nend",
    "  count = 0\n  a.each_with_index do |num, i|\n    a.each_with_index do |num2, j|\n      if i < j\n        count += 1 if (num ^ num2).even?\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  a.each_with_index do |num, i|\n    a.each_with_index do |num2, j|\n      if i < j\n        count += 1 if (num ^ num2) % 2 == 0\n      end\n    end\n  end\n  count\nend",
    "  even_count = 0\n  a.each_with_index do |num, i|\n    a.each_with_index do |num2, j|\n      next if i == j\n      even_count += 1 if (num ^ num2).even?\n    end\n  end\n  even_count\nend",
    "  count = 0\n  a.each_with_index do |e, i|\n    a[i+1..-1].each do |e2|\n      count += 1 if (e ^ e2).even?\n    end\n  end\n  count\nend",
    "  a.combination(2).count { |x, y| (x ^ y).even? }\nend",
    "  count = 0\n  a.each_with_index do |num, i|\n    (i + 1...a.length).each do |j|\n      count += 1 if (num ^ a[j]).even?\n    end\n  end\n  count\nend",
    "  count = 0\n  a.each_with_index do |x, i|\n    a.each_with_index do |y, j|\n      next if i == j\n      count += 1 if (x ^ y).even?\n    end\n  end\n  count\nend",
    "  count = 0\n  a.each_with_index do |x, i|\n    a[i+1..-1].each do |y|\n      count += 1 if (x ^ y).even?\n    end\n  end\n  count\nend",
    "  even_pairs = 0\n  a.each_with_index do |num, i|\n    a.each_with_index do |num2, j|\n      if i < j\n        even_pairs += 1 if (num ^ num2) % 2 == 0\n      end\n    end\n  end\n  even_pairs\nend",
    "  count = 0\n  a.each_with_index do |num1, i|\n    a.each_with_index do |num2, j|\n      count += 1 if (num1 ^ num2).even? && i < j\n    end\n  end\n  count\nend",
    "  count = 0\n  a.each_with_index do |num, i|\n    a[i+1..-1].each do |num2|\n      count += 1 if (num ^ num2).even?\n    end\n  end\n  count\nend"
  ]
}