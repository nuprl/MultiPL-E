{
  "name": "mbpp_755_second_smallest",
  "language": "rb",
  "prompt": "# Write a function to find the second smallest number in an array.\ndef second_smallest(numbers)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_755_second_smallest.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_second_smallest\n    candidate = method(:second_smallest)\n    assert_equal(-2, candidate.call([1, 2, -8, -2, 0, -2]))\n    assert_equal(-0.5, candidate.call([1, 1, -0.5, 0, 2, -2, -2]))\n    assert_equal(nil, candidate.call([2, 2]))\n    assert_equal(nil, candidate.call([2, 2, 2]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  numbers.sort!\n  numbers[1]\nend",
    "  numbers.sort[1]\nend",
    "  numbers.sort[1]\nend",
    "  numbers.sort!\n  numbers[1]\nend",
    "  numbers.sort[1]\nend",
    "  numbers.sort!\n  numbers[1]\nend",
    "  # TODO: return the second smallest number\n  numbers.sort!\n  numbers[1]\nend",
    "  numbers.sort!\n  numbers[1]\nend",
    "  numbers.sort[1]\nend",
    "  numbers.sort!\n  numbers[1]\nend",
    "  numbers.sort!\n  numbers[1]\nend",
    "  numbers.sort[1]\nend",
    "  numbers.sort[1]\nend",
    "  # TODO: return the second smallest number in the array\n  numbers.sort[1]\nend",
    "  numbers.sort[1]\nend",
    "  numbers.sort[1]\nend",
    "  numbers.sort[1]\nend",
    "  # TODO: implement me\n  numbers.sort!\n  numbers[1]\nend",
    "  numbers.sort!\n  numbers[1]\nend",
    "  numbers.sort[1]\nend"
  ]
}