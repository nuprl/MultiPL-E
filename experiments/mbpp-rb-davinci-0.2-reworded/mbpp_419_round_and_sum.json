{
  "name": "mbpp_419_round_and_sum",
  "language": "rb",
  "prompt": "# Write a function to round every number of a given array of numbers and print the total sum multiplied by the length of the array.\ndef round_and_sum(list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_419_round_and_sum.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_round_and_sum\n    candidate = method(:round_and_sum)\n    assert_equal(243, candidate.call([22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]))\n    assert_equal(345, candidate.call([5, 2, 9, 24.3, 29]))\n    assert_equal(513, candidate.call([25.0, 56.7, 89.2]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    rounded = list1.map {|x| x.round}\n    sum = rounded.reduce(:+)\n    puts sum * list1.length\nend",
    "  sum = 0\n  list1.each do |x|\n    sum += x.round\n  end\n  sum * list1.length\nend",
    "  sum = 0\n  list1.each do |x|\n    sum += x.round\n  end\n  sum * list1.length\nend",
    "  sum = 0\n  list1.each do |num|\n    sum += num.round\n  end\n  sum * list1.length\nend",
    "  sum = 0\n  list1.each do |x|\n    sum += x.round\n  end\n  sum * list1.length\nend",
    "  sum = 0\n  list1.each do |num|\n    sum += num.round\n  end\n  sum * list1.length\nend",
    "  sum = 0\n  list1.each do |num|\n    sum += num.round\n  end\n  sum * list1.length\nend",
    "  sum = 0\n  list1.each do |x|\n    sum += x.round\n  end\n  sum * list1.length\nend",
    "  sum = 0\n  list1.each do |num|\n    sum += num.round\n  end\n  sum * list1.length\nend",
    "  list1.map! {|x| x.round}\n  list1.reduce(:+) * list1.length\nend",
    "  sum = 0\n  list1.each do |num|\n    sum += num.round\n  end\n  sum * list1.length\nend",
    "  sum = 0\n  list1.each do |num|\n    sum += num.round\n  end\n  return sum * list1.length\nend",
    "  sum = 0\n  list1.each do |num|\n    sum += num.round\n  end\n  sum * list1.length\nend",
    "  sum = 0\n  list1.each do |num|\n    sum += num.round\n  end\n  return sum * list1.length\nend",
    "  sum = 0\n  list1.each do |num|\n    sum += num.round\n  end\n  sum * list1.length\nend",
    "  sum = 0\n  list1.each do |num|\n    sum += num.round\n  end\n  sum * list1.length\nend",
    "  sum = 0\n  list1.each do |num|\n    sum += num.round\n  end\n  sum * list1.length\nend",
    "  sum = 0\n  list1.each do |num|\n    sum += num.round\n  end\n  sum * list1.length\nend",
    "  sum = 0\n  list1.each do |num|\n    sum += num.round\n  end\n  sum * list1.length\nend",
    "  sum = 0\n  list1.each do |num|\n    sum += num.round\n  end\n  sum * list1.length\nend"
  ]
}