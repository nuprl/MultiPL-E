{
  "name": "mbpp_63_max_difference",
  "language": "rb",
  "prompt": "# Write a function to find the maximum difference between available pairs in the given array array.\ndef max_difference(test_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_63_max_difference.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_difference\n    candidate = method(:max_difference)\n    assert_equal(7, candidate.call([[3, 5], [1, 7], [10, 3], [1, 2]]))\n    assert_equal(15, candidate.call([[4, 6], [2, 17], [9, 13], [11, 12]]))\n    assert_equal(23, candidate.call([[12, 35], [21, 27], [13, 23], [41, 22]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  test_list.sort!\n  test_list[-1] - test_list[0]\nend",
    "  test_list.sort!\n  test_list[-1] - test_list[0]\nend",
    "  max_diff = 0\n  test_list.each_with_index do |num, index|\n    test_list[index + 1..-1].each do |num2|\n      diff = num2 - num\n      max_diff = diff if diff > max_diff\n    end\n  end\n  max_diff\nend",
    "  max_diff = 0\n  test_list.each_with_index do |num, index|\n    test_list[index+1..-1].each do |num2|\n      diff = num2 - num\n      max_diff = diff if diff > max_diff\n    end\n  end\n  max_diff\nend",
    "  max_diff = 0\n  test_list.each_with_index do |num, index|\n    test_list[index..-1].each do |num2|\n      diff = num2 - num\n      max_diff = diff if diff > max_diff\n    end\n  end\n  max_diff\nend",
    "  max_diff = 0\n  test_list.each_with_index do |num, index|\n    test_list[index+1..-1].each do |num2|\n      if num2 - num > max_diff\n        max_diff = num2 - num\n      end\n    end\n  end\n  max_diff\nend",
    "  test_list.sort!\n  test_list[-1] - test_list[0]\nend",
    "  max_diff = 0\n  test_list.each_with_index do |num, index|\n    test_list.each_with_index do |num2, index2|\n      if index2 > index\n        diff = num2 - num\n        if diff > max_diff\n          max_diff = diff\n        end\n      end\n    end\n  end\n  max_diff\nend",
    "  max_diff = 0\n  test_list.each_with_index do |num, index|\n    test_list[index + 1..-1].each do |num2|\n      diff = num2 - num\n      max_diff = diff if diff > max_diff\n    end\n  end\n  max_diff\nend",
    "  test_list.sort!\n  test_list[-1] - test_list[0]\nend",
    "  max_diff = 0\n  test_list.each_with_index do |num, index|\n    test_list[index+1..-1].each do |num2|\n      if num2 - num > max_diff\n        max_diff = num2 - num\n      end\n    end\n  end\n  max_diff\nend",
    "  max_diff = 0\n  for i in 0..test_list.size-1\n    for j in i+1..test_list.size-1\n      if test_list[j] - test_list[i] > max_diff\n        max_diff = test_list[j] - test_list[i]\n      end\n    end\n  end\n  max_diff\nend",
    "  test_list.sort!\n  test_list[-1] - test_list[0]\nend",
    "  max_diff = 0\n  test_list.each_with_index do |num, index|\n    test_list[index..-1].each do |num2|\n      if num2 - num > max_diff\n        max_diff = num2 - num\n      end\n    end\n  end\n  max_diff\nend",
    "  max_diff = 0\n  test_list.each_with_index do |num, index|\n    test_list[index..-1].each do |num2|\n      if num2 - num > max_diff\n        max_diff = num2 - num\n      end\n    end\n  end\n  max_diff\nend",
    "  test_list.sort!\n  test_list.last - test_list.first\nend",
    "  max_diff = 0\n  test_list.each_with_index do |num, index|\n    test_list.each_with_index do |num2, index2|\n      if index2 > index\n        diff = num2 - num\n        if diff > max_diff\n          max_diff = diff\n        end\n      end\n    end\n  end\n  return max_diff\nend",
    "  max_diff = 0\n  for i in 0..test_list.length-1\n    for j in i+1..test_list.length-1\n      if test_list[j] - test_list[i] > max_diff\n        max_diff = test_list[j] - test_list[i]\n      end\n    end\n  end\n  return max_diff\nend",
    "  test_list.sort!\n  test_list.last - test_list.first\nend",
    "  test_list.sort!\n  test_list[-1] - test_list[0]\nend"
  ]
}