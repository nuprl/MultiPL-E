{
  "name": "mbpp_635_heap_sort",
  "language": "rb",
  "prompt": "# Write a function to sort the given array.\ndef heap_sort(iterable)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_heap_sort\n    candidate = method(:heap_sort)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], candidate.call([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    assert_equal([14, 22, 25, 25, 35, 58, 65, 75, 85], candidate.call([25, 35, 22, 85, 14, 65, 75, 25, 58]))\n    assert_equal([1, 5, 7, 9], candidate.call([7, 1, 9, 5]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  # TODO: implement me!\nend",
    "  # TODO: implement me\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # Write your code here\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me\nend",
    "  heap = Heap.new\n  iterable.each { |item| heap.add(item) }\n  sorted = []\n  iterable.length.times { sorted << heap.remove }\n  sorted\nend",
    "  # ...\nend",
    "  # TODO: implement me!\nend",
    "  # ...\nend",
    "  # TODO: implement me\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me\nend",
    "  heap = Heap.new(iterable)\n  sorted = []\n  while heap.size > 0\n    sorted << heap.pop\n  end\n  sorted\nend",
    "  # ...\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me\nend",
    "  # TODO: implement me\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # ...\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me\nend",
    "  # Write your code here\nend",
    "  # TODO: implement me!\nend",
    "  heap = Heap.new(iterable)\n  heap.sort\nend",
    "  # Your code goes here.\nend",
    "  # Your code goes here.\nend",
    "  heap = Heap.new(iterable)\n  heap.sort\nend",
    "  # TODO: implement me\nend",
    "  # ...\nend",
    "  # Write your code here\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # your code here\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  heap = Heap.new(iterable)\n  heap.sort\nend",
    "  heap = Heap.new(iterable)\n  sorted = []\n  while heap.size > 0\n    sorted << heap.pop\n  end\n  sorted\nend",
    "  # TODO: implement me!\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # Your code here\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  heap = Heap.new(iterable)\n  sorted = []\n  while heap.size > 0\n    sorted << heap.pop\n  end\n  sorted\nend",
    "  heap = Heap.new(iterable)\n  sorted = []\n  while heap.size > 0\n    sorted << heap.pop\n  end\n  sorted\nend",
    "  # Your code goes here.\nend",
    "  # Write your code here\nend",
    "  # ...\nend",
    "  heap = Heap.new(iterable)\n  sorted = []\n  until heap.empty?\n    sorted << heap.pop\n  end\n  sorted\nend",
    "  # Build a max heap from the input data.\n  # The following naive implementation just sorts the given array\n  # using selection sort algorithm and rebuilds a heap from that.\n  # This will take O(n log n) time as there will be O(n log n) heapify\n  # calls.\n  # The heapify cost can be reduced to O(n) by using Heap.heapify_up()\n  # and Heap.heapify_down(). We will use heapify_down() here.\n  heap = Heap.new(iterable)",
    "  # TODO: implement me\nend",
    "  # TODO: implement me!\nend",
    "  # Write your code here\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  heap = Heap.new(iterable)\n  heap.sort\nend",
    "  heap = Heap.new(iterable)\n  sorted = []",
    "  # TODO: implement me\nend",
    "  # TODO: implement me\nend",
    "  # ...\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  heap = Heap.new\n  heap.build_heap(iterable)\n  heap.sort\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # ...\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  heap = Heap.new(iterable)\n  sorted = []\n  while heap.size > 0\n    sorted << heap.pop\n  end\n  sorted\nend",
    "  # Write your code here.\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  heap = Heap.new(iterable)\n  result = []\n  while heap.size > 0\n    result << heap.pop\n  end\n  result\nend",
    "  # TODO: implement me!\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # Write your code here\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # Write your code here\nend",
    "  # ...\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # ...\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  heap = Heap.new\n  iterable.each { |item| heap.insert(item) }\n  iterable.map! { heap.extract }\nend",
    "  heap = Heap.new(iterable)\n  heap.sort\nend",
    "  # TODO: implement me\nend",
    "  # TODO: implement me!\nend",
    "  raise ArgumentError, 'Argument is not iterable' unless iterable.respond_to?(:each)",
    "  # ...\nend",
    "  # Write your code here\nend",
    "  # TODO: implement me\nend",
    "  # Write your code here.\nend",
    "  heap = Heap.new(iterable)\n  heap.sort\nend",
    "  # TODO: implement me!\nend",
    "  heap = Heap.new(iterable)\n  heap.sort\nend",
    "  heap = Heap.new(iterable)\n  sorted = []\n  while heap.size > 0\n    sorted << heap.pop\n  end\n  sorted\nend",
    "  # ...\nend",
    "  # TODO: implement me!\nend",
    "  heap = Heap.new(iterable)\n  sorted_array = []\n  while heap.size > 0\n    sorted_array << heap.pop\n  end\n  sorted_array\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # TODO: implement me\nend",
    "  # TODO: implement me!\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # TODO: implement me!\nend",
    "  heap = Heap.new(iterable)\n  heap.sort\nend",
    "  # TODO: implement me\nend",
    "  # Write your code here.\nend",
    "  # TODO: implement me!\nend",
    "  heap = BinaryHeap.new(iterable)\n  heap.sort\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # Your code goes here.\nend",
    "  # TODO: implement me!\nend",
    "  heap = Heap.new\n  iterable.each { |item| heap.insert(item) }\n  iterable.map! { heap.delete_max }\nend",
    "  # ...\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # ...\nend",
    "  heap = Heap.new\n  iterable.each { |element| heap.insert(element) }\n  sorted = []\n  until heap.empty?\n    sorted << heap.extract\n  end\n  sorted\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # Write your code here\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # ...\nend",
    "  heap = Heap.new(iterable)\n  heap.sort\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # TODO: implement me\nend",
    "  # TODO: implement me\nend",
    "  # TODO: implement me\nend",
    "  # TODO: implement me\nend",
    "  # Write your code here\nend",
    "  # ...\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me\nend",
    "  # TODO: implement me!\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # Write your code here\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  heap = Heap.new(iterable)\n  heap.sort\nend",
    "  # TODO: implement me!\nend",
    "  # Your code here\nend",
    "  # ...\nend",
    "  # TODO: implement me!\nend",
    "  heap = Heap.new(iterable)\n  sorted = []\n  while heap.size > 0\n    sorted << heap.pop\n  end\n  sorted\nend",
    "  # ...\nend",
    "  # TODO: implement me\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # Write your code here.\nend",
    "  # Write your code here\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  heap = Heap.new(iterable)\n  result = []\n  while heap.size > 0\n    result << heap.pop\n  end\n  result\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # Write your code here.\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # Write your code here\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # ...\nend",
    "  # TODO: implement me\nend",
    "  # TODO: implement me!\nend",
    "  heap = Heap.new(iterable)\n  result = []\n  while heap.size > 0\n    result << heap.pop\n  end\n  result\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # Write your code here\nend"
  ]
}