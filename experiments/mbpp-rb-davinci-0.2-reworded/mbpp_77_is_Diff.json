{
  "name": "mbpp_77_is_Diff",
  "language": "rb",
  "prompt": "# Write a rbthon function to find whether a number is divisible by 11.\ndef is_Diff(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_Diff\n    candidate = method(:is_Diff)\n    assert_equal(false, candidate.call(12345))\n    assert_equal(true, candidate.call(1212112))\n    assert_equal(false, candidate.call(1212))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i%2==0\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if (sum1-sum2)%11==0\n    puts \"Number is divisible by 11\"\n  else\n    puts \"Number is not divisible by 11\"\n  end\nend",
    "  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  odd_digits.sum - even_digits.sum\nend",
    "  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  return odd_digits.sum - even_digits.sum == 0\nend",
    "  n = n.to_s\n  n = n.split('')\n  n = n.map(&:to_i)\n  sum = 0\n  n.each_with_index do |num, index|\n    if index.even?\n      sum += num\n    else\n      sum -= num\n    end\n  end\n  if sum % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  n = n.to_s\n  sum = 0\n  for i in 0..n.length-1\n    sum += n[i].to_i\n  end\n  return sum % 11 == 0\nend",
    "  n = n.to_s\n  return false if n.length == 1\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  return true if (sum1 - sum2).abs % 11 == 0\n  return false\nend",
    "  sum_odd=0\n  sum_even=0\n  while n>0\n    r=n%10\n    if r%2==0\n      sum_even=sum_even+r\n    else\n      sum_odd=sum_odd+r\n    end\n    n=n/10\n  end\n  if (sum_even-sum_odd)%11==0\n    puts \"Number is divisible by 11\"\n  else\n    puts \"Number is not divisible by 11\"\n  end\nend\nis_Diff(2468)",
    "  return false if n < 0\n  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  odd_digits.sum - even_digits.sum\nend",
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if (sum1 - sum2).abs % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if (sum1 - sum2).abs % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  return false if n < 0\n  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  sum_odd = odd_digits.inject(0) { |sum, x| sum + x }\n  sum_even = even_digits.inject(0) { |sum, x| sum + x }\n  is_Diff(sum_odd - sum_even)\nend",
    "  n = n.to_s\n  return false if n.length == 1\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  return true if (sum1 - sum2) % 11 == 0\n  return false\nend",
    "  n = n.to_s\n  n = n.split('')\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if (sum1 - sum2) % 11 == 0\n    puts \"#{n} is divisible by 11\"\n  else\n    puts \"#{n} is not divisible by 11\"\n  end\nend",
    "  return false if n < 0\n  return true if n == 0\n  odd_count = 0\n  even_count = 0\n  while n != 0\n    if n % 2 == 0\n      even_count += 1\n    else\n      odd_count += 1\n    end\n    n = n / 10\n  end\n  return (odd_count - even_count).abs == 11\nend",
    "\treturn (n%11==0)\nend\nputs is_Diff(121)\nputs is_Diff(122)\nputs is_Diff(123)\nputs is_Diff(124)\nputs is_Diff(125)\nputs is_Diff(126)\nputs is_Diff(127)\nputs is_Diff(128)\nputs is_Diff(129)\nputs is_Diff(130)\nputs is_Diff(131)\nputs is_Diff(132)\nputs is_Diff(133)\nputs is_Diff(134)\nputs is_Diff(135)\nputs is_Diff(136)\nputs is_Diff(137)\nputs is_Diff(138)\nputs is_Diff(139)\nputs is_Diff(140)\nputs is_Diff(141)\nputs is_Diff(142)\nputs is_Diff(143)\nputs is_Diff(144)\nputs is_Diff(145)\nputs is_Diff(146)\nputs is_Diff(147)\nputs is_Diff(148)\nputs is_Diff(149)\nputs is_Diff(150)\nputs is_Diff(151)\nputs is_Diff(152)\nputs is_Diff(153)\nputs is_Diff(154)\nputs is_Diff(155)\nputs is_Diff(156)\nputs is_Diff(157)\nputs is_Diff(158)\nputs is_Diff(159)\nputs is_Diff(160)\nputs is_Diff(161)\nputs is_Diff(162)\nputs is_Diff(163)\nputs is_Diff(164)\nputs is_Diff(165)\nputs is_Diff(166)\nputs is_Diff(167)\nputs is_Diff(168)\nputs is_Diff(169)\nputs is_Diff(170)\nputs is_Diff(171)\nputs is_Diff(172)\nputs is_Diff(173)\nputs is_Diff(174)\nputs is_Diff(175)\nputs is_",
    "  return false if n < 0\n  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  sum_odd = odd_digits.inject(0) {|sum, i| sum + i}\n  sum_even = even_digits.inject(0) {|sum, i| sum + i}\n  is_Diff(sum_odd - sum_even)\nend",
    "  if n % 11 == 0\n    puts \"#{n} is divisible by 11\"\n  else\n    puts \"#{n} is not divisible by 11\"\n  end\nend",
    "  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  return is_Diff(odd_digits.sum - even_digits.sum)\nend",
    "  return false if n < 0\n  return true if n == 0\n  odd_count = 0\n  even_count = 0\n  while n != 0\n    if n % 2 == 0\n      even_count += 1\n    else\n      odd_count += 1\n    end\n    n /= 2\n  end\n  is_Diff(odd_count - even_count)\nend",
    "  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  n = n.to_s.split('')\n  n.each_with_index do |digit, index|\n    if index.even?\n      even_digits << digit.to_i\n    else\n      odd_digits << digit.to_i\n    end\n  end\n  sum_even = even_digits.inject(0) { |sum, x| sum + x }\n  sum_odd = odd_digits.inject(0) { |sum, x| sum + x }\n  return is_Diff(sum_even - sum_odd)\nend"
  ]
}