{
  "name": "mbpp_77_is_Diff",
  "language": "rb",
  "prompt": "# Write a rbthon function to find whether a number is divisible by 11.\ndef is_Diff(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_Diff\n    candidate = method(:is_Diff)\n    assert_equal(false, candidate.call(12345))\n    assert_equal(true, candidate.call(1212112))\n    assert_equal(false, candidate.call(1212))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i%2==0\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if (sum1-sum2)%11==0\n    puts \"Number is divisible by 11\"\n  else\n    puts \"Number is not divisible by 11\"\n  end\nend",
    "  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  odd_digits.sum - even_digits.sum\nend",
    "  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  return odd_digits.sum - even_digits.sum == 0\nend",
    "  n = n.to_s\n  n = n.split('')\n  n = n.map(&:to_i)\n  sum = 0\n  n.each_with_index do |num, index|\n    if index.even?\n      sum += num\n    else\n      sum -= num\n    end\n  end\n  if sum % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  n = n.to_s\n  sum = 0\n  for i in 0..n.length-1\n    sum += n[i].to_i\n  end\n  return sum % 11 == 0\nend",
    "  n = n.to_s\n  return false if n.length == 1\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  return true if (sum1 - sum2).abs % 11 == 0\n  return false\nend",
    "  sum_odd=0\n  sum_even=0\n  while n>0\n    r=n%10\n    if r%2==0\n      sum_even=sum_even+r\n    else\n      sum_odd=sum_odd+r\n    end\n    n=n/10\n  end\n  if (sum_even-sum_odd)%11==0\n    puts \"Number is divisible by 11\"\n  else\n    puts \"Number is not divisible by 11\"\n  end\nend\nis_Diff(2468)",
    "  return false if n < 0\n  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  odd_digits.sum - even_digits.sum\nend",
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if (sum1 - sum2).abs % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if (sum1 - sum2).abs % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  return false if n < 0\n  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  sum_odd = odd_digits.inject(0) { |sum, x| sum + x }\n  sum_even = even_digits.inject(0) { |sum, x| sum + x }\n  is_Diff(sum_odd - sum_even)\nend",
    "  n = n.to_s\n  return false if n.length == 1\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  return true if (sum1 - sum2) % 11 == 0\n  return false\nend",
    "  n = n.to_s\n  n = n.split('')\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if (sum1 - sum2) % 11 == 0\n    puts \"#{n} is divisible by 11\"\n  else\n    puts \"#{n} is not divisible by 11\"\n  end\nend",
    "  return false if n < 0\n  return true if n == 0\n  odd_count = 0\n  even_count = 0\n  while n != 0\n    if n % 2 == 0\n      even_count += 1\n    else\n      odd_count += 1\n    end\n    n = n / 10\n  end\n  return (odd_count - even_count).abs == 11\nend",
    "\treturn (n%11==0)\nend\nputs is_Diff(121)\nputs is_Diff(122)\nputs is_Diff(123)\nputs is_Diff(124)\nputs is_Diff(125)\nputs is_Diff(126)\nputs is_Diff(127)\nputs is_Diff(128)\nputs is_Diff(129)\nputs is_Diff(130)\nputs is_Diff(131)\nputs is_Diff(132)\nputs is_Diff(133)\nputs is_Diff(134)\nputs is_Diff(135)\nputs is_Diff(136)\nputs is_Diff(137)\nputs is_Diff(138)\nputs is_Diff(139)\nputs is_Diff(140)\nputs is_Diff(141)\nputs is_Diff(142)\nputs is_Diff(143)\nputs is_Diff(144)\nputs is_Diff(145)\nputs is_Diff(146)\nputs is_Diff(147)\nputs is_Diff(148)\nputs is_Diff(149)\nputs is_Diff(150)\nputs is_Diff(151)\nputs is_Diff(152)\nputs is_Diff(153)\nputs is_Diff(154)\nputs is_Diff(155)\nputs is_Diff(156)\nputs is_Diff(157)\nputs is_Diff(158)\nputs is_Diff(159)\nputs is_Diff(160)\nputs is_Diff(161)\nputs is_Diff(162)\nputs is_Diff(163)\nputs is_Diff(164)\nputs is_Diff(165)\nputs is_Diff(166)\nputs is_Diff(167)\nputs is_Diff(168)\nputs is_Diff(169)\nputs is_Diff(170)\nputs is_Diff(171)\nputs is_Diff(172)\nputs is_Diff(173)\nputs is_Diff(174)\nputs is_Diff(175)\nputs is_",
    "  return false if n < 0\n  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  sum_odd = odd_digits.inject(0) {|sum, i| sum + i}\n  sum_even = even_digits.inject(0) {|sum, i| sum + i}\n  is_Diff(sum_odd - sum_even)\nend",
    "  if n % 11 == 0\n    puts \"#{n} is divisible by 11\"\n  else\n    puts \"#{n} is not divisible by 11\"\n  end\nend",
    "  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  return is_Diff(odd_digits.sum - even_digits.sum)\nend",
    "  return false if n < 0\n  return true if n == 0\n  odd_count = 0\n  even_count = 0\n  while n != 0\n    if n % 2 == 0\n      even_count += 1\n    else\n      odd_count += 1\n    end\n    n /= 2\n  end\n  is_Diff(odd_count - even_count)\nend",
    "  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  n = n.to_s.split('')\n  n.each_with_index do |digit, index|\n    if index.even?\n      even_digits << digit.to_i\n    else\n      odd_digits << digit.to_i\n    end\n  end\n  sum_even = even_digits.inject(0) { |sum, x| sum + x }\n  sum_odd = odd_digits.inject(0) { |sum, x| sum + x }\n  return is_Diff(sum_even - sum_odd)\nend",
    "  s = n.to_s\n  i = 0\n  sum = 0\n  while i < s.length\n    sum += s[i].to_i\n    i += 2\n  end\n  i = 1\n  while i < s.length\n    sum -= s[i].to_i\n    i += 2\n  end\n  sum.abs % 11 == 0\nend",
    "  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  sum_odd = odd_digits.inject(0) { |sum, i| sum + i }\n  sum_even = even_digits.inject(0) { |sum, i| sum + i }\n  return true if sum_odd - sum_even == 0\n  return false\nend",
    "  n = n.to_s\n  if n.length == 1\n    return false\n  end\n  sum = 0\n  for i in 0..n.length-1\n    if i%2 == 0\n      sum += n[i].to_i\n    else\n      sum -= n[i].to_i\n    end\n  end\n  if sum%11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  return false if n < 0\n  return true if n == 0\n  odd_count = 0\n  even_count = 0\n  while n > 0\n    if n.odd?\n      odd_count += 1\n    else\n      even_count += 1\n    end\n    n = n / 10\n  end\n  is_Diff(odd_count - even_count)\nend",
    "  n = n.to_s\n  diff = n[0].to_i - n[1].to_i\n  for i in 2..n.length-1\n    if diff != n[i].to_i - n[i+1].to_i\n      return false\n    end\n  end\n  return true\nend",
    "  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  sum_odd = odd_digits.inject(0) { |sum, x| sum + x }\n  sum_even = even_digits.inject(0) { |sum, x| sum + x }\n  is_Diff(sum_odd - sum_even)\nend",
    "  if n%11 == 0\n    puts \"#{n} is divisible by 11\"\n  else\n    puts \"#{n} is not divisible by 11\"\n  end\nend",
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..(n.length-1)\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if (sum1 - sum2) % 11 == 0\n    puts \"#{n} is divisible by 11\"\n  else\n    puts \"#{n} is not divisible by 11\"\n  end\nend",
    "  if n.to_s.length == 1\n    return false\n  end\n  odd = 0\n  even = 0\n  n.to_s.split('').each_with_index do |num, index|\n    if index.even?\n      even += num.to_i\n    else\n      odd += num.to_i\n    end\n  end\n  return (even - odd).abs % 11 == 0\nend",
    "  n = n.to_s.split(\"\")\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  return (sum1 - sum2).abs % 11 == 0\nend",
    "  return true if n < 0\n  odd_dig, even_dig = 0, 0\n  while n > 0\n    odd_dig += n % 10\n    n /= 10\n    even_dig += n % 10\n    n /= 10\n  end\n  return (odd_dig - even_dig).abs % 11 == 0\nend",
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if (sum1-sum2).abs % 11 == 0\n    puts \"#{n} is divisible by 11\"\n  else\n    puts \"#{n} is not divisible by 11\"\n  end\nend",
    "  n = n.to_s\n  i = 0\n  sum1 = 0\n  sum2 = 0\n  while i < n.length\n    sum1 = sum1 + n[i].to_i\n    i = i + 2\n  end\n  i = 1\n  while i < n.length\n    sum2 = sum2 + n[i].to_i\n    i = i + 2\n  end\n  if (sum1 - sum2).abs % 11 == 0\n    puts \"Divisible by 11\"\n  else\n    puts \"Not Divisible by 11\"\n  end\nend",
    "  return n%11==0\nend\nputs is_Diff(11)\nputs is_Diff(12)\nputs is_Diff(13)\nputs is_Diff(14)\nputs is_Diff(15)\nputs is_Diff(16)\nputs is_Diff(17)\nputs is_Diff(18)\nputs is_Diff(19)\nputs is_Diff(20)\nputs is_Diff(21)\nputs is_Diff(22)\nputs is_Diff(23)\nputs is_Diff(24)\nputs is_Diff(25)\nputs is_Diff(26)\nputs is_Diff(27)\nputs is_Diff(28)\nputs is_Diff(29)\nputs is_Diff(30)\nputs is_Diff(31)\nputs is_Diff(32)\nputs is_Diff(33)\nputs is_Diff(34)\nputs is_Diff(35)\nputs is_Diff(36)\nputs is_Diff(37)\nputs is_Diff(38)\nputs is_Diff(39)\nputs is_Diff(40)\nputs is_Diff(41)\nputs is_Diff(42)\nputs is_Diff(43)\nputs is_Diff(44)\nputs is_Diff(45)\nputs is_Diff(46)\nputs is_Diff(47)\nputs is_Diff(48)\nputs is_Diff(49)\nputs is_Diff(50)\nputs is_Diff(51)\nputs is_Diff(52)\nputs is_Diff(53)\nputs is_Diff(54)\nputs is_Diff(55)\nputs is_Diff(56)\nputs is_Diff(57)\nputs is_Diff(58)\nputs is_Diff(59)\nputs is_Diff(60)\nputs is_Diff(61)\nputs is_Diff(62)\nputs is_Diff(63)\nputs is_Diff(64)\nputs is_Diff(65)\nputs is_Diff(",
    "  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  return is_Diff(odd_digits.sum - even_digits.sum)\nend",
    "  return true if n < 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  odd_digits.sum - even_digits.sum == 0\nend",
    "  n = n.to_s\n  return false if n.length == 1\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  return true if (sum1 - sum2).abs % 11 == 0\n  return false\nend",
    "  n = n.to_s\n  return false if n.length == 1\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  return (sum1 - sum2).abs % 11 == 0\nend",
    "  return false if n < 0\n  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  sum_odd = odd_digits.inject(0) { |sum, x| sum + x }\n  sum_even = even_digits.inject(0) { |sum, x| sum + x }\n  is_Diff(sum_odd - sum_even)\nend",
    "  n = n.to_s\n  return false if n.length == 1\n  sum = 0\n  for i in 0..n.length-1\n    sum += n[i].to_i\n  end\n  return true if sum % 11 == 0\n  return false\nend",
    "  num = n.to_s\n  sum = 0\n  for i in 0..num.length-1\n    if i.even?\n      sum += num[i].to_i\n    else\n      sum -= num[i].to_i\n    end\n  end\n  if sum % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  return false if n < 0\n  return true if n == 0\n  odd_count = 0\n  even_count = 0\n  while n > 0\n    if n % 2 == 0\n      even_count += 1\n    else\n      odd_count += 1\n    end\n    n /= 2\n  end\n  is_Diff(odd_count - even_count)\nend",
    "  n = n.to_s\n  return false if n.length == 1\n  return true if n.length == 2\n  sum = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum += n[i].to_i\n    else\n      sum -= n[i].to_i\n    end\n  end\n  return true if sum == 0\n  is_Diff(sum)\nend",
    "  n = n.to_s\n  sum = 0\n  for i in 0..n.length-1\n    sum += n[i].to_i\n  end\n  if sum % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  return true if is_Diff(odd_digits.sum - even_digits.sum)\n  return false\nend",
    "  n = n.to_s\n  n = n.split('')\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if (sum1 - sum2).abs % 11 == 0\n    puts \"Number is divisible by 11\"\n  else\n    puts \"Number is not divisible by 11\"\n  end\nend",
    "  return true if n == 0\n  odd_count = 0\n  even_count = 0\n  while n != 0\n    if n.odd?\n      odd_count += 1\n    else\n      even_count += 1\n    end\n    n = n / 10\n  end\n  return (odd_count - even_count).abs == 1\nend",
    "  n = n.to_s\n  sum = 0\n  for i in 0..n.length-1\n    if i%2 == 0\n      sum = sum + n[i].to_i\n    else\n      sum = sum - n[i].to_i\n    end\n  end\n  if sum%11 == 0\n    return true\n  else\n    return false\n  end\nend\nputs is_Diff(1234)\nputs is_Diff(1243)\nputs is_Diff(1254)\nputs is_Diff(1264)",
    "  return false if n < 0\n  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  odd_digits.reduce(:+) - even_digits.reduce(:+)\nend",
    "  return true if n < 0\n  odd_dig, even_dig = 0, 0\n  while(n > 0)\n    odd_dig += n % 10\n    n /= 10\n    even_dig += n % 10\n    n /= 10\n  end\n  return (odd_dig - even_dig).abs % 11 == 0\nend",
    "  n = n.to_s\n  if n.length == 1\n    return false\n  end\n  sum = 0\n  for i in 0..n.length-1\n    if i % 2 == 0\n      sum += n[i].to_i\n    else\n      sum -= n[i].to_i\n    end\n  end\n  if sum % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  n = n.to_s\n  return false if n.length == 1\n  return true if n.length == 2\n  sum1 = 0\n  sum2 = 0\n  for i in 0..(n.length-1)\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  return true if (sum1 - sum2).abs % 11 == 0\n  return false\nend",
    "  n = n.to_s\n  sum = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum += n[i].to_i\n    else\n      sum -= n[i].to_i\n    end\n  end\n  if sum%11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  return false if n < 0\n  return true if n == 0\n  odd_count = 0\n  even_count = 0\n  while n > 0\n    if n % 2 == 0\n      even_count += 1\n    else\n      odd_count += 1\n    end\n    n /= 2\n  end\n  is_Diff(odd_count - even_count)\nend",
    "  if n.to_s.length == 1\n    return false\n  end\n  num = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..num.length-1\n    if i % 2 == 0\n      sum1 += num[i].to_i\n    else\n      sum2 += num[i].to_i\n    end\n  end\n  if (sum1 - sum2).abs == 11\n    return true\n  else\n    return false\n  end\nend",
    "  n = n.to_s\n  if n.length == 1\n    return false\n  end\n  sum = 0\n  for i in 0..n.length-1\n    if i % 2 == 0\n      sum += n[i].to_i\n    else\n      sum -= n[i].to_i\n    end\n  end\n  if sum % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  sum_even = 0\n  sum_odd = 0\n  while n > 0\n    r = n % 10\n    if r.even?\n      sum_even += r\n    else\n      sum_odd += r\n    end\n    n /= 10\n  end\n  return (sum_even - sum_odd).abs % 11 == 0\nend",
    "  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  odd_sum = odd_digits.inject(0) { |sum, i| sum + i }\n  even_sum = even_digits.inject(0) { |sum, i| sum + i }\n  is_Diff(odd_sum - even_sum)\nend",
    "  n = n.to_s\n  n = n.split('')\n  n = n.map(&:to_i)\n  sum = 0\n  n.each_with_index do |num, index|\n    if index.even?\n      sum += num\n    else\n      sum -= num\n    end\n  end\n  sum % 11 == 0\nend",
    "  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  return true if (odd_digits.inject(:+) - even_digits.inject(:+)) % 11 == 0\n  false\nend",
    "  n = n.to_s\n  n = n.split('')\n  sum = 0\n  for i in 0..n.length-1\n    if i%2 == 0\n      sum = sum + n[i].to_i\n    else\n      sum = sum - n[i].to_i\n    end\n  end\n  if sum%11 == 0\n    puts \"Number is divisible by 11\"\n  else\n    puts \"Number is not divisible by 11\"\n  end\nend",
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  return (sum1-sum2).abs\nend",
    "  n = n.to_s.split('')\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if (sum1 - sum2).abs % 11 == 0\n    puts \"#{n} is divisible by 11\"\n  else\n    puts \"#{n} is not divisible by 11\"\n  end\nend",
    "  return false if n < 0\n  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  odd_digits.sum - even_digits.sum == 0\nend",
    "  return false if n < 0\n  return true if n == 0\n  return is_Diff(n-11)\nend",
    "  return false if n < 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  odd_sum = odd_digits.inject(0) {|sum, i| sum + i}\n  even_sum = even_digits.inject(0) {|sum, i| sum + i}\n  return (odd_sum - even_sum).abs % 11 == 0\nend",
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  (0..n.length-1).each do |i|\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if (sum1 - sum2).abs % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  n = n.to_s\n  return true if n.length == 1\n  return false if n.length == 2\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  is_Diff(sum1-sum2)\nend",
    "  n = n.to_s\n  return false if n.length == 1\n  sum = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum += n[i].to_i\n    else\n      sum -= n[i].to_i\n    end\n  end\n  return sum % 11 == 0\nend",
    "  return false if n.zero?\n  return true if n == 11\n  return true if n == -11\n  return false if n.abs < 11\n  is_Diff(n - 11)\nend",
    "  return true if n == 0\n  odd_count = 0\n  even_count = 0\n  while n != 0\n    if n.odd?\n      odd_count += 1\n    else\n      even_count += 1\n    end\n    n /= 10\n  end\n  return true if (odd_count - even_count).abs % 11 == 0\n  false\nend",
    "  n = n.to_s\n  return false if n.length < 2\n  return true if n.length == 2\n  return is_Diff(n[1..-1].to_i - n[0].to_i)\nend",
    "  return false if n < 0\n  return true if n == 0\n  sum_odd = 0\n  sum_even = 0\n  while n > 0\n    sum_odd += n % 10\n    n /= 10\n    sum_even += n % 10\n    n /= 10\n  end\n  is_Diff(sum_even - sum_odd)\nend",
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  return (sum1 - sum2).abs\nend",
    "  n = n.to_s.split('').map(&:to_i)\n  return false if n.size == 1\n  (0..n.size-1).step(2).each do |i|\n    return false if n[i] - n[i+1] != 0\n  end\n  true\nend",
    "  n = n.to_s\n  l = n.length\n  if l % 2 == 0\n    a = n[0..(l/2-1)].to_i\n    b = n[(l/2)..-1].to_i\n    if a - b == 0\n      return true\n    else\n      return false\n    end\n  else\n    a = n[0..(l/2-1)].to_i\n    b = n[(l/2+1)..-1].to_i\n    if a - b == 0\n      return true\n    else\n      return false\n    end\n  end\nend",
    "  n = n.to_s\n  return false if n.length == 1\n  sum = 0\n  for i in 0...n.length\n    if i.even?\n      sum += n[i].to_i\n    else\n      sum -= n[i].to_i\n    end\n  end\n  return true if sum % 11 == 0\n  return false\nend",
    "  return false if n < 0\n  return true if n == 0\n  odd_count = 0\n  even_count = 0\n  while n != 0\n    if n % 2 == 0\n      even_count += 1\n    else\n      odd_count += 1\n    end\n    n = n / 10\n  end\n  return true if odd_count - even_count == 0\n  return false\nend",
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  diff = sum1 - sum2\n  if diff % 11 == 0\n    puts \"The number is divisible by 11\"\n  else\n    puts \"The number is not divisible by 11\"\n  end\nend",
    "  n.to_s.split('').map(&:to_i).each_cons(2).map { |a, b| a - b }.join.to_i\nend",
    "  n = n.to_s\n  if n.length == 1\n    return false\n  end\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i%2 == 0\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  return (sum1-sum2).abs % 11 == 0\nend",
    "  n = n.to_s.split('').map(&:to_i)\n  sum = 0\n  n.each_with_index do |num, index|\n    if index.even?\n      sum += num\n    else\n      sum -= num\n    end\n  end\n  sum % 11 == 0\nend",
    "  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  return (odd_digits.sum - even_digits.sum).abs % 11 == 0\nend",
    "  if n.to_s.length == 1\n    return false\n  end\n  sum1 = 0\n  sum2 = 0\n  n.to_s.split('').each_with_index do |x, i|\n    if i.even?\n      sum1 += x.to_i\n    else\n      sum2 += x.to_i\n    end\n  end\n  return (sum1 - sum2).abs % 11 == 0\nend",
    "  return true if n < 10\n  n = n.to_s.split('').map(&:to_i)\n  (n[0] - n[1]).abs == (n[1] - n[2]).abs\nend",
    "  return false if n < 0\n  return true if n == 0\n  odd_count = 0\n  even_count = 0\n  while n != 0\n    if n % 2 == 0\n      even_count += 1\n    else\n      odd_count += 1\n    end\n    n = n / 10\n  end\n  return (odd_count - even_count) % 11 == 0\nend",
    "  n = n.to_s\n  if n.length == 1\n    return false\n  end\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i % 2 == 0\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if (sum1 - sum2) % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  return (sum1 - sum2).abs\nend",
    "  n = n.to_s\n  return false if n.length == 1\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  return true if (sum1 - sum2).abs % 11 == 0\n  return false\nend",
    "  n = n.to_s.split('').map(&:to_i)\n  n.each_with_index.map { |e, i| i.even? ? e : -e }.inject(:+) % 11 == 0\nend",
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if (sum1 - sum2).abs % 11 == 0\n    puts \"#{n} is divisible by 11\"\n  else\n    puts \"#{n} is not divisible by 11\"\n  end\nend",
    "  n = n.to_s\n  return false if n.length == 1\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  return true if (sum1 - sum2).abs % 11 == 0\n  return false\nend",
    "  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  return true if (odd_digits.sum - even_digits.sum).abs % 11 == 0\n  false\nend",
    "  return false if n < 0\n  return true if n == 0\n  odd_count = 0\n  even_count = 0\n  while n > 0\n    if n.odd?\n      odd_count += 1\n    else\n      even_count += 1\n    end\n    n /= 10\n  end\n  is_Diff(odd_count - even_count)\nend",
    "  return true if n < 0\n  odd_dig, even_dig = 0, 0\n  while(n != 0)\n    odd_dig += n % 10\n    n /= 10\n    even_dig += n % 10\n    n /= 10\n  end\n  return (odd_dig - even_dig).abs % 11 == 0\nend",
    "  n = n.to_s\n  if n.length == 1\n    return false\n  end\n  sum = 0\n  for i in 0..n.length-1\n    if i%2 == 0\n      sum += n[i].to_i\n    else\n      sum -= n[i].to_i\n    end\n  end\n  if sum%11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  return true if n < 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  odd_digits.each_with_index do |digit, index|\n    odd_digits[index] = -digit\n  end\n  sum = odd_digits.reduce(:+) + even_digits.reduce(:+)\n  return sum % 11 == 0\nend",
    "  return false if n < 0\n  return true if n == 0\n  odd_count = 0\n  even_count = 0\n  while n > 0\n    if n % 2 == 0\n      even_count += 1\n    else\n      odd_count += 1\n    end\n    n = n / 10\n  end\n  return is_Diff(odd_count - even_count)\nend",
    "    if n%11 == 0\n        return true\n    else\n        return false\n    end\nend",
    "  return n % 11 == 0\nend",
    "  n = n.to_s\n  return false if n.length == 1\n  return true if n.length == 2\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  return true if (sum1 - sum2).abs % 11 == 0\n  return false\nend",
    "  n = n.to_s\n  n = n.split('')\n  n = n.map(&:to_i)\n  sum = 0\n  n.each_with_index do |num, index|\n    if index.even?\n      sum += num\n    else\n      sum -= num\n    end\n  end\n  if sum % 11 == 0\n    puts \"#{n} is divisible by 11\"\n  else\n    puts \"#{n} is not divisible by 11\"\n  end\nend",
    "  n = n.to_s\n  n1 = n[0..(n.length/2)-1]\n  n2 = n[(n.length/2)..-1]\n  n1 = n1.split('').map(&:to_i)\n  n2 = n2.split('').map(&:to_i)\n  n1 = n1.inject(0){|sum,x| sum + x }\n  n2 = n2.inject(0){|sum,x| sum + x }\n  if (n1-n2).abs == 0 || (n1-n2).abs == 11\n    return true\n  else\n    return false\n  end\nend",
    "  return false if n < 0\n  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  sum_odd = 0\n  sum_even = 0\n  odd_digits.each { |digit| sum_odd += digit }\n  even_digits.each { |digit| sum_even += digit }\n  is_Diff(sum_odd - sum_even)\nend",
    "  str = n.to_s\n  sum = 0\n  str.each_char do |c|\n    sum += c.to_i\n  end\n  if sum % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i%2 == 0\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if (sum1 - sum2)%11 == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  n = n.to_s\n  n = n.split('')\n  n = n.map { |i| i.to_i }\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i]\n    else\n      sum2 += n[i]\n    end\n  end\n  diff = sum1 - sum2\n  if diff % 11 == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  if n.to_s.length == 1\n    return false\n  end\n  sum = 0\n  for i in 0..n.to_s.length-1\n    if i%2 == 0\n      sum += n.to_s[i].to_i\n    else\n      sum -= n.to_s[i].to_i\n    end\n  end\n  if sum%11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  n = n.to_s\n  return false if n.length == 1\n  return true if n.length == 2\n  sum = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum += n[i].to_i\n    else\n      sum -= n[i].to_i\n    end\n  end\n  return true if sum == 0\n  return false\nend",
    "  n = n.to_s\n  return false if n.length == 1\n  sum1 = 0\n  sum2 = 0\n  for i in 0...n.length\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  return (sum1 - sum2).abs % 11 == 0\nend",
    "  n = n.to_s\n  if n.length == 1\n    return false\n  end\n  sum = 0\n  for i in 0..n.length-1\n    if i%2 == 0\n      sum += n[i].to_i\n    else\n      sum -= n[i].to_i\n    end\n  end\n  if sum%11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  if n.to_s.length == 1\n    return false\n  end\n  sum1 = 0\n  sum2 = 0\n  n.to_s.split('').each_with_index do |num, index|\n    if index % 2 == 0\n      sum1 += num.to_i\n    else\n      sum2 += num.to_i\n    end\n  end\n  return sum1 - sum2 == 0\nend",
    "  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  odd_sum = odd_digits.reduce(:+)\n  even_sum = even_digits.reduce(:+)\n  is_Diff(odd_sum - even_sum)\nend",
    "  return false if n < 0\n  return true if n == 0\n  return is_Diff(n - 11)\nend",
    "  return false if n < 0\n  return true if n == 0\n  odd_count = 0\n  even_count = 0\n  while n > 0\n    if n.odd?\n      odd_count += 1\n    else\n      even_count += 1\n    end\n    n /= 10\n  end\n  is_Diff(odd_count - even_count)\nend",
    "  if n.to_s.length == 1\n    return false\n  end\n  sum = 0\n  n.to_s.split('').each_with_index do |x, i|\n    if i.even?\n      sum += x.to_i\n    else\n      sum -= x.to_i\n    end\n  end\n  if sum % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  n = n.to_s\n  sum = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum += n[i].to_i\n    else\n      sum -= n[i].to_i\n    end\n  end\n  if sum % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if (sum1 - sum2) % 11 == 0\n    puts \"#{n} is divisible by 11\"\n  else\n    puts \"#{n} is not divisible by 11\"\n  end\nend",
    "  if n.to_s.length == 1\n    return false\n  end\n  sum = 0\n  n.to_s.split('').each_with_index do |x,i|\n    if i.even?\n      sum += x.to_i\n    else\n      sum -= x.to_i\n    end\n  end\n  return sum % 11 == 0\nend",
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  sum1 - sum2\nend",
    "  n = n.to_s\n  if n.length == 1\n    return false\n  end\n  sum = 0\n  for i in 0..n.length-1\n    if i%2 == 0\n      sum += n[i].to_i\n    else\n      sum -= n[i].to_i\n    end\n  end\n  if sum%11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n = n / 10\n    even_digits << n % 10\n    n = n / 10\n  end\n  odd_digits.reverse!\n  even_digits.reverse!\n  odd_digits.each_with_index do |digit, index|\n    even_digits[index] = -even_digits[index]\n  end\n  sum = odd_digits.inject(:+) + even_digits.inject(:+)\n  is_Diff(sum)\nend",
    "  if n.to_s.length == 1\n    return false\n  end\n  sum = 0\n  for i in 0..n.to_s.length-1\n    if i.even?\n      sum += n.to_s[i].to_i\n    else\n      sum -= n.to_s[i].to_i\n    end\n  end\n  return sum % 11 == 0\nend",
    "  n = n.to_s\n  return false if n.length == 1\n  return true if n.length == 2\n  return false if n.length == 3\n  return true if n.length == 4\n  return false if n.length == 5\n  return true if n.length == 6\n  return false if n.length == 7\n  return true if n.length == 8\n  return false if n.length == 9\n  return true if n.length == 10\n  return false if n.length == 11\n  return true if n.length == 12\n  return false if n.length == 13\n  return true if n.length == 14\n  return false if n.length == 15\n  return true if n.length == 16\n  return false if n.length == 17\n  return true if n.length == 18\n  return false if n.length == 19\n  return true if n.length == 20\n  return false if n.length == 21\n  return true if n.length == 22\n  return false if n.length == 23\n  return true if n.length == 24\n  return false if n.length == 25\n  return true if n.length == 26\n  return false if n.length == 27\n  return true if n.length == 28\n  return false if n.length == 29\n  return true if n.length == 30\n  return false if n.length == 31\n  return true if n.length == 32\n  return false if n.length == 33\n  return true if n.length == 34\n  return false if n.length == 35\n  return true if n.length == 36\n  return false if n.length == 37\n  return true if n.length == 38\n  return false if n.length == 39\n  return true if n.length == 40\n  return false if n.length == 41\n  return true if n.length == 42\n  return false if n.length == 43\n  return true if n.length == 44\n  return false if n.length == 45\n  return true if n.length == 46\n  return false if n.length == 47\n  return true if n.length == 48\n  return false if n.length == 49\n  return true if n.length == 50\n  return",
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if (sum1 - sum2).abs % 11 == 0\n    puts \"#{n} is divisible by 11\"\n  else\n    puts \"#{n} is not divisible by 11\"\n  end\nend",
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if (sum1 - sum2).abs % 11 == 0\n    puts \"#{n} is divisible by 11\"\n  else\n    puts \"#{n} is not divisible by 11\"\n  end\nend",
    "  n = n.to_s\n  sum = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum += n[i].to_i\n    else\n      sum -= n[i].to_i\n    end\n  end\n  if sum % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  return false if n < 0\n  return true if n == 0\n  odd_count = 0\n  even_count = 0\n  while n > 0\n    if n.odd?\n      odd_count += 1\n    else\n      even_count += 1\n    end\n    n /= 10\n  end\n  is_Diff(odd_count - even_count)\nend",
    "  n = n.to_s\n  n = n.split('')\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if (sum1 - sum2).abs % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  s = n.to_s\n  len = s.length\n  return false if len == 1\n  sum1 = 0\n  sum2 = 0\n  for i in 0..(len-1)\n    if i%2 == 0\n      sum1 += s[i].to_i\n    else\n      sum2 += s[i].to_i\n    end\n  end\n  return true if (sum1 - sum2)%11 == 0\n  return false\nend",
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if (sum1 - sum2).abs % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  n = n.to_s\n  sum = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum += n[i].to_i\n    else\n      sum -= n[i].to_i\n    end\n  end\n  return sum % 11 == 0\nend",
    "  return false if n < 0\n  return true if n == 0\n  odd_count = 0\n  even_count = 0\n  while n > 0\n    if n.odd?\n      odd_count += 1\n    else\n      even_count += 1\n    end\n    n = n / 10\n  end\n  is_Diff(odd_count - even_count)\nend",
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if (sum1 - sum2).abs % 11 == 0\n    puts \"#{n} is divisible by 11\"\n  else\n    puts \"#{n} is not divisible by 11\"\n  end\nend",
    "  return false if n < 0\n  num = n.to_s.split('')\n  return false if num.length == 1\n  sum = 0\n  (0..num.length-1).each do |i|\n    if i.even?\n      sum += num[i].to_i\n    else\n      sum -= num[i].to_i\n    end\n  end\n  sum % 11 == 0 ? true : false\nend",
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if (sum1 - sum2).abs % 11 == 0\n    puts \"#{n} is divisible by 11\"\n  else\n    puts \"#{n} is not divisible by 11\"\n  end\nend",
    "  return true if n < 0\n  odd_dig, even_dig = 0, 0\n  while(n > 0)\n    odd_dig += n % 10\n    n /= 10\n    even_dig += n % 10\n    n /= 10\n  end\n  return (odd_dig - even_dig).abs % 11 == 0\nend",
    "  n = n.to_s\n  n = n.split('')\n  n = n.map(&:to_i)\n  sum = 0\n  n.each_with_index do |num, i|\n    if i.even?\n      sum += num\n    else\n      sum -= num\n    end\n  end\n  if sum % 11 == 0\n    puts \"#{n} is divisible by 11\"\n  else\n    puts \"#{n} is not divisible by 11\"\n  end\nend",
    "  n = n.to_s\n  n = n.split(\"\")\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i%2 == 0\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if (sum1 - sum2).abs % 11 == 0\n    puts \"Number is divisible by 11\"\n  else\n    puts \"Number is not divisible by 11\"\n  end\nend",
    "  return true if n < 0\n  sum_odd = 0\n  sum_even = 0\n  while n > 0\n    sum_odd += n % 10\n    n /= 10\n    sum_even += n % 10\n    n /= 10\n  end\n  return (sum_odd - sum_even).abs % 11 == 0\nend",
    "  return false if n == 0\n  return true if n == 11\n  return true if n == 22\n  return true if n == 33\n  return true if n == 44\n  return true if n == 55\n  return true if n == 66\n  return true if n == 77\n  return true if n == 88\n  return true if n == 99\n  return false\nend",
    "  n = n.to_s\n  return false if n.length == 1\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  return (sum1 - sum2).abs % 11 == 0\nend",
    "  return true if n == 0\n  odd_count = 0\n  even_count = 0\n  while n != 0\n    if n.odd?\n      odd_count += 1\n    else\n      even_count += 1\n    end\n    n = n / 10\n  end\n  return true if (odd_count - even_count).abs % 11 == 0\n  false\nend",
    "  if n < 0\n    n = -n\n  end\n  if n < 10\n    return false\n  end\n  odd = true\n  sum = 0\n  while n > 0\n    if odd\n      sum += n % 10\n    else\n      sum -= n % 10\n    end\n    n /= 10\n    odd = !odd\n  end\n  return sum % 11 == 0\nend",
    "  n = n.to_s\n  sum = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum = sum + n[i].to_i\n    else\n      sum = sum - n[i].to_i\n    end\n  end\n  if sum % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  return n % 11 == 0\nend",
    "  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits.push(n % 10)\n    n /= 10\n    even_digits.push(n % 10)\n    n /= 10\n  end\n  odd_sum = odd_digits.inject(0) { |sum, x| sum + x }\n  even_sum = even_digits.inject(0) { |sum, x| sum + x }\n  return is_Diff(odd_sum - even_sum)\nend",
    "  return false if n < 0\n  return true if n == 0\n  odd_count = 0\n  even_count = 0\n  while n > 0\n    if n.odd?\n      odd_count += 1\n    else\n      even_count += 1\n    end\n    n /= 10\n  end\n  is_Diff(odd_count - even_count)\nend",
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  return (sum1 - sum2).abs % 11 == 0\nend",
    "  if n.to_s.length == 1\n    return false\n  end\n  sum = 0\n  n.to_s.split('').each_with_index do |num, i|\n    if i.even?\n      sum += num.to_i\n    else\n      sum -= num.to_i\n    end\n  end\n  if sum % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  n = n.to_s\n  return true if n.length == 1\n  return false if n.length == 2\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  return true if (sum1 - sum2).abs % 11 == 0\n  return false\nend",
    "  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  n.to_s.split('').each_with_index do |digit, index|\n    if index.even?\n      even_digits << digit.to_i\n    else\n      odd_digits << digit.to_i\n    end\n  end\n  return (even_digits.sum - odd_digits.sum).abs % 11 == 0\nend",
    "  if n.to_s.length == 1\n    return false\n  end\n  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if sum1 - sum2 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  n = n.to_s\n  if n.length == 1\n    return false\n  end\n  sum = 0\n  for i in 0..n.length-1\n    if i%2 == 0\n      sum += n[i].to_i\n    else\n      sum -= n[i].to_i\n    end\n  end\n  if sum%11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..(n.length-1)\n    if i%2 == 0\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if (sum1 - sum2).abs % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  n = n.to_s\n  sum = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum += n[i].to_i\n    else\n      sum -= n[i].to_i\n    end\n  end\n  if sum % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  n = n.to_s\n  sum = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum = sum + n[i].to_i\n    else\n      sum = sum - n[i].to_i\n    end\n  end\n  if sum%11 == 0\n    puts \"#{n} is divisible by 11\"\n  else\n    puts \"#{n} is not divisible by 11\"\n  end\nend",
    "  if n%11==0\n    puts \"Number is divisible by 11\"\n  else\n    puts \"Number is not divisible by 11\"\n  end\nend\nputs \"Enter a number\"\nn=gets.to_i\nis_Diff(n)",
    "  n = n.to_s\n  sum = 0\n  for i in 0..n.length-1\n    if i%2 == 0\n      sum += n[i].to_i\n    else\n      sum -= n[i].to_i\n    end\n  end\n  if sum%11 == 0\n    puts \"Number is divisible by 11\"\n  else\n    puts \"Number is not divisible by 11\"\n  end\nend",
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  (0..n.length-1).each do |i|\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  (sum1 - sum2).abs % 11 == 0\nend",
    "  n = n.to_s\n  i = 0\n  sum1 = 0\n  sum2 = 0\n  while i < n.length\n    sum1 += n[i].to_i\n    i += 1\n  end\n  i = 0\n  while i < n.length\n    sum2 += n[i].to_i\n    i += 1\n  end\n  if sum1 - sum2 == 0\n    puts \"The number is divisible by 11\"\n  else\n    puts \"The number is not divisible by 11\"\n  end\nend",
    "  n = n.to_s.split('')\n  sum = 0\n  n.each_with_index do |num, index|\n    if index.even?\n      sum += num.to_i\n    else\n      sum -= num.to_i\n    end\n  end\n  sum % 11 == 0\nend",
    "  return false if n < 0\n  return true if n == 0\n  odd_dig = 0\n  even_dig = 0\n  while n > 0\n    odd_dig += n % 10\n    n /= 10\n    even_dig += n % 10\n    n /= 10\n  end\n  is_Diff(odd_dig - even_dig)\nend",
    "  return n % 11 == 0\nend",
    "  n = n.to_s\n  return false if n.length == 1\n  sum1 = 0\n  sum2 = 0\n  (0..n.length-1).each do |i|\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  (sum1 - sum2).abs % 11 == 0\nend",
    "  n = n.to_s\n  i = 0\n  sum1 = 0\n  sum2 = 0\n  while i < n.length\n    sum1 += n[i].to_i\n    i += 2\n  end\n  i = 1\n  while i < n.length\n    sum2 += n[i].to_i\n    i += 2\n  end\n  if (sum1 - sum2).abs % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  if n % 11 == 0\n    puts \"Divisible by 11\"\n  else\n    puts \"Not Divisible by 11\"\n  end\nend",
    "  n = n.to_s\n  n = n.split('')\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i % 2 == 0\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if (sum1 - sum2) % 11 == 0\n    puts \"Divisible by 11\"\n  else\n    puts \"Not Divisible by 11\"\n  end\nend",
    "  n = n.to_s\n  sum = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum += n[i].to_i\n    else\n      sum -= n[i].to_i\n    end\n  end\n  if sum % 11 == 0\n    puts \"#{n} is divisible by 11\"\n  else\n    puts \"#{n} is not divisible by 11\"\n  end\nend",
    "  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  return true if (odd_digits.sum - even_digits.sum).abs % 11 == 0\n  false\nend",
    "  n = n.to_s.split('').map(&:to_i)\n  sum1 = 0\n  sum2 = 0\n  n.each_with_index do |num, index|\n    if index.even?\n      sum1 += num\n    else\n      sum2 += num\n    end\n  end\n  sum1 - sum2\nend",
    "  sum = 0\n  while n > 0\n    sum = sum + n % 10\n    n = n / 10\n  end\n  if sum % 11 == 0\n    puts \"Number is divisible by 11\"\n  else\n    puts \"Number is not divisible by 11\"\n  end\nend",
    "  n = n.to_s.split('').map(&:to_i)\n  sum1 = 0\n  sum2 = 0\n  n.each_with_index do |num, index|\n    if index.even?\n      sum1 += num\n    else\n      sum2 += num\n    end\n  end\n  (sum1 - sum2).abs % 11 == 0\nend",
    "  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    if n.odd?\n      odd_digits << n % 10\n    else\n      even_digits << n % 10\n    end\n    n /= 10\n  end\n  odd_sum = odd_digits.inject(0) { |sum, n| sum + n }\n  even_sum = even_digits.inject(0) { |sum, n| sum + n }\n  return true if (odd_sum - even_sum).abs % 11 == 0\n  false\nend",
    "  n = n.to_s\n  if n.length == 1\n    return false\n  end\n  i = 0\n  sum1 = 0\n  sum2 = 0\n  while i < n.length\n    sum1 += n[i].to_i\n    i += 1\n  end\n  i = 1\n  while i < n.length\n    sum2 += n[i].to_i\n    i += 1\n  end\n  if (sum1 - sum2) % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  n = n.to_s\n  if n.length == 1\n    return false\n  end\n  sum = 0\n  for i in 0..n.length-1\n    if i%2 == 0\n      sum += n[i].to_i\n    else\n      sum -= n[i].to_i\n    end\n  end\n  if sum%11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if (sum1 - sum2).abs % 11 == 0\n    puts \"#{n} is divisible by 11\"\n  else\n    puts \"#{n} is not divisible by 11\"\n  end\nend",
    "  return false if n < 0\n  return true if n == 0\n  return is_Diff(n-11)\nend",
    "  n = n.to_s\n  sum = 0\n  for i in 0..n.length-1\n    if i%2==0\n      sum = sum + n[i].to_i\n    else\n      sum = sum - n[i].to_i\n    end\n  end\n  if sum%11==0\n    return true\n  else\n    return false\n  end\nend",
    "  return false if n < 0\n  return true if n == 0\n  odd_count = 0\n  even_count = 0\n  while n > 0\n    if n % 2 == 0\n      even_count += 1\n    else\n      odd_count += 1\n    end\n    n /= 2\n  end\n  is_Diff(odd_count - even_count)\nend",
    "  n = n.to_s\n  n1 = n[0..(n.length/2)-1]\n  n2 = n[(n.length/2)..-1]\n  n1 = n1.split('').map(&:to_i)\n  n2 = n2.split('').map(&:to_i)\n  n1 = n1.inject(0){|sum,x| sum + x }\n  n2 = n2.inject(0){|sum,x| sum + x }\n  if (n1-n2).abs == 0\n    return true\n  else\n    return false\n  end\nend",
    "  if n.to_s.length == 1\n    return true\n  end\n  i = 0\n  sum1 = 0\n  sum2 = 0\n  while i < n.to_s.length\n    sum1 += n.to_s[i].to_i\n    sum2 += n.to_s[i+1].to_i\n    i += 2\n  end\n  if sum1 - sum2 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  s = n.to_s\n  sum = 0\n  for i in 0..s.length-1\n    if i%2 == 0\n      sum = sum + s[i].to_i\n    else\n      sum = sum - s[i].to_i\n    end\n  end\n  if sum%11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  if n%11==0\n    puts \"#{n} is divisible by 11\"\n  else\n    puts \"#{n} is not divisible by 11\"\n  end\nend",
    "  n = n.to_s\n  return false if n.length == 1\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  return true if (sum1 - sum2).abs == 0\n  return false\nend",
    "  return false if n < 0\n  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  sum_odd = odd_digits.inject(0) { |sum, x| sum + x }\n  sum_even = even_digits.inject(0) { |sum, x| sum + x }\n  is_Diff(sum_odd - sum_even)\nend",
    "  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  n.to_s.split('').each_with_index do |d, i|\n    if i.even?\n      even_digits << d.to_i\n    else\n      odd_digits << d.to_i\n    end\n  end\n  return (odd_digits.sum - even_digits.sum).abs % 11 == 0\nend",
    "  n = n.to_s\n  n = n.split('')\n  sum = 0\n  n.each_with_index do |num, index|\n    if index.even?\n      sum += num.to_i\n    else\n      sum -= num.to_i\n    end\n  end\n  sum % 11 == 0\nend",
    "  if n < 0\n    n = -n\n  end\n  if n < 10\n    return false\n  end\n  odd_sum = 0\n  even_sum = 0\n  while n > 0\n    odd_sum += n % 10\n    n = n / 10\n    even_sum += n % 10\n    n = n / 10\n  end\n  return (odd_sum - even_sum).abs % 11 == 0\nend",
    "  if n.to_s.length == 1\n    return false\n  end\n  sum1 = 0\n  sum2 = 0\n  n.to_s.split('').each_with_index do |x,i|\n    if i.even?\n      sum1 += x.to_i\n    else\n      sum2 += x.to_i\n    end\n  end\n  return (sum1 - sum2).abs % 11 == 0\nend",
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  return (sum1 - sum2).abs % 11 == 0\nend",
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  return (sum1 - sum2).abs % 11 == 0\nend",
    "  if n.to_s.length == 1\n    return false\n  end\n  num = n.to_s.split('').map(&:to_i)\n  sum = 0\n  num.each_with_index do |n, i|\n    if i.even?\n      sum += n\n    else\n      sum -= n\n    end\n  end\n  sum.abs % 11 == 0\nend",
    "  return false if n < 0\n  return true if n == 0\n  odd_count = 0\n  even_count = 0\n  while n > 0\n    if n.odd?\n      odd_count += 1\n    else\n      even_count += 1\n    end\n    n = n / 10\n  end\n  is_Diff(odd_count - even_count)\nend",
    "  return true if n == 0\n  odd_digits = []\n  even_digits = []\n  while n > 0\n    odd_digits << n % 10\n    n /= 10\n    even_digits << n % 10\n    n /= 10\n  end\n  return true if (odd_digits.sum - even_digits.sum) % 11 == 0\n  false\nend",
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  if (sum1 - sum2).abs % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  n = n.to_s\n  return false if n.length == 1\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  return true if (sum1 - sum2).abs % 11 == 0\n  return false\nend",
    "  if n.to_s.length == 1\n    return false\n  end\n  sum = 0\n  n.to_s.each_char do |c|\n    sum += c.to_i\n  end\n  return is_Diff(sum)\nend",
    "  return false if n < 0\n  return true if n == 0\n  odd_count = 0\n  even_count = 0\n  while n > 0\n    if n.odd?\n      odd_count += 1\n    else\n      even_count += 1\n    end\n    n = n / 10\n  end\n  is_Diff(odd_count - even_count)\nend",
    "  n = n.to_s.split('')\n  i = 0\n  sum = 0\n  while i < n.length\n    if i.even?\n      sum += n[i].to_i\n    else\n      sum -= n[i].to_i\n    end\n    i += 1\n  end\n  sum % 11 == 0\nend"
  ]
}