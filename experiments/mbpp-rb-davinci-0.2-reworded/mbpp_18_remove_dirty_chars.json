{
  "name": "mbpp_18_remove_dirty_chars",
  "language": "rb",
  "prompt": "# Write a function to remove characters from the first string which are present in the second string.\ndef remove_dirty_chars(string, second_string)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_dirty_chars\n    candidate = method(:remove_dirty_chars)\n    assert_equal(\"bacuve\", candidate.call(\"probasscurve\", \"pros\"))\n    assert_equal(\"digiidi\", candidate.call(\"digitalindia\", \"talent\"))\n    assert_equal(\"emles\", candidate.call(\"exoticmiles\", \"toxic\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  second_string.chars.each do |char|\n    string.delete!(char)\n  end\n  string\nend",
    "  string.chars.reject { |char| second_string.chars.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.split('').reject { |char| second_string.include?(char) }.join('')\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.delete(second_string)\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.split('').reject { |char| second_string.include?(char) }.join('')\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.split(\"\").reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.split('').select { |char| !second_string.include?(char) }.join\nend",
    "  string.split('').select { |char| !second_string.include?(char) }.join('')\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.delete(second_string)\nend",
    "  string.split(\"\").each do |char|\n    if second_string.include?(char)\n      string.delete!(char)\n    end\n  end\n  string\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.split('').reject { |char| second_string.include?(char) }.join('')\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.split('').reject { |char| second_string.include?(char) }.join('')\nend",
    "  string.split(\"\").select { |char| !second_string.include?(char) }.join(\"\")\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.delete(second_string)\nend",
    "  string.split('').delete_if { |char| second_string.include?(char) }.join('')\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.delete(second_string)\nend",
    "  string.split('').select { |char| !second_string.include?(char) }.join('')\nend",
    "  string.split('').reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.delete(second_string)\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.gsub(/[#{second_string}]/, '')\nend",
    "  string.delete(second_string)\nend",
    "  string.split('').reject { |char| second_string.include?(char) }.join('')\nend",
    "  string.delete(second_string)\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.delete(second_string)\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.delete(second_string)\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.split('').reject { |char| second_string.include?(char) }.join('')\nend",
    "  string.delete(second_string)\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.delete(second_string)\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.delete(second_string)\nend",
    "  string.split('').reject { |char| second_string.include?(char) }.join('')\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.split('').reject { |char| second_string.include?(char) }.join('')\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.split('').reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.delete(second_string)\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.split('').select { |char| !second_string.include?(char) }.join('')\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.split('').reject { |char| second_string.include?(char) }.join('')\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.delete(second_string)\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.delete(second_string)\nend",
    "  string.delete(second_string)\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.delete(second_string)\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.delete(second_string)\nend",
    "  string.split('').select { |char| !second_string.include?(char) }.join('')\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.split('').reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.split('').reject { |char| second_string.include?(char) }.join('')\nend",
    "  string.delete(second_string)\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.delete(second_string)\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.delete(second_string)\nend",
    "  string.delete(second_string)\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.split('').select { |char| !second_string.include?(char) }.join('')\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.delete(second_string)\nend",
    "  string.chars.select { |char| !second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.delete(second_string)\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.split('').reject { |char| second_string.include?(char) }.join('')\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.select { |char| !second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.split(\"\").reject { |char| second_string.include?(char) }.join(\"\")\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  second_string.each_char do |char|\n    string.delete!(char)\n  end\n  string\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.split(\"\").delete_if { |char| second_string.include?(char) }.join(\"\")\nend",
    "  string.delete(second_string)\nend",
    "  string.delete(second_string)\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.delete(second_string)\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.delete(second_string)\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.split('').reject { |char| second_string.include?(char) }.join('')\nend",
    "  string.delete(second_string)\nend",
    "  string.split(\"\").each do |char|\n    if second_string.include?(char)\n      string.delete!(char)\n    end\n  end\n  string\nend",
    "  string.delete(second_string)\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.delete(second_string)\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.split('').reject { |char| second_string.include?(char) }.join('')\nend",
    "  string.delete(second_string)\nend",
    "  string.split('').reject { |char| second_string.include?(char) }.join('')\nend",
    "  string.split(\"\").delete_if { |char| second_string.include?(char) }.join(\"\")\nend",
    "  string.delete(second_string)\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.split('').reject { |char| second_string.include?(char) }.join('')\nend",
    "  string.split('').reject { |char| second_string.include?(char) }.join('')\nend",
    "  string.split('').reject { |char| second_string.include?(char) }.join('')\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.split('').reject { |char| second_string.include?(char) }.join('')\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend",
    "  string.chars.reject { |char| second_string.include?(char) }.join\nend"
  ]
}