{
  "name": "mbpp_751_check_min_heap",
  "language": "rb",
  "prompt": "# Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\ndef check_min_heap(arr)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_min_heap\n    candidate = method(:check_min_heap)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal(true, candidate.call([2, 3, 4, 5, 10, 15]))\n    assert_equal(false, candidate.call([2, 10, 4, 5, 3, 15]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  (arr.length/2).downto(0).each do |i|\n    return false if arr[i] > arr[2*i+1]\n    return false if arr[i] > arr[2*i+2]\n  end\n  true\nend",
    "  (0..(arr.length-1)/2).each do |i|\n    if arr[i] > arr[2*i+1]\n      return false\n    end\n    if 2*i+2 < arr.length && arr[i] > arr[2*i+2]\n      return false\n    end\n  end\n  return true\nend",
    "  i = 0\n  while i < arr.length\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    if left_child < arr.length && arr[i] > arr[left_child]\n      return false\n    end\n    if right_child < arr.length && arr[i] > arr[right_child]\n      return false\n    end\n    i += 1\n  end\n  return true\nend",
    "  (0..arr.length-1).each do |i|\n    if arr[i] > arr[2*i+1] || arr[i] > arr[2*i+2]\n      return false\n    end\n  end\n  return true\nend",
    "  return true if arr.length <= 1\n  (arr.length/2).times do |i|\n    return false if arr[i] > arr[2*i + 1]\n    return false if arr[i] > arr[2*i + 2]\n  end\n  true\nend",
    "  return true if arr.size == 1\n  (arr.size/2).times do |i|\n    if arr[i] > arr[2*i + 1] || arr[i] > arr[2*i + 2]\n      return false\n    end\n  end\n  true\nend",
    "  (arr.length/2).downto(0) do |i|\n    if arr[i] > arr[2*i+1] || (2*i+2 < arr.length && arr[i] > arr[2*i+2])\n      return false\n    end\n  end\n  true\nend",
    "  return true if arr.length <= 1\n  return false if arr[0] > arr[1] || arr[0] > arr[2]\n  check_min_heap(arr[1..-1])\nend",
    "  # check if the array is empty\n  return true if arr.empty?",
    "  return true if arr.length == 1\n  i = 0\n  while i < arr.length\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    if left_child < arr.length && arr[left_child] < arr[i]\n      return false\n    end\n    if right_child < arr.length && arr[right_child] < arr[i]\n      return false\n    end\n    i += 1\n  end\n  true\nend",
    "  for i in 1..arr.length-1\n    if arr[i] < arr[(i-1)/2]\n      return false\n    end\n  end\n  return true\nend",
    "  (arr.length/2).downto(0) do |i|\n    return false if arr[i] > arr[2*i+1] || (2*i+2 < arr.length && arr[i] > arr[2*i+2])\n  end\n  true\nend",
    "  (arr.length/2).downto(0) do |i|\n    if arr[i] > arr[2*i + 1] || arr[i] > arr[2*i + 2]\n      return false\n    end\n  end\n  return true\nend",
    "  (0..(arr.length - 2) / 2).each do |i|\n    if arr[i] > arr[2 * i + 1] || arr[i] > arr[2 * i + 2]\n      return false\n    end\n  end\n  return true\nend",
    "  i = 0\n  while i < arr.length\n    left_child = 2*i + 1\n    right_child = 2*i + 2\n    if left_child < arr.length && arr[i] > arr[left_child]\n      return false\n    end\n    if right_child < arr.length && arr[i] > arr[right_child]\n      return false\n    end\n    i += 1\n  end\n  return true\nend",
    "  return true if arr.length <= 1\n  (arr.length/2).times do |i|\n    return false if arr[i] > arr[2*i+1] || (2*i+2 < arr.length && arr[i] > arr[2*i+2])\n  end\n  true\nend",
    "  (1..arr.length-1).each do |i|\n    if arr[i] < arr[(i-1)/2]\n      return false\n    end\n  end\n  return true\nend",
    "  (0..arr.size/2-1).each do |i|\n    if arr[2*i+1] && arr[i] > arr[2*i+1]\n      return false\n    end\n    if arr[2*i+2] && arr[i] > arr[2*i+2]\n      return false\n    end\n  end\n  return true\nend",
    "  (0..(arr.length-1)/2).each do |i|\n    left = 2*i+1\n    right = 2*i+2\n    return false if arr[i] > arr[left] || (right < arr.length && arr[i] > arr[right])\n  end\n  true\nend",
    "  (0..(arr.length-1)/2).each do |i|\n    if arr[i] > arr[2*i+1] || (2*i+2 < arr.length && arr[i] > arr[2*i+2])\n      return false\n    end\n  end\n  return true\nend"
  ]
}