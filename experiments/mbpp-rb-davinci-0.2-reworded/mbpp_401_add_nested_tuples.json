{
  "name": "mbpp_401_add_nested_tuples",
  "language": "rb",
  "prompt": "# Write a function to perform index wise addition of array elements in the given two nested arrays.\ndef add_nested_tuples(test_tup1, test_tup2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_nested_tuples\n    candidate = method(:add_nested_tuples)\n    assert_equal([[7, 10], [7, 14], [3, 10], [8, 13]], candidate.call([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]))\n    assert_equal([[9, 12], [9, 16], [5, 12], [10, 15]], candidate.call([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]))\n    assert_equal([[11, 14], [11, 18], [7, 14], [12, 17]], candidate.call([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map{|x,y| x + y}\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map{|x,y| x+y}\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1 + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << [tup1[0] + test_tup2[index][0], tup1[1] + test_tup2[index][1]]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map {|x, y| x + y}\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |x, i|\n    result << x + test_tup2[i]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1 + test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1 + test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map{|x,y| x + y}\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << (tup1 + test_tup2[index])\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  # write your code here\n  test_tup1.zip(test_tup2).map{|x,y| x+y}\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map {|x,y| x + y}\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1 + test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1 + test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1 + test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1 + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1 + test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x| x.sum }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1 + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map {|x, y| x + y}\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map{|x,y| x + y}\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1 + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1 + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map {|x,y| x + y}\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |x, index|\n    result << x + test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1 + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << [tup1[0] + test_tup2[index][0], tup1[1] + test_tup2[index][1]]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1 + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1 + test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << [tup1[0] + test_tup2[index][0], tup1[1] + test_tup2[index][1]]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |x, i|\n    result << x + test_tup2[i]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map{|x,y| x+y}\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1 + test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend"
  ]
}