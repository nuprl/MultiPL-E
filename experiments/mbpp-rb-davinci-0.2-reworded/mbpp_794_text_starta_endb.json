{
  "name": "mbpp_794_text_starta_endb",
  "language": "rb",
  "prompt": "# Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef text_starta_endb(text)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_794_text_starta_endb.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_text_starta_endb\n    candidate = method(:text_starta_endb)\n    assert_equal(true, candidate.call(\"aabbbb\"))\n    assert_equal(false, candidate.call(\"aabAbbbc\"))\n    assert_equal(false, candidate.call(\"accddbbjjj\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  if text.match(/^a.+b$/)\n    puts \"Match!\"\n  else\n    puts \"No match!\"\n  end\nend",
    "  text.scan(/a\\w*b/)\nend",
    "  if text.match(/^a.*b$/)\n    puts \"Match\"\n  else\n    puts \"No match\"\n  end\nend",
    "  text.scan(/a\\w*b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/a\\w+b/) ? true : false\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a.+b/)\nend",
    "  text.match(/^a\\w*b$/) ? true : false\nend",
    "  text.scan(/a\\w*b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.scan(/a\\w*b/)\nend",
    "  text.match(/a\\w+b/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.match(/^a.+b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.match(/^a.+b$/) ? true : false\nend",
    "  text.scan(/a\\w*b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a.+b/)\nend",
    "  text.match(/^a.+b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.+b$/) ? true : false\nend",
    "  text.match(/^a.+b$/) ? true : false\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.scan(/a\\w*b/)\nend",
    "  if text =~ /a.*b/\n    puts \"This string matches the pattern.\"\n  else\n    puts \"This string does not match the pattern.\"\n  end\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.+b$/) ? true : false\nend",
    "  text.scan(/a\\w*b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.scan(/^a\\w+b$/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.scan(/a\\w*b/)\nend",
    "  text.scan(/a\\w*b/)\nend",
    "  text.scan(/a\\w*b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.scan(/a.+b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  /^a.*b$/.match(text)\nend",
    "  text.match(/^a\\w*b$/) ? true : false\nend",
    "  text.scan(/^a\\w+b$/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/^a\\w+b$/)\nend",
    "  text.scan(/a\\w*b/)\nend",
    "  text.scan(/a\\w*b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.match(/^a\\w*b$/) ? true : false\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.match(/^a.+b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/^a\\w+b$/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.+b$/) ? true : false\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.scan(/a.+b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  if text =~ /^a.*b$/\n    puts \"Matched!\"\n  else\n    puts \"No match!\"\n  end\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/a.+b/) ? true : false\nend",
    "  text.scan(/a\\w*b/)\nend",
    "  text.scan(/a.+b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  if text =~ /^a.*b$/\n    puts \"Match!\"\n  else\n    puts \"No match!\"\n  end\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  if text.match(/^a.*b$/)\n    puts \"We have a match!\"\n  else\n    puts \"No match here.\"\n  end\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.match(/^a\\w*b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  if text =~ /^a.*b$/\n    puts \"Match!\"\n  else\n    puts \"No match!\"\n  end\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.+b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.scan(/a\\w*b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w*b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a.+b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.match(/^a.+b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a\\w*b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/^a\\w*b$/)\nend",
    "  text.scan(/a\\w*b/)\nend",
    "  text.match(/^a.+b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w*b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  if text =~ /^a.*b$/\n    puts \"Match\"\n  else\n    puts \"No match\"\n  end\nend",
    "  text.scan(/a\\w*b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  if text.match(/^a.*b$/)\n    puts \"true\"\n  else\n    puts \"false\"\n  end\nend",
    "  text.match(/^a\\w*b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w*b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.+b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  if text =~ /a.+b/\n    puts \"Matched\"\n  else\n    puts \"No match\"\n  end\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.match(/^a\\w*b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.+b$/) ? true : false\nend",
    "  text.match(/^a.+b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w*b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w*b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.scan(/a\\w*b/)\nend",
    "  text.scan(/a\\w*b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.scan(/a\\w*b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w*b/)\nend",
    "  text.match(/^a\\w*b$/) ? true : false\nend",
    "  text.scan(/^a\\w+b$/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w*b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w*b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.+b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  /^a.*b$/.match(text)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.+b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.scan(/a\\w+b/)\nend",
    "  text.match(/^a.*b$/) ? true : false\nend"
  ]
}