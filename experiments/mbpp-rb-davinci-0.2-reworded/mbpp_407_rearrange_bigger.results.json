{
  "name": "mbpp_407_rearrange_bigger",
  "language": "rb",
  "prompt": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the next digit\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if there is no such digit, the number is already the biggest possible\n  return -1 if i == -1\n  # find the smallest digit that is bigger than the digit at i\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the digits at i and j\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits after i\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmpp2lt0be3\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpp2lt0be3.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008522172 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n117.34 tests/s, 234.68 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_str = n.to_s\n  n_arr = n_str.split('')\n  n_arr_sorted = n_arr.sort\n  n_arr_sorted_rev = n_arr_sorted.reverse\n  n_arr_sorted_rev_join = n_arr_sorted_rev.join\n  n_arr_sorted_rev_join_to_i = n_arr_sorted_rev_join.to_i\n  if n_arr_sorted_rev_join_to_i == n\n    return -1\n  else\n    return n_arr_sorted_rev_join_to_i\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmpx1j9dsry\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpx1j9dsry.rb:20:in `test_rearrange_bigger'\n     17:   def test_rearrange_bigger\n     18:     candidate = method(:rearrange_bigger)\n     19:     assert_equal(21, candidate.call(12))\n  => 20:     assert_equal(false, candidate.call(10))\n     21:     assert_equal(120, candidate.call(102))\n     22:   end\n     23: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008069443 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n123.92 tests/s, 247.85 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the one to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit exists, the number is the largest possible\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right that is larger than the pivot\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmp_an7xgym\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp_an7xgym.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008078977 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n123.78 tests/s, 247.56 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the one to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i+1]\n    i -= 1\n  end\n  # if no such digit exists, the number is the largest possible\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # return the new number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmppckdf3v0\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmppckdf3v0.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007907938 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n126.46 tests/s, 252.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('').map(&:to_i)\n  i = digits.length - 1\n  while i > 0 && digits[i - 1] >= digits[i]\n    i -= 1\n  end\n  return -1 if i == 0\n  j = digits.length - 1\n  while digits[j] <= digits[i - 1]\n    j -= 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  digits[i..-1] = digits[i..-1].reverse\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmpok_nprx9\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpok_nprx9.rb:22:in `test_rearrange_bigger'\n     19:   def test_rearrange_bigger\n     20:     candidate = method(:rearrange_bigger)\n     21:     assert_equal(21, candidate.call(12))\n  => 22:     assert_equal(false, candidate.call(10))\n     23:     assert_equal(120, candidate.call(102))\n     24:   end\n     25: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.014711984 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n67.97 tests/s, 135.94 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  return -1 if n.to_s.chars.uniq.size == 1\n  n = n.to_s.chars.sort.reverse.join.to_i\n  n.to_s.chars.permutation.map(&:join).map(&:to_i).sort.reverse.each { |i| return i if i > n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmpobjww_3y\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpobjww_3y.rb:11:in `test_rearrange_bigger'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_rearrange_bigger\n     10:     candidate = method(:rearrange_bigger)\n  => 11:     assert_equal(21, candidate.call(12))\n     12:     assert_equal(false, candidate.call(10))\n     13:     assert_equal(120, candidate.call(102))\n     14:   end\n<21> expected but was\n<[21, 12]>\n\ndiff:\n? [21, 12]\n===============================================================================\n\nFinished in 0.008495659 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n117.71 tests/s, 117.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.permutation.to_a.map { |x| x.join.to_i }.sort.reverse.each do |x|\n    return x if x > n\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmp68ed93k5\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp68ed93k5.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008688245 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.10 tests/s, 230.20 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get all permutations of the digits\n  perms = n.to_s.chars.permutation.map(&:join).map(&:to_i)\n  # return the first one that is bigger than the original number\n  perms.find { |perm| perm > n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmph9wpssyk\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmph9wpssyk.rb:13:in `test_rearrange_bigger'\n     10:   def test_rearrange_bigger\n     11:     candidate = method(:rearrange_bigger)\n     12:     assert_equal(21, candidate.call(12))\n  => 13:     assert_equal(false, candidate.call(10))\n     14:     assert_equal(120, candidate.call(102))\n     15:   end\n     16: end\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\nFinished in 0.008199723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.96 tests/s, 243.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('').map(&:to_i)\n  (n.size - 2).downto(0) do |i|\n    if n[i] < n[i + 1]\n      n[i], n[i + 1] = n[i + 1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmpd199lwvk\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpd199lwvk.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008079539 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n123.77 tests/s, 247.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get all permutations of the number\n  # select the permutations that are bigger than the original number\n  # return the smallest of those permutations\n  permutations = n.to_s.chars.permutation.to_a.map { |perm| perm.join.to_i }\n  permutations.select { |perm| perm > n }.min\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmpxogd3s86\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpxogd3s86.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\nFinished in 0.007815879 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n127.94 tests/s, 255.89 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is less than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i+1]\n    i -= 1\n  end\n  # if no such digit exists, the number is already the largest possible\n  return -1 if i < 0\n  # find the smallest digit to the right of i that is greater than digits[i]\n  j = digits.length - 1\n  while j > i && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap digits[i] and digits[j]\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of i\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # convert to integer and return\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmphynwf77b\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmphynwf77b.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008262601 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.03 tests/s, 242.05 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j > i && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to the right of the pivot\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # convert back to integer\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmp50nu21nb\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp50nu21nb.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00814511 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n122.77 tests/s, 245.55 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('').map(&:to_i)\n  (digits.size - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      (i + 1...digits.size).each do |j|\n        if digits[i] < digits[j]\n          digits[i], digits[j] = digits[j], digits[i]\n          break\n        end\n      end\n      digits[i + 1..-1] = digits[i + 1..-1].sort\n      return digits.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmpija3g1vd\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpija3g1vd.rb:23:in `test_rearrange_bigger'\n     20:   def test_rearrange_bigger\n     21:     candidate = method(:rearrange_bigger)\n     22:     assert_equal(21, candidate.call(12))\n  => 23:     assert_equal(false, candidate.call(10))\n     24:     assert_equal(120, candidate.call(102))\n     25:   end\n     26: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00833074 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n120.04 tests/s, 240.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if n_array[index + 1] && n_array[index + 1].to_i > num.to_i\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmpgq_vaqsz\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpgq_vaqsz.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008163881 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n122.49 tests/s, 244.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i+1] && num < n_arr[i+1]\n      n_arr[i], n_arr[i+1] = n_arr[i+1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmpx1orpgn0\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpx1orpgn0.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008375832 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.39 tests/s, 238.78 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert number to array of digits\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i+1]\n    i -= 1\n  end\n  # if no such digit exists, the number is already the largest possible\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to the right of the pivot\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # convert the array of digits back to a number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmpr9rw1xzh\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpr9rw1xzh.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008456629 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n118.25 tests/s, 236.50 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = 0\n  while i < digits.length - 1\n    if digits[i] < digits[i+1]\n      break\n    end\n    i += 1\n  end\n  # if no such digit exists, return -1\n  if i == digits.length - 1\n    return -1\n  end\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = i + 1\n  while j < digits.length\n    if digits[j] > digits[i]\n      break\n    end\n    j += 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # return the new number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmp9wkdoptw\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp9wkdoptw.rb:37:in `test_rearrange_bigger'\n     34:   def test_rearrange_bigger\n     35:     candidate = method(:rearrange_bigger)\n     36:     assert_equal(21, candidate.call(12))\n  => 37:     assert_equal(false, candidate.call(10))\n     38:     assert_equal(120, candidate.call(102))\n     39:   end\n     40: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.011869874 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n84.25 tests/s, 168.49 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i + 1] && n_arr[i + 1].to_i > num.to_i\n      n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmp5kxlgpu_\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp5kxlgpu_.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008331116 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n120.03 tests/s, 240.06 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to string\n  n = n.to_s\n  # find the first digit from the right that is smaller than the digit to its right\n  n.reverse.each_char.with_index do |c, i|\n    if c.to_i > n[-i-2].to_i\n      # swap the digits\n      n[-i-1], n[-i-2] = n[-i-2], n[-i-1]\n      # sort the digits to the right of the swapped digits in ascending order\n      n[-i..-1] = n[-i..-1].chars.sort.join\n      # convert to integer\n      return n.to_i\n    end\n  end\n  # if no such digit exists, return -1\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmph337byu2\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmph337byu2.rb:23:in `test_rearrange_bigger'\n     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_rearrange_bigger\n     22:     candidate = method(:rearrange_bigger)\n  => 23:     assert_equal(21, candidate.call(12))\n     24:     assert_equal(false, candidate.call(10))\n     25:     assert_equal(120, candidate.call(102))\n     26:   end\n<21> expected but was\n<12>\n\ndiff:\n? 121\n===============================================================================\n\nFinished in 0.008295278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n120.55 tests/s, 120.55 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  return -1 if n.to_s.size == 1\n  digits = n.to_s.split('').map(&:to_i)\n  i = digits.size - 1\n  while i > 0 && digits[i - 1] >= digits[i]\n    i -= 1\n  end\n  return -1 if i <= 0\n  j = digits.size - 1\n  while digits[j] <= digits[i - 1]\n    j -= 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  digits[i..-1] = digits[i..-1].reverse\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmp3cqev5wu\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp3cqev5wu.rb:23:in `test_rearrange_bigger'\n     20:   def test_rearrange_bigger\n     21:     candidate = method(:rearrange_bigger)\n     22:     assert_equal(21, candidate.call(12))\n  => 23:     assert_equal(false, candidate.call(10))\n     24:     assert_equal(120, candidate.call(102))\n     25:   end\n     26: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00860292 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n116.24 tests/s, 232.48 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.permutation.to_a.map(&:join).map(&:to_i).sort.select { |x| x > n }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpxj6jx5vd\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpxj6jx5vd.rb:11:in `test_rearrange_bigger'\n      8:   def test_rearrange_bigger\n      9:     candidate = method(:rearrange_bigger)\n     10:     assert_equal(21, candidate.call(12))\n  => 11:     assert_equal(false, candidate.call(10))\n     12:     assert_equal(120, candidate.call(102))\n     13:   end\n     14: end\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\nFinished in 0.007654112 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.65 tests/s, 261.30 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i+1] && n_arr[i+1].to_i > num.to_i\n      n_arr[i], n_arr[i+1] = n_arr[i+1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpjkwwksl_\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpjkwwksl_.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008214521 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.74 tests/s, 243.47 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('')\n  digits.each_with_index do |digit, i|\n    next if i == 0\n    if digit > digits[i-1]\n      digits[i-1], digits[i] = digits[i], digits[i-1]\n      return digits.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpjmh_5wpw\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpjmh_5wpw.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008075413 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n123.83 tests/s, 247.67 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |n, i|\n    if n_array[i+1] && n_array[i+1].to_i > n.to_i\n      n_array[i], n_array[i+1] = n_array[i+1], n_array[i]\n      return n_array.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpuc54xxtz\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpuc54xxtz.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007698639 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.89 tests/s, 259.79 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif num < n_array[index + 1]\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp2ldyddag\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp2ldyddag.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007962659 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n125.59 tests/s, 251.17 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('').map(&:to_i)\n  i = n.length - 1\n  while i > 0\n    if n[i] > n[i - 1]\n      n[i], n[i - 1] = n[i - 1], n[i]\n      return n.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpal3393ot\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpal3393ot.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008240607 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.35 tests/s, 242.70 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif n_array[index] < n_array[index + 1]\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpkehouknx\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpkehouknx.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008009238 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n124.86 tests/s, 249.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index < n_array.length - 1\n      if num < n_array[index + 1]\n        n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n        break\n      end\n    end\n  end\n  n_array.join('').to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpojqvav77\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpojqvav77.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.007520402 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.97 tests/s, 265.94 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to string\n  num = n.to_s\n  # find the first digit that is smaller than the digit to its right\n  num.each_char.with_index do |char, index|\n    if index < num.length - 1 && char < num[index + 1]\n      # find the smallest digit to the right of the pivot that is greater than the pivot\n      # swap the pivot with the smallest digit to the right of the pivot\n      num[index], num[index + 1] = num[index + 1], num[index]\n      # reverse the digits to the right of the pivot\n      num[index + 1..-1] = num[index + 1..-1].reverse\n      # convert to integer and return\n      return num.to_i\n    end\n  end\n  # if no such digit exists, return -1\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp32bwy64r\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp32bwy64r.rb:25:in `test_rearrange_bigger'\n     22:   def test_rearrange_bigger\n     23:     candidate = method(:rearrange_bigger)\n     24:     assert_equal(21, candidate.call(12))\n  => 25:     assert_equal(false, candidate.call(10))\n     26:     assert_equal(120, candidate.call(102))\n     27:   end\n     28: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007402217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n135.09 tests/s, 270.19 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get all permutations of the digits\n  # sort the permutations\n  # find the next biggest permutation\n  # return the next biggest permutation\n  permutations = n.to_s.split(\"\").permutation.to_a.map { |perm| perm.join(\"\").to_i }.sort\n  permutations[permutations.index(n) + 1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpg8a74xnb\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpg8a74xnb.rb:15:in `test_rearrange_bigger'\n     12:   def test_rearrange_bigger\n     13:     candidate = method(:rearrange_bigger)\n     14:     assert_equal(21, candidate.call(12))\n  => 15:     assert_equal(false, candidate.call(10))\n     16:     assert_equal(120, candidate.call(102))\n     17:   end\n     18: end\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\nFinished in 0.008585994 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n116.47 tests/s, 232.94 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # find the first digit that is smaller than the digit to its right\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  # swap the pivot with the smallest digit to the right\n  # sort the digits to the right of the pivot\n  # join the digits and return the number\n  digits = n.to_s.chars\n  pivot = -1\n  (digits.length - 1).downto(1) do |i|\n    if digits[i] > digits[i - 1]\n      pivot = i - 1\n      break\n    end\n  end\n  return -1 if pivot == -1\n  smallest = pivot + 1\n  (pivot + 1).upto(digits.length - 1) do |i|\n    if digits[i] < digits[smallest] && digits[i] > digits[pivot]\n      smallest = i\n    end\n  end\n  digits[pivot], digits[smallest] = digits[smallest], digits[pivot]\n  digits[pivot + 1..-1] = digits[pivot + 1..-1].sort\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp2s8j9gow\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp2s8j9gow.rb:32:in `test_rearrange_bigger'\n     29:   def test_rearrange_bigger\n     30:     candidate = method(:rearrange_bigger)\n     31:     assert_equal(21, candidate.call(12))\n  => 32:     assert_equal(false, candidate.call(10))\n     33:     assert_equal(120, candidate.call(102))\n     34:   end\n     35: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008335348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.97 tests/s, 239.94 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i+1] && num < n_arr[i+1]\n      n_arr[i], n_arr[i+1] = n_arr[i+1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmpx1orpgn0\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpx1orpgn0.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008375832 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.39 tests/s, 238.78 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, i|\n    if num < n_array[i + 1]\n      n_array[i], n_array[i + 1] = n_array[i + 1], n_array[i]\n      return n_array.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpbwu1e7ph\nStarted\nE\n===============================================================================\nError: test_rearrange_bigger(TestHumanEval): ArgumentError: comparison of String with nil failed\n/tmp/tmpbwu1e7ph.rb:5:in `<'\n/tmp/tmpbwu1e7ph.rb:5:in `block in rearrange_bigger'\n/tmp/tmpbwu1e7ph.rb:4:in `each'\n/tmp/tmpbwu1e7ph.rb:4:in `each_with_index'\n/tmp/tmpbwu1e7ph.rb:4:in `rearrange_bigger'\n/tmp/tmpbwu1e7ph.rb:17:in `call'\n/tmp/tmpbwu1e7ph.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n===============================================================================\n\nFinished in 0.002726154 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n366.82 tests/s, 366.82 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # if n is a single digit, return -1\n  return -1 if n.to_s.length == 1\n  # convert n to an array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = 0\n  while i < digits.length - 1\n    break if digits[i] < digits[i + 1]\n    i += 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i == digits.length - 1\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = i + 1\n  while j < digits.length\n    break if digits[j] > digits[i]\n    j += 1\n  end\n  # swap the pivot with the smallest digit to the right of the pivot\n  digits[i], digits[j] = digits[j], digits[i]\n  # sort the digits to the right of the pivot in ascending order\n  digits[i + 1..-1] = digits[i + 1..-1].sort\n  # convert the array of digits back to a number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpgenrd7jc\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpgenrd7jc.rb:33:in `test_rearrange_bigger'\n     30:   def test_rearrange_bigger\n     31:     candidate = method(:rearrange_bigger)\n     32:     assert_equal(21, candidate.call(12))\n  => 33:     assert_equal(false, candidate.call(10))\n     34:     assert_equal(120, candidate.call(102))\n     35:   end\n     36: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008286642 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n120.68 tests/s, 241.35 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # split the number into an array of digits\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the digit to its right\n  i = 0\n  while i < digits.length - 1\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i += 1\n  end\n  # if no such digit exists, return -1\n  if i == digits.length - 1\n    return -1\n  end\n  # find the smallest digit to the right of the digit found in the previous step that is greater than the digit found in the previous step\n  j = i + 1\n  while j < digits.length\n    if digits[j] > digits[i]\n      break\n    end\n    j += 1\n  end\n  # swap the two digits found in the previous two steps\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the digit found in the first step\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # join the digits and convert to an integer\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp5adxe59u\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp5adxe59u.rb:37:in `test_rearrange_bigger'\n     34:   def test_rearrange_bigger\n     35:     candidate = method(:rearrange_bigger)\n     36:     assert_equal(21, candidate.call(12))\n  => 37:     assert_equal(false, candidate.call(10))\n     38:     assert_equal(120, candidate.call(102))\n     39:   end\n     40: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007509392 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.17 tests/s, 266.33 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index < n_array.length - 1\n      if num < n_array[index + 1]\n        n_array[index] = n_array[index + 1]\n        n_array[index + 1] = num\n        return n_array.join('').to_i\n      end\n    end\n  end\n  return -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp14n5h3df\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp14n5h3df.rb:20:in `test_rearrange_bigger'\n     17:   def test_rearrange_bigger\n     18:     candidate = method(:rearrange_bigger)\n     19:     assert_equal(21, candidate.call(12))\n  => 20:     assert_equal(false, candidate.call(10))\n     21:     assert_equal(120, candidate.call(102))\n     22:   end\n     23: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008160889 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n122.54 tests/s, 245.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, idx|\n    if idx == n_array.length - 1\n      return -1\n    elsif num < n_array[idx + 1]\n      n_array[idx], n_array[idx + 1] = n_array[idx + 1], n_array[idx]\n      return n_array.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpswm0pmcd\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpswm0pmcd.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007228724 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.34 tests/s, 276.67 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit exists, the number is already the largest possible\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j > i && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right that is larger than the pivot\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number as an integer\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp_0tz18w5\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp_0tz18w5.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008049107 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n124.24 tests/s, 248.47 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('')\n  (digits.length - 2).downto(0).each do |i|\n    if digits[i] < digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp_4ifnf6p\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp_4ifnf6p.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008249362 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.22 tests/s, 242.44 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif n_array[index + 1] > num\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp0y0lmbl9\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp0y0lmbl9.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008071101 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n123.90 tests/s, 247.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  return -1 if n.to_s.size == 1\n  digits = n.to_s.split('').map(&:to_i)\n  i = digits.size - 1\n  while i > 0 && digits[i - 1] >= digits[i]\n    i -= 1\n  end\n  return -1 if i <= 0\n  j = digits.size - 1\n  while digits[j] <= digits[i - 1]\n    j -= 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  digits[i..-1] = digits[i..-1].reverse\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmp3cqev5wu\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp3cqev5wu.rb:23:in `test_rearrange_bigger'\n     20:   def test_rearrange_bigger\n     21:     candidate = method(:rearrange_bigger)\n     22:     assert_equal(21, candidate.call(12))\n  => 23:     assert_equal(false, candidate.call(10))\n     24:     assert_equal(120, candidate.call(102))\n     25:   end\n     26: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00860292 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n116.24 tests/s, 232.48 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('')\n  (digits.length - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpolz9rjc5\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpolz9rjc5.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008267834 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n120.95 tests/s, 241.90 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif n_array[index].to_i > n_array[index + 1].to_i\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpqizpqlpt\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpqizpqlpt.rb:17:in `test_rearrange_bigger'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n  => 17:     assert_equal(21, candidate.call(12))\n     18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n<21> expected but was\n<-1>\n\ndiff:\n? 21\n? - \n? ? \n===============================================================================\n\nFinished in 0.007928296 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n126.13 tests/s, 126.13 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, idx|\n    if idx < n_arr.length - 1\n      if n_arr[idx + 1].to_i > num.to_i\n        n_arr[idx], n_arr[idx + 1] = n_arr[idx + 1], n_arr[idx]\n        return n_arr.join('').to_i\n      end\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp5voemlam\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp5voemlam.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007776222 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.60 tests/s, 257.19 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, idx|\n    n_arr[idx] = n_arr[idx + 1]\n    n_arr[idx + 1] = num\n    return n_arr.join.to_i if n_arr.join.to_i > n\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122934,
      "stdout": "Loaded suite /tmp/tmpj8qxh0v6\nStarted",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index < n_array.length - 1\n      if num < n_array[index + 1]\n        n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n        return n_array.join('').to_i\n      end\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp3sho_bbd\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp3sho_bbd.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006513226 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.53 tests/s, 307.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.permutation.to_a.map(&:join).map(&:to_i).sort.reverse.each { |num| return num if num > n.join.to_i }\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp7eh55isg\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp7eh55isg.rb:12:in `test_rearrange_bigger'\n      9:   def test_rearrange_bigger\n     10:     candidate = method(:rearrange_bigger)\n     11:     assert_equal(21, candidate.call(12))\n  => 12:     assert_equal(false, candidate.call(10))\n     13:     assert_equal(120, candidate.call(102))\n     14:   end\n     15: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007038698 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.07 tests/s, 284.14 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  return -1 if n.to_s.length == 1\n  digits = n.to_s.split('').map(&:to_i)\n  i = digits.length - 1\n  while i > 0\n    if digits[i] > digits[i - 1]\n      digits[i], digits[i - 1] = digits[i - 1], digits[i]\n      return digits.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpa5y847y5\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpa5y847y5.rb:20:in `test_rearrange_bigger'\n     17:   def test_rearrange_bigger\n     18:     candidate = method(:rearrange_bigger)\n     19:     assert_equal(21, candidate.call(12))\n  => 20:     assert_equal(false, candidate.call(10))\n     21:     assert_equal(120, candidate.call(102))\n     22:   end\n     23: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006766359 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.79 tests/s, 295.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  return -1 if n.to_s.length == 1\n  digits = n.to_s.split('').map(&:to_i)\n  i = digits.length - 1\n  while i > 0\n    if digits[i - 1] < digits[i]\n      digits[i - 1], digits[i] = digits[i], digits[i - 1]\n      return digits.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpii6woso6\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpii6woso6.rb:20:in `test_rearrange_bigger'\n     17:   def test_rearrange_bigger\n     18:     candidate = method(:rearrange_bigger)\n     19:     assert_equal(21, candidate.call(12))\n  => 20:     assert_equal(false, candidate.call(10))\n     21:     assert_equal(120, candidate.call(102))\n     22:   end\n     23: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006924678 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.41 tests/s, 288.82 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the next digit\n  i = 0\n  while i < digits.length - 1\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i += 1\n  end\n  # if no such digit exists, the number is the largest possible\n  return -1 if i == digits.length - 1\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = i + 1\n  while j < digits.length\n    if digits[j] > digits[i]\n      break\n    end\n    j += 1\n  end\n  # swap the pivot with the smallest digit to the right\n  digits[i], digits[j] = digits[j], digits[i]\n  # sort the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].sort\n  # return the number\n  digits.join('').to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpb2rpnmqi\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpb2rpnmqi.rb:35:in `test_rearrange_bigger'\n     32:   def test_rearrange_bigger\n     33:     candidate = method(:rearrange_bigger)\n     34:     assert_equal(21, candidate.call(12))\n  => 35:     assert_equal(false, candidate.call(10))\n     36:     assert_equal(120, candidate.call(102))\n     37:   end\n     38: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006932245 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.25 tests/s, 288.51 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get all permutations of the digits\n  perms = n.to_s.split('').permutation.to_a\n  # sort the permutations\n  perms.sort!\n  # find the index of the given number\n  index = perms.index(n.to_s.split(''))\n  # return the next bigger number\n  return perms[index + 1].join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp8s5276uf\nStarted\nE\n===============================================================================\nError: test_rearrange_bigger(TestHumanEval):\n  NoMethodError: undefined method `join' for nil:NilClass\n  \n    return perms[index + 1].join.to_i\n                           ^^^^^\n/tmp/tmp8s5276uf.rb:10:in `rearrange_bigger'\n/tmp/tmp8s5276uf.rb:17:in `call'\n/tmp/tmp8s5276uf.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n===============================================================================\n\nFinished in 0.002898591 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n345.00 tests/s, 345.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert number to string, split into array of chars, sort in descending order, join\n  n.to_s.chars.sort.reverse.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpgz591rw9\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpgz591rw9.rb:11:in `test_rearrange_bigger'\n      8:   def test_rearrange_bigger\n      9:     candidate = method(:rearrange_bigger)\n     10:     assert_equal(21, candidate.call(12))\n  => 11:     assert_equal(false, candidate.call(10))\n     12:     assert_equal(120, candidate.call(102))\n     13:   end\n     14: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.006810782 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.83 tests/s, 293.65 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.each_with_index do |num, index|\n    if n[index + 1] && n[index + 1].to_i > num.to_i\n      n[index], n[index + 1] = n[index + 1], n[index]\n      return n.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp7paalp63\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp7paalp63.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006667322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.99 tests/s, 299.97 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if i < n_arr.length - 1\n      if num < n_arr[i + 1]\n        n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n        return n_arr.join('').to_i\n      end\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpnl8d4zs4\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpnl8d4zs4.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007053533 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.77 tests/s, 283.55 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.permutation.to_a.map { |x| x.join.to_i }.sort.reverse.each do |x|\n    return x if x > n\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpxa3bvdwt\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpxa3bvdwt.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006581711 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.94 tests/s, 303.87 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.split('')\n  # get the length of the number\n  length = digits.length\n  # get the index of the digit to be swapped\n  index = length - 2\n  # loop through the digits from the end\n  while index >= 0\n    # if the digit is less than the digit after it\n    if digits[index] < digits[index + 1]\n      # get the index of the digit to be swapped with\n      swap_index = index + 1\n      # loop through the digits from the end\n      (index + 1...length).each do |i|\n        # if the digit is greater than the digit to be swapped\n        if digits[i] > digits[index]\n          # set the swap index to the index of the digit\n          swap_index = i\n        end\n      end\n      # swap the digits\n      digits[index], digits[swap_index] = digits[swap_index], digits[index]\n      # sort the digits after the index\n      digits[index + 1..-1] = digits[index + 1..-1].sort\n      # return the number\n      return digits.join('').to_i\n    end\n    # decrement the index\n    index -= 1\n  end\n  # return -1 if no bigger number exists\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpkr5x1x5o\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpkr5x1x5o.rb:41:in `test_rearrange_bigger'\n     38:   def test_rearrange_bigger\n     39:     candidate = method(:rearrange_bigger)\n     40:     assert_equal(21, candidate.call(12))\n  => 41:     assert_equal(false, candidate.call(10))\n     42:     assert_equal(120, candidate.call(102))\n     43:   end\n     44: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006502416 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.79 tests/s, 307.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  return -1 if n.to_s.size == 1\n  digits = n.to_s.chars.map(&:to_i)\n  i = digits.size - 1\n  while i > 0 && digits[i] <= digits[i - 1]\n    i -= 1\n  end\n  return -1 if i == 0\n  j = digits.size - 1\n  while j >= i && digits[j] <= digits[i - 1]\n    j -= 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  digits[i..-1] = digits[i..-1].sort\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpmk9ykg3s\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpmk9ykg3s.rb:23:in `test_rearrange_bigger'\n     20:   def test_rearrange_bigger\n     21:     candidate = method(:rearrange_bigger)\n     22:     assert_equal(21, candidate.call(12))\n  => 23:     assert_equal(false, candidate.call(10))\n     24:     assert_equal(120, candidate.call(102))\n     25:   end\n     26: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.012758911 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n78.38 tests/s, 156.75 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('')\n  length = digits.length\n  i = length - 1\n  while i > 0\n    if digits[i] > digits[i - 1]\n      temp = digits[i]\n      digits[i] = digits[i - 1]\n      digits[i - 1] = temp\n      break\n    end\n    i -= 1\n  end\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpxhl1z6bg\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpxhl1z6bg.rb:22:in `test_rearrange_bigger'\n     19:   def test_rearrange_bigger\n     20:     candidate = method(:rearrange_bigger)\n     21:     assert_equal(21, candidate.call(12))\n  => 22:     assert_equal(false, candidate.call(10))\n     23:     assert_equal(120, candidate.call(102))\n     24:   end\n     25: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.006552193 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.62 tests/s, 305.24 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert number to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i == -1\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the new number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpjl88rj0u\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpjl88rj0u.rb:35:in `test_rearrange_bigger'\n     32:   def test_rearrange_bigger\n     33:     candidate = method(:rearrange_bigger)\n     34:     assert_equal(21, candidate.call(12))\n  => 35:     assert_equal(false, candidate.call(10))\n     36:     assert_equal(120, candidate.call(102))\n     37:   end\n     38: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00667314 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.85 tests/s, 299.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('').map(&:to_i)\n  (n_arr.length - 1).downto(1) do |i|\n    if n_arr[i] > n_arr[i - 1]\n      n_arr[i], n_arr[i - 1] = n_arr[i - 1], n_arr[i]\n      return n_arr.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp4n1ms9lh\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp4n1ms9lh.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006981114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.24 tests/s, 286.49 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('')\n  (digits.size - 2).downto(0) do |i|\n    if digits[i] < digits[i+1]\n      digits[i], digits[i+1] = digits[i+1], digits[i]\n      return digits.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpby3h8nf1\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpby3h8nf1.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006491753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n154.04 tests/s, 308.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if i < n_arr.length - 1\n      if n_arr[i].to_i < n_arr[i + 1].to_i\n        n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n        return n_arr.join('').to_i\n      end\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpf7fuhcni\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpf7fuhcni.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007263543 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.67 tests/s, 275.35 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # return -1 if n.to_s.split('').uniq.length == 1\n  # return -1 if n.to_s.split('').sort.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split(\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "",
      "stderr": "/tmp/tmpo13emezz.rb:23: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpo13emezz.rb:30: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the one after it\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i+1]\n    i -= 1\n  end\n  # if no such digit exists, the number is already the biggest possible\n  return -1 if i < 0\n  # find the smallest digit that is bigger than the one at i\n  j = digits.length - 1\n  while j > i && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the two digits\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits after i\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # convert back to integer\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmptpo3zkj8\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmptpo3zkj8.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006680105 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.70 tests/s, 299.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to string, split into array of chars, sort in descending order, join, convert to int\n  n.to_s.split('').sort.reverse.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpqs44hkdw\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpqs44hkdw.rb:11:in `test_rearrange_bigger'\n      8:   def test_rearrange_bigger\n      9:     candidate = method(:rearrange_bigger)\n     10:     assert_equal(21, candidate.call(12))\n  => 11:     assert_equal(false, candidate.call(10))\n     12:     assert_equal(120, candidate.call(102))\n     13:   end\n     14: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.006484259 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n154.22 tests/s, 308.44 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_str = n.to_s\n  n_arr = n_str.split('')\n  n_arr.sort!\n  n_arr.reverse!\n  n_arr.join('').to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpkks9kvkq\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpkks9kvkq.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.006697128 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.32 tests/s, 298.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if n[i+1] && n[i+1].to_i > num.to_i\n      n[i], n[i+1] = n[i+1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp_kpek40y\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp_kpek40y.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006428513 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n155.56 tests/s, 311.11 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.each_with_index do |digit, index|\n    if index == n.length - 1\n      return -1\n    elsif digit < n[index + 1]\n      n[index], n[index + 1] = n[index + 1], n[index]\n      return n.join.to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp2ukv__bz\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp2ukv__bz.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007538029 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.66 tests/s, 265.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = 0\n  while i < digits.length - 1\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i += 1\n  end\n  # if no such digit exists, return -1\n  if i == digits.length - 1\n    return -1\n  end\n  # find the smallest digit to the right of the digit found above that is greater than it\n  j = i + 1\n  while j < digits.length\n    if digits[j] > digits[i]\n      break\n    end\n    j += 1\n  end\n  # swap the two digits\n  digits[i], digits[j] = digits[j], digits[i]\n  # sort the digits to the right of the digit found above in ascending order\n  digits[i + 1..-1] = digits[i + 1..-1].sort\n  # return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp3sydmcgd\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp3sydmcgd.rb:37:in `test_rearrange_bigger'\n     34:   def test_rearrange_bigger\n     35:     candidate = method(:rearrange_bigger)\n     36:     assert_equal(21, candidate.call(12))\n  => 37:     assert_equal(false, candidate.call(10))\n     38:     assert_equal(120, candidate.call(102))\n     39:   end\n     40: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006722628 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.75 tests/s, 297.50 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.each_with_index do |digit, i|\n    if n[i+1] && digit < n[i+1]\n      n[i], n[i+1] = n[i+1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmphs3i_yma\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmphs3i_yma.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006509308 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.63 tests/s, 307.25 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_str = n.to_s\n  n_str.split('').permutation.map(&:join).map(&:to_i).sort.reverse.find { |i| i > n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpx7bccuiy\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpx7bccuiy.rb:11:in `test_rearrange_bigger'\n      8:   def test_rearrange_bigger\n      9:     candidate = method(:rearrange_bigger)\n     10:     assert_equal(21, candidate.call(12))\n  => 11:     assert_equal(false, candidate.call(10))\n     12:     assert_equal(120, candidate.call(102))\n     13:   end\n     14: end\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\nFinished in 0.008338865 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.92 tests/s, 239.84 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('')\n  i = digits.length - 1\n  while i > 0 && digits[i - 1] >= digits[i]\n    i -= 1\n  end\n  return -1 if i <= 0\n  j = digits.length - 1\n  while digits[j] <= digits[i - 1]\n    j -= 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  digits[i..-1] = digits[i..-1].reverse\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpjo38jbyy\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpjo38jbyy.rb:22:in `test_rearrange_bigger'\n     19:   def test_rearrange_bigger\n     20:     candidate = method(:rearrange_bigger)\n     21:     assert_equal(21, candidate.call(12))\n  => 22:     assert_equal(false, candidate.call(10))\n     23:     assert_equal(120, candidate.call(102))\n     24:   end\n     25: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006715317 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.91 tests/s, 297.83 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # find the first digit that is smaller than the digit to its right\n  # find the smallest digit to the right of the digit found above that is larger than the digit found above\n  # swap the digits\n  # sort the digits to the right of the digit found above\n  # join the digits and return the number\n  n.to_s.split('').each_with_index do |digit, index|\n    next if index == n.to_s.length - 1\n    if digit < n.to_s[index + 1]\n      min_index = index + 1\n      min_digit = n.to_s[index + 1]\n      (index + 1).upto(n.to_s.length - 1) do |i|\n        if n.to_s[i] < min_digit && n.to_s[i] > digit\n          min_index = i\n          min_digit = n.to_s[i]\n        end\n      end\n      n.to_s[index], n.to_s[min_index] = n.to_s[min_index], n.to_s[index]\n      return n.to_s[0..index] + n.to_s[index + 1..-1].split('').sort.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpnkc8vrow\nStarted\nE\n===============================================================================\nError: test_rearrange_bigger(TestHumanEval): TypeError: no implicit conversion of Integer into String\n/tmp/tmpnkc8vrow.rb:20:in `+'\n/tmp/tmpnkc8vrow.rb:20:in `block in rearrange_bigger'\n/tmp/tmpnkc8vrow.rb:8:in `each'\n/tmp/tmpnkc8vrow.rb:8:in `each_with_index'\n/tmp/tmpnkc8vrow.rb:8:in `rearrange_bigger'\n/tmp/tmpnkc8vrow.rb:29:in `call'\n/tmp/tmpnkc8vrow.rb:29:in `test_rearrange_bigger'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_rearrange_bigger\n     28:     candidate = method(:rearrange_bigger)\n  => 29:     assert_equal(21, candidate.call(12))\n     30:     assert_equal(false, candidate.call(10))\n     31:     assert_equal(120, candidate.call(102))\n     32:   end\n===============================================================================\n\nFinished in 0.001234305 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n810.17 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to string\n  # split into array\n  # sort array\n  # join array\n  # convert to integer\n  n.to_s.split('').sort.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpmlgz8eky\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpmlgz8eky.rb:14:in `test_rearrange_bigger'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_rearrange_bigger\n     13:     candidate = method(:rearrange_bigger)\n  => 14:     assert_equal(21, candidate.call(12))\n     15:     assert_equal(false, candidate.call(10))\n     16:     assert_equal(120, candidate.call(102))\n     17:   end\n<21> expected but was\n<12>\n\ndiff:\n? 121\n===============================================================================\n\nFinished in 0.009886229 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n101.15 tests/s, 101.15 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  i = n_array.length - 1\n  while i > 0\n    if n_array[i] > n_array[i - 1]\n      n_array[i], n_array[i - 1] = n_array[i - 1], n_array[i]\n      return n_array.join('').to_i\n    end\n    i -= 1\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpqq2k84k7\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpqq2k84k7.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006787307 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.33 tests/s, 294.67 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is less than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i+1]\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp5eyvnn83\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp5eyvnn83.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00782051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n127.87 tests/s, 255.74 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert number to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit exists, the number is already the largest possible\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpun609djl\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpun609djl.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008460997 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n118.19 tests/s, 236.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if i == n_arr.length - 1\n      return -1\n    elsif num < n_arr[i + 1]\n      n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmplrfueae0\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmplrfueae0.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006668419 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.96 tests/s, 299.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split(\"\")\n  n.each_with_index do |num, index|\n    if n[index + 1] && n[index + 1].to_i > num.to_i\n      n[index], n[index + 1] = n[index + 1], n[index]\n      return n.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp0vsxw_vu\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp0vsxw_vu.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006589466 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.76 tests/s, 303.51 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_str = n.to_s\n  n_arr = n_str.split('')\n  n_arr.permutation.to_a.map { |a| a.join.to_i }.sort.reverse.each do |i|\n    return i if i > n\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpinm3ycfi\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpinm3ycfi.rb:15:in `test_rearrange_bigger'\n     12:   def test_rearrange_bigger\n     13:     candidate = method(:rearrange_bigger)\n     14:     assert_equal(21, candidate.call(12))\n  => 15:     assert_equal(false, candidate.call(10))\n     16:     assert_equal(120, candidate.call(102))\n     17:   end\n     18: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.011881294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n84.17 tests/s, 168.33 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.chars.map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit is found, the number is already the largest possible\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j > i && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpb1z413tc\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpb1z413tc.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006532019 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.09 tests/s, 306.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |digit, i|\n    if n_arr[i+1] && digit < n_arr[i+1]\n      n_arr[i], n_arr[i+1] = n_arr[i+1], n_arr[i]\n      break\n    end\n  end\n  n_arr.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpuv6q4vw0\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpuv6q4vw0.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.006458082 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n154.84 tests/s, 309.69 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  return -1 if n.to_s.length == 1\n  digits = n.to_s.split('').map(&:to_i)\n  i = digits.length - 1\n  while i > 0\n    if digits[i] > digits[i - 1]\n      digits[i], digits[i - 1] = digits[i - 1], digits[i]\n      return digits.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpa5y847y5\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpa5y847y5.rb:20:in `test_rearrange_bigger'\n     17:   def test_rearrange_bigger\n     18:     candidate = method(:rearrange_bigger)\n     19:     assert_equal(21, candidate.call(12))\n  => 20:     assert_equal(false, candidate.call(10))\n     21:     assert_equal(120, candidate.call(102))\n     22:   end\n     23: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006766359 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.79 tests/s, 295.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to array of digits\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit exists, the number is already the largest possible\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j > i && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # convert back to integer\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmplp767sxp\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmplp767sxp.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008357404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.65 tests/s, 239.31 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if n[i+1] && num < n[i+1]\n      n[i], n[i+1] = n[i+1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpwi7deck8\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpwi7deck8.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007847794 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n127.42 tests/s, 254.85 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.permutation.to_a.map { |x| x.join.to_i }.sort.each do |x|\n    return x if x > n\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpwolrefn9\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpwolrefn9.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007647794 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.76 tests/s, 261.51 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to string\n  n_str = n.to_s\n  # find the first decreasing digit\n  i = n_str.length - 2\n  while i >= 0 && n_str[i] >= n_str[i+1]\n    i -= 1\n  end\n  # if no decreasing digit, return -1\n  return -1 if i == -1\n  # find the smallest digit that is greater than the decreasing digit\n  j = n_str.length - 1\n  while n_str[j] <= n_str[i]\n    j -= 1\n  end\n  # swap the decreasing digit with the smallest digit that is greater than it\n  n_str[i], n_str[j] = n_str[j], n_str[i]\n  # reverse the digits after the decreasing digit\n  n_str[i+1..-1] = n_str[i+1..-1].reverse\n  # convert back to integer\n  n_str.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp0godessf\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp0godessf.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006961402 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.65 tests/s, 287.30 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # find the rightmost digit that is smaller than the digit to its right\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  # swap the pivot with the smallest digit to the right\n  # sort the digits to the right of the pivot in ascending order\n  # return the new number\n  n_arr = n.to_s.split('')\n  pivot = n_arr.length - 2\n  while pivot >= 0 && n_arr[pivot] >= n_arr[pivot + 1]\n    pivot -= 1\n  end\n  return -1 if pivot < 0\n  smallest = pivot + 1\n  (pivot + 1).upto(n_arr.length - 1) do |i|\n    smallest = i if n_arr[i] > n_arr[pivot] && n_arr[i] < n_arr[smallest]\n  end\n  n_arr[pivot], n_arr[smallest] = n_arr[smallest], n_arr[pivot]\n  n_arr[pivot + 1..-1] = n_arr[pivot + 1..-1].sort\n  n_arr.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpqewyq4b1\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpqewyq4b1.rb:27:in `test_rearrange_bigger'\n     24:   def test_rearrange_bigger\n     25:     candidate = method(:rearrange_bigger)\n     26:     assert_equal(21, candidate.call(12))\n  => 27:     assert_equal(false, candidate.call(10))\n     28:     assert_equal(120, candidate.call(102))\n     29:   end\n     30: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006610997 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.26 tests/s, 302.53 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.permutation.to_a.map(&:join).map(&:to_i).sort.reverse.each do |i|\n    return i if i > n.join.to_i\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp1coemb47\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp1coemb47.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006825105 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.52 tests/s, 293.04 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i+1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  if i < 0\n    return -1\n  end\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp_2ag6if9\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp_2ag6if9.rb:37:in `test_rearrange_bigger'\n     34:   def test_rearrange_bigger\n     35:     candidate = method(:rearrange_bigger)\n     36:     assert_equal(21, candidate.call(12))\n  => 37:     assert_equal(false, candidate.call(10))\n     38:     assert_equal(120, candidate.call(102))\n     39:   end\n     40: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00683158 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.38 tests/s, 292.76 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get all permutations of the digits of the number\n  permutations = n.to_s.split('').permutation.map(&:join).map(&:to_i)\n  # filter out permutations that are smaller than the original number\n  permutations.select { |perm| perm > n }.min\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp4iergfsz\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp4iergfsz.rb:13:in `test_rearrange_bigger'\n     10:   def test_rearrange_bigger\n     11:     candidate = method(:rearrange_bigger)\n     12:     assert_equal(21, candidate.call(12))\n  => 13:     assert_equal(false, candidate.call(10))\n     14:     assert_equal(120, candidate.call(102))\n     15:   end\n     16: end\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\nFinished in 0.007180912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n139.26 tests/s, 278.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  (n.length - 2).downto(0) do |i|\n    if n[i] < n[i + 1]\n      n[i], n[i + 1] = n[i + 1], n[i]\n      return n.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpbno_ty9n\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpbno_ty9n.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006611716 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.25 tests/s, 302.49 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_str = n.to_s\n  n_str.split('').permutation.map(&:join).map(&:to_i).sort.reverse.each do |num|\n    return num if num > n\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpfkumca9v\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpfkumca9v.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006929953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.30 tests/s, 288.60 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_str = n.to_s\n  n_arr = n_str.split('')\n  n_arr.sort!\n  n_arr.reverse!\n  n_arr.join('').to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpkks9kvkq\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpkks9kvkq.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.006697128 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.32 tests/s, 298.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i + 1] && num < n_arr[i + 1]\n      n_arr.delete_at(i)\n      n_arr.insert(i, num)\n      return n_arr.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpuxld5eu2\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpuxld5eu2.rb:17:in `test_rearrange_bigger'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n  => 17:     assert_equal(21, candidate.call(12))\n     18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n<21> expected but was\n<12>\n\ndiff:\n? 121\n===============================================================================\n\nFinished in 0.006715804 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.90 tests/s, 148.90 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if i == n.length - 1\n      return -1\n    elsif num < n[i + 1]\n      n[i], n[i + 1] = n[i + 1], n[i]\n      return n.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpj6rsnw15\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpj6rsnw15.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007138709 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n140.08 tests/s, 280.16 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get all permutations of the digits\n  perms = n.to_s.split('').permutation.to_a\n  # sort the permutations\n  perms.sort!\n  # find the index of the original number\n  index = perms.index(n.to_s.split(''))\n  # return the next number in the sorted array\n  return perms[index + 1].join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp0cayogrm\nStarted\nE\n===============================================================================\nError: test_rearrange_bigger(TestHumanEval):\n  NoMethodError: undefined method `join' for nil:NilClass\n  \n    return perms[index + 1].join.to_i\n                           ^^^^^\n/tmp/tmp0cayogrm.rb:10:in `rearrange_bigger'\n/tmp/tmp0cayogrm.rb:17:in `call'\n/tmp/tmp0cayogrm.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n===============================================================================\n\nFinished in 0.005105226 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n195.88 tests/s, 195.88 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, i|\n    if n_array[i + 1] && n_array[i + 1].to_i > num.to_i\n      n_array[i], n_array[i + 1] = n_array[i + 1], n_array[i]\n      return n_array.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpecy2i7zc\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpecy2i7zc.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006809211 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.86 tests/s, 293.72 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('')\n  return -1 if digits.length == 1\n  i = digits.length - 1\n  while i > 0\n    if digits[i] > digits[i - 1]\n      digits[i], digits[i - 1] = digits[i - 1], digits[i]\n      return digits.join('').to_i\n    end\n    i -= 1\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpfbd2pi7m\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpfbd2pi7m.rb:20:in `test_rearrange_bigger'\n     17:   def test_rearrange_bigger\n     18:     candidate = method(:rearrange_bigger)\n     19:     assert_equal(21, candidate.call(12))\n  => 20:     assert_equal(false, candidate.call(10))\n     21:     assert_equal(120, candidate.call(102))\n     22:   end\n     23: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006676394 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.78 tests/s, 299.56 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if i == n_arr.length - 1\n      return -1\n    elsif n_arr[i] < n_arr[i + 1]\n      n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmphvvvl6fj\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmphvvvl6fj.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006615371 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.16 tests/s, 302.33 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('').map(&:to_i)\n  i = n.length - 1\n  while i > 0\n    if n[i] > n[i - 1]\n      n[i], n[i - 1] = n[i - 1], n[i]\n      return n.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpal3393ot\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpal3393ot.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008240607 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.35 tests/s, 242.70 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to string, split into array, sort, join\n  # if the result is the same as the original, return -1\n  # else return the result\n  result = n.to_s.split('').sort.join.to_i\n  result == n ? -1 : result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmplv2mo6q6\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmplv2mo6q6.rb:13:in `test_rearrange_bigger'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n  => 13:     assert_equal(21, candidate.call(12))\n     14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n<21> expected but was\n<-1>\n\ndiff:\n? 21\n? - \n? ? \n===============================================================================\n\nFinished in 0.00678633 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.36 tests/s, 147.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit from the right that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i+1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # return the rearranged number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmptsxbumhn\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmptsxbumhn.rb:35:in `test_rearrange_bigger'\n     32:   def test_rearrange_bigger\n     33:     candidate = method(:rearrange_bigger)\n     34:     assert_equal(21, candidate.call(12))\n  => 35:     assert_equal(false, candidate.call(10))\n     36:     assert_equal(120, candidate.call(102))\n     37:   end\n     38: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006854274 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n145.89 tests/s, 291.79 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to string\n  # split into array\n  # sort\n  # join\n  # convert to integer\n  n.to_s.split('').sort.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmppu5b4zq_\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmppu5b4zq_.rb:14:in `test_rearrange_bigger'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_rearrange_bigger\n     13:     candidate = method(:rearrange_bigger)\n  => 14:     assert_equal(21, candidate.call(12))\n     15:     assert_equal(false, candidate.call(10))\n     16:     assert_equal(120, candidate.call(102))\n     17:   end\n<21> expected but was\n<12>\n\ndiff:\n? 121\n===============================================================================\n\nFinished in 0.007374409 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n135.60 tests/s, 135.60 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.split('')\n  # get the index of the first digit that is smaller than the digit to the right\n  index = digits.each_with_index.find { |d, i| digits[i + 1] && d < digits[i + 1] }[1]\n  # get the index of the smallest digit that is larger than the digit at the index\n  swap_index = digits[index + 1..-1].each_with_index.min[1]\n  # swap the digits\n  digits[index], digits[index + 1 + swap_index] = digits[index + 1 + swap_index], digits[index]\n  # sort the digits to the right of the index\n  digits[index + 1..-1] = digits[index + 1..-1].sort\n  # return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpw3e_exg4\nStarted\nE\n===============================================================================\nError: test_rearrange_bigger(TestHumanEval):\n  NoMethodError: undefined method `[]' for nil:NilClass\n  \n    index = digits.each_with_index.find { |d, i| digits[i + 1] && d < digits[i + 1] }[1]\n                                                                                     ^^^\n/tmp/tmpw3e_exg4.rb:6:in `rearrange_bigger'\n/tmp/tmpw3e_exg4.rb:21:in `call'\n/tmp/tmpw3e_exg4.rb:21:in `test_rearrange_bigger'\n     18:   def test_rearrange_bigger\n     19:     candidate = method(:rearrange_bigger)\n     20:     assert_equal(21, candidate.call(12))\n  => 21:     assert_equal(false, candidate.call(10))\n     22:     assert_equal(120, candidate.call(102))\n     23:   end\n     24: end\n===============================================================================\n\nFinished in 0.002289679 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n436.74 tests/s, 436.74 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.chars.map(&:to_i)\n  (digits.length - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpch8owdn4\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpch8owdn4.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006452312 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n154.98 tests/s, 309.97 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_str = n.to_s\n  n_arr = n_str.split('')\n  n_arr.permutation.to_a.map { |x| x.join.to_i }.sort.reverse.each do |x|\n    return x if x > n\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpk3vvljgj\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpk3vvljgj.rb:15:in `test_rearrange_bigger'\n     12:   def test_rearrange_bigger\n     13:     candidate = method(:rearrange_bigger)\n     14:     assert_equal(21, candidate.call(12))\n  => 15:     assert_equal(false, candidate.call(10))\n     16:     assert_equal(120, candidate.call(102))\n     17:   end\n     18: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00687132 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n145.53 tests/s, 291.06 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to array\n  # sort array\n  # join array\n  # convert to integer\n  # return integer\n  n.to_s.split('').sort.reverse.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmplwn4uoya\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmplwn4uoya.rb:15:in `test_rearrange_bigger'\n     12:   def test_rearrange_bigger\n     13:     candidate = method(:rearrange_bigger)\n     14:     assert_equal(21, candidate.call(12))\n  => 15:     assert_equal(false, candidate.call(10))\n     16:     assert_equal(120, candidate.call(102))\n     17:   end\n     18: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.006839917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.20 tests/s, 292.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to string, split into chars, sort, join, convert to int\n  n.to_s.chars.sort.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpka7bg4g3\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpka7bg4g3.rb:10:in `test_rearrange_bigger'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_rearrange_bigger\n      9:     candidate = method(:rearrange_bigger)\n  => 10:     assert_equal(21, candidate.call(12))\n     11:     assert_equal(false, candidate.call(10))\n     12:     assert_equal(120, candidate.call(102))\n     13:   end\n<21> expected but was\n<12>\n\ndiff:\n? 121\n===============================================================================\n\nFinished in 0.007177541 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n139.32 tests/s, 139.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, idx|\n    if idx == n_arr.length - 1\n      return -1\n    elsif num < n_arr[idx + 1]\n      n_arr[idx], n_arr[idx + 1] = n_arr[idx + 1], n_arr[idx]\n      return n_arr.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpm6ua4k5h\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpm6ua4k5h.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007395357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n135.22 tests/s, 270.44 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  if i < 0\n    return -1\n  end\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the new number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmptcpm1tqd\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmptcpm1tqd.rb:37:in `test_rearrange_bigger'\n     34:   def test_rearrange_bigger\n     35:     candidate = method(:rearrange_bigger)\n     36:     assert_equal(21, candidate.call(12))\n  => 37:     assert_equal(false, candidate.call(10))\n     38:     assert_equal(120, candidate.call(102))\n     39:   end\n     40: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006646947 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n150.45 tests/s, 300.89 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  i = n.length - 1\n  while i > 0\n    if n[i] > n[i - 1]\n      n[i], n[i - 1] = n[i - 1], n[i]\n      return n.join('').to_i\n    end\n    i -= 1\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpgjysexdy\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpgjysexdy.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006801638 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.02 tests/s, 294.05 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to string, split into array of digits\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  if i < 0\n    return -1\n  end\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpte2vmnla\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpte2vmnla.rb:37:in `test_rearrange_bigger'\n     34:   def test_rearrange_bigger\n     35:     candidate = method(:rearrange_bigger)\n     36:     assert_equal(21, candidate.call(12))\n  => 37:     assert_equal(false, candidate.call(10))\n     38:     assert_equal(120, candidate.call(102))\n     39:   end\n     40: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006599304 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.53 tests/s, 303.06 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to string, split into array, sort, join, convert to integer\n  n.to_s.split('').sort.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp7em1cnr1\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp7em1cnr1.rb:10:in `test_rearrange_bigger'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_rearrange_bigger\n      9:     candidate = method(:rearrange_bigger)\n  => 10:     assert_equal(21, candidate.call(12))\n     11:     assert_equal(false, candidate.call(10))\n     12:     assert_equal(120, candidate.call(102))\n     13:   end\n<21> expected but was\n<12>\n\ndiff:\n? 121\n===============================================================================\n\nFinished in 0.007038903 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.07 tests/s, 142.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    n_arr[i] = num.to_i\n  end\n  n_arr.sort!\n  n_arr.reverse!\n  n_arr.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpljlti8g_\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpljlti8g_.rb:16:in `test_rearrange_bigger'\n     13:   def test_rearrange_bigger\n     14:     candidate = method(:rearrange_bigger)\n     15:     assert_equal(21, candidate.call(12))\n  => 16:     assert_equal(false, candidate.call(10))\n     17:     assert_equal(120, candidate.call(102))\n     18:   end\n     19: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.007004148 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.77 tests/s, 285.55 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i + 1] && n_arr[i + 1] > num\n      n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmptoay19um\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmptoay19um.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007183502 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n139.21 tests/s, 278.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i+1] && n_arr[i+1].to_i > num.to_i\n      n_arr[i], n_arr[i+1] = n_arr[i+1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpjkwwksl_\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpjkwwksl_.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008214521 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.74 tests/s, 243.47 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  (n_arr.length - 2).downto(0) do |i|\n    if n_arr[i] < n_arr[i + 1]\n      n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpqpuhuu7e\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpqpuhuu7e.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006849816 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n145.99 tests/s, 291.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('')\n  (digits.length - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp70flrxvn\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp70flrxvn.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006709281 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.05 tests/s, 298.09 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if n[i+1] && n[i+1].to_i > num.to_i\n      n[i], n[i+1] = n[i+1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp_kpek40y\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp_kpek40y.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006428513 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n155.56 tests/s, 311.11 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i < 0\n  # find the smallest digit to the right of i that is larger than digits[i]\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap digits[i] and digits[j]\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of i\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpn8dznf0s\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpn8dznf0s.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00680233 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.01 tests/s, 294.02 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to string\n  # split into array\n  # sort array\n  # convert back to integer\n  n.to_s.split('').sort.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpb3vrvl8u\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpb3vrvl8u.rb:13:in `test_rearrange_bigger'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n  => 13:     assert_equal(21, candidate.call(12))\n     14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n<21> expected but was\n<12>\n\ndiff:\n? 121\n===============================================================================\n\nFinished in 0.006905695 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.81 tests/s, 144.81 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.permutation.to_a.map(&:join).map(&:to_i).sort.reverse.each do |num|\n    return num if num > n\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpvg30a_wf\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpvg30a_wf.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006535978 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.00 tests/s, 306.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('').map(&:to_i)\n  digits.permutation.to_a.map { |x| x.join.to_i }.sort.reverse.each do |x|\n    return x if x > n\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp2e77y5sl\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp2e77y5sl.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006385768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n156.60 tests/s, 313.20 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif num < n_array[index + 1]\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp2ldyddag\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp2ldyddag.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007962659 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n125.59 tests/s, 251.17 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('').map(&:to_i)\n  digits.permutation.to_a.map { |arr| arr.join.to_i }.sort.reverse.each do |num|\n    return num if num > n\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpqmrgfub5\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpqmrgfub5.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006564216 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.34 tests/s, 304.68 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.each_with_index do |num, index|\n    next if index == n.length - 1\n    if num < n[index + 1]\n      n[index], n[index + 1] = n[index + 1], n[index]\n      break\n    end\n  end\n  n.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpl1x7xcw6\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpl1x7xcw6.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.00680158 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.02 tests/s, 294.05 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('')\n  digits.each_with_index do |d, i|\n    next if i == 0\n    if digits[i] > digits[i - 1]\n      digits[i], digits[i - 1] = digits[i - 1], digits[i]\n      return digits.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpaymk0qzp\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpaymk0qzp.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006520425 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.36 tests/s, 306.73 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the one to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to the right of the pivot\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the new number\n  digits.join('').to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp9ik4g1az\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp9ik4g1az.rb:35:in `test_rearrange_bigger'\n     32:   def test_rearrange_bigger\n     33:     candidate = method(:rearrange_bigger)\n     34:     assert_equal(21, candidate.call(12))\n  => 35:     assert_equal(false, candidate.call(10))\n     36:     assert_equal(120, candidate.call(102))\n     37:   end\n     38: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.011066149 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n90.37 tests/s, 180.73 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif num < n_array[index + 1]\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join.to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmppg4hozqk\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmppg4hozqk.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006902262 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.88 tests/s, 289.76 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif num < n_array[index + 1]\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join.to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmppg4hozqk\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmppg4hozqk.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006902262 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.88 tests/s, 289.76 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |val, index|\n    if index < n_array.length - 1\n      if n_array[index + 1].to_i > val.to_i\n        n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n        return n_array.join('').to_i\n      end\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpjzadxqhm\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpjzadxqhm.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006702073 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.21 tests/s, 298.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  return -1 if n.to_s.size == 1\n  digits = n.to_s.chars.map(&:to_i)\n  i = digits.size - 1\n  while i > 0 && digits[i - 1] >= digits[i]\n    i -= 1\n  end\n  return -1 if i == 0\n  j = digits.size - 1\n  while digits[j] <= digits[i - 1]\n    j -= 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  digits[i..-1] = digits[i..-1].reverse\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpzndmtf0a\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpzndmtf0a.rb:23:in `test_rearrange_bigger'\n     20:   def test_rearrange_bigger\n     21:     candidate = method(:rearrange_bigger)\n     22:     assert_equal(21, candidate.call(12))\n  => 23:     assert_equal(false, candidate.call(10))\n     24:     assert_equal(120, candidate.call(102))\n     25:   end\n     26: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.010252893 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n97.53 tests/s, 195.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # If the number is a single digit, there is no bigger number\n  return -1 if n < 10\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "",
      "stderr": "/tmp/tmp__0ntri2.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp__0ntri2.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('')\n  return -1 if digits.length == 1\n  (digits.length - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpdlq7ezzn\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpdlq7ezzn.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006723328 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.74 tests/s, 297.47 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('').map(&:to_i)\n  i = n.length - 1\n  while i > 0 && n[i] <= n[i - 1]\n    i -= 1\n  end\n  return -1 if i == 0\n  j = n.length - 1\n  while n[j] <= n[i - 1]\n    j -= 1\n  end\n  n[i - 1], n[j] = n[j], n[i - 1]\n  n[i..-1] = n[i..-1].reverse\n  n.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp3e219jc4\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp3e219jc4.rb:22:in `test_rearrange_bigger'\n     19:   def test_rearrange_bigger\n     20:     candidate = method(:rearrange_bigger)\n     21:     assert_equal(21, candidate.call(12))\n  => 22:     assert_equal(false, candidate.call(10))\n     23:     assert_equal(120, candidate.call(102))\n     24:   end\n     25: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006706083 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.12 tests/s, 298.24 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the one to the right\n  index = digits.each_index.select { |i| digits[i] < digits[i+1] }.last\n  # if no such digit exists, return -1\n  return -1 if index.nil?\n  # find the smallest digit to the right of the index that is larger than the digit at the index\n  swap_index = digits[index+1..-1].each_index.select { |i| digits[index+1+i] > digits[index] }.first + index + 1\n  # swap the digits at the index and the swap_index\n  digits[index], digits[swap_index] = digits[swap_index], digits[index]\n  # sort the digits to the right of the index\n  digits[index+1..-1] = digits[index+1..-1].sort\n  # convert to integer and return\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp1z19qiej\nStarted\nE\n===============================================================================\nError: test_rearrange_bigger(TestHumanEval): ArgumentError: comparison of Integer with nil failed\n/tmp/tmp1z19qiej.rb:6:in `<'\n/tmp/tmp1z19qiej.rb:6:in `block in rearrange_bigger'\n/tmp/tmp1z19qiej.rb:6:in `each_index'\n/tmp/tmp1z19qiej.rb:6:in `each'\n/tmp/tmp1z19qiej.rb:6:in `select'\n/tmp/tmp1z19qiej.rb:6:in `rearrange_bigger'\n/tmp/tmp1z19qiej.rb:22:in `call'\n/tmp/tmp1z19qiej.rb:22:in `test_rearrange_bigger'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_rearrange_bigger\n     21:     candidate = method(:rearrange_bigger)\n  => 22:     assert_equal(21, candidate.call(12))\n     23:     assert_equal(false, candidate.call(10))\n     24:     assert_equal(120, candidate.call(102))\n     25:   end\n===============================================================================\n\nFinished in 0.001995639 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n501.09 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get all possible permutations of the number\n  permutations = n.to_s.split('').permutation.to_a.map { |perm| perm.join.to_i }\n  # sort the permutations\n  permutations.sort!\n  # find the index of the given number in the sorted permutations\n  index = permutations.index(n)\n  # if the index is the last index, return -1\n  return -1 if index == permutations.length - 1\n  # otherwise, return the next permutation\n  permutations[index + 1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpga_en68z\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpga_en68z.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006418746 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n155.79 tests/s, 311.59 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  i = n_arr.length - 1\n  while i > 0 && n_arr[i] <= n_arr[i - 1]\n    i -= 1\n  end\n  return -1 if i == 0\n  j = n_arr.length - 1\n  while n_arr[j] <= n_arr[i - 1]\n    j -= 1\n  end\n  n_arr[i - 1], n_arr[j] = n_arr[j], n_arr[i - 1]\n  n_arr[i..-1] = n_arr[i..-1].sort\n  n_arr.join('').to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp5l648lnj\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp5l648lnj.rb:22:in `test_rearrange_bigger'\n     19:   def test_rearrange_bigger\n     20:     candidate = method(:rearrange_bigger)\n     21:     assert_equal(21, candidate.call(12))\n  => 22:     assert_equal(false, candidate.call(10))\n     23:     assert_equal(120, candidate.call(102))\n     24:   end\n     25: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006663595 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n150.07 tests/s, 300.14 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if n[i+1] && num < n[i+1]\n      n[i], n[i+1] = n[i+1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpwi7deck8\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpwi7deck8.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007847794 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n127.42 tests/s, 254.85 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  i = n.length - 1\n  while i > 0\n    if n[i] > n[i-1]\n      n[i], n[i-1] = n[i-1], n[i]\n      return n.join('').to_i\n    end\n    i -= 1\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpizcr708f\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpizcr708f.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006559733 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.45 tests/s, 304.89 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i+1] && n_arr[i+1].to_i > num.to_i\n      n_arr.insert(i, n_arr.delete_at(i+1))\n      return n_arr.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp31snz4xx\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp31snz4xx.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006504074 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.75 tests/s, 307.50 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # Find the first number from the right that is smaller than the number to its right\n  # Find the next bigger number to the right of the first number\n  # Swap the two numbers\n  # Sort the numbers to the right of the first number\n  # Return the new number\n  n = n.to_s.split('')\n  i = n.length - 1\n  while i > 0\n    if n[i] > n[i - 1]\n      j = i\n      while j < n.length\n        if n[j] > n[i - 1]\n          n[i - 1], n[j] = n[j], n[i - 1]\n          break\n        end\n        j += 1\n      end\n      n[i..-1] = n[i..-1].sort\n      return n.join('').to_i\n    end\n    i -= 1\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpirlexjyu\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpirlexjyu.rb:32:in `test_rearrange_bigger'\n     29:   def test_rearrange_bigger\n     30:     candidate = method(:rearrange_bigger)\n     31:     assert_equal(21, candidate.call(12))\n  => 32:     assert_equal(false, candidate.call(10))\n     33:     assert_equal(120, candidate.call(102))\n     34:   end\n     35: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007741804 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.17 tests/s, 258.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first number that is smaller than the next number\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  # if no such number is found, return -1\n  if i < 0\n    return -1\n  end\n  # find the smallest number that is bigger than the number at i\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the numbers at i and j\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the numbers after i\n  digits[i + 1..digits.length - 1] = digits[i + 1..digits.length - 1].reverse\n  # return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpnzd96esa\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpnzd96esa.rb:37:in `test_rearrange_bigger'\n     34:   def test_rearrange_bigger\n     35:     candidate = method(:rearrange_bigger)\n     36:     assert_equal(21, candidate.call(12))\n  => 37:     assert_equal(false, candidate.call(10))\n     38:     assert_equal(120, candidate.call(102))\n     39:   end\n     40: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006663169 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n150.08 tests/s, 300.16 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_str = n.to_s\n  n_arr = n_str.split('')\n  n_arr.sort!\n  n_arr.reverse!\n  n_arr.join('').to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpkks9kvkq\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpkks9kvkq.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.006697128 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.32 tests/s, 298.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # find the first digit from the right that is smaller than the digit to its right\n  # find the smallest digit to the right of the digit found in step 1 that is greater than the digit found in step 1\n  # swap the digits found in step 1 and 2\n  # reverse the digits to the right of the digit found in step 1\n  # return the number\n  n = n.to_s.split('')\n  i = n.length - 1\n  while i > 0\n    if n[i] > n[i - 1]\n      break\n    end\n    i -= 1\n  end\n  return -1 if i == 0\n  j = i\n  while j < n.length\n    if n[j] < n[i - 1]\n      break\n    end\n    j += 1\n  end\n  n[i - 1], n[j] = n[j], n[i - 1]\n  n[i..-1] = n[i..-1].reverse\n  n.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp63p6fld8\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp63p6fld8.rb:32:in `test_rearrange_bigger'\n     29: class TestHumanEval < Test::Unit::TestCase\n     30:   def test_rearrange_bigger\n     31:     candidate = method(:rearrange_bigger)\n  => 32:     assert_equal(21, candidate.call(12))\n     33:     assert_equal(false, candidate.call(10))\n     34:     assert_equal(120, candidate.call(102))\n     35:   end\n<21> expected but was\n<12>\n\ndiff:\n? 121\n===============================================================================\n\nFinished in 0.006954037 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.80 tests/s, 143.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.permutation.to_a.map { |x| x.join.to_i }.sort.reverse.each do |x|\n    return x if x > n.join.to_i\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpo11y1pxn\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpo11y1pxn.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00656849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.24 tests/s, 304.48 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get all permutations of the digits\n  # sort the permutations\n  # find the next biggest number\n  # return the next biggest number\n  digits = n.to_s.split('')\n  permutations = digits.permutation.to_a\n  permutations.map! { |permutation| permutation.join.to_i }\n  permutations.sort!\n  permutations.each_with_index do |permutation, index|\n    if permutation > n\n      return permutation\n    end\n  end\n  return -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp981z_new\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp981z_new.rb:23:in `test_rearrange_bigger'\n     20:   def test_rearrange_bigger\n     21:     candidate = method(:rearrange_bigger)\n     22:     assert_equal(21, candidate.call(12))\n  => 23:     assert_equal(false, candidate.call(10))\n     24:     assert_equal(120, candidate.call(102))\n     25:   end\n     26: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.013354077 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n74.88 tests/s, 149.77 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to string, split into array of chars, sort in descending order\n  # convert back to string, convert to integer\n  n.to_s.split('').sort.reverse.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp62fs85l3\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp62fs85l3.rb:12:in `test_rearrange_bigger'\n      9:   def test_rearrange_bigger\n     10:     candidate = method(:rearrange_bigger)\n     11:     assert_equal(21, candidate.call(12))\n  => 12:     assert_equal(false, candidate.call(10))\n     13:     assert_equal(120, candidate.call(102))\n     14:   end\n     15: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.006668415 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.96 tests/s, 299.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit after it\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i+1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i == -1\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to the right of the pivot\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp2dvrb7zc\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp2dvrb7zc.rb:35:in `test_rearrange_bigger'\n     32:   def test_rearrange_bigger\n     33:     candidate = method(:rearrange_bigger)\n     34:     assert_equal(21, candidate.call(12))\n  => 35:     assert_equal(false, candidate.call(10))\n     36:     assert_equal(120, candidate.call(102))\n     37:   end\n     38: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006401304 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n156.22 tests/s, 312.44 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_str = n.to_s\n  n_arr = n_str.split('')\n  n_arr.sort!\n  n_arr.reverse!\n  n_arr.join('').to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpkks9kvkq\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpkks9kvkq.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.006697128 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.32 tests/s, 298.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # find the first digit that is smaller than the digit to its right\n  # find the next biggest digit to the right of the first digit\n  # swap the two digits\n  # sort the digits to the right of the first digit\n  # join the digits\n  # return the number\n  digits = n.to_s.split('')\n  first_digit = digits.each_with_index.find { |digit, i| digit < digits[i + 1] }\n  return -1 if first_digit.nil?\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "",
      "stderr": "/tmp/tmp2iqaccnk.rb:13: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp2iqaccnk.rb:20: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  arr = n.to_s.split('')\n  i = arr.length - 1\n  while i > 0\n    if arr[i] > arr[i - 1]\n      arr[i], arr[i - 1] = arr[i - 1], arr[i]\n      return arr.join('').to_i\n    end\n    i -= 1\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpuwyrk2qf\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpuwyrk2qf.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00667348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.85 tests/s, 299.69 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if i == n_arr.length - 1\n      return -1\n    elsif n_arr[i] < n_arr[i + 1]\n      n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmphvvvl6fj\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmphvvvl6fj.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006615371 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.16 tests/s, 302.33 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i+1] && n_arr[i+1].to_i > num.to_i\n      n_arr[i], n_arr[i+1] = n_arr[i+1], n_arr[i]\n      return n_arr.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp_y8nt4nd\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp_y8nt4nd.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00656697 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.28 tests/s, 304.55 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.split('')\n  # get the index of the digit to be swapped\n  index = digits.length - 2\n  while index >= 0\n    if digits[index] < digits[index + 1]\n      # swap the digits\n      temp = digits[index]\n      digits[index] = digits[index + 1]\n      digits[index + 1] = temp\n      break\n    end\n    index -= 1\n  end\n  # return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp9f1ugnsa\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp9f1ugnsa.rb:25:in `test_rearrange_bigger'\n     22:   def test_rearrange_bigger\n     23:     candidate = method(:rearrange_bigger)\n     24:     assert_equal(21, candidate.call(12))\n  => 25:     assert_equal(false, candidate.call(10))\n     26:     assert_equal(120, candidate.call(102))\n     27:   end\n     28: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.006569875 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.21 tests/s, 304.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  return -1 if n.to_s.size == 1\n  n = n.to_s.split('').map(&:to_i)\n  i = n.size - 1\n  while i > 0\n    if n[i] > n[i - 1]\n      n[i], n[i - 1] = n[i - 1], n[i]\n      return n.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmph_uol5w8\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmph_uol5w8.rb:20:in `test_rearrange_bigger'\n     17:   def test_rearrange_bigger\n     18:     candidate = method(:rearrange_bigger)\n     19:     assert_equal(21, candidate.call(12))\n  => 20:     assert_equal(false, candidate.call(10))\n     21:     assert_equal(120, candidate.call(102))\n     22:   end\n     23: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006482635 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n154.26 tests/s, 308.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.chars.map(&:to_i)\n  return -1 if digits.sort.reverse == digits\n  digits.each_with_index do |digit, i|\n    next if i == digits.length - 1\n    if digit > digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join.to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpkjeicp06\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpkjeicp06.rb:17:in `test_rearrange_bigger'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n  => 17:     assert_equal(21, candidate.call(12))\n     18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n<21> expected but was\n<[1, 2]>\n\ndiff:\n?     21\n? [1,  ]\n? ++++ ?\n===============================================================================\n\nFinished in 0.006815276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.73 tests/s, 146.73 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, index|\n    if index == n_arr.length - 1\n      return -1\n    elsif num < n_arr[index + 1]\n      n_arr[index], n_arr[index + 1] = n_arr[index + 1], n_arr[index]\n      return n_arr.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp01purtb6\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp01purtb6.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00825085 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.20 tests/s, 242.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if n_array[index + 1] && n_array[index + 1].to_i > num.to_i\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmpgq_vaqsz\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpgq_vaqsz.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008163881 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n122.49 tests/s, 244.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if n[i+1] && n[i+1].to_i > num.to_i\n      n[i], n[i+1] = n[i+1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp_kpek40y\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp_kpek40y.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006428513 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n155.56 tests/s, 311.11 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.permutation.to_a.map { |arr| arr.join.to_i }.sort.reverse.each do |num|\n    return num if num > n\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpvaw0ihf8\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpvaw0ihf8.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006711887 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.99 tests/s, 297.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i + 1] && num < n_arr[i + 1]\n      n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n      return n_arr.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpty4dhhd4\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpty4dhhd4.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006784022 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.41 tests/s, 294.81 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if i < n_arr.length - 1\n      if num < n_arr[i + 1]\n        n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n        return n_arr.join('').to_i\n      end\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpnl8d4zs4\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpnl8d4zs4.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007053533 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.77 tests/s, 283.55 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('').map(&:to_i)\n  n_array.each_with_index do |num, index|\n    if num < n_array[index + 1]\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      break\n    end\n  end\n  n_array.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpm96hdbq6\nStarted\nE\n===============================================================================\nError: test_rearrange_bigger(TestHumanEval): ArgumentError: comparison of Integer with nil failed\n/tmp/tmpm96hdbq6.rb:5:in `<'\n/tmp/tmpm96hdbq6.rb:5:in `block in rearrange_bigger'\n/tmp/tmpm96hdbq6.rb:4:in `each'\n/tmp/tmpm96hdbq6.rb:4:in `each_with_index'\n/tmp/tmpm96hdbq6.rb:4:in `rearrange_bigger'\n/tmp/tmpm96hdbq6.rb:17:in `call'\n/tmp/tmpm96hdbq6.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n===============================================================================\n\nFinished in 0.001279726 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n781.42 tests/s, 781.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, the number is the largest possible\n  if i < 0\n    return -1\n  end\n  # find the smallest digit to the right of i that is larger than digits[i]\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the two digits\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of i\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # convert back to integer\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpi7yikykz\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpi7yikykz.rb:37:in `test_rearrange_bigger'\n     34:   def test_rearrange_bigger\n     35:     candidate = method(:rearrange_bigger)\n     36:     assert_equal(21, candidate.call(12))\n  => 37:     assert_equal(false, candidate.call(10))\n     38:     assert_equal(120, candidate.call(102))\n     39:   end\n     40: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006798376 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.09 tests/s, 294.19 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if n[i+1] && num < n[i+1]\n      n[i], n[i+1] = n[i+1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpwi7deck8\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpwi7deck8.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007847794 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n127.42 tests/s, 254.85 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('')\n  digits.each_with_index do |digit, index|\n    next if index == digits.length - 1\n    if digit < digits[index + 1]\n      digits[index], digits[index + 1] = digits[index + 1], digits[index]\n      return digits.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpkpdstr1n\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpkpdstr1n.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006670541 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.91 tests/s, 299.83 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('').map(&:to_i)\n  (digits.length - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpj6dg506y\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpj6dg506y.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006530571 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.13 tests/s, 306.25 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # Find the first digit that is smaller than the digit to its right\n  # Find the smallest digit to the right of the pivot that is greater than the pivot\n  # Swap the two digits\n  # Reverse all the digits to the right of the pivot\n  # Return the new number\n  return -1 if n.to_s.chars.sort.join.to_i == n\n  pivot = n.to_s.chars.each_with_index.find { |d, i| d < n.to_s[i + 1] }\n  swap = n.to_s.chars.each_with_index.find { |d, i| d > pivot[0] && i > pivot[1] }\n  n.to_s[pivot[1]] = swap[0]\n  n.to_s[swap[1]] = pivot[0]\n  n.to_s[0..pivot[1] + 1] + n.to_s[pivot[1] + 1..-1].chars.sort.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122932,
      "stdout": "Loaded suite /tmp/tmpapf64nt9\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpapf64nt9.rb:19:in `test_rearrange_bigger'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_rearrange_bigger\n     18:     candidate = method(:rearrange_bigger)\n  => 19:     assert_equal(21, candidate.call(12))\n     20:     assert_equal(false, candidate.call(10))\n     21:     assert_equal(120, candidate.call(102))\n     22:   end\n<21> expected but was\n<-1>\n\ndiff:\n? 21\n? - \n? ? \n===============================================================================\n\nFinished in 0.009603525 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n104.13 tests/s, 104.13 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |n, i|\n    if n_array[i + 1] && n_array[i + 1].to_i > n.to_i\n      n_array[i], n_array[i + 1] = n_array[i + 1], n_array[i]\n      return n_array.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp_gez7d9v\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp_gez7d9v.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006350727 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n157.46 tests/s, 314.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is less than the digit to its right\n  i = 0\n  while i < digits.length - 1\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i += 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i == digits.length - 1\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = i + 1\n  while j < digits.length\n    if digits[j] > digits[i]\n      break\n    end\n    j += 1\n  end\n  # swap the pivot with the smallest digit to the right of the pivot\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122932,
      "stdout": "Loaded suite /tmp/tmpo_hq83bn\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpo_hq83bn.rb:35:in `test_rearrange_bigger'\n     32:   def test_rearrange_bigger\n     33:     candidate = method(:rearrange_bigger)\n     34:     assert_equal(21, candidate.call(12))\n  => 35:     assert_equal(false, candidate.call(10))\n     36:     assert_equal(120, candidate.call(102))\n     37:   end\n     38: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006695508 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.35 tests/s, 298.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_str = n.to_s\n  n_str.split('').permutation.map(&:join).map(&:to_i).sort.reverse.each do |i|\n    return i if i > n\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122932,
      "stdout": "Loaded suite /tmp/tmpzuzhau9g\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpzuzhau9g.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006726222 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.67 tests/s, 297.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, i|\n    if n_array[i + 1] && n_array[i + 1].to_i > num.to_i\n      n_array[i], n_array[i + 1] = n_array[i + 1], n_array[i]\n      return n_array.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122932,
      "stdout": "Loaded suite /tmp/tmpcr3d2m39\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpcr3d2m39.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00619172 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n161.51 tests/s, 323.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if n[i+1] && n[i+1].to_i > num.to_i\n      n[i], n[i+1] = n[i+1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp_kpek40y\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp_kpek40y.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006428513 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n155.56 tests/s, 311.11 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.chars.map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  if i < 0\n    return -1\n  end\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the new number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122932,
      "stdout": "Loaded suite /tmp/tmpocwlv56y\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpocwlv56y.rb:37:in `test_rearrange_bigger'\n     34:   def test_rearrange_bigger\n     35:     candidate = method(:rearrange_bigger)\n     36:     assert_equal(21, candidate.call(12))\n  => 37:     assert_equal(false, candidate.call(10))\n     38:     assert_equal(120, candidate.call(102))\n     39:   end\n     40: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006208681 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n161.06 tests/s, 322.13 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # Convert the number to a string, split it into an array, sort it, and join it back together\n  # Convert the number back to an integer\n  n.to_s.split(\"\").sort.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122932,
      "stdout": "Loaded suite /tmp/tmpuzjwmbrt\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpuzjwmbrt.rb:11:in `test_rearrange_bigger'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_rearrange_bigger\n     10:     candidate = method(:rearrange_bigger)\n  => 11:     assert_equal(21, candidate.call(12))\n     12:     assert_equal(false, candidate.call(10))\n     13:     assert_equal(120, candidate.call(102))\n     14:   end\n<21> expected but was\n<12>\n\ndiff:\n? 121\n===============================================================================\n\nFinished in 0.006644732 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n150.50 tests/s, 150.50 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('').map(&:to_i)\n  return -1 if n.length == 1\n  i = n.length - 1\n  while i > 0\n    if n[i] > n[i - 1]\n      n[i], n[i - 1] = n[i - 1], n[i]\n      return n.join('').to_i\n    end\n    i -= 1\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122932,
      "stdout": "Loaded suite /tmp/tmp_8vn37s4\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp_8vn37s4.rb:20:in `test_rearrange_bigger'\n     17:   def test_rearrange_bigger\n     18:     candidate = method(:rearrange_bigger)\n     19:     assert_equal(21, candidate.call(12))\n  => 20:     assert_equal(false, candidate.call(10))\n     21:     assert_equal(120, candidate.call(102))\n     22:   end\n     23: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006180153 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n161.81 tests/s, 323.62 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122932,
      "stdout": "",
      "stderr": "/tmp/tmp2m2olmkn.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp2m2olmkn.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  index = digits.each_index.find { |i| digits[i] < digits[i+1] }\n  # if no such digit exists, return -1\n  return -1 if index.nil?\n  # find the smallest digit to the right of the digit found above that is larger than the digit found above\n  swap_index = digits[index+1..-1].each_index.min { |a, b| digits[index+1+a] <=> digits[index+1+b] }\n  # swap the digits found above\n  digits[index], digits[index+1+swap_index] = digits[index+1+swap_index], digits[index]\n  # sort the digits to the right of the digit found above in ascending order\n  digits[index+1..-1] = digits[index+1..-1].sort\n  # join the digits and convert to integer\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122932,
      "stdout": "Loaded suite /tmp/tmpzabazhor\nStarted\nE\n===============================================================================\nError: test_rearrange_bigger(TestHumanEval): ArgumentError: comparison of Integer with nil failed\n/tmp/tmpzabazhor.rb:6:in `<'\n/tmp/tmpzabazhor.rb:6:in `block in rearrange_bigger'\n/tmp/tmpzabazhor.rb:6:in `each_index'\n/tmp/tmpzabazhor.rb:6:in `each'\n/tmp/tmpzabazhor.rb:6:in `find'\n/tmp/tmpzabazhor.rb:6:in `rearrange_bigger'\n/tmp/tmpzabazhor.rb:23:in `call'\n/tmp/tmpzabazhor.rb:23:in `test_rearrange_bigger'\n     20:   def test_rearrange_bigger\n     21:     candidate = method(:rearrange_bigger)\n     22:     assert_equal(21, candidate.call(12))\n  => 23:     assert_equal(false, candidate.call(10))\n     24:     assert_equal(120, candidate.call(102))\n     25:   end\n     26: end\n===============================================================================\n\nFinished in 0.001226869 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n815.08 tests/s, 815.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('').map(&:to_i)\n  (n.size - 2).downto(0) do |i|\n    if n[i] < n[i + 1]\n      n[i], n[i + 1] = n[i + 1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmpd199lwvk\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpd199lwvk.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008079539 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n123.77 tests/s, 247.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if i == n_arr.length - 1\n      return -1\n    elsif num < n_arr[i + 1]\n      n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmplrfueae0\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmplrfueae0.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006668419 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.96 tests/s, 299.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('').map(&:to_i)\n  (n.length - 1).downto(1) do |i|\n    if n[i] > n[i - 1]\n      n[i], n[i - 1] = n[i - 1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122932,
      "stdout": "Loaded suite /tmp/tmp9ycuwqy5\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp9ycuwqy5.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008084358 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n123.70 tests/s, 247.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    n_arr[i] = num.to_i\n  end\n  n_arr.sort!\n  n_arr.reverse!\n  n_arr.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpljlti8g_\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpljlti8g_.rb:16:in `test_rearrange_bigger'\n     13:   def test_rearrange_bigger\n     14:     candidate = method(:rearrange_bigger)\n     15:     assert_equal(21, candidate.call(12))\n  => 16:     assert_equal(false, candidate.call(10))\n     17:     assert_equal(120, candidate.call(102))\n     18:   end\n     19: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.007004148 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.77 tests/s, 285.55 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  (n.size - 2).downto(0) do |i|\n    if n[i] < n[i + 1]\n      n[i], n[i + 1] = n[i + 1], n[i]\n      return n.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122932,
      "stdout": "Loaded suite /tmp/tmplv1ncyok\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmplv1ncyok.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006556294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.53 tests/s, 305.05 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.sort!\n  n_arr.reverse!\n  n_arr.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122932,
      "stdout": "Loaded suite /tmp/tmp30qv8jpl\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp30qv8jpl.rb:13:in `test_rearrange_bigger'\n     10:   def test_rearrange_bigger\n     11:     candidate = method(:rearrange_bigger)\n     12:     assert_equal(21, candidate.call(12))\n  => 13:     assert_equal(false, candidate.call(10))\n     14:     assert_equal(120, candidate.call(102))\n     15:   end\n     16: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.006059798 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n165.02 tests/s, 330.04 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i + 1] && n_arr[i + 1].to_i > num.to_i\n      n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmp5kxlgpu_\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp5kxlgpu_.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008331116 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n120.03 tests/s, 240.06 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to string\n  # split into array\n  # sort\n  # join\n  # convert to int\n  n.to_s.split('').sort.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122932,
      "stdout": "Loaded suite /tmp/tmp5lbpup1a\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp5lbpup1a.rb:14:in `test_rearrange_bigger'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_rearrange_bigger\n     13:     candidate = method(:rearrange_bigger)\n  => 14:     assert_equal(21, candidate.call(12))\n     15:     assert_equal(false, candidate.call(10))\n     16:     assert_equal(120, candidate.call(102))\n     17:   end\n<21> expected but was\n<12>\n\ndiff:\n? 121\n===============================================================================\n\nFinished in 0.006291296 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n158.95 tests/s, 158.95 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if n[i + 1] && num < n[i + 1]\n      n[i], n[i + 1] = n[i + 1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122932,
      "stdout": "Loaded suite /tmp/tmpv_hpg8xs\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpv_hpg8xs.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.005920689 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n168.90 tests/s, 337.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to string\n  # split into array\n  # sort array\n  # join array\n  # convert to integer\n  n.to_s.split('').sort.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpmlgz8eky\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpmlgz8eky.rb:14:in `test_rearrange_bigger'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_rearrange_bigger\n     13:     candidate = method(:rearrange_bigger)\n  => 14:     assert_equal(21, candidate.call(12))\n     15:     assert_equal(false, candidate.call(10))\n     16:     assert_equal(120, candidate.call(102))\n     17:   end\n<21> expected but was\n<12>\n\ndiff:\n? 121\n===============================================================================\n\nFinished in 0.009886229 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n101.15 tests/s, 101.15 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('')\n  (digits.length - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp70flrxvn\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp70flrxvn.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006709281 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.05 tests/s, 298.09 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, i|\n    if i < n_array.length - 1\n      if num < n_array[i + 1]\n        n_array[i], n_array[i + 1] = n_array[i + 1], n_array[i]\n        return n_array.join.to_i\n      end\n    end\n  end\n  return -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122932,
      "stdout": "Loaded suite /tmp/tmpk2q2uj_5\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpk2q2uj_5.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.005955264 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n167.92 tests/s, 335.84 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i+1] && n_arr[i+1].to_i > num.to_i\n      n_arr[i], n_arr[i+1] = n_arr[i+1], n_arr[i]\n      return n_arr.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp_y8nt4nd\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp_y8nt4nd.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00656697 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.28 tests/s, 304.55 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.permutation.to_a.map { |x| x.join.to_i }.sort.reverse.each do |x|\n    return x if x > n\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpxa3bvdwt\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpxa3bvdwt.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006581711 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.94 tests/s, 303.87 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get all permutations of the digits\n  permutations = n.to_s.split('').permutation.to_a.map { |perm| perm.join.to_i }\n  # find the next biggest number\n  permutations.sort.each_with_index do |num, i|\n    return num if num > n\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122932,
      "stdout": "Loaded suite /tmp/tmppp632ng0\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmppp632ng0.rb:16:in `test_rearrange_bigger'\n     13:   def test_rearrange_bigger\n     14:     candidate = method(:rearrange_bigger)\n     15:     assert_equal(21, candidate.call(12))\n  => 16:     assert_equal(false, candidate.call(10))\n     17:     assert_equal(120, candidate.call(102))\n     18:   end\n     19: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006145644 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n162.72 tests/s, 325.43 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('')\n  (digits.length - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpolz9rjc5\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpolz9rjc5.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008267834 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n120.95 tests/s, 241.90 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # Get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # Find the first index where the digit is less than the digit to the right of it\n  i = digits.each_index.find { |i| digits[i] < digits[i+1] }\n  # If no such index exists, return -1\n  return -1 if i.nil?\n  # Find the smallest digit to the right of the digit at index i that is greater than the digit at index i\n  j = digits.each_index.find { |j| j > i && digits[j] < digits[i] }\n  # Swap the digits at indices i and j\n  digits[i], digits[j] = digits[j], digits[i]\n  # Sort the digits to the right of index i\n  digits[i+1..-1] = digits[i+1..-1].sort\n  # Return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122932,
      "stdout": "Loaded suite /tmp/tmpc171yn4d\nStarted\nE\n===============================================================================\nError: test_rearrange_bigger(TestHumanEval): TypeError: no implicit conversion from nil to integer\n/tmp/tmpc171yn4d.rb:12:in `[]'\n/tmp/tmpc171yn4d.rb:12:in `rearrange_bigger'\n/tmp/tmpc171yn4d.rb:22:in `call'\n/tmp/tmpc171yn4d.rb:22:in `test_rearrange_bigger'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_rearrange_bigger\n     21:     candidate = method(:rearrange_bigger)\n  => 22:     assert_equal(21, candidate.call(12))\n     23:     assert_equal(false, candidate.call(10))\n     24:     assert_equal(120, candidate.call(102))\n     25:   end\n===============================================================================\n\nFinished in 0.001096631 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n911.88 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to array of digits\n  digits = n.to_s.split('')\n  # find the first digit that is less than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit, then no bigger number exists\n  return -1 if i < 0\n  # find the smallest digit to the right of i that is greater than digits[i]\n  j = digits.length - 1\n  while j > i && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap digits[i] and digits[j]\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of i\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122932,
      "stdout": "Loaded suite /tmp/tmp_2h2u4qd\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp_2h2u4qd.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.005861361 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n170.61 tests/s, 341.22 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.permutation.to_a.map { |x| x.join.to_i }.sort.reverse.each do |x|\n    return x if x > n\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmp68ed93k5\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp68ed93k5.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008688245 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.10 tests/s, 230.20 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.permutation.to_a.map { |x| x.join('').to_i }.sort.reverse.each { |x| return x if x > n }\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122932,
      "stdout": "Loaded suite /tmp/tmp0sw3r713\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp0sw3r713.rb:12:in `test_rearrange_bigger'\n      9:   def test_rearrange_bigger\n     10:     candidate = method(:rearrange_bigger)\n     11:     assert_equal(21, candidate.call(12))\n  => 12:     assert_equal(false, candidate.call(10))\n     13:     assert_equal(120, candidate.call(102))\n     14:   end\n     15: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006075559 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n164.59 tests/s, 329.19 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}