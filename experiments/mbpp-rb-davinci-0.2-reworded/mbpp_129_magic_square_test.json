{
  "name": "mbpp_129_magic_square_test",
  "language": "rb",
  "prompt": "# Write a function to calculate whether the matrix is a magic square.\ndef magic_square_test(my_matrix)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_magic_square_test\n    candidate = method(:magic_square_test)\n    assert_equal(true, candidate.call([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]))\n    assert_equal(true, candidate.call([[2, 7, 6], [9, 5, 1], [4, 3, 8]]))\n    assert_equal(false, candidate.call([[2, 7, 6], [9, 5, 1], [4, 3, 7]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  # Write your code here\nend",
    "  # Calculate the sum of the first row\n  sum = 0\n  my_matrix[0].each do |num|\n    sum += num\n  end\n  # Check if the sum of each row is equal to the sum of the first row\n  my_matrix.each do |row|\n    row_sum = 0\n    row.each do |num|\n      row_sum += num\n    end\n    if row_sum != sum\n      return false\n    end\n  end\n  # Check if the sum of each column is equal to the sum of the first row\n  my_matrix.transpose.each do |col|\n    col_sum = 0\n    col.each do |num|\n      col_sum += num\n    end\n    if col_sum != sum\n      return false\n    end\n  end\n  # Check if the sum of the diagonals is equal to the sum of the first row\n  diag_sum = 0\n  my_matrix.each_with_index do |row, i|\n    diag_sum += row[i]\n  end\n  if diag_sum != sum\n    return false\n  end\n  diag_sum = 0\n  my_matrix.each_with_index do |row, i|\n    diag_sum += row[my_matrix.length - 1 - i]\n  end\n  if diag_sum != sum\n    return false\n  end\n  # If all the above tests pass, return true\n  return true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  sum = 0\n  sum_array = []\n  my_matrix.each do |row|\n    sum_array << row.inject(:+)\n  end\n  sum = sum_array[0]\n  sum_array.each do |sum_row|\n    if sum_row != sum\n      return false\n    end\n  end\n  return true\nend",
    "  # check if the matrix is a square matrix\n  return false unless my_matrix.length == my_matrix[0].length\n  # check if the matrix is a magic square\n  return false unless my_matrix.length.odd?\n  # check if the matrix is a magic square\n  return false unless my_matrix.flatten.sort == (1..my_matrix.length**2).to_a\n  # check if the matrix is a magic square\n  return false unless my_matrix.map { |row| row.reduce(:+) }.uniq.length == 1\n  # check if the matrix is a magic square\n  return false unless my_matrix.transpose.map { |row| row.reduce(:+) }.uniq.length == 1\n  # check if the matrix is a magic square\n  return false unless my_matrix.map.with_index { |row, i| row[i] }.reduce(:+) == my_matrix.length * (my_matrix.length**2 + 1) / 2\n  # check if the matrix is a magic square\n  return false unless my_matrix.map.with_index { |row, i| row[-i - 1] }.reduce(:+) == my_matrix.length * (my_matrix.length**2 + 1) / 2\n  true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix of the same size where the sum of each row, column, and diagonal are equal.\n  # The sum of each row and each column are equal to the same number, and all the numbers are different.\n  # The sum of the main diagonal is equal to the sum of the other diagonal.\n  # The sum of the numbers in each row, each column, and each diagonal have to be the same.\n  # The numbers in the matrix are different from each other.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The",
    "  # check if the matrix is a square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # Note: you can use `.sum` on an array to get the sum of its elements.\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.",
    "  # Get the size of the matrix\n  size = my_matrix.size\n  # Get the sum of the first row\n  sum = my_matrix[0].reduce(:+)\n  # Check if all rows have the same sum\n  for i in 1..size-1\n    if sum != my_matrix[i].reduce(:+)\n      return false\n    end\n  end\n  # Check if all columns have the same sum\n  for i in 0..size-1\n    sum_col = 0\n    for j in 0..size-1\n      sum_col += my_matrix[j][i]\n    end\n    if sum_col != sum\n      return false\n    end\n  end\n  # Check if the sum of the diagonals is the same\n  sum_diag1 = 0\n  sum_diag2 = 0\n  for i in 0..size-1\n    sum_diag1 += my_matrix[i][i]\n    sum_diag2 += my_matrix[i][size-1-i]\n  end\n  if sum_diag1 != sum || sum_diag2 != sum\n    return false\n  end\n  # If all tests passed, return true\n  return true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal are equal.\n  # (More info: https://en.wikipedia.org/wiki/Magic_square)\n  # Hint: you may want to use the `rows`, `cols`, and `diagonals` functions you wrote.\n  # Hint: you may want to use the `sum` function you wrote.\n  # Hint: you may want to use the `all_equal?` function you wrote.\n  # Hint: you may want to use the `map` function.\n  # Hint: you may want to use the `reduce` function.\n  # Hint: you may want to use the `zip` function.\n  # Hint: you may want to use the `flatten` function.\n  # Hint: you may want to use the `transpose` function.\n  # Hint: you may want to use the `reverse` function.\n  # Hint: you may want to use the `each_with_index` function.\n  # Hint: you may want to use the `each_with_object` function.\n  # Hint: you may want to use the `inject` function.\n  # Hint: you may want to use the `cycle` function.\n  # Hint: you may want to use the `take` function.\n  # Hint: you may want to use the `drop` function.\n  # Hint: you may want to use the `rotate` function.\n  # Hint: you may want to use the `product` function.\n  # Hint: you may want to use the `uniq` function.\n  # Hint: you may want to use the `sort` function.\n  # Hint: you may want to use the `==` function.\n  # Hint: you may want to use the `all?` function.\n  # Hint: you may want to use the `any?` function.\n  # Hint: you may want to use the `none?` function.\n  # Hint: you may want to use the `one?` function.\n ",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # Note: you can use `sum` here to get the sum of all the elements in a matrix row.\n  # Example: sum([1,2,3]) # => 6\n  # Example: sum(matrix[0]) # => 15\n  # Hint: you'll need to use `each_with_index`\n  # Note: remember that `each_with_index` gives you both the element and its index.\n  # You'll probably need to use both!\n  # Hint: you'll need a variable to keep track of whether or not the matrix is magic.\n  # Remember: not every square is magic!\n  # Hint: you'll need to use nested loops.\n  # Hint: you'll need to use `break` to get out of a loop early.\n  # Bonus: refactor your solution to make it more concise!\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (More info: https://en.wikipedia.org/wiki/Magic_square)\n  # Hint: use the `sum` method\n  # Hint: use the `all?` method\n  # Hint: use the `diagonal` method\n  # Hint: use the `transpose` method\n  # Hint: use the `map` method\n  # Hint: use the `sum` method\n  # Hint: use the `==` method\n  # Hint: use the `flatten` method\n  # Hint: use the `uniq` method\n  # Hint: use the `length` method\n  # Hint: use the `==` method\n  # Hint: use the `all?` method\n  # Hint: use the `==` method\n  # Hint: use the `all?` method\n  # Hint: use the `==` method\n  # Hint: use the `all?` method\n  # Hint: use the `==` method\n  # Hint: use the `all?` method\n  # Hint: use the `==` method\n  # Hint: use the `all?` method\n  # Hint: use the `==` method\n  # Hint: use the `all?` method\n  # Hint: use the `==` method\n  # Hint: use the `all?` method\n  # Hint: use the `==` method\n  # Hint: use the `all?` method\n  # Hint: use the `==` method\n  # Hint: use the `all?` method\n  # Hint: use the `==` method\n  # Hint: use the `all?` method\n  # Hint: use the `==` method\n  # Hint: use the `all?` method\n  # Hint: use the `==` method\n  # Hint: use the `all?` method\n  # Hint: use the `==` method\n  # Hint: use the",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any of the built-in sum functions.\n  # You may not use any of the built-in diagonal functions.\n  # You may not use any of the built-in row or column functions.\n  # You may not use any of the built-in equality functions.\n  # You may not use any of the built-in comparison functions.\n  # You may not use any of the built-in arithmetic functions.\n  # You may not use any of the built-in boolean functions.\n  # You may not use any of the built-in string functions.\n  # You may not use any of the built-in array functions.\n  # You may not use any of the built-in hash functions.\n  # You may not use any of the built-in range functions.\n  # You may not use any of the built-in integer functions.\n  # You may not use any of the built-in float functions.\n  # You may not use any of the built-in complex functions.\n  # You may not use any of the built-in rational functions.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any of the built-in set functions.\n  # You may not use any of the built-in time functions.\n  # You may not use any of the built-in random functions.\n  # You may not use any of the built-in socket functions.\n  # You may not use any of the built-in process functions.\n  # You may not use any of the built-in thread functions.\n  # You may not use any of the built-in file functions.\n  # You may not use any of the built-in dir functions.\n  # You may not use any of the built-in encoding functions.\n  # You may not use any of the built-in exception functions.\n  # You may not use any of the built-in security functions.\n  #",
    "  # Check that the matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # calculate the sum of the first row\n  sum = 0\n  my_matrix[0].each do |num|\n    sum += num\n  end\n  # check that all rows have the same sum\n  my_matrix.each do |row|\n    row_sum = 0\n    row.each do |num|\n      row_sum += num\n    end\n    if row_sum != sum\n      return false\n    end\n  end\n  # check that all columns have the same sum\n  my_matrix.transpose.each do |col|\n    col_sum = 0\n    col.each do |num|\n      col_sum += num\n    end\n    if col_sum != sum\n      return false\n    end\n  end\n  # check that the diagonals have the same sum\n  diag_sum = 0\n  (0..my_matrix.length - 1).each do |i|\n    diag_sum += my_matrix[i][i]\n  end\n  if diag_sum != sum\n    return false\n  end\n  diag_sum = 0\n  (0..my_matrix.length - 1).each do |i|\n    diag_sum += my_matrix[i][my_matrix.length - 1 - i]\n  end\n  if diag_sum != sum\n    return false\n  end\n  return true\nend",
    "  # check if the matrix is a square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # Note: you can use `sum` and `all?`\n  # Note 2: remember that two matrices are equal if they contain the same elements\n  # in the same order.\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sums of the rows, columns, and diagonals are all equal.\n  # You may assume that the matrix contains only distinct integers between 1 and 9.\n  # More info: https://en.wikipedia.org/wiki/Magic_square\n  # Hint: use the helper function you wrote in the previous exercise.\n  # Hint: you may want to create more helper functions.\n  # Hint: you may want to use the transpose method from the previous exercise.\n  # Hint: you may want to use the flatten method from the previous exercise.\n  # Hint: you may want to use the sum method from the previous exercise.\n  # Hint: you may want to use the diagonal_sum method from the previous exercise.\n  # Hint: you may want to use the antidiagonal_sum method from the previous exercise.\n  # Hint: you may want to use the all_equal? method from the previous exercise.\n  # Hint: you may want to use the any? method from the previous exercise.\n  # Hint: you may want to use the all? method from the previous exercise.\n  # Hint: you may want to use the map method from the previous exercise.\n  # Hint: you may want to use the zip method from the previous exercise.\n  # Hint: you may want to use the transpose method from the previous exercise.\n  # Hint: you may want to use the flatten method from the previous exercise.\n  # Hint: you may want to use the sum method from the previous exercise.\n  # Hint: you may want to use the diagonal_sum method from the previous exercise.\n  # Hint: you may want to use the antidiagonal_sum method from the previous exercise.\n  # Hint: you may want to use the all_equal? method from the previous exercise.\n  # Hint: you may want to use the any? method from the previous exercise.\n  # Hint: you may want to use the all? method from the previous exercise.\n  # Hint: you may want to use the map method from the previous exercise.\n  # Hint: you may",
    "  # Check if the matrix is square\n  return false unless my_matrix.length == my_matrix[0].length\n  # Check if the matrix is a magic square\n  # Check the sum of each row\n  row_sum = my_matrix[0].reduce(:+)\n  my_matrix.each do |row|\n    return false unless row.reduce(:+) == row_sum\n  end\n  # Check the sum of each column\n  column_sum = my_matrix.map { |row| row[0] }.reduce(:+)\n  my_matrix.each_with_index do |row, row_index|\n    row.each_with_index do |column, column_index|\n      return false unless my_matrix[column_index][row_index] == column_sum\n    end\n  end\n  # Check the sum of the diagonals\n  diagonal_sum = 0\n  my_matrix.each_with_index do |row, row_index|\n    diagonal_sum += row[row_index]\n  end\n  return false unless diagonal_sum == row_sum\n  diagonal_sum = 0\n  my_matrix.each_with_index do |row, row_index|\n    diagonal_sum += row[row.length - 1 - row_index]\n  end\n  return false unless diagonal_sum == row_sum\n  # If all checks pass, return true\n  true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (Magic squares have appeared here and there in recreational mathematics.)\n  # Example:\n  #   [8, 1, 6]\n  #   [3, 5, 7]\n  #   [4, 9, 2]\n  # is a magic square because every row, column and diagonal sums to 15.\n  # (The diagonal from top left to bottom right is 8 + 5 + 2 = 15.)\n  # Note that the rows, columns, and diagonals do not have to be distinct.\n  # Example:\n  #   [16, 2, 3, 13]\n  #   [5, 11, 10, 8]\n  #   [9, 7, 6, 12]\n  #   [4, 14, 15, 1]\n  # is a magic square because every row, column and diagonal sums to 34.\n  # (The diagonals are 16 + 11 + 6 + 1 = 34 and 4 + 11 + 10 + 15 = 34.)\n  # Hint: You can use the transpose method to get the transpose of a matrix.\n  # For example, if m is a matrix, then m.transpose is the transpose of m.\n  # Hint: You can use the flatten method to convert a matrix to a one-dimensional array.\n  # For example, if m is a matrix, then m.flatten is a one-dimensional array containing the elements of m.\n  # Hint: You can use the sum method to add up the elements of an array.\n  # For example, if a is an array, then a.sum is the sum of the elements of a.\n  # Hint: You can use the each_with_index method to iterate over the elements of an array,\n  # passing the index of each element into the block.\n  # For example, if a is an array, then a.each_with_index { |e, i| puts \"#{e} is at index #{i}\" }\n  # will print out something like \"3 is at index 0\", \"4 is at index 1\", \"5 is at",
    "  # Get the sum of the first row\n  sum = my_matrix[0].reduce(:+)\n  # Check each row\n  my_matrix.each do |row|\n    return false unless row.reduce(:+) == sum\n  end\n  # Check each column\n  my_matrix.transpose.each do |col|\n    return false unless col.reduce(:+) == sum\n  end\n  # Check the diagonals\n  diagonal_1 = (0..my_matrix.length-1).collect {|i| my_matrix[i][i]}\n  diagonal_2 = (0..my_matrix.length-1).collect {|i| my_matrix[i][my_matrix.length-i-1]}\n  return false unless diagonal_1.reduce(:+) == sum && diagonal_2.reduce(:+) == sum\n  # If we get here, it's a magic square\n  return true\nend",
    "  # Check if the matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # Check if the matrix is a magic square\n  sum = 0\n  my_matrix.each do |row|\n    sum += row[0]\n  end\n  my_matrix.each do |row|\n    row_sum = 0\n    row.each do |element|\n      row_sum += element\n    end\n    if row_sum != sum\n      return false\n    end\n  end\n  my_matrix.transpose.each do |column|\n    column_sum = 0\n    column.each do |element|\n      column_sum += element\n    end\n    if column_sum != sum\n      return false\n    end\n  end\n  diagonal_sum = 0\n  (0...my_matrix.length).each do |i|\n    diagonal_sum += my_matrix[i][i]\n  end\n  if diagonal_sum != sum\n    return false\n  end\n  diagonal_sum = 0\n  (0...my_matrix.length).each do |i|\n    diagonal_sum += my_matrix[i][my_matrix.length - i - 1]\n  end\n  if diagonal_sum != sum\n    return false\n  end\n  return true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  return false if my_matrix.length != my_matrix[0].length\n  sum = my_matrix[0].reduce(:+)\n  my_matrix.each do |row|\n    return false if row.reduce(:+) != sum\n  end\n  my_matrix.transpose.each do |column|\n    return false if column.reduce(:+) != sum\n  end\n  return true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal are equal.\n  # (More info: https://en.wikipedia.org/wiki/Magic_square)\n  # Hint: you may want to use the `sum` and `all?` methods.\n  # Hint: you may want to use the `diagonal` and `transpose` methods.\n  # Hint: you may want to use array subtraction.\n  # Hint: you may want to use the `%` modulo operator.\n  # Bonus: refactor your code to make it more DRY (Don't Repeat Yourself).\n  # Bonus: refactor your code to make it more readable.\n  # Bonus: refactor your code to make it more concise.\n  # Bonus: refactor your code to make it more efficient.\n  # Bonus: refactor your code to make it more elegant.\n  # Bonus: refactor your code to make it more functional.\n  # Bonus: refactor your code to make it more object-oriented.\n  # Bonus: refactor your code to make it more test-driven.\n  # Bonus: refactor your code to make it more agile.\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (Magic squares have appeared here and there in recreational mathematics.)\n  # Example:\n  #   1  2  3  4  5\n  #   6  7  8  9 10\n  #  11 12 13 14 15\n  #  16 17 18 19 20\n  #  21 22 23 24 25\n  #  is a magic square because every row, column, and diagonal sums to 65.\n  #  1 + 2 + 3 + 4 + 5 = 15\n  #  6 + 7 + 8 + 9 + 10 = 15\n  #  11 + 12 + 13 + 14 + 15 = 15\n  #  16 + 17 + 18 + 19 + 20 = 15\n  #  21 + 22 + 23 + 24 + 25 = 15\n  #  1 + 6 + 11 + 16 + 21 = 15\n  #  2 + 7 + 12 + 17 + 22 = 15\n  #  3 + 8 + 13 + 18 + 23 = 15\n  #  4 + 9 + 14 + 19 + 24 = 15\n  #  5 + 10 + 15 + 20 + 25 = 15\n  #  1 + 7 + 13 + 19 + 25 = 15\n  #  5 + 9 + 13 + 17 + 21 = 15\n  #  (The diagonal from top left to bottom right is not counted in the magic square.)\n  #\n  # Hint: You can use the modulo operator `%` to check if a number is even.\n  #       For example, `5 % 2` returns 1, because 5 is not divisible by 2.\n  #       On the other hand, `6 % 2` returns 0, because 6 is divisible by 2.\n  #       (See http://en.wikipedia.org/wiki/Modulo_operation)\n  #\n  #       You can use the `each_with_index` method to iterate over two-dimensional arrays.\n  #       For example:\n  #         arr = [\n  #           [1, 2],\n  #           [3, 4]\n  #         ]\n  #         arr.each_with_index",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column and diagonal is equal.\n  # Diagonals can be calculated with (0,0), (1,1), (2,2) ; (0,2), (1,1), (2,0)\n  # Example:\n  # matrix = [[8, 1, 6],\n  #           [3, 5, 7],\n  #           [4, 9, 2]]\n  # magic_square_test(matrix) => true\n  # matrix = [[7, 12, 1, 14],\n  #           [2, 13, 8, 11],\n  #           [16, 3, 10, 5],\n  #           [9, 6, 15, 4]]\n  # magic_square_test(matrix) => true\n  # matrix = [[1, 2, 3],\n  #           [4, 5, 6],\n  #           [7, 8, 9]]\n  # magic_square_test(matrix) => false\n  # matrix = [[4, 9, 2],\n  #           [3, 5, 7],\n  #           [8, 1, 6]]\n  # magic_square_test(matrix) => false\n  # matrix = [[7, 12, 1, 14, 2],\n  #           [2, 13, 8, 11, 16],\n  #           [16, 3, 10, 5, 3],\n  #           [9, 6, 15, 4, 8],\n  #           [12, 7, 16, 9, 12]]\n  # magic_square_test(matrix) => false\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # Note: you can use `sum` and `all?`\n  # Note 2: remember that two matrices are equal if they contain the same elements.\n  # If you want to check whether two matrices are equal, use `==`.\n  # For example:\n  #   [1,2,3] == [1,2,3] # => true\n  #   [1,2,3] == [3,2,1] # => false\n  #   [1,2,3] == [1,2,3,4] # => false\n  #   [[1,2,3],[4,5,6]] == [[1,2,3],[4,5,6]] # => true\n  #   [[1,2,3],[4,5,6]] == [[1,2,3],[6,5,4]] # => false\n  #   [[1,2,3],[4,5,6]] == [[1,2,3],[4,5,6,7]] # => false\n  #   [[1,2,3],[4,5,6]] == [[1,2,3],[4,5,6],[7,8,9]] # => false\n  #   [[1,2,3],[4,5,6]] == [[1,2,3,4],[5,6,7,8]] # => false\n  #   [[1,2,3],[4,5,6]] == [[1,2,3,4],[5,6,7,8],[9,10,11,12]] # => false\n  #   [[1,2,3],[4,5,6]] == [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]] # => false\n  #   [[1,2,3],[4,5,6]] == [[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]] # => false\n  #   [[1,2,3],[4,5,6]] == [[1,2,3,",
    "  # Write your code here\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row,\n  # every column, and both diagonals is the same.\n  # (Magic Square: https://en.wikipedia.org/wiki/Magic_square)\n  sum = 0\n  sum_diag = 0\n  sum_diag_2 = 0\n  my_matrix.each do |row|\n    sum += row[0]\n  end\n  my_matrix.each_with_index do |row, index|\n    sum_diag += row[index]\n    sum_diag_2 += row[-index - 1]\n  end\n  if sum == sum_diag && sum == sum_diag_2\n    return true\n  else\n    return false\n  end\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # Note: you can use `rows` and `columns` from above to iterate through the matrix.\n  # Note: you can use `sum` from above.\n  # Note: you can use `all_equal?` from above.\n  # Note: you can re-use previous functions, if needed.\n  # Hint: a matrix is a magic square if all rows, all columns, and both diagonals have the same sum.\n  # Hint: you can compare arrays with `==`, for example: [1,2,3] == [1,2,3] => true\n  # Hint: you can check if all elements of an array are equal with `all_equal?`\n  # Hint: you can check if an array is a diagonal of a matrix with `diagonal?`\n  # Hint: you can check if an array is a row of a matrix with `row?`\n  # Hint: you can check if an array is a column of a matrix with `column?`\n  # Hint: you can check if an array is a diagonal of a matrix with `diagonal?`\n  # Hint: you can check if an array is a row of a matrix with `row?`\n  # Hint: you can check if an array is a column of a matrix with `column?`\n  # Hint: you can check if an array is a diagonal of a matrix with `diagonal?`\n  # Hint: you can check if an array is a row of a matrix with `row?`\n  # Hint: you can check if an array is a column of a matrix with `column?`\n  # Hint: you can check if an array is a diagonal of a matrix with `diagonal?`\n  # Hint: you can check if an array is a row of a matrix with `row?`\n  # Hint: you can check if an array is a column of a matrix with `column?`\n  # Hint: you can check if an array is a diagonal of a matrix with `diagonal?`\n  # Hint: you can check if an array is a row of a matrix with `row?`\n  # Hint:",
    "  # Your code here\nend",
    "  # check if the matrix is a square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any of the built-in sum functions.\n  # You may not use any of the built-in square root functions.\n  # You may not use any of the built-in sort functions.\n  # You may not use any of the built-in transpose functions.\n  # You may not use any of the built-in diagonal functions.\n  # You may not use any of the built-in sum functions.\n  # You may not use any of the built-in square root functions.\n  # You may not use any of the built-in sort functions.\n  # You may not use any of the built-in transpose functions.\n  # You may not use any of the built-in diagonal functions.\n  # You may not use any of the built-in sum functions.\n  # You may not use any of the built-in square root functions.\n  # You may not use any of the built-in sort functions.\n  # You may not use any of the built-in transpose functions.\n  # You may not use any of the built-in diagonal functions.\n  # You may not use any of the built-in sum functions.\n  # You may not use any of the built-in square root functions.\n  # You may not use any of the built-in sort functions.\n  # You may not use any of the built-in transpose functions.\n  # You may not use any of the built-in diagonal functions.\n  # You may not use any of the built-in sum functions.\n  # You may not use any of the built-in square root functions.\n  # You may not use any of the built-in sort functions.\n  # You may not use any of the built-in transpose functions.\n  # You may not use any of the built-in diagonal functions.\n  # You may not use any of the built-in sum functions.\n  # You may not use any of the built",
    "  # TODO\nend",
    "  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not",
    "  # check if the matrix is a square matrix\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # check if the matrix is a square matrix\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # check if the matrix is a magic square\n  # check the sum of each row\n  row_sum = my_matrix[0].sum\n  for i in 1..my_matrix.length-1\n    if my_matrix[i].sum != row_sum\n      return false\n    end\n  end\n  # check the sum of each column\n  for i in 0..my_matrix.length-1\n    column_sum = 0\n    for j in 0..my_matrix[i].length-1\n      column_sum += my_matrix[j][i]\n    end\n    if column_sum != row_sum\n      return false\n    end\n  end\n  # check the sum of the diagonal\n  diagonal_sum = 0\n  for i in 0..my_matrix.length-1\n    diagonal_sum += my_matrix[i][i]\n  end\n  if diagonal_sum != row_sum\n    return false\n  end\n  # check the sum of the anti-diagonal\n  anti_diagonal_sum = 0\n  for i in 0..my_matrix.length-1\n    anti_diagonal_sum += my_matrix[i][my_matrix.length-1-i]\n  end\n  if anti_diagonal_sum != row_sum\n    return false\n  end\n  return true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  return false if my_matrix.length != my_matrix[0].length\n  sum = my_matrix[0].reduce(:+)\n  my_matrix.each do |row|\n    return false if row.reduce(:+) != sum\n  end\n  my_matrix.transpose.each do |col|\n    return false if col.reduce(:+) != sum\n  end\n  return true\nend",
    "  # Check if the matrix is a square matrix.\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # Check if the matrix is a magic square.\n  # Check if the sum of each row is the same.\n  sum = my_matrix[0].sum\n  for i in 0...my_matrix.length\n    if sum != my_matrix[i].sum\n      return false\n    end\n  end\n  # Check if the sum of each column is the same.\n  for i in 0...my_matrix.length\n    sum_of_column = 0\n    for j in 0...my_matrix.length\n      sum_of_column += my_matrix[j][i]\n    end\n    if sum != sum_of_column\n      return false\n    end\n  end\n  # Check if the sum of the diagonal is the same.\n  sum_of_diagonal = 0\n  for i in 0...my_matrix.length\n    sum_of_diagonal += my_matrix[i][i]\n  end\n  if sum != sum_of_diagonal\n    return false\n  end\n  # Check if the sum of the other diagonal is the same.\n  sum_of_other_diagonal = 0\n  for i in 0...my_matrix.length\n    sum_of_other_diagonal += my_matrix[i][my_matrix.length - 1 - i]\n  end\n  if sum != sum_of_other_diagonal\n    return false\n  end\n  return true\nend",
    "  # TODO\nend",
    "  # Check if the matrix is a square matrix\n  return false unless my_matrix.size == my_matrix[0].size\n  # Check if the matrix has a size of 3\n  return false unless my_matrix.size == 3\n  # Check if the sum of the rows is equal to the sum of the columns\n  return false unless my_matrix[0].sum == my_matrix[1].sum && my_matrix[0].sum == my_matrix[2].sum\n  # Check if the sum of the rows is equal to the sum of the diagonals\n  return false unless my_matrix[0].sum == my_matrix[1][1] + my_matrix[2][2] && my_matrix[0].sum == my_matrix[2][0] + my_matrix[1][1]\n  # If all the above conditions are met, the matrix is a magic square\n  true\nend",
    "  # Calculate the sum of the first row\n  sum = 0\n  my_matrix[0].each do |num|\n    sum += num\n  end\n  # Check that all rows are the same\n  my_matrix.each do |row|\n    row_sum = 0\n    row.each do |num|\n      row_sum += num\n    end\n    if row_sum != sum\n      return false\n    end\n  end\n  # Check that all columns are the same\n  (0..my_matrix.length - 1).each do |col_index|\n    col_sum = 0\n    (0..my_matrix.length - 1).each do |row_index|\n      col_sum += my_matrix[row_index][col_index]\n    end\n    if col_sum != sum\n      return false\n    end\n  end\n  # Check that the diagonals are the same\n  diag_sum = 0\n  (0..my_matrix.length - 1).each do |index|\n    diag_sum += my_matrix[index][index]\n  end\n  if diag_sum != sum\n    return false\n  end\n  diag_sum = 0\n  (0..my_matrix.length - 1).each do |index|\n    diag_sum += my_matrix[index][my_matrix.length - 1 - index]\n  end\n  if diag_sum != sum\n    return false\n  end\n  # If we get here, then all the rows, columns, and diagonals are the same\n  return true\nend",
    "  # Get the size of the matrix\n  size = my_matrix.size\n  # Get the sum of the first row\n  sum = my_matrix[0].reduce(:+)\n  # Check if the sum of the first row is equal to the sum of the other rows\n  # Check if the sum of the first row is equal to the sum of the columns\n  # Check if the sum of the first row is equal to the sum of the diagonals\n  # If all of the above are true, return true\n  # Otherwise, return false\n  if (my_matrix.all? { |row| row.reduce(:+) == sum }) && (0.upto(size - 1).all? { |i| my_matrix.map { |row| row[i] }.reduce(:+) == sum }) && (0.upto(size - 1).all? { |i| my_matrix[i][i] + my_matrix[i][size - 1 - i] == sum })\n    return true\n  else\n    return false\n  end\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal are equal.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any of the built-in sum functions.\n  # You may not use any built-in sorting functions.\n  # You may assume that the matrix is square (i.e. the number of rows is equal to the number of columns)\n  # You may assume that the matrix is non-empty.\n  # You may not use any of the built-in `each` methods.\n  # You may not use any of the built-in `map` or `collect` methods.\n  # You may not use any of the built-in `select` or `find` methods.\n  # You may not use any of the built-in `inject` or `reduce` methods.\n  # You may not use any of the built-in `zip` methods.\n  # You may not use any of the built-in `transpose` methods.\n  # You may not use any of the built-in `flatten` methods.\n  # You may not use any of the built-in `rotate` methods.\n  # You may not use any of the built-in `reverse` methods.\n  # You may not use any of the built-in `shuffle` methods.\n  # You may not use any of the built-in `sample` methods.\n  # You may not use any of the built-in `cycle` methods.\n  # You may not use any of the built-in `permutation` methods.\n  # You may not use any of the built-in `combination` methods.\n  # You may not use any of the built-in `repeated_permutation` methods.\n  # You may not use any of the built-in `repeated_combination` methods.\n  # You may not use any of the built-in `product` methods.\n  # You may not use any of the built-in `take` methods.\n  # You may not use any of the built-in `drop",
    "  # TODO: Return whether the matrix is a magic square or not\n  sum_array = []\n  sum_array << my_matrix.map {|x| x.reduce(:+)}.reduce(:+)\n  sum_array << my_matrix.transpose.map {|x| x.reduce(:+)}.reduce(:+)\n  sum_array << my_matrix.map.with_index {|x,i| x[i]}.reduce(:+)\n  sum_array << my_matrix.map.with_index {|x,i| x[-i-1]}.reduce(:+)\n  sum_array.uniq.length == 1\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (More info: https://en.wikipedia.org/wiki/Magic_square)\n  # Hint: use your previous functions!\n  if my_matrix.length == 0\n    return false\n  end\n  if my_matrix.length == 1\n    return true\n  end\n  if my_matrix.length == 2\n    return false\n  end\n  if my_matrix.length == 3\n    if my_matrix[0][0] + my_matrix[0][1] + my_matrix[0][2] == my_matrix[1][0] + my_matrix[1][1] + my_matrix[1][2] && my_matrix[0][0] + my_matrix[0][1] + my_matrix[0][2] == my_matrix[2][0] + my_matrix[2][1] + my_matrix[2][2] && my_matrix[0][0] + my_matrix[0][1] + my_matrix[0][2] == my_matrix[0][0] + my_matrix[1][0] + my_matrix[2][0] && my_matrix[0][0] + my_matrix[0][1] + my_matrix[0][2] == my_matrix[0][1] + my_matrix[1][1] + my_matrix[2][1] && my_matrix[0][0] + my_matrix[0][1] + my_matrix[0][2] == my_matrix[0][2] + my_matrix[1][2] + my_matrix[2][2] && my_matrix[0][0] + my_matrix[0][1] + my_matrix[0][2] == my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] && my_matrix[0",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row,\n  # every column, and both diagonals is the same.\n  # (Magic Square: https://en.wikipedia.org/wiki/Magic_square)\n  #\n  # Example:\n  # [8, 1, 6]\n  # [3, 5, 7]\n  # [4, 9, 2]\n  #\n  # This matrix is magic because every row, every column, and both diagonals\n  # add up to the same number: 15.\n  #\n  # Hint: Use your previous functions to calculate the sum of each row,\n  # column, and diagonal.\n  #\n  # Hint: You can compare arrays with the == operator. For example:\n  # [1, 2, 3] == [1, 2, 3] # => true\n  # [1, 2, 3] == [3, 2, 1] # => false\n  #\n  # Hint: You can use the .all? method to check if all elements in an array\n  # satisfy a condition. For example:\n  # [1, 2, 3].all? { |num| num > 0 } # => true\n  # [1, 2, 3].all? { |num| num > 1 } # => false\n  #\n  # Hint: You can use the .uniq method to get an array with only the unique\n  # elements of an array. For example:\n  # [1, 2, 3, 1].uniq # => [1, 2, 3]\n  #\n  # Hint: You can use the .sum method to get the sum of all the elements in an\n  # array. For example:\n  # [1, 2, 3].sum # => 6\n  #\n  # Hint: You can use the .transpose method to get the transpose of a matrix.\n  # For example:\n  # [[1, 2, 3], [4, 5, 6]].transpose # => [[1, 4], [2, 5], [3, 6]]\n  #\n  # Hint: You can use the .flatten method",
    "  # TODO: return true if all rows, columns and diagonals have\n  # the same sum\n  # TODO: return false otherwise\n  # TODO: You can assume that the matrix is square (n x n)\n  # TODO: You can assume that matrix is a 2 dimensional array\n  # TODO: You can assume that matrix only contains integers\n  # TODO: You can assume that matrix is not empty\n  # TODO: You can assume that matrix is not nil\n  # TODO: You can assume that matrix is not a string\n  # TODO: You can assume that matrix is not a float\n  # TODO: You can assume that matrix is not a boolean\n  # TODO: You can assume that matrix is not a hash\n  # TODO: You can assume that matrix is not an array of arrays\n  # TODO: You can assume that matrix is not an array of hashes\n  # TODO: You can assume that matrix is not an array of strings\n  # TODO: You can assume that matrix is not an array of floats\n  # TODO: You can assume that matrix is not an array of booleans\n  # TODO: You can assume that matrix is not an array of arrays of arrays\n  # TODO: You can assume that matrix is not an array of arrays of hashes\n  # TODO: You can assume that matrix is not an array of arrays of strings\n  # TODO: You can assume that matrix is not an array of arrays of floats\n  # TODO: You can assume that matrix is not an array of arrays of booleans\n  # TODO: You can assume that matrix is not an array of arrays of arrays of arrays\n  # TODO: You can assume that matrix is not an array of arrays of arrays of hashes\n  # TODO: You can assume that matrix is not an array of arrays of arrays of strings\n  # TODO: You can assume that matrix is not an array of arrays of arrays of floats\n  # TODO: You can assume that matrix is not an array of arrays of arrays of booleans\n  # TODO: You can assume that matrix is not an array of arrays of arrays of arrays of arrays\n  # TODO: You can assume that matrix is not an array of arrays of arrays of arrays of hashes\n  # TODO",
    "  # Write your code here\nend",
    "  # Check if the matrix is a square\n  if my_matrix.length != my_matrix[0].length\n    puts \"The matrix is not a square\"\n    return false\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (Magic squares have appeared here and there in recreational mathematics for centuries, but especially popularized in the 20th century by Martin Gardner.)\n  # (Source: https://en.wikipedia.org/wiki/Magic_square)\n  # Example of magic square (3x3):\n  # 8 1 6\n  # 3 5 7\n  # 4 9 2\n  # The magic number is 15.\n  # Example of non-magic square (3x3):\n  # 8 1 6\n  # 7 5 3\n  # 4 9 2\n  # The magic number is 15.\n  # Example of magic square (4x4):\n  # 16 2 3 13\n  # 5 11 10 8\n  # 9 7 6 12\n  # 4 14 15 1\n  # The magic number is 34.\n  # Example of non-magic square (4x4):\n  # 16 2 3 13\n  # 5 10 11 8\n  # 9 7 6 12\n  # 4 14 15 1\n  # The magic number is 34.\n  # Note:\n  # All the numbers of the magic square are positive integers in the range [1, 9].\n  # The numbers in the magic square are often represented by distinct colors.\n  # The magic square has the same number of rows as columns.\n  # The order (i.e. the number of elements on a side) of a magic square may be only an odd number, such as 3, 5, 7, 9, 11, etc.\n  # There are normal magic squares and self-magic squares.\n  # A normal magic square contains distinct integers in every row, column and diagonal.\n  # A self-magic square contains distinct integers in every row and column, but not necessarily in every diagonal.\n  # (Source: https://en.wikipedia.org/wiki/Magic_square)\n  # Note:\n  # For the purpose of this exercise, we define a 3x3 and a 4x4 magic square as a normal magic square.\n  # A magic square has the same number of rows and columns.\n  # A magic square has the same sum for",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal are equal.\n  # (More info: https://en.wikipedia.org/wiki/Magic_square)\n  # Hint: use the `rows`, `columns`, and `diagonals` functions you wrote earlier.\n  # Hint: use the `all?` method to test that all elements in an array are equal.\n  # Hint: you may need a nested array comprehension.\n  # Bonus: refactor your solution to make it more concise and elegant!\n  # Bonus: refactor your solution to work with matrices of any size!\n  # Bonus: refactor your solution to work with any number of dimensions!\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # Note: you can use `sum` and `all?`\n  # See: http://www.ruby-doc.org/core-2.1.2/Enumerable.html#method-i-all-3F\n  # See: http://www.ruby-doc.org/core-2.1.2/Enumerable.html#method-i-sum\n  # See: http://www.ruby-doc.org/core-2.1.2/Array.html#method-i-transpose\n  # See: http://www.ruby-doc.org/core-2.1.2/Array.html#method-i-flatten\n  # See: http://www.ruby-doc.org/core-2.1.2/Array.html#method-i-uniq\n  # See: http://www.ruby-doc.org/core-2.1.2/Array.html#method-i-all-3F\n  # See: http://www.ruby-doc.org/core-2.1.2/Array.html#method-i-all-3F\n  # See: http://www.ruby-doc.org/core-2.1.2/Array.html#method-i-all-3F\n  # See: http://www.ruby-doc.org/core-2.1.2/Array.html#method-i-all-3F\n  # See: http://www.ruby-doc.org/core-2.1.2/Array.html#method-i-all-3F\n  # See: http://www.ruby-doc.org/core-2.1.2/Array.html#method-i-all-3F\n  # See: http://www.ruby-doc.org/core-2.1.2/Array.html#method-i-all-3F\n  # See: http://www.ruby-doc.org/core-2.1.2/Array.html#method-i-all-3F\n  # See: http://www.ruby-doc.org/core-2.1.2/Array.html#method",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix of integers where the sum of each row,\n  # column, and diagonal is the same.\n  # The sum of each row and column is called the magic sum.\n  # The magic sum of a magic square is always the same.\n  # The magic sum of a 3x3 magic square is always 15.\n  # The magic sum of a 4x4 magic square is always 34.\n  # The magic sum of a 5x5 magic square is always 65.\n  # The magic sum of a 6x6 magic square is always 111.\n  # The magic sum of a 7x7 magic square is always 175.\n  # The magic sum of a 8x8 magic square is always 260.\n  # The magic sum of a 9x9 magic square is always 369.\n  # The magic sum of a 10x10 magic square is always 505.\n  # The magic sum of a 11x11 magic square is always 671.\n  # The magic sum of a 12x12 magic square is always 870.\n  # The magic sum of a 13x13 magic square is always 1105.\n  # The magic sum of a 14x14 magic square is always 1375.\n  # The magic sum of a 15x15 magic square is always 1681.\n  # The magic sum of a 16x16 magic square is always 2025.\n  # The magic sum of a 17x17 magic square is always 2414.\n  # The magic sum of a 18x18 magic square is always 2860.\n  # The magic sum of a 19x19 magic square is always 3365.\n  # The magic sum of a 20x20 magic square is always 3930.\n  # The magic sum of a 21x21 magic square is always 4555.\n  # The magic sum of a 22x22 magic square is always 5235.\n  # The magic sum of a 23x23 magic square is always 5985.\n  # The magic sum of a 24x24 magic square is always 6810.\n  # The magic sum of a 25x25 magic square is always 7715.\n  # The magic sum of a 26x26 magic square is always 8705.\n  # The magic sum of a",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal is the same.\n  # (Magic square Wikipedia page: https://en.wikipedia.org/wiki/Magic_square)\n  #\n  # Example:\n  # [8, 1, 6]\n  # [3, 5, 7]\n  # [4, 9, 2]\n  #\n  # This matrix is magic because every row, column, and diagonal adds up to 15.\n  # (8 + 1 + 6 = 15, 3 + 5 + 7 = 15, 4 + 9 + 2 = 15,\n  #  8 + 3 + 4 = 15, 1 + 5 + 9 = 15, 6 + 7 + 2 = 15,\n  #  8 + 5 + 2 = 15, 6 + 5 + 4 = 15)\n  #\n  # Hint: You can use the `sum` method for arrays.\n  # Example: [1, 2, 3].sum == 6\n  #\n  # Hint: You can use the `transpose` method to transpose a matrix.\n  # Example: [[1, 2, 3], [4, 5, 6]].transpose == [[1, 4], [2, 5], [3, 6]]\n  #\n  # Hint: You can use the `diagonal` method to get the diagonal of a matrix.\n  # Example: [[1, 2], [3, 4]].diagonal == [1, 4]\n  #\n  # Hint: You can use the `reverse` method to reverse an array.\n  # Example: [1, 2, 3].reverse == [3, 2, 1]\n  #\n  # Hint: You can use the `map` method to apply a function to every element of an array.\n  # Example: [1, 2, 3].map { |x| x * 2 } == [2, 4, 6]\n  #\n  # Hint: You can use the `all?` method to check if every element of an array satisfies a condition.\n  # Example: [1, 2, 3].all? { |x| x > 0 } == true\n  #\n  #",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (Magic squares have appeared here and there in recreational mathematics.)\n  # Example:\n  #   [8, 1, 6]\n  #   [3, 5, 7]\n  #   [4, 9, 2]\n  # is a magic square.\n  #\n  # Hint: you may want to use the `rows`, `columns` and `diagonals` functions you wrote earlier.\n  # Hint: you may want to use the `sum` function you wrote earlier.\n  # Hint: you may want to use the `all?` function you wrote earlier.\n  # Hint: you may want to use the `==` operator.\n  # Hint: you may want to use the `uniq` function you wrote earlier.\n  # Hint: you may want to use the `flatten` function you wrote earlier.\n  # Hint: you may want to use the `transpose` function you wrote earlier.\n  # Hint: you may want to use the `zip` function you wrote earlier.\n  # Hint: you may want to use the `map` function you wrote earlier.\n  # Hint: you may want to use the `reduce` function you wrote earlier.\n  # Hint: you may want to use the `inject` function you wrote earlier.\n  # Hint: you may want to use the `each` function you wrote earlier.\n  # Hint: you may want to use the `each_with_index` function you wrote earlier.\n  # Hint: you may want to use the `each_with_object` function you wrote earlier.\n  # Hint: you may want to use the `each_cons` function you wrote earlier.\n  # Hint: you may want to use the `each_slice` function you wrote earlier.\n  # Hint: you may want to use the `each_entry` function you wrote earlier.\n  # Hint: you may want to use the `each_with_index` function you wrote earlier.\n  # Hint: you may want to use",
    "  # TODO: return true/false depending on whether the matrix is a magic square or not.\n  # Hint: you may want to use the `sum` method for arrays\n  # http://ruby-doc.org/core-2.2.0/Array.html#method-i-sum\n  if my_matrix.length == 0\n    return false\n  end\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  if my_matrix.length == 1\n    return true\n  end\n  if my_matrix.length.odd?\n    return false\n  end\n  if my_matrix.length.even?\n    return true\n  end\nend",
    "  # check if the matrix is a square matrix\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row,\n  # every column, and both diagonals is the same.\n  # (Magic Square: https://en.wikipedia.org/wiki/Magic_square)\n  # (Diagonal: https://en.wikipedia.org/wiki/Diagonal)\n  # (Matrix: https://en.wikipedia.org/wiki/Matrix_(mathematics))\n  # (Square Matrix: https://en.wikipedia.org/wiki/Square_matrix)\n  # (Row: https://en.wikipedia.org/wiki/Row_(mathematics))\n  # (Column: https://en.wikipedia.org/wiki/Column_(mathematics))\n  # (Sum: https://en.wikipedia.org/wiki/Sum)\n  # (Integer: https://en.wikipedia.org/wiki/Integer)\n  # (Array: https://en.wikipedia.org/wiki/Array_data_structure)\n  # (Matrix: https://en.wikipedia.org/wiki/Matrix_(mathematics))\n  # (Matrix: https://en.wikipedia.org/wiki/Matrix_(mathematics))\n  # (Matrix: https://en.wikipedia.org/wiki/Matrix_(mathematics))\n  # (Matrix: https://en.wikipedia.org/wiki/Matrix_(mathematics))\n  # (Matrix: https://en.wikipedia.org/wiki/Matrix_(mathematics))\n  # (Matrix: https://en.wikipedia.org/wiki/Matrix_(mathematics))\n  # (Matrix: https://en.wikipedia.org/wiki/Matrix_(mathematics))\n  # (Matrix: https://en.wikipedia.org/wiki/Matrix_(mathematics))\n  # (Matrix: https://en.wikipedia.org/wiki/Matrix_(mathematics))\n  # (Matrix: https://en.wikipedia.org/wiki/Matrix_(mathematics))\n  # (Matrix: https://en.wikipedia.org/wiki/Matrix_(mathematics))\n  # (Matrix: https://en.wikipedia.org/wiki/Matrix_(mathematics))\n  # (Matrix: https",
    "  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row,\n  # every column, and both diagonals is the same.\n  # (Magic Square: https://en.wikipedia.org/wiki/Magic_square)\n  #\n  # Example:\n  # [8, 1, 6]\n  # [3, 5, 7]\n  # [4, 9, 2]\n  #\n  # This matrix is magic because every row, column and diagonal sums to 15.\n  # (8 + 1 + 6 = 15, 3 + 5 + 7 = 15, 4 + 9 + 2 = 15,\n  #  8 + 3 + 4 = 15, 1 + 5 + 9 = 15, 6 + 7 + 2 = 15,\n  #  8 + 5 + 2 = 15, 6 + 5 + 4 = 15)\n  #\n  # Note:\n  #   - The matrix can be any size.\n  #   - The matrix might not be square.\n  #   - The matrix might not be rectangular.\n  #   - The matrix might not be a number matrix.\n  #   - The matrix might be empty.\n  #   - The matrix might only have one row or one column.\n  #   - The matrix might not have the same number of rows as columns.\n  #   - The matrix might not have an equal number of rows and columns.\n  #   - The matrix might not have an equal number of rows and columns.\n  #   - The matrix might not have an equal number of rows and columns.\n  #   - The matrix might not have an equal number of rows and columns.\n  #   - The matrix might not have an equal number of rows and columns.\n  #   - The matrix might not have an equal number of rows and columns.\n  #   - The matrix might not have an equal number of rows and columns.\n  #   - The matrix might not have an equal number of rows and columns.\n  #   - The matrix might not have an equal number of rows and columns.\n  #   - The matrix might not have an equal number of rows and columns.\n  #   - The matrix might not have an equal number of rows and columns.\n ",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix (where the number of rows and the number of columns are equal)\n  # in which the sum of each row, column, and diagonal all add up to the same number.\n  # Diagonal:\n  # [0,0] [1,1] [2,2]\n  # [0,2] [1,1] [2,0]\n  #\n  # Rows:\n  # [0,0] [0,1] [0,2]\n  # [1,0] [1,1] [1,2]\n  # [2,0] [2,1] [2,2]\n  #\n  # Columns:\n  # [0,0] [1,0] [2,0]\n  # [0,1] [1,1] [2,1]\n  # [0,2] [1,2] [2,2]\n  #\n  # For example:\n  # [4,9,2]\n  # [3,5,7]\n  # [8,1,6]\n  #\n  # In this matrix each row, column, and diagonal add up to the number 15.\n  # (4+9+2, 3+5+7, 8+1+6, 4+3+8, 9+5+1, 2+7+6, 4+5+6, 2+5+8).\n  # (There are actually more than one magic square inside this matrix, but we'll just\n  # focus on the 3x3 case for now.)\n  #\n  # Hint: You'll need to iterate over the elements of the matrix using nested loops.\n  # Also, remember that a matrix is just an array of arrays.\n  #\n  # Bonus: Write a function that creates a magic square of size n.\n  # You'll need to use the `#flatten` method (or possibly `#flatten!`).\n  # You can read the documentation here:\n  # http://www.ruby-doc.org/core-2.1.4/Array.html#method-i-flatten\n  #",
    "  # TODO: return true/false depending on whether the matrix is a magic square or not.\n  # Note: you may need to use a single line of code to extract an array of integers from the matrix.\n  # Note: you will need to use all the functions you wrote above in this function!\n  if sum_of_row(my_matrix, 0) == sum_of_row(my_matrix, 1) && sum_of_row(my_matrix, 1) == sum_of_row(my_matrix, 2) && sum_of_row(my_matrix, 2) == sum_of_column(my_matrix, 0) && sum_of_column(my_matrix, 0) == sum_of_column(my_matrix, 1) && sum_of_column(my_matrix, 1) == sum_of_column(my_matrix, 2) && sum_of_column(my_matrix, 2) == sum_of_diagonal(my_matrix, 0) && sum_of_diagonal(my_matrix, 0) == sum_of_diagonal(my_matrix, 1)\n    return true\n  else\n    return false\n  end\nend",
    "  # TODO: return true/false\nend",
    "  # Get the dimensions of the matrix\n  dimensions = my_matrix.size",
    "  # Your code here\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal are equal.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any of the built-in sum functions.\n  # You may not use any built-in sorting functions.\n  # You may assume that the matrix is square (i.e. the number of rows and columns are equal).\n  # You may assume that the matrix is non-empty.\n  # You may not use any of the built-in `raise` functions.\n  # You may not use `exit` or `abort`.\n  # You may not use loops (e.g. `while`, `for`, `loop`, etc.).\n  # You may not use any of the methods from the `Enumerable` module.\n  # You may not use `Float::INFINITY` or `Float::NAN`.\n  # You may not use any of the built-in `rand` functions.\n  # You may not use any of the built-in `Time`, `Date`, or `DateTime` functions.\n  # You may not use any of the built-in `File` or `IO` functions.\n  # You may not use any of the built-in `Math` functions.\n  # You may not use any of the built-in `Complex` or `Rational` functions.\n  # You may not use any of the built-in `Integer` functions.\n  # You may not use any of the built-in `String` functions.\n  # You may not use any of the built-in `Array` or `Hash` functions.\n  # You may not use any of the built-in `Symbol` functions.\n  # You may not use any of the built-in `Range` functions.\n  # You may not use any of the built-in `Proc` or `Lambda` functions.\n  # You may not use any of the built-in `Method` functions.\n  # You may not use any of the built-in `Exception` functions.\n  # You may not use any of",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  sum = 0\n  sum_array = []\n  my_matrix.each do |row|\n    sum += row.reduce(:+)\n    sum_array << row.reduce(:+)\n  end\n  sum_array.uniq.length == 1 && sum_array.length == my_matrix.length && sum_array.length == my_matrix[0].length\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in methods available for solving systems of linear equations in Ruby (including #det, #rank, and #trace)\n  # You may not use any of the built-in methods available for determining the rank of a matrix in Ruby (including #rank, #rank_old, #matrix_rank, and #matrix_rank_old)\n  # You may not use any of the built-in methods available for inverting a matrix in Ruby (including #inverse and #inv)\n  # You may not use any of the built-in methods available for calculating determinants in Ruby (including #determinant)\n  # You may not use any of the built-in methods available for calculating the trace of a matrix in Ruby (including #trace)\n  # You may not use any of the built-in methods available for calculating the transpose of a matrix in Ruby (including #transpose)\n  # You may not use any of the built-in methods available for calculating the eigenvalues of a matrix in Ruby (including #eigenvalues)\n  # You may not use any of the built-in methods available for calculating the eigenvectors of a matrix in Ruby (including #eigenvectors)\n  # You may not use any of the built-in methods available for calculating the LU decomposition of a matrix in Ruby (including #lup)\n  # You may not use any of the built-in methods available for calculating the QR decomposition of a matrix in Ruby (including #qr)\n  # You may not use any of the built-in methods available for calculating the Cholesky decomposition of a matrix in Ruby (including #cholesky)\n  # You may not use any of the built-in methods available for calculating the singular value decomposition of a matrix in Ruby (including #svd)\n  # You may not use any of the built-in methods available for calculating the condition number of a matrix in Ruby (including #condition)\n  # You may not use any of the built-in methods available for calculating the norm of",
    "  # Check if the matrix is a square matrix\n  return false unless my_matrix.length == my_matrix[0].length",
    "  # check if the matrix is a square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # check if the matrix is a magic square\n  # check if the sum of each row is the same\n  row_sum = my_matrix[0].reduce(:+)\n  for i in 1..my_matrix.length-1\n    if my_matrix[i].reduce(:+) != row_sum\n      return false\n    end\n  end\n  # check if the sum of each column is the same\n  for i in 0..my_matrix.length-1\n    column_sum = 0\n    for j in 0..my_matrix.length-1\n      column_sum += my_matrix[j][i]\n    end\n    if column_sum != row_sum\n      return false\n    end\n  end\n  # check if the sum of the diagonals is the same\n  diagonal_sum = 0\n  for i in 0..my_matrix.length-1\n    diagonal_sum += my_matrix[i][i]\n  end\n  if diagonal_sum != row_sum\n    return false\n  end\n  diagonal_sum = 0\n  for i in 0..my_matrix.length-1\n    diagonal_sum += my_matrix[i][my_matrix.length-1-i]\n  end\n  if diagonal_sum != row_sum\n    return false\n  end\n  return true\nend",
    "  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not",
    "  # check if the matrix is a square matrix\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (More info here: https://en.wikipedia.org/wiki/Magic_square)\n  # You may assume that the matrix only contains integers.\n  # Hint: You can represent a matrix as a two-dimensional array (an array of arrays),\n  # where each sub-array represents a row.\n  # For example, this matrix:\n  # 1 5 9\n  # 4 2 8\n  # 3 7 6\n  # Would be represented as:\n  # matrix = [[1,5,9],\n  #           [4,2,8],\n  #           [3,7,6]]\n  # Hint: You can represent a matrix as a two-dimensional array (an array of arrays),\n  # where each sub-array represents a row.\n  # For example, this matrix:\n  # 1 5 9\n  # 4 2 8\n  # 3 7 6\n  # Would be represented as:\n  # matrix = [[1,5,9],\n  #           [4,2,8],\n  #           [3,7,6]]\n  # Hint: You can represent a matrix as a two-dimensional array (an array of arrays),\n  # where each sub-array represents a row.\n  # For example, this matrix:\n  # 1 5 9\n  # 4 2 8\n  # 3 7 6\n  # Would be represented as:\n  # matrix = [[1,5,9],\n  #           [4,2,8],\n  #           [3,7,6]]\n  # Hint: You can represent a matrix as a two-dimensional array (an array of arrays),\n  # where each sub-array represents a row.\n  # For example, this matrix:\n  # 1 5 9\n  # 4 2 8\n  # 3 7 6\n  # Would be represented as:\n  # matrix = [[1,5,9],\n  #           [4,2,8],\n  #           [3,7,6]]\n  # Hint: You can represent a matrix as a two-",
    "  # Calculate the sum of the first row.\n  sum = 0\n  my_matrix[0].each do |x|\n    sum += x\n  end\n  # Check that all rows are the same.\n  my_matrix.each do |row|\n    row_sum = 0\n    row.each do |x|\n      row_sum += x\n    end\n    if row_sum != sum\n      return false\n    end\n  end\n  # Check that all columns are the same.\n  (0..my_matrix.length-1).each do |i|\n    col_sum = 0\n    my_matrix.each do |row|\n      col_sum += row[i]\n    end\n    if col_sum != sum\n      return false\n    end\n  end\n  # Check that the diagonals are the same.\n  diag_sum = 0\n  (0..my_matrix.length-1).each do |i|\n    diag_sum += my_matrix[i][i]\n  end\n  if diag_sum != sum\n    return false\n  end\n  diag_sum = 0\n  (0..my_matrix.length-1).each do |i|\n    diag_sum += my_matrix[i][my_matrix.length-1-i]\n  end\n  if diag_sum != sum\n    return false\n  end\n  # If we get here, it is a magic square.\n  return true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # TODO: return true/false depending on whether the matrix is a magic square.\n  # TODO: return true/false depending on whether the matrix is a magic square.\n  # TODO: return true/false depending on whether the matrix is a magic square.\n  # TODO: return true/false depending on whether the matrix is a magic square.\n  # TODO: return true/false depending on whether the matrix is a magic square.\n  # TODO: return true/false depending on whether the matrix is a magic square.\n  # TODO: return true/false depending on whether the matrix is a magic square.\n  # TODO: return true/false depending on whether the matrix is a magic square.\n  # TODO: return true/false depending on whether the matrix is a magic square.\n  # TODO: return true/false depending on whether the matrix is a magic square.\n  # TODO: return true/false depending on whether the matrix is a magic square.\n  # TODO: return true/false depending on whether the matrix is a magic square.\n  # TODO: return true/false depending on whether the matrix is a magic square.\n  # TODO: return true/false depending on whether the matrix is a magic square.\n  # TODO: return true/false depending on whether the matrix is a magic square.\n  # TODO: return true/false depending on whether the matrix is a magic square.\n  # TODO: return true/false depending on whether the matrix is a magic square.\n  # TODO: return true/false depending on whether the matrix is a magic square.\n  # TODO: return true/false depending on whether the matrix is a magic square.\n  # TODO: return true/false depending on whether the matrix is a magic square.\n  # TODO: return true/false depending on whether the matrix is a magic square.\n  # TODO: return true/false depending on whether the matrix is a magic square.\n  # TODO: return true/false depending on whether the matrix is a magic square.\n  # TODO: return true/false depending on whether the matrix is a magic square.\n  # TODO: return true/false depending on",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and",
    "  # TODO: return true if all rows, columns and diagonals have\n  # the same sum\n  return false\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal are equal.\n  # (of course, all elements in the matrix are non-negative integers)\n  # Hint: use the helper functions you've written above.\n  return false if my_matrix.length == 0\n  return false if my_matrix.length != my_matrix[0].length\n  return false if my_matrix.length.odd?\n  return false if !is_square?(my_matrix)\n  return false if !is_symmetric?(my_matrix)\n  return false if !is_diagonal?(my_matrix)\n  return false if !is_magic_square?(my_matrix)\n  return true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in methods available for solving this problem.\n  # You will need to write your own code.\n  # Hint: Try writing a function that checks whether each row has the same sum, and each column has the same sum.\n  # Then check whether the diagonals have the same sum.\n  # If every test passes, the matrix is magic!\n  # If any test fails, the matrix is not magic.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in methods available for solving this problem.\n  # You will need to write your own code.\n  # Hint: Try writing a function that checks whether each row has the same sum, and each column has the same sum.\n  # Then check whether the diagonals have the same sum.\n  # If every test passes, the matrix is magic!\n  # If any test fails, the matrix is not magic.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in methods available for solving this problem.\n  # You will need to write your own code.\n  # Hint: Try writing a function that checks whether each row has the same sum, and each column has the same sum.\n  # Then check whether the diagonals have the same sum.\n  # If every test passes, the matrix is magic!\n  # If any test fails, the matrix is not magic.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in methods available for solving this problem.\n  # You will need to write your own code.\n  # Hint: Try writing a function that checks whether each row has the same sum, and each column has the same sum.\n  # Then check whether the diagonals have the same sum.\n  # If every test passes, the matrix is magic!\n  # If any test fails, the matrix is not magic.\n  # You may assume",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row,\n  # every column, and both diagonals is the same.\n  # (Magic Square: https://en.wikipedia.org/wiki/Magic_square)\n  # (Diagonal: https://en.wikipedia.org/wiki/Diagonal)\n  # (Sum: https://en.wikipedia.org/wiki/Summation)\n  # (Matrix: https://en.wikipedia.org/wiki/Matrix_(mathematics))\n  # (Square Matrix: https://en.wikipedia.org/wiki/Square_matrix)\n  # (Row: https://en.wikipedia.org/wiki/Row_and_column)\n  # (Column: https://en.wikipedia.org/wiki/Row_and_column)\n  # (Square: https://en.wikipedia.org/wiki/Square_(geometry))\n  # (Matrix: https://en.wikipedia.org/wiki/Matrix_(mathematics))\n  # (Square Matrix: https://en.wikipedia.org/wiki/Square_matrix)\n  # (Row: https://en.wikipedia.org/wiki/Row_and_column)\n  # (Column: https://en.wikipedia.org/wiki/Row_and_column)\n  # (Square: https://en.wikipedia.org/wiki/Square_(geometry))\n  # (Matrix: https://en.wikipedia.org/wiki/Matrix_(mathematics))\n  # (Square Matrix: https://en.wikipedia.org/wiki/Square_matrix)\n  # (Row: https://en.wikipedia.org/wiki/Row_and_column)\n  # (Column: https://en.wikipedia.org/wiki/Row_and_column)\n  # (Square: https://en.wikipedia.org/wiki/Square_(geometry))\n  # (Matrix: https://en.wikipedia.org/wiki/Matrix_(mathematics))\n  # (Square Matrix: https://en.wikipedia.org/wiki/Square_matrix)\n  # (Row: https://en.wikipedia.org/wiki/Row_and_column)\n  # (Column",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  sum_array = []\n  sum_array << my_matrix.map { |row| row.reduce(:+) }\n  sum_array << my_matrix.transpose.map { |row| row.reduce(:+) }\n  sum_array << my_matrix.map.with_index { |row, i| row[i] }.reduce(:+)\n  sum_array << my_matrix.map.with_index { |row, i| row[-i - 1] }.reduce(:+)\n  sum_array.uniq.count == 1\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any of the built-in sum functions.\n  # You may not use any of the built-in square root functions.\n  # You may not use any of the built-in diagonal functions.\n  # You may not use any of the built-in transpose functions.\n  # You may not use any of the built-in sum functions.\n  # You may not use any of the built-in square root functions.\n  # You may not use any of the built-in diagonal functions.\n  # You may not use any of the built-in transpose functions.\n  # You may not use any of the built-in sum functions.\n  # You may not use any of the built-in square root functions.\n  # You may not use any of the built-in diagonal functions.\n  # You may not use any of the built-in transpose functions.\n  # You may not use any of the built-in sum functions.\n  # You may not use any of the built-in square root functions.\n  # You may not use any of the built-in diagonal functions.\n  # You may not use any of the built-in transpose functions.\n  # You may not use any of the built-in sum functions.\n  # You may not use any of the built-in square root functions.\n  # You may not use any of the built-in diagonal functions.\n  # You may not use any of the built-in transpose functions.\n  # You may not use any of the built-in sum functions.\n  # You may not use any of the built-in square root functions.\n  # You may not use any of the built-in diagonal functions.\n  # You may not use any of the built-in transpose functions.\n  # You may not use any of the built-in sum functions.\n  # You may not use any of the built-in square root functions.\n  # You may not use any",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # You may assume that the matrix only contains integers.\n  # You may NOT use any built-in methods for matrix or array manipulation.\n  # You may assume that the matrix is always square (i.e. has the same number of rows as columns).\n  # You may assume that all rows are the same length.\n  # You may assume that all columns are the same length.\n  # You may assume that the matrix is not empty.\n  # You may assume that the matrix is not nil.\n  # You may assume that the matrix is not jagged.\n  # You may assume that the matrix is not ragged.\n  # You may assume that the matrix is not sparse.\n  # You may assume that the matrix is not rectangular.\n  # You may assume that the matrix is not a vector.\n  # You may assume that the matrix is not a list.\n  # You may assume that the matrix is not a set.\n  # You may assume that the matrix is not a dictionary.\n  # You may assume that the matrix is not a hash.\n  # You may assume that the matrix is not a stack.\n  # You may assume that the matrix is not a queue.\n  # You may assume that the matrix is not a linked list.\n  # You may assume that the matrix is not a tree.\n  # You may assume that the matrix is not a graph.\n  # You may assume that the matrix is not a network.\n  # You may assume that the matrix is not a directed graph.\n  # You may assume that the matrix is not an undirected graph.\n  # You may assume that the matrix is not a weighted graph.\n  # You may assume that the matrix is not a weighted directed graph.\n  # You may assume that the matrix is not a weighted undirected graph.\n  # You may assume that the matrix is not a tree.\n  # You may assume that the matrix is not a binary tree.\n  # You may assume that the matrix is not a binary search tree.\n  # You may assume that the matrix is not a heap.\n  # You may assume that the matrix is not a priority queue.\n  # You may assume that the matrix is not a deque.\n ",
    "  # TODO: return true if all rows, columns and diagonals have\n  # the same sum\n  # TODO: return false otherwise\n  # Hint: you might want to use the `sum_up` function you wrote\n  # above in this exercise\n  # Hint: you can use `my_matrix[x][y]` to get the value\n  # at the x-th row and the y-th column\n  # Hint: you can use `my_matrix.size` to get the number\n  # of rows / columns in the matrix\n  # Hint: you can use `my_matrix.transpose` to get the transposed\n  # matrix",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (Magic square: https://en.wikipedia.org/wiki/Magic_square)\n  # (In a square matrix, the sum of the elements in each row is the same, and the sum of the elements in each column is the same.)\n  # (In a square matrix, the sum of the elements in each diagonal is the same.)\n  # (In a square matrix, the sum of the elements in the first row is the same as the sum of the elements in the first column.)\n  # (In a square matrix, the sum of the elements in the second row is the same as the sum of the elements in the second column.)\n  # (In a square matrix, the sum of the elements in the third row is the same as the sum of the elements in the third column.)\n  # (In a square matrix, the sum of the elements in the first diagonal is the same as the sum of the elements in the second diagonal.)\n  # (In a square matrix, the sum of the elements in the first diagonal is the same as the sum of the elements in the third diagonal.)\n  # (In a square matrix, the sum of the elements in the second diagonal is the same as the sum of the elements in the third diagonal.)\n  # (In a square matrix, the sum of the elements in the first diagonal is the same as the sum of the elements in the second row.)\n  # (In a square matrix, the sum of the elements in the first diagonal is the same as the sum of the elements in the third column.)\n  # (In a square matrix, the sum of the elements in the second diagonal is the same as the sum of the elements in the second column.)\n  # (In a square matrix, the sum of the elements in the second diagonal is the same as the sum of the elements in the third row.)\n  # (In a square matrix, the sum of the elements in the third diagonal is the same as the sum of the elements in the first row.)\n  # (In a square matrix, the sum of the elements in the third diagonal is the same as the sum of the elements in the second column.)\n  # (In a",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (More info: https://en.wikipedia.org/wiki/Magic_square)\n  # Hint: use the `rows`, `columns` and `diagonals` functions you wrote earlier.\n  # Hint: you'll need to test that the sums of each row, column and diagonal are equal.\n  # Hint: you'll need to test that the matrix has the same number of rows and columns.\n  # Hint: you'll need to test that the matrix is square (i.e. the number of rows and columns are equal).\n  # Hint: you'll need to test that each number in the matrix is unique.\n  # Hint: you'll need to test that each number in the matrix is between 1 and the number of cells in the matrix.\n  # Hint: you'll need to test that each number in the matrix is an integer.\n  # Hint: you'll need to test that each number in the matrix is greater than 0.\n  # Hint: you'll need to test that the matrix is two-dimensional.\n  # Hint: you'll need to test that the matrix is an array.\n  # Hint: you'll need to test that the matrix is not nil.\n  # Hint: you'll need to test that the matrix is not empty.\n  # Hint: you'll need to test that the matrix is not a string.\n  # Hint: you'll need to test that the matrix is not a number.\n  # Hint: you'll need to test that the matrix is not a boolean.\n  # Hint: you'll need to test that the matrix is not a hash.\n  # Hint: you'll need to test that the matrix is not a symbol.\n  # Hint: you'll need to test that the matrix is not a function.\n  # Hint: you'll need to test that the matrix is not a class.\n  # Hint: you'll need to test that the matrix is not an instance of a class.\n  # Hint: you'll need to test that the matrix is not a regular expression.\n ",
    "  # Write your code here\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square or not.\n  # Write your code here.\n  magic_square = true\n  sum = 0\n  sum_array = []\n  my_matrix.each do |row|\n    sum += row.sum\n  end\n  my_matrix.each do |row|\n    sum_array << row.sum\n  end\n  sum_array.each do |sum_row|\n    if sum_row != sum\n      magic_square = false\n    end\n  end\n  sum_array = []\n  my_matrix.transpose.each do |row|\n    sum_array << row.sum\n  end\n  sum_array.each do |sum_row|\n    if sum_row != sum\n      magic_square = false\n    end\n  end\n  sum_array = []\n  sum_array << my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]\n  sum_array << my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]\n  sum_array.each do |sum_row|\n    if sum_row != sum\n      magic_square = false\n    end\n  end\n  return magic_square\nend",
    "  # Write your code here\nend",
    "  # Calculate the sum of the first row\n  sum = 0\n  for i in 0..2\n    sum += my_matrix[0][i]\n  end\n  # Check if the sum of each row is the same\n  for i in 0..2\n    row_sum = 0\n    for j in 0..2\n      row_sum += my_matrix[i][j]\n    end\n    if row_sum != sum\n      return false\n    end\n  end\n  # Check if the sum of each column is the same\n  for i in 0..2\n    col_sum = 0\n    for j in 0..2\n      col_sum += my_matrix[j][i]\n    end\n    if col_sum != sum\n      return false\n    end\n  end\n  # Check if the sum of the diagonals is the same\n  diag_sum1 = 0\n  diag_sum2 = 0\n  for i in 0..2\n    diag_sum1 += my_matrix[i][i]\n    diag_sum2 += my_matrix[i][2-i]\n  end\n  if diag_sum1 != sum || diag_sum2 != sum\n    return false\n  end\n  # If all the tests pass, return true\n  return true\nend",
    "  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not",
    "  # check if the matrix is a square matrix\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # check if the matrix is a magic square\n  # check the sum of each row\n  sum = 0\n  my_matrix.each do |row|\n    sum += row[0]\n  end\n  my_matrix.each do |row|\n    if row.reduce(:+) != sum\n      return false\n    end\n  end\n  # check the sum of each column\n  my_matrix.transpose.each do |col|\n    if col.reduce(:+) != sum\n      return false\n    end\n  end\n  # check the sum of the diagonals\n  diag1 = 0\n  diag2 = 0\n  for i in 0..my_matrix.length-1\n    diag1 += my_matrix[i][i]\n    diag2 += my_matrix[i][my_matrix.length-1-i]\n  end\n  if diag1 != sum || diag2 != sum\n    return false\n  end\n  return true\nend",
    "  # Check if the matrix is a square.\n  return false unless my_matrix.length == my_matrix[0].length\n  # Check if the sum of each row is the same.\n  sum = my_matrix[0].reduce(:+)\n  my_matrix.each do |row|\n    return false unless row.reduce(:+) == sum\n  end\n  # Check if the sum of each column is the same.\n  (0...my_matrix.length).each do |i|\n    col_sum = 0\n    (0...my_matrix.length).each do |j|\n      col_sum += my_matrix[j][i]\n    end\n    return false unless col_sum == sum\n  end\n  # Check if the sum of the diagonals is the same.\n  diag_sum = 0\n  (0...my_matrix.length).each do |i|\n    diag_sum += my_matrix[i][i]\n  end\n  return false unless diag_sum == sum\n  diag_sum = 0\n  (0...my_matrix.length).each do |i|\n    diag_sum += my_matrix[i][my_matrix.length - i - 1]\n  end\n  return false unless diag_sum == sum\n  # If all the tests pass, return true.\n  true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal are equal.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any of the built-in sum functions.\n  # You may not use any of the built-in diagonal functions.\n  # You may not use any of the built-in row functions.\n  # You may not use any of the built-in column functions.\n  # You may not use any of the built-in equality functions.\n  # You may not use any of the built-in comparison functions.\n  # You may not use any of the built-in arithmetic functions.\n  # You may not use any of the built-in modulo functions.\n  # You may not use any of the built-in boolean functions.\n  # You may not use any of the built-in string functions.\n  # You may not use any of the built-in array functions.\n  # You may not use any of the built-in hash functions.\n  # You may not use any of the built-in range functions.\n  # You may not use any of the built-in enumerable functions.\n  # You may not use any of the built-in enumerator functions.\n  # You may not use any of the built-in exception functions.\n  # You may not use any of the built-in math functions.\n  # You may not use any of the built-in random functions.\n  # You may not use any of the built-in time functions.\n  # You may not use any of the built-in file functions.\n  # You may not use any of the built-in directory functions.\n  # You may not use any of the built-in process functions.\n  # You may not use any of the built-in thread functions.\n  # You may not use any of the built-in socket functions.\n  # You may not use any of the built-in system functions.\n  # You may not use any of the built-in encoding functions.\n  # You may not use any of the built-in conversion functions.\n  # You",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix of numbers where the sum of each row,\n  # column and diagonal is the same.\n  #\n  # Example:\n  # [8, 1, 6]\n  # [3, 5, 7]\n  # [4, 9, 2]\n  #\n  # This matrix is magic because:\n  # 8 + 1 + 6 = 15\n  # 3 + 5 + 7 = 15\n  # 4 + 9 + 2 = 15\n  # 15 = 15 = 15\n  #\n  # 8 + 3 + 4 = 15\n  # 1 + 5 + 9 = 15\n  # 6 + 7 + 2 = 15\n  # 15 = 15 = 15\n  #\n  # 8 + 5 + 2 = 15\n  # 6 + 5 + 4 = 15\n  # 15 = 15\n  #\n  # The sum of each row, each column and each diagonal is the same.\n  #\n  # Note:\n  # - You can assume that the matrix is square i.e. the number of rows is equal to the number of columns.\n  # - You can assume that all numbers in the matrix are positive integers.\n  # - You can use any language you like.\n  # - You can use any libraries you like.\n  # - You can use Google.\n  # - You can run the code in your favourite editor/IDE or in a terminal.\n  # - You can use any operating system you like.\n  # - You can submit the code by sending us a link to a hosted version e.g. on GitHub, GitLab or Bitbucket.\n  #\n  # Good luck!\nend",
    "  # check if matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (Magic squares have appeared here and there in recreational mathematics.)\n  # Example:\n  #     1  2  3\n  #     4  5  6\n  #     7  8  9\n  # The magic sum for this matrix is 15.\n  # (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45. 45/3 = 15)\n  # The magic sum for this matrix is 15.\n  # (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45. 45/3 = 15)\n  # The magic sum for this matrix is 15.\n  # (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45. 45/3 = 15)\n  # The magic sum for this matrix is 15.\n  # (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45. 45/3 = 15)\n  # The magic sum for this matrix is 15.\n  # (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45. 45/3 = 15)\n  # The magic sum for this matrix is 15.\n  # (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45. 45/3 = 15)\n  # The magic sum for this matrix is 15.\n  # (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45. 45/3 = 15)\n  # The magic sum for this matrix is 15.\n  # (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45. 45/3 = 15)\n  # The magic sum for this matrix is 15.\n  # (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45. 45/3 = 15)\n  # The magic sum for this matrix is 15.\n  # (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45. 45/3 = 15",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  if my_matrix.length % 2 == 0\n    return false\n  end\n  n = my_matrix.length\n  sum = n * (n**2 + 1) / 2\n  sum_diag1 = 0\n  sum_diag2 = 0\n  sum_row = 0\n  sum_col = 0\n  for i in 0..n-1\n    sum_diag1 += my_matrix[i][i]\n    sum_diag2 += my_matrix[i][n-i-1]\n    for j in 0..n-1\n      sum_row += my_matrix[i][j]\n      sum_col += my_matrix[j][i]\n    end\n    if sum_row != sum || sum_col != sum\n      return false\n    end\n    sum_row = 0\n    sum_col = 0\n  end\n  if sum_diag1 != sum || sum_diag2 != sum\n    return false\n  end\n  return true\nend",
    "  # check if the matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # sum of all rows\n  row_sum = my_matrix.map { |row| row.reduce(:+) }\n  # sum of all columns\n  column_sum = my_matrix.transpose.map { |column| column.reduce(:+) }\n  # sum of diagonals\n  diagonal_sum = [my_matrix.map.with_index { |row, i| row[i] }.reduce(:+), my_matrix.map.with_index { |row, i| row[-i - 1] }.reduce(:+)]\n  # sum of all elements\n  all_sum = my_matrix.flatten.reduce(:+)\n  # check if all sums are equal\n  row_sum.uniq.size == 1 && column_sum.uniq.size == 1 && diagonal_sum.uniq.size == 1 && all_sum == row_sum[0]\nend",
    "  # check if the matrix is a square matrix\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal is the same.\n  # (Magic square: https://en.wikipedia.org/wiki/Magic_square)\n  # Hint: you may want to use the `rows`, `columns`, and `diagonals` functions you wrote earlier.\n  # Hint: you may want to use the `sum` function you wrote earlier.\n  # Hint: you may want to use the `all_equal?` function you wrote earlier.\n  # Hint: you may want to use the `all?` function you wrote earlier.\n  # Hint: you may want to use the `map` function you wrote earlier.\n  # Hint: you may want to use the `reduce` function you wrote earlier.\n  # Hint: you may want to use the `zip` function you wrote earlier.\n  # Hint: you may want to use the `flatten` function you wrote earlier.\n  # Hint: you may want to use the `transpose` function you wrote earlier.\n  # Hint: you may want to use the `reverse` function you wrote earlier.\n  # Hint: you may want to use the `rotate` function you wrote earlier.\n  # Hint: you may want to use the `first` function you wrote earlier.\n  # Hint: you may want to use the `last` function you wrote earlier.\n  # Hint: you may want to use the `take` function you wrote earlier.\n  # Hint: you may want to use the `drop` function you wrote earlier.\n  # Hint: you may want to use the `concat` function you wrote earlier.\n  # Hint: you may want to use the `each_with_index` function you wrote earlier.\n  # Hint: you may want to use the `each_with_object` function you wrote earlier.\n  # Hint: you may want to use the `each_cons` function you wrote earlier.\n  # Hint: you may want to use the `each_slice` function you wrote earlier.\n  # Hint: you may want to use the `each_",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row,\n  # every column, and both diagonals is the same.\n  # (Magic Square: https://en.wikipedia.org/wiki/Magic_square)\n  # Example:\n  # 153\n  #  48\n  # 962\n  # In the above example, 15 + 3 + 9 = 48 + 8 + 2 = 33 + 3 + 62 = 153 + 4 + 6 = 9 + 6 + 2 = 30.\n  # Note: Your function should work for an arbitrary matrix size.\n  # Note: The matrix can contain any integers.\n  # Note: The matrix can be any size from 1x1 to 100x100.\n  # Hint: You can use the `sum` method.\n  # Hint: You can use the `all?` method.\n  # Hint: You can use the `transpose` method.\n  # Hint: You can use the `diagonal` method.\n  # Hint: You can use the `reverse_diagonal` method.\n  # Hint: You can use the `flatten` method.\n  # Hint: You can use the `uniq` method.\n  # Hint: You can use the `==` operator.\n  # Hint: You can use the `*` operator.\n  # Hint: You can use the `[]` operator.\n  # Hint: You can use the `[]=` operator.\n  # Hint: You can use the `each` method.\n  # Hint: You can use the `each_with_index` method.\n  # Hint: You can use the `map` method.\n  # Hint: You can use the `inject` method.\n  # Hint: You can use the `reduce` method.\n  # Hint: You can use the `select` method.\n  # Hint: You can use the `find` method.\n  # Hint: You can use the `find_index` method.\n  # Hint: You can use the `max` method.\n  # Hint: You can use the `min` method.",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (Magic Square: https://en.wikipedia.org/wiki/Magic_square)\n  # (Examples: http://www.mathworksheets4kids.com/square.php)\n  #\n  # Example:\n  # [8, 1, 6]\n  # [3, 5, 7]\n  # [4, 9, 2]\n  #\n  # This matrix is magic because every row, column, and diagonal sums to 15.\n  # (8 + 1 + 6 = 15, 3 + 5 + 7 = 15, 4 + 9 + 2 = 15,\n  #  8 + 3 + 4 = 15, 1 + 5 + 9 = 15, 6 + 7 + 2 = 15,\n  #  8 + 5 + 2 = 15, 6 + 5 + 4 = 15)\n  #\n  # Hint: You can check whether a matrix is a magic square using 2 criteria:\n  # 1. Each number occurs only once in the matrix.\n  # 2. The sum of every row, column, and diagonal is the same.\n  #\n  # Hint: You can check whether each number occurs only once in the matrix using a set.\n  #       If you add a number to a set that already includes that number, the set will not change.\n  #       However, if you remove a number from a set that doesn't include that number, the set will not change.\n  #       See the Ruby docs for Set: http://ruby-doc.org/stdlib-2.3.0/libdoc/set/rdoc/Set.html\n  #\n  # Hint: You can check whether the sum of every row, column, and diagonal is the same using only one variable.\n  #       If the sum of one row, column, or diagonal isn't the same as the others, you can return false immediately.\n  #       Otherwise, you can return true at the end of the function.\n  #\n  # Hint: To find the sum of each row, you can use Array#inject.\n  #       To find the sum of each column, you",
    "  # check if the matrix is a square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # check if the matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # check if the matrix is odd\n  if my_matrix.length % 2 == 0\n    return false\n  end\n  # check if the matrix is magic\n  # calculate the sum of the first row\n  sum = 0\n  my_matrix[0].each do |element|\n    sum += element\n  end\n  # check if the sum of the first row is equal to the sum of the other rows\n  for i in 1..my_matrix.length - 1\n    temp_sum = 0\n    my_matrix[i].each do |element|\n      temp_sum += element\n    end\n    if temp_sum != sum\n      return false\n    end\n  end\n  # check if the sum of the first column is equal to the sum of the other columns\n  for i in 0..my_matrix.length - 1\n    temp_sum = 0\n    for j in 0..my_matrix.length - 1\n      temp_sum += my_matrix[j][i]\n    end\n    if temp_sum != sum\n      return false\n    end\n  end\n  # check if the sum of the first diagonal is equal to the sum of the other diagonal\n  temp_sum = 0\n  for i in 0..my_matrix.length - 1\n    temp_sum += my_matrix[i][i]\n  end\n  if temp_sum != sum\n    return false\n  end\n  temp_sum = 0\n  for i in 0..my_matrix.length - 1\n    temp_sum += my_matrix[i][my_matrix.length - 1 - i]\n  end\n  if temp_sum != sum\n    return false\n  end\n  # if all the conditions are satisfied, return true\n  return true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (Magic squares have appeared here and there in recreational mathematics.)\n  # Example:\n  #   1  2  3\n  #   4  5  6\n  #   7  8  9\n  #   => true\n  #\n  #   1  2  3\n  #   4  5  6\n  #   8  7  9\n  #   => false\n  #\n  #   1  2  3  4\n  #   5  6  7  8\n  #   9 10 11 12\n  #  13 14 15 16\n  #   => true\n  #\n  #   1  2  3  4\n  #   5  6  7  8\n  #   9 10 12 11\n  #  13 14 15 16\n  #   => false\n  #\n  #   1  2  3  4  5\n  #   6  7  8  9 10\n  #  11 12 13 14 15\n  #  16 17 18 19 20\n  #  21 22 23 24 25\n  #   => true\n  #\n  #   1  2  3  4  5\n  #   6  7  8  9 10\n  #  11 12 13 14 15\n  #  16 17 18 19 20\n  #  21 22 23 24 26\n  #   => false\n  #\n  #   1  2  3  4  5  6\n  #   7  8  9 10 11 12\n  #  13 14 15 16 17 18\n  #  19 20 21 22 23 24\n  #  25 26 27 28 29 30\n  #  31 32 33 34 35 36\n  #   => true\n  #\n  #   1  2  3  4  5  6\n  #   7  8  9 10 11 12\n  #  13 14 15 16 17 18\n  #  19 20 21 22 23 24\n  #  25 26 27 28 30 29\n  #  31 32 33 34 35 36\n  #   => false\n  #\n  #   1 ",
    "  # Check if the matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # Your code here\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square or not.\n  # A magic square is a square matrix where the sum of each row, column and diagonal is equal.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions such as transpose, trace, etc.\n  # You may use the sum_of_row function you wrote in the previous exercise.\n  # You may use the sum_of_diagonal function you wrote in the previous exercise.\n  # You may use the sum_of_column function you wrote in the previous exercise.\n  # You may use the is_square? function you wrote in the previous exercise.\n  # You may use the is_symmetrical? function you wrote in the previous exercise.\n  # You may use the is_identity? function you wrote in the previous exercise.\n  # You may use the is_upper_triangular? function you wrote in the previous exercise.\n  # You may use the is_lower_triangular? function you wrote in the previous exercise.\n  # You may use the is_diagonal? function you wrote in the previous exercise.\n  # You may use the is_scalar? function you wrote in the previous exercise.\n  # You may use the is_singular? function you wrote in the previous exercise.\n  # You may use the is_nilpotent? function you wrote in the previous exercise.\n  # You may use the is_idempotent? function you wrote in the previous exercise.\n  # You may use the is_involution? function you wrote in the previous exercise.\n  # You may use the is_permutation? function you wrote in the previous exercise.\n  # You may use the is_orthogonal? function you wrote in the previous exercise.\n  # You may use the is_skew_symmetrical? function you wrote in the previous exercise.\n  # You may use the is_skew_orthogonal? function you wrote in the previous exercise.\n  # You may use the is_skew_symmetrical? function you wrote in the previous exercise.\n  # You may use the is_skew_orthogonal? function you wrote in the previous exercise.\n",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any built-in methods for determining whether a matrix is a magic square.\n  # You may not use any built-in methods for calculating the sum of the elements in a row, column, or diagonal.\n  # You may not use any built-in methods for finding the length of a matrix.\n  # You may not use any built-in methods for finding the number of rows or columns in a matrix.\n  # You may not use any built-in methods for finding the diagonal elements of a matrix.\n  # You may not use any built-in methods for finding the transpose of a matrix.\n  # You may not use any built-in methods for finding the sum of the elements in a matrix.\n  # You may not use any built-in methods for finding the product of the elements in a matrix.\n  # You may not use any built-in methods for finding the maximum or minimum of the elements in a matrix.\n  # You may not use any built-in methods for finding the mean of the elements in a matrix.\n  # You may not use any built-in methods for finding the median of the elements in a matrix.\n  # You may not use any built-in methods for finding the mode of the elements in a matrix.\n  # You may not use any built-in methods for finding the standard deviation of the elements in a matrix.\n  # You may not use any built-in methods for finding the variance of the elements in a matrix.\n  # You may not use any built-in methods for finding the range of the elements in a matrix.\n  # You may not use any built-in methods for finding the sum of the squares of the elements in a matrix.\n  # You may not use any built-in methods for finding the sum of the cubes of the elements in a matrix.\n  # You may not use any built-in methods for finding the sum of the fourth powers of the elements in a matrix.\n  # You may not use any built-in methods",
    "  # Calculate the sum of the first row and store it in a variable.\n  first_row_sum = my_matrix[0].reduce(:+)\n  # Calculate the sum of the second row and store it in a variable.\n  second_row_sum = my_matrix[1].reduce(:+)\n  # Calculate the sum of the third row and store it in a variable.\n  third_row_sum = my_matrix[2].reduce(:+)\n  # Calculate the sum of the first column and store it in a variable.\n  first_column_sum = my_matrix[0][0] + my_matrix[1][0] + my_matrix[2][0]\n  # Calculate the sum of the second column and store it in a variable.\n  second_column_sum = my_matrix[0][1] + my_matrix[1][1] + my_matrix[2][1]\n  # Calculate the sum of the third column and store it in a variable.\n  third_column_sum = my_matrix[0][2] + my_matrix[1][2] + my_matrix[2][2]\n  # Calculate the sum of the first diagonal and store it in a variable.\n  first_diagonal_sum = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]\n  # Calculate the sum of the second diagonal and store it in a variable.\n  second_diagonal_sum = my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]\n  # Compare the sums of the rows, columns, and diagonals.\n  # If they are all equal, return true.\n  if first_row_sum == second_row_sum && second_row_sum == third_row_sum && third_row_sum == first_column_sum && first_column_sum == second_column_sum && second_column_sum == third_column_sum && third_column_sum == first_diagonal_sum && first_diagonal_sum == second_diagonal_sum\n    return",
    "  # check if the matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # Your code here\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row,\n  # every column, and both diagonals is the same.\n  # (Magic Square: https://en.wikipedia.org/wiki/Magic_square)\n  #\n  # Example:\n  # [8, 1, 6]\n  # [3, 5, 7]\n  # [4, 9, 2]\n  #\n  # This matrix is magic because every row, every column,\n  # and both diagonals sum to the number 15.\n  # (8 + 1 + 6 = 15, 3 + 5 + 7 = 15, 4 + 9 + 2 = 15,\n  #  8 + 3 + 4 = 15, 1 + 5 + 9 = 15, 6 + 7 + 2 = 15,\n  #  8 + 5 + 2 = 15, 6 + 5 + 4 = 15)\n  #\n  # Example:\n  # [2, 7, 6]\n  # [9, 5, 1]\n  # [4, 3, 8]\n  #\n  # This matrix is not magic because it fails the row test:\n  # 2 + 7 + 6 = 15, but 9 + 5 + 1 = 15.\n  #\n  # Example:\n  # [1, 2, 3]\n  # [4, 5, 6]\n  # [7, 8, 9]\n  #\n  # This matrix is not magic because it fails the column test:\n  # 1 + 4 + 7 = 12, but 2 + 5 + 8 = 15.\n  #\n  # Example:\n  # [8, 1, 6]\n  # [3, 5, 7]\n  # [4, 9, 2]\n  #\n  # This matrix is not magic because it fails the diagonal test:\n  # 8 + 5 + 2 = 15, but 6 + 5 + 4 = 15.\n  #\n  # Hint: You can use the `sum` method for arrays.\n  # For example, [1, 2, 3].sum returns 6.\n  #\n  # Hint: You can use the `all?` method for arrays.\n  # For example, [",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # Note: you can use `sum` and `all?`\n  # See: https://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-all-3F\n  # See: https://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-sum\n  # See: https://ruby-doc.org/core-2.5.1/Array.html#method-i-transpose\n  # See: https://ruby-doc.org/core-2.5.1/Array.html#method-i-flatten\n  # See: https://ruby-doc.org/core-2.5.1/Array.html#method-i-diagonal\n  # See: https://ruby-doc.org/core-2.5.1/Array.html#method-i-reverse_diagonal\n  # See: https://ruby-doc.org/core-2.5.1/Array.html#method-i-reverse\n  # See: https://ruby-doc.org/core-2.5.1/Array.html#method-i-rotate\n  # See: https://ruby-doc.org/core-2.5.1/Array.html#method-i-rotate-21\n  # See: https://ruby-doc.org/core-2.5.1/Array.html#method-i-rotate-22\n  # See: https://ruby-doc.org/core-2.5.1/Array.html#method-i-rotate-23\n  # See: https://ruby-doc.org/core-2.5.1/Array.html#method-i-rotate-24\n  # See: https://ruby-doc.org/core-2.5.1/Array.html#method-i-rotate-25\n  # See: https://ruby-doc.org/core-2.5.1/Array.html#method-i-rotate-26\n  # See: https://ruby-doc.org/core-2.5.1/Array.html#method",
    "  # TODO: implement this function\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a matrix where the sum of each row, column, and diagonal is the same.\n  # (Magic square: https://en.wikipedia.org/wiki/Magic_square)\n  # (In a magic square, the first row and first column sum to the same thing,\n  # as do the second row and second column, etc.)\n  #\n  # Example:\n  # matrix = [\n  #   [1, 2, 3],\n  #   [4, 5, 6],\n  #   [7, 8, 9]\n  # ]\n  # magic_square_test(matrix) => true\n  #\n  # Example:\n  # matrix = [\n  #   [4, 9, 2],\n  #   [3, 5, 7],\n  #   [8, 1, 6]\n  # ]\n  # magic_square_test(matrix) => true\n  #\n  # Example:\n  # matrix = [\n  #   [7, 12, 1, 14],\n  #   [2, 13, 8, 11],\n  #   [16, 3, 10, 5],\n  #   [9, 6, 15, 4]\n  # ]\n  # magic_square_test(matrix) => true\n  #\n  # Example:\n  # matrix = [\n  #   [1, 2, 3, 4],\n  #   [5, 6, 7, 8],\n  #   [9, 10, 11, 12],\n  #   [13, 14, 15, 16]\n  # ]\n  # magic_square_test(matrix) => false\n  #\n  # Example:\n  # matrix = [\n  #   [23, 28, 21],\n  #   [22, 24, 26],\n  #   [27, 20, 25]\n  # ]\n  # magic_square_test(matrix) => true\n  #\n  # Example:\n  # matrix = [\n  #   [16, 23, 17],\n  #   [78, 32, 21],\n  #   [17, 16, 15]\n ",
    "  # TODO: Return whether the matrix is a magic square or not\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same\n  # The sum of every row is the same\n  # The sum of every column is the same\n  # The sum of every diagonal is the same\n  # The sum of every anti-diagonal is the same\n  # The sum of every row is the same as the sum of every column\n  # The sum of every diagonal is the same as the sum of every anti-diagonal\n  # The sum of every row is the same as the sum of every diagonal\n  # The sum of every column is the same as the sum of every anti-diagonal\n  # The sum of every row is the same as the sum of every anti-diagonal\n  # The sum of every column is the same as the sum of every diagonal\n  # The sum of every row is the same as the sum of every column and diagonal\n  # The sum of every column is the same as the sum of every row and diagonal\n  # The sum of every diagonal is the same as the sum of every row and column\n  # The sum of every anti-diagonal is the same as the sum of every row and column\n  # The sum of every row is the same as the sum of every column and anti-diagonal\n  # The sum of every column is the same as the sum of every row and anti-diagonal\n  # The sum of every diagonal is the same as the sum of every row and anti-diagonal\n  # The sum of every anti-diagonal is the same as the sum of every row and diagonal\n  # The sum of every row is the same as the sum of every column, diagonal, and anti-diagonal\n  # The sum of every column is the same as the sum of every row, diagonal, and anti-diagonal\n  # The sum of every diagonal is the same as the sum of every row, column, and anti-diagonal\n  # The sum of every anti-diagonal is the same as the sum of every row, column, and diagonal\n  # The sum of every row is the same as the sum of every column, diagonal, and anti-diagonal\n  # The sum of every column is the same as the sum of every row, diagonal, and",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row,\n  # every column, and both diagonals is the same.\n  # (Magic Square: https://en.wikipedia.org/wiki/Magic_square)\n  #\n  # Example:\n  # [8, 1, 6]\n  # [3, 5, 7]\n  # [4, 9, 2]\n  #\n  # This matrix is magic because every row, column, and diagonal sums to 15.\n  # (8 + 1 + 6 = 15, 3 + 5 + 7 = 15, 4 + 9 + 2 = 15,\n  #  8 + 3 + 4 = 15, 1 + 5 + 9 = 15, 6 + 7 + 2 = 15,\n  #  8 + 5 + 2 = 15, 6 + 5 + 4 = 15)\n  #\n  # Hint: Use the `#sum` method on arrays.\n  # Example: [1, 2, 3].sum == 6\n  #\n  # Hint: Use the `#all?` method on arrays.\n  # Example: [true, true, true].all? == true\n  #\n  # Hint: Use the `#transpose` method on matrices.\n  # Example: [[1, 2], [3, 4]].transpose == [[1, 3], [2, 4]]\n  #\n  # Hint: Use the `#diagonal` method on matrices.\n  # Example: [[1, 2], [3, 4]].diagonal == [1, 4]\n  #\n  # Hint: Use the `#reverse_diagonal` method on matrices.\n  # Example: [[1, 2], [3, 4]].reverse_diagonal == [2, 3]\n  #\n  # Hint: Use the `#flatten` method on matrices.\n  # Example: [[1, 2], [3, 4]].flatten == [1, 2, 3, 4]\n  #\n  # Hint: Use the `#uniq` method on arrays.\n  # Example: [1, 1, 2, 2, 3, 3].un",
    "  # Write your code here\nend",
    "  # check if matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # check if all numbers are unique\n  if my_matrix.flatten.uniq.length != my_matrix.flatten.length\n    return false\n  end\n  # check if all rows, columns, and diagonals sum to the same number\n  sum = my_matrix[0].reduce(:+)\n  for i in 0..my_matrix.length-1\n    if my_matrix[i].reduce(:+) != sum\n      return false\n    end\n    if my_matrix.map { |x| x[i] }.reduce(:+) != sum\n      return false\n    end\n  end\n  if my_matrix.map.with_index { |x, i| x[i] }.reduce(:+) != sum\n    return false\n  end\n  if my_matrix.map.with_index { |x, i| x[my_matrix.length-1-i] }.reduce(:+) != sum\n    return false\n  end\n  return true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (Magic squares have appeared here and there in recreational mathematics.)\n  # Example of magic square (3x3):\n  # 8 1 6\n  # 3 5 7\n  # 4 9 2\n  # The sum of each row and column is 15.\n  # The sum of each diagonal is also 15.\n  # (Magic square has the same sum of each row, each column and each diagonal)\n  # Example of non-magic square (3x3):\n  # 8 1 6\n  # 3 5 7\n  # 4 9 2\n  # The sum of each row and column is 15.\n  # The sum of first diagonal is 14.\n  # The sum of second diagonal is 16.\n  # (Magic square has the same sum of each row, each column and each diagonal)\n  # Example of non-magic square (4x4):\n  # 16 2 3 13\n  # 5 10 11 8\n  # 9  7 6 12\n  # 4 14 15 1\n  # The sum of each row and column is 34.\n  # The sum of first diagonal is 30.\n  # The sum of second diagonal is 38.\n  # (Magic square has the same sum of each row, each column and each diagonal)\n  # Hint: you may try using a helper function to calculate the sum of each row/column/diagonal.\n  # If you are stuck, feel free to review the code from the previous lesson.\n  # You may also want to review the \"Sum of 2D array\" lesson.\n  # You may also want to google \"how to find the sum of each row and column in a matrix\"",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal are equal.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use",
    "  # check if the matrix is a square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # check if the matrix is a magic square\n  # check if the sum of each row is the same\n  sum = my_matrix[0].sum\n  my_matrix.each do |row|\n    if row.sum != sum\n      return false\n    end\n  end\n  # check if the sum of each column is the same\n  for i in 0..my_matrix.length-1\n    sum_col = 0\n    for j in 0..my_matrix[0].length-1\n      sum_col += my_matrix[j][i]\n    end\n    if sum_col != sum\n      return false\n    end\n  end\n  # check if the sum of each diagonal is the same\n  sum_diag1 = 0\n  sum_diag2 = 0\n  for i in 0..my_matrix.length-1\n    sum_diag1 += my_matrix[i][i]\n    sum_diag2 += my_matrix[i][my_matrix.length-1-i]\n  end\n  if sum_diag1 != sum || sum_diag2 != sum\n    return false\n  end\n  # if all the tests pass, return true\n  return true\nend",
    "  # check if the matrix is a square matrix\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal are equal.\n  # (More info: https://en.wikipedia.org/wiki/Magic_square)\n  sum = 0\n  sum_row = 0\n  sum_column = 0\n  sum_diagonal = 0\n  sum_diagonal_2 = 0\n  my_matrix.each do |row|\n    sum_row = row.inject(:+)\n    sum = sum_row\n    break\n  end\n  for i in 0..my_matrix.length-1\n    for j in 0..my_matrix.length-1\n      sum_column += my_matrix[j][i]\n    end\n    if sum_column != sum\n      return false\n    end\n    sum_column = 0\n  end\n  for i in 0..my_matrix.length-1\n    sum_diagonal += my_matrix[i][i]\n  end\n  if sum_diagonal != sum\n    return false\n  end\n  for i in 0..my_matrix.length-1\n    sum_diagonal_2 += my_matrix[i][my_matrix.length-1-i]\n  end\n  if sum_diagonal_2 != sum\n    return false\n  end\n  return true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # You may assume that the matrix only contains distinct integers between 1 and n^2\n  # (that is, there are no repeated numbers and each number is between 1 and n^2, inclusive).\n  # You may also assume that the matrix is square (that is, the number of rows and columns in the matrix are equal).\n  # You may NOT use any built-in methods for determining whether a matrix is a magic square.\n  # Hint: You may find the reduce method useful.\n  # Hint: You may find the each_with_index method useful.\n  # Hint: You may find the all? method useful.\n  # Hint: You may find the sum method useful.\n  # Hint: You may find the transpose method useful.\n  # Hint: You may find the zip method useful.\n  # Hint: You may find the flatten method useful.\n  # Hint: You may find the uniq method useful.\n  # Hint: You may find the sort method useful.\n  # Hint: You may find the == method useful.\n  # Hint: You may find the all? method useful.\n  # Hint: You may find the map method useful.\n  # Hint: You may find the inject method useful.\n  # Hint: You may find the == method useful.\n  # Hint: You may find the all? method useful.\n  # Hint: You may find the map method useful.\n  # Hint: You may find the inject method useful.\n  # Hint: You may find the == method useful.\n  # Hint: You may find the all? method useful.\n  # Hint: You may find the map method useful.\n  # Hint: You may find the inject method useful.\n  # Hint: You may find the == method useful.\n  # Hint: You may find the all? method useful.\n  # Hint: You may find the map method useful.\n  # Hint: You may find the inject method useful.\n  # Hint: You may find the == method useful.\n  # Hint: You may find the all? method useful.\n  # Hint: You",
    "  # Check that the matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # Hint: You can represent a matrix as an array of arrays.\n  # For example, [[1,2,3],[4,5,6],[7,8,9]] is represented as [ [1,2,3], [4,5,6], [7,8,9] ].\n  # Hint: You can represent a diagonal as a list of positions.\n  # For example, the top-left to bottom-right diagonal can be represented as [ [0,0], [1,1], [2,2] ].\n  # Hint: You can check whether an array has the same sum as another array by comparing their sums.\n  # For example, [1,2,3].sum == [3,2,1].sum\n  # Hint: You can check whether an array is a permutation of another array by sorting them both.\n  # For example, [1,2,3] == [3,2,1].sort\n  # Hint: You can check whether an array is a permutation of a range of numbers by converting them both to sets.\n  # For example, [1,2,3].to_set == (1..3).to_set\n  # Hint: You can check whether the elements in an array sum to 0 by checking whether their sum is 0.\n  # For example, [1,2,-3].sum == 0\n  # Hint: You can check whether one number is divisible by another number by using the % (modulus) operator.\n  # For example, 14 % 12 == 2\n  # Hint: You can find the square of a number by multiplying it by itself.\n  # For example, 2 * 2 == 4\n  # Hint: You can find the square root of a number by raising it to the 0.5 power.\n  # For example, 9 ** 0.5 == 3\n  # Hint: You can find the sum of the elements in an array by using the",
    "  # Check if the matrix is a square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # Check if the matrix is a magic square\n  sum = 0\n  for i in 0...my_matrix.length\n    sum += my_matrix[0][i]\n  end\n  for i in 1...my_matrix.length\n    sum_row = 0\n    sum_column = 0\n    for j in 0...my_matrix[i].length\n      sum_row += my_matrix[i][j]\n      sum_column += my_matrix[j][i]\n    end\n    if sum_row != sum || sum_column != sum\n      return false\n    end\n  end\n  return true\nend",
    "  # Calculate the sum of the first row\n  sum = 0\n  my_matrix[0].each do |value|\n    sum += value\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square\n  # Note: you can add more helper methods!\n  return false if my_matrix.length != my_matrix[0].length\n  return false if my_matrix.length.odd?\n  return false if my_matrix.flatten.uniq.length != my_matrix.flatten.length\n  return false if my_matrix.flatten.min != 1\n  return false if my_matrix.flatten.max != my_matrix.length ** 2\n  return false if my_matrix.flatten.sum != (my_matrix.length ** 3 + my_matrix.length) / 2\n  return false if my_matrix.transpose.map { |row| row.sum }.uniq.length != 1\n  return false if my_matrix.map { |row| row.sum }.uniq.length != 1\n  return false if my_matrix.map.with_index { |row, i| row[i] }.sum != (my_matrix.length ** 3 + my_matrix.length) / 2\n  return false if my_matrix.map.with_index { |row, i| row[-i - 1] }.sum != (my_matrix.length ** 3 + my_matrix.length) / 2\n  true\nend",
    "  # calculate sum of each row\n  row_sums = []\n  my_matrix.each do |row|\n    row_sums << row.reduce(:+)\n  end\n  # calculate sum of each column\n  column_sums = []\n  my_matrix.transpose.each do |column|\n    column_sums << column.reduce(:+)\n  end\n  # calculate sum of diagonals\n  diagonal_sums = []\n  diagonal_sums << my_matrix.each_with_index.map { |row, i| row[i] }.reduce(:+)\n  diagonal_sums << my_matrix.each_with_index.map { |row, i| row[-i-1] }.reduce(:+)\n  # compare sums\n  row_sums.uniq.length == 1 && column_sums.uniq.length == 1 && diagonal_sums.uniq.length == 1\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (Magic squares have appeared here and there in recreational mathematics.)\n  # Example:\n  #     1  2  3\n  #     4  5  6\n  #     7  8  9\n  # The sum of each row and each column is 15.\n  # The sum of each diagonal is also 15.\n  # The sum of all 9 elements is 45.\n  # The sum of all 9 elements divided by 3 (the number of rows/columns) is 15.\n  # The sum of all 9 elements divided by 2 (the number of diagonals) is also 15.\n  # The sum of all 9 elements divided by 1 (the number of elements) is also 15.\n  # The sum of all 9 elements divided by the square root of the number of elements is also 15.\n  # The sum of all 9 elements divided by the cube root of the number of elements is also 15.\n  # The sum of all 9 elements divided by the number of elements raised to the power of the number of elements is also 15.\n  # The sum of all 9 elements divided by the number of elements raised to the power of the number of elements minus 1 is also 15.\n  # The sum of all 9 elements divided by the number of elements raised to the power of the number of elements plus 1 is also 15.\n  # The sum of all 9 elements divided by the number of elements raised to the power of the number of elements minus 2 is also 15.\n  # The sum of all 9 elements divided by the number of elements raised to the power of the number of elements plus 2 is also 15.\n  # The sum of all 9 elements divided by the number of elements raised to the power of the number of elements minus 3 is also 15.\n  # The sum of all 9 elements divided by the number of elements raised to the power of the number of elements plus 3 is also 15.\n  # The sum of all 9 elements divided by the number of elements raised to the power of the number of elements minus 4 is also 15.\n  # The sum of all 9 elements divided by the number of elements raised to the power of the number of elements plus 4 is",
    "  # Write your code here\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row,\n  # every column, and both diagonals is the same.\n  # (Magic Square: https://en.wikipedia.org/wiki/Magic_square)\n  #\n  # Example:\n  # [8, 1, 6]\n  # [3, 5, 7]\n  # [4, 9, 2]\n  #\n  # This matrix is magic because every row, column, and diagonal sums to 15.\n  # (8 + 1 + 6 = 15, 3 + 5 + 7 = 15, 4 + 9 + 2 = 15,\n  #  8 + 3 + 4 = 15, 1 + 5 + 9 = 15, 6 + 7 + 2 = 15,\n  #  8 + 5 + 2 = 15, 6 + 5 + 4 = 15)\n  #\n  # Your function should work for an arbitrarily-sized matrix.\n  # It does not have to work for square matrices other than 3x3.\n  #\n  # Hint: You can represent a matrix as an array of arrays. For example:\n  # my_matrix = [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\n  #\n  # Hint: You can represent a 2-dimensional array as a 1-dimensional array\n  # by flattening it. For example:\n  # [8, 1, 6, 3, 5, 7, 4, 9, 2]\n  #\n  # Hint: You can use the Array#sum method to add up the elements of an array.\n  # For example:\n  # [8, 1, 6, 3, 5, 7, 4, 9, 2].sum # => 36\n  #\n  # Hint: You can use the transpose method to transpose a matrix.\n  # For example:\n  # [[8, 1, 6], [3, 5, 7], [4, 9, 2]].transpose # => [[8, 3, 4], [1, 5, 9], [6, 7, 2]]\n  #\n  # Hint: You can use the diagonal method to get the diagonals of",
    "  # check that the matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # check that the matrix is of odd order\n  if my_matrix.length % 2 == 0\n    return false\n  end\n  # check that the matrix contains the numbers 1 to n^2\n  # check that the sum of each row is the same\n  # check that the sum of each column is the same\n  # check that the sum of each diagonal is the same\n  return true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions such as transpose, etc.\n  # You may not use any built-in methods for determining whether a matrix is a magic square.\n  # You may not use any built-in methods for calculating the sum of a row, column, or diagonal.\n  # You may not use any built-in methods for calculating the length of a row, column, or diagonal.\n  # You may not use any built-in methods for calculating the length of a matrix.\n  # You may not use any built-in methods for calculating the number of rows, columns, or diagonals.\n  # You may not use any built-in methods for calculating the number of elements in a matrix.\n  # You may not use any built-in methods for calculating the sum of all elements in a matrix.\n  # You may not use any built-in methods for calculating the product of all elements in a matrix.\n  # You may not use any built-in methods for reversing a matrix.\n  # You may not use any built-in methods for calculating the transpose of a matrix.\n  # You may not use any built-in methods for calculating the determinant of a matrix.\n  # You may not use any built-in methods for calculating the inverse of a matrix.\n  # You may not use any built-in methods for calculating the trace of a matrix.\n  # You may not use any built-in methods for calculating the rank of a matrix.\n  # You may not use any built-in methods for calculating the trace of a matrix.\n  # You may not use any built-in methods for calculating the eigenvalues of a matrix.\n  # You may not use any built-in methods for calculating the eigenvectors of a matrix.\n  # You may not use any built-in methods for calculating the singular values of a matrix.\n  # You may not use any built-in methods for calculating the singular value decomposition of a matrix.\n  # You may not use any built-in methods for calculating the Choles",
    "  # sum of each row\n  row_sum = my_matrix.map { |row| row.reduce(:+) }\n  # sum of each column\n  col_sum = my_matrix.transpose.map { |col| col.reduce(:+) }\n  # sum of each diagonal\n  diagonal_sum = [0, 0]\n  (0...my_matrix.length).each do |i|\n    diagonal_sum[0] += my_matrix[i][i]\n    diagonal_sum[1] += my_matrix[i][my_matrix.length - i - 1]\n  end\n  # check if all sums are equal\n  row_sum.uniq.length == 1 && col_sum.uniq.length == 1 && diagonal_sum.uniq.length == 1\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  sum = 0\n  sum_array = []\n  my_matrix.each do |row|\n    sum += row[0]\n  end\n  my_matrix.each do |row|\n    sum_array << row.reduce(:+)\n  end\n  sum_array.each do |sum_row|\n    if sum_row != sum\n      return false\n    end\n  end\n  my_matrix.transpose.each do |row|\n    sum_array << row.reduce(:+)\n  end\n  sum_array.each do |sum_row|\n    if sum_row != sum\n      return false\n    end\n  end\n  sum_array << my_matrix.map.with_index { |row, index| row[index] }.reduce(:+)\n  sum_array << my_matrix.map.with_index { |row, index| row[-index-1] }.reduce(:+)\n  sum_array.each do |sum_row|\n    if sum_row != sum\n      return false\n    end\n  end\n  return true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # Note: you can use `my_matrix[row][col]` to access elements in 2D arrays.\n  # Note: you can use `my_matrix.transpose` to transpose a matrix.\n  # Note: you can use `my_matrix.map { |row| row.reduce(:+) }` to calculate row sums.\n  # Note: you can use `my_matrix.map(&:sum)` to calculate row sums.\n  # Note: you can use `my_matrix.sum` to calculate the sum of all elements.\n  # Note: you can use `my_matrix.flatten.sum` to calculate the sum of all elements.\n  # Note: you can use `my_matrix.uniq.length == 1` to test whether all elements are equal.\n  # Note: you can use `my_matrix.uniq.length == my_matrix.length` to test whether all rows are unique.\n  # Note: you can use `my_matrix.transpose.uniq.length == my_matrix.length` to test whether all columns are unique.\n  # Note: you can use `my_matrix.map(&:sum).uniq.length == 1` to test whether all row sums are equal.\n  # Note: you can use `my_matrix.transpose.map(&:sum).uniq.length == 1` to test whether all column sums are equal.\n  # Note: you can use `my_matrix.map.with_index { |row, i| row[i] }.sum` to calculate the sum of the diagonal from top-left to bottom-right.\n  # Note: you can use `my_matrix.map.with_index { |row, i| row[-i-1] }.sum` to calculate the sum of the diagonal from top-right to bottom-left.\nend",
    "  # Sum of each row\n  row_sum = 0\n  my_matrix.each do |row|\n    row_sum += row.reduce(:+)\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in methods available for solving systems of linear equations in Ruby (including #det, #rank, and #trace)\n  # You may not use any of the built-in methods available for determining if a matrix is invertible in Ruby (including #inv, #singular?, and #square?)\n  # You may not use any of the built-in methods available for calculating the determinant of a matrix in Ruby (including #determinant)\n  # You may not use any of the built-in methods available for calculating the inverse of a matrix in Ruby (including #inverse)\n  # You may not use any of the built-in methods available for calculating the transpose of a matrix in Ruby (including #transpose)\n  # You may not use any of the built-in methods available for calculating the trace of a matrix in Ruby (including #trace)\n  # You may not use any of the built-in methods available for calculating the rank of a matrix in Ruby (including #rank)\n  # You may not use any of the built-in methods available for calculating the eigenvalues of a matrix in Ruby (including #eigenvalues)\n  # You may not use any of the built-in methods available for calculating the eigenvectors of a matrix in Ruby (including #eigenvectors)\n  # You may not use any of the built-in methods available for calculating the singular value decomposition of a matrix in Ruby (including #svd)\n  # You may not use any of the built-in methods available for calculating the LU decomposition of a matrix in Ruby (including #lu)\n  # You may not use any of the built-in methods available for calculating the QR decomposition of a matrix in Ruby (including #qr)\n  # You may not use any of the built-in methods available for calculating the Cholesky decomposition of a matrix in Ruby (including #cholesky)\n  # You may not use any of the built-in methods available for calculating the Schur decomposition of a matrix in Ruby (including",
    "  # Check if the matrix is a square matrix\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # Check if the matrix is a magic square\n  if my_matrix.length == 2\n    if my_matrix[0][0] + my_matrix[0][1] == my_matrix[1][0] + my_matrix[1][1] &&\n       my_matrix[0][0] + my_matrix[1][0] == my_matrix[0][1] + my_matrix[1][1]\n      return true\n    else\n      return false\n    end\n  else\n    if my_matrix[0][0] + my_matrix[0][1] + my_matrix[0][2] == my_matrix[1][0] + my_matrix[1][1] + my_matrix[1][2] &&\n       my_matrix[0][0] + my_matrix[0][1] + my_matrix[0][2] == my_matrix[2][0] + my_matrix[2][1] + my_matrix[2][2] &&\n       my_matrix[0][0] + my_matrix[1][0] + my_matrix[2][0] == my_matrix[0][1] + my_matrix[1][1] + my_matrix[2][1] &&\n       my_matrix[0][0] + my_matrix[1][0] + my_matrix[2][0] == my_matrix[0][2] + my_matrix[1][2] + my_matrix[2][2] &&\n       my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] == my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]\n      return true\n    else\n      return false\n    end\n  end\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, every column, and both diagonals is the same.\n  # (More info: https://en.wikipedia.org/wiki/Magic_square)\n  # Example:\n  # [8, 1, 6]\n  # [3, 5, 7]\n  # [4, 9, 2]\n  # is a magic square because:\n  # 8 + 1 + 6 = 15\n  # 3 + 5 + 7 = 15\n  # 4 + 9 + 2 = 15\n  # 8 + 3 + 4 = 15\n  # 1 + 5 + 9 = 15\n  # 6 + 7 + 2 = 15\n  # 8 + 5 + 2 = 15\n  # 6 + 5 + 4 = 15\n  # (8 + 1 + 6) + (3 + 5 + 7) + (4 + 9 + 2) = 45\n  # (8 + 3 + 4) + (1 + 5 + 9) + (6 + 7 + 2) = 45\n  # (8 + 5 + 2) + (6 + 5 + 4) = 45\n  # (8 + 1 + 6) + (3 + 5 + 7) + (4 + 9 + 2) + (8 + 3 + 4) + (1 + 5 + 9) + (6 + 7 + 2) + (8 + 5 + 2) + (6 + 5 + 4) = 360\n  # (8 + 1 + 6) + (3 + 5 + 7) + (4 + 9 + 2) + (8 + 3 + 4) + (1 + 5 + 9) + (6 + 7 + 2) + (8 + 5 + 2) + (6 + 5 + 4) = (8 + 3 + 4) + (1 + 5 + 9) + (6 + 7 + 2) + (8 + 5 + 2) + (6 + 5 + 4)\n  # (8 + 1 + 6) + (3 + 5 + 7) + (4 + 9 + 2) + (8 + 3 + 4) + (1 + 5 + 9) + (6 + 7 + 2) + (8 + 5 + 2) + (6 + 5 + 4) =",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix of size n x n, where all the numbers from 1 to n^2 are represented.\n  # The sum of the lines, columns and diagonals are equal.\n  # Example of a magic square:\n  #  1  2  3\n  #  4  5  6\n  #  7  8  9\n  #\n  #  1 + 2 + 3 = 6 = 4 + 5 + 6 = 7 + 8 + 9\n  #  1 + 4 + 7 = 12 = 2 + 5 + 8 = 3 + 6 + 9\n  #  1 + 5 + 9 = 15 = 3 + 5 + 7 = 7 + 5 + 3\n  #\n  # Hint: use the `sum` method for arrays.\n  # Example: [1, 2, 3].sum returns 6.\n  # Example of a non-magic square:\n  #  1  2  3\n  #  4  5  6\n  #  7  8  9\n  #\n  #  1 + 2 + 3 = 6 = 4 + 5 + 6 = 7 + 8 + 9\n  #  1 + 4 + 7 = 12 = 2 + 5 + 8 = 3 + 6 + 9\n  #  1 + 5 + 9 = 15 = 3 + 5 + 7 = 7 + 5 + 3\n  #\n  # Hint: use the `sum` method for arrays.\n  # Example: [1, 2, 3].sum returns 6.\n  # Example of a non-magic square:\n  #  1  2  3\n  #  4  5  6\n  #  7  8  9\n  #\n  #  1 + 2 + 3 = 6 = 4 + 5 + 6 = 7 + 8 + 9\n  #  1 + 4 + 7 = 12 = 2 + 5 + 8 = 3 + 6 + 9\n  #  1 + 5 + 9 = 15 = 3 + 5 + 7 = 7 + 5 + 3\n  #\n  # Hint: use the `sum` method for arrays.\n  # Example: [1, 2, 3].sum returns 6.\n  # Example of a non-magic square:\n  #  1",
    "  # check if the matrix is a square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # calculate the sum of the first row\n  sum = 0\n  for i in 0..2\n    sum += my_matrix[0][i]\n  end\n  # check the sum of each row\n  for i in 0..2\n    row_sum = 0\n    for j in 0..2\n      row_sum += my_matrix[i][j]\n    end\n    if row_sum != sum\n      return false\n    end\n  end\n  # check the sum of each column\n  for i in 0..2\n    col_sum = 0\n    for j in 0..2\n      col_sum += my_matrix[j][i]\n    end\n    if col_sum != sum\n      return false\n    end\n  end\n  # check the sum of each diagonal\n  diag_sum = 0\n  for i in 0..2\n    diag_sum += my_matrix[i][i]\n  end\n  if diag_sum != sum\n    return false\n  end\n  diag_sum = 0\n  for i in 0..2\n    diag_sum += my_matrix[i][2-i]\n  end\n  if diag_sum != sum\n    return false\n  end\n  # if it passes all the tests, it's a magic square\n  return true\nend",
    "  # Get the size of the matrix\n  size = my_matrix.length\n  # Get the sum of the first row\n  sum = my_matrix[0].reduce(:+)\n  # Check if the sum of the first row is equal to the sum of the other rows\n  for i in 1..size-1\n    if my_matrix[i].reduce(:+) != sum\n      return false\n    end\n  end\n  # Check if the sum of the first column is equal to the sum of the other columns\n  for i in 0..size-1\n    if my_matrix.transpose[i].reduce(:+) != sum\n      return false\n    end\n  end\n  # Check if the sum of the first diagonal is equal to the sum of the other diagonal\n  sum_diag_1 = 0\n  sum_diag_2 = 0\n  for i in 0..size-1\n    sum_diag_1 += my_matrix[i][i]\n    sum_diag_2 += my_matrix[i][size-1-i]\n  end\n  if sum_diag_1 != sum || sum_diag_2 != sum\n    return false\n  end\n  # If all tests passed, return true\n  return true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal are all equal.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions in Ruby.\n  # You may not use any arithmetic operators (+, -, *, /, **, %, etc.).\n  # You may not use any of the built-in methods for arrays or numbers in Ruby.\n  # You may not use any of the built-in methods for strings in Ruby.\n  # You may not use any of the built-in methods for hashes in Ruby.\n  # You may not use any of the built-in methods for ranges in Ruby.\n  # You may not use any of the built-in methods for sets in Ruby.\n  # You may not use any of the built-in methods for booleans in Ruby.\n  # You may not use any of the built-in methods for symbols in Ruby.\n  # You may not use any of the built-in methods for regular expressions in Ruby.\n  # You may not use any of the built-in methods for exceptions in Ruby.\n  # You may not use any of the built-in methods for modules in Ruby.\n  # You may not use any of the built-in methods for classes in Ruby.\n  # You may not use any of the built-in methods for objects in Ruby.\n  # You may not use any of the built-in methods for threads in Ruby.\n  # You may not use any of the built-in methods for processes in Ruby.\n  # You may not use any of the built-in methods for files in Ruby.\n  # You may not use any of the built-in methods for directories in Ruby.\n  # You may not use any of the built-in methods for sockets in Ruby.\n  # You may not use any of the built-in methods for time in Ruby.\n  # You may not use any of the built-in methods for dates in Ruby.\n  # You may not use any of the built-in methods for random numbers in Ruby.\n  # You may not use any of the built-in methods for math in Ruby.\n  # You may not use",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  sum = 0\n  sum_array = []\n  my_matrix.each do |row|\n    sum = 0\n    row.each do |element|\n      sum += element\n    end\n    sum_array << sum\n  end\n  sum_array.uniq.length == 1 ? true : false\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix of numbers where the sum of each row,\n  # column, and diagonal are equal.\n  #\n  # For example:\n  # [8, 1, 6]\n  # [3, 5, 7]\n  # [4, 9, 2]\n  #\n  # is a magic square because:\n  # 8 + 1 + 6 = 15\n  # 3 + 5 + 7 = 15\n  # 4 + 9 + 2 = 15\n  #\n  # 8 + 3 + 4 = 15\n  # 1 + 5 + 9 = 15\n  # 6 + 7 + 2 = 15\n  #\n  # 8 + 5 + 2 = 15\n  # 6 + 5 + 4 = 15\n  #\n  # The sum of each row, column, and diagonal is 15.\n  #\n  # Note:\n  # - The matrix can be any size.\n  # - The matrix can contain any numbers.\n  # - The matrix can be a jagged array (i.e. not a perfect square).\n  # - The matrix can be empty.\n  # - The matrix can be nil.\n  # - The matrix can contain nil values.\n  # - The matrix can contain non-integer values.\n  # - The matrix can contain non-numeric values.\n  # - The matrix can contain duplicate values.\n  # - The matrix can contain negative values.\n  # - The matrix can contain zero.\n  # - The matrix can contain floating point values.\n  # - The matrix can contain strings.\n  # - The matrix can contain booleans.\n  # - The matrix can contain arrays.\n  # - The matrix can contain hashes.\n  # - The matrix can contain objects.\n  # - The matrix can contain anything.\n  #\n  # Examples:\n  # magic_square_test([[8, 1, 6], [3, 5, 7], [4, 9, 2]]) # => true\n  # magic_square_test([[8, 1, 6], [3, 5, 7], [4, 9, 2], [1, 2, 3]]) # => false\n  # magic_square_test",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal is the same.\n  # (More info: https://en.wikipedia.org/wiki/Magic_square)\n  # Hint: you may want to use the `rows`, `cols` and `diagonals` functions you wrote earlier.\n  # Hint: you may want to use the `sum` function you wrote earlier.\n  # Hint: you may want to use the `all?` function.\n  # Hint: you may want to use the `==` operator.\n  # Hint: you may want to use the `uniq` function.\n  # Hint: you may want to use the `flatten` function.\n  # Hint: you may want to use the `reduce` function.\n  # Hint: you may want to use the `inject` function.\n  # Hint: you may want to use the `sum` function.\n  # Hint: you may want to use the `==` operator.\n  # Hint: you may want to use the `all?` function.\n  # Hint: you may want to use the `uniq` function.\n  # Hint: you may want to use the `flatten` function.\n  # Hint: you may want to use the `reduce` function.\n  # Hint: you may want to use the `inject` function.\n  # Hint: you may want to use the `sum` function.\n  # Hint: you may want to use the `==` operator.\n  # Hint: you may want to use the `all?` function.\n  # Hint: you may want to use the `uniq` function.\n  # Hint: you may want to use the `flatten` function.\n  # Hint: you may want to use the `reduce` function.\n  # Hint: you may want to use the `inject` function.\n  # Hint: you may want to use the `sum` function.\n  # Hint: you may want to use the `==` operator.\n  # Hint: you",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix of size n x n, filled with distinct positive integers in the range 1, 2, ..., n^2.\n  # The sum of the n numbers in any horizontal, vertical, or main diagonal line must be the same.\n  # The sum of each row and column must be the same.\n  # The sum of each diagonal must be the same.\n  # The sum of each row and column must be the same.\n  # The sum of each diagonal must be the same.\n  # The sum of each row and column must be the same.\n  # The sum of each diagonal must be the same.\n  # The sum of each row and column must be the same.\n  # The sum of each diagonal must be the same.\n  # The sum of each row and column must be the same.\n  # The sum of each diagonal must be the same.\n  # The sum of each row and column must be the same.\n  # The sum of each diagonal must be the same.\n  # The sum of each row and column must be the same.\n  # The sum of each diagonal must be the same.\n  # The sum of each row and column must be the same.\n  # The sum of each diagonal must be the same.\n  # The sum of each row and column must be the same.\n  # The sum of each diagonal must be the same.\n  # The sum of each row and column must be the same.\n  # The sum of each diagonal must be the same.\n  # The sum of each row and column must be the same.\n  # The sum of each diagonal must be the same.\n  # The sum of each row and column must be the same.\n  # The sum of each diagonal must be the same.\n  # The sum of each row and column must be the same.\n  # The sum of each diagonal must be the same.\n  # The sum of each row and column must be the same.\n  # The sum of each diagonal must be the same.\n  # The sum of each row and column must be the same.\n  # The sum of each diagonal must be the same.\n  # The sum of each row and column must be the same",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (Magic squares have appeared here and there in recreational mathematics.)\n  # Example:\n  #   [8, 1, 6]\n  #   [3, 5, 7]\n  #   [4, 9, 2]\n  # is a magic square.\n  #\n  # Hint: use a helper function to calculate the sum of each row/column/diagonal.\n  # Hint: you can use Array#transpose to get the columns of a matrix.\n  # Hint: use Enumerable#all? to test whether all elements in an array are equal.\n  # Hint: use Enumerable#map to apply a function to each element in an array.\n  # Hint: use Enumerable#reduce to calculate the sum of an array.\n  # Hint: use Enumerable#zip to combine two arrays.\n  # Hint: use Array#flatten to flatten an array of arrays.\n  # Hint: use Array#uniq to remove duplicates from an array.\n  # Hint: use Array#sort to sort an array.\n  # Hint: use Array#permutation to generate all permutations of an array.\n  # Hint: use Array#include? to test whether an array contains an element.\n  # Hint: use Enumerable#any? to test whether any element in an array satisfies a condition.\n  # Hint: use Enumerable#count to count the number of elements in an array.\n  # Hint: use Enumerable#cycle to repeat an array infinitely.\n  # Hint: use Enumerable#take to take the first n elements of an array.\n  # Hint: use Enumerable#drop to drop the first n elements of an array.\n  # Hint: use Enumerable#each_cons to iterate over consecutive elements of an array.\n  # Hint: use Enumerable#each_slice to iterate over slices of an array.\n  # Hint: use Enumerable#each_with_index to iterate over an array with an index.\n  # Hint: use Enumerable#",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix (where the number of rows and columns are equal)\n  # where the sum of each row, column and diagonal are equal.\n  # Diagonal: top left to bottom right\n  # Diagonal: top right to bottom left\n  # (More info: https://en.wikipedia.org/wiki/Magic_square)\n  # Hint: you may want to use the `rows`, `columns` and `diagonals` functions you wrote earlier.\n  # Hint: you may want to use the `sum` function you wrote earlier.\n  # Hint: you may want to use the `all_equal?` function you wrote earlier.\n  # Hint: you may want to use the `matrix_size` function you wrote earlier.\n  # Hint: you may want to use the `is_square?` function you wrote earlier.\n  # Hint: you may want to use the `diagonal_indices` function you wrote earlier.\n  # Hint: you may want to use the `reverse_diagonal_indices` function you wrote earlier.\n  # Hint: you may want to use the `reverse` function you wrote earlier.\n  # Hint: you may want to use the `transpose` function you wrote earlier.\n  # Hint: you may want to use the `map` function you wrote earlier.\n  # Hint: you may want to use the `zip` function you wrote earlier.\n  # Hint: you may want to use the `flatten` function you wrote earlier.\n  # Hint: you may want to use the `product` function you wrote earlier.\n  # Hint: you may want to use the `sum` function you wrote earlier.\n  # Hint: you may want to use the `all_equal?` function you wrote earlier.\n  # Hint: you may want to use the `all?` function you wrote earlier.\n  # Hint: you may want to use the `any?` function you wrote earlier.\n  # Hint: you may want to use the `none?` function you wrote earlier.\n  # Hint: you may want to use the `count`",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sums of the rows, columns, and diagonals are all equal.\n  # (A square matrix is a matrix in which the number of rows is equal to the number of columns)\n  #\n  # Example:\n  # [4, 9, 2]\n  # [3, 5, 7]\n  # [8, 1, 6]\n  #\n  # In the above matrix, each row, column, and diagonal add up to the same number: 15.\n  # (4 + 9 + 2) == (3 + 5 + 7) == (8 + 1 + 6) == (4 + 5 + 6) == (2 + 5 + 8) == (9 + 5 + 1) == 15\n  #\n  # More info: https://en.wikipedia.org/wiki/Magic_square\n  #\n  # Hint: You may need to use the `transpose` method.\n  # More info: https://ruby-doc.org/core-2.2.0/Array.html#method-i-transpose\n  #\n  # Hint: You may need to use the `%` modulo operator.\n  # More info: https://ruby-doc.org/core-2.2.0/doc/syntax/operators_rdoc.html#label-Modulo+%25\n  #\n  # Hint: You may need to use the `each_with_index` method.\n  # More info: https://ruby-doc.org/core-2.2.0/Enumerable.html#method-i-each_with_index\n  #\n  # Hint: You may need to use the `all?` method.\n  # More info: https://ruby-doc.org/core-2.2.0/Enumerable.html#method-i-all-3F\n  #\n  # Hint: You may need to use the `sum` method.\n  # More info: https://ruby-doc.org/core-2.2.0/Enumerable.html#method-i-sum\n  #\n  # Hint: You may need to use the `",
    "  # Calculate the sum of each row\n  row_sums = []\n  my_matrix.each do |row|\n    row_sums << row.reduce(:+)\n  end\n  # Calculate the sum of each column\n  column_sums = []\n  my_matrix.transpose.each do |column|\n    column_sums << column.reduce(:+)\n  end\n  # Calculate the sum of each diagonal\n  diagonal_sums = []\n  (0..my_matrix.length-1).each do |i|\n    diagonal_sums << my_matrix[i][i]\n  end\n  (0..my_matrix.length-1).each do |i|\n    diagonal_sums << my_matrix[i][my_matrix.length-1-i]\n  end\n  # Check if all sums are equal\n  if row_sums.uniq.length == 1 && column_sums.uniq.length == 1 && diagonal_sums.uniq.length == 1\n    return true\n  else\n    return false\n  end\nend",
    "  # check if the matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # check if the matrix is a magic square\n  # check if the sum of each row is equal\n  # check if the sum of each column is equal\n  # check if the sum of each diagonal is equal\n  # check if the sum of each reverse diagonal is equal\n  # return true if all the above conditions are met\n  # return false if any of the above conditions are not met\n  return false\nend",
    "  # check if the matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in methods available for solving systems of linear equations in Ruby (including `det`, `lup`, `qr`, etc.).\n  # Your method should run in linear time, O(n).\n  # HINT: You may find some useful methods here: http://www.ruby-doc.org/core-2.2.0/Array.html\n  # Example:\n  #     magic_square_test([[1,2,3],\n  #                        [4,5,6],\n  #                        [7,8,9]]) # => false\n  #     magic_square_test([[4,9,2],\n  #                        [3,5,7],\n  #                        [8,1,6]]) # => true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sums of the rows, columns, and diagonals are all equal.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions such as those found here:\n  # http://www.ruby-doc.org/stdlib-2.1.2/libdoc/matrix/rdoc/Matrix.html\n  # Examples:\n  # [8, 1, 6, 3, 5, 7, 4, 9, 2] is a magic square.\n  # [2, 7, 6, 9, 5, 1, 4, 3, 8] is a magic square.\n  # [3, 5, 7, 8, 1, 6, 4, 9, 2] is not a magic square.\n  # [8, 1, 6, 7, 5, 3, 4, 9, 2] is not a magic square.\n  # Your function should return true or false.\n  # Your solution should contain exactly three lines.\n  # Hint: The function first_diagonal_sum may be helpful.\n  first_diagonal_sum(my_matrix) == second_diagonal_sum(my_matrix) && first_diagonal_sum(my_matrix) == row_sum(my_matrix) && first_diagonal_sum(my_matrix) == column_sum(my_matrix)\nend",
    "  # TODO\nend",
    "  # Write your code here\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a matrix where the sums of each row, column and diagonal are equal.\n  # You may assume that the matrix is square (i.e. the number of rows is equal to the number of columns)\n  # You may assume that all elements are positive integers\n  # You may NOT use any of the built-in methods for matrix or array manipulation\n  # Hint: you may want to use the transpose method from the previous exercise\n  # Hint: you may want to use the sum method from the previous exercise\n  # Hint: you may want to use the diagonal method from the previous exercise\n  # Hint: you may want to use the is_square? method from the previous exercise\n  # Hint: you may want to use the is_symmetric? method from the previous exercise\n  # Hint: you may want to use the is_identity? method from the previous exercise\n  # Hint: you may want to use the is_upper_triangular? method from the previous exercise\n  # Hint: you may want to use the is_lower_triangular? method from the previous exercise\n  # Hint: you may want to use the is_diagonal? method from the previous exercise\n  # Hint: you may want to use the is_zero? method from the previous exercise\n  # Hint: you may want to use the is_scalar? method from the previous exercise\n  # Hint: you may want to use the is_orthogonal? method from the previous exercise\n  # Hint: you may want to use the is_skew_symmetric? method from the previous exercise\n  # Hint: you may want to use the is_normal? method from the previous exercise\n  # Hint: you may want to use the is_unitary? method from the previous exercise\n  # Hint: you may want to use the is_hermitian? method from the previous exercise\n  # Hint: you may want to use the is_positive_definite? method from the previous exercise\n  # Hint: you may want to use the is_negative_definite? method from the previous exercise\n  # Hint: you may want to use the",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row,\n  # column and diagonal is the same.\n  # (More info: https://en.wikipedia.org/wiki/Magic_square)\n  #\n  # Example:\n  # [8, 1, 6]\n  # [3, 5, 7]\n  # [4, 9, 2]\n  #\n  # This matrix is magic because every row, column and diagonal\n  # sums up to 15.\n  #\n  # Hint: You can use the `sum` method on arrays.\n  # Example: [1, 2, 3].sum == 6\n  #\n  # Hint: You can use the `all?` method on arrays to check if all\n  # elements in the array are the same.\n  # Example: [1, 1, 1].all? == true\n  #\n  # Hint: You can use the `transpose` method on matrices to get the\n  # columns of the matrix.\n  # Example: [[1, 2, 3], [4, 5, 6]].transpose == [[1, 4], [2, 5], [3, 6]]\n  #\n  # Hint: You can use the `diagonal` method on matrices to get the\n  # diagonal of the matrix.\n  # Example: [[1, 2, 3], [4, 5, 6]].diagonal == [1, 5]\n  #\n  # Hint: You can use the `reverse_diagonal` method on matrices to get the\n  # reverse diagonal of the matrix.\n  # Example: [[1, 2, 3], [4, 5, 6]].reverse_diagonal == [3, 5]\n  #\n  # Hint: You can use the `flatten` method on matrices to turn it into\n  # a one-dimensional array.\n  # Example: [[1, 2, 3], [4, 5, 6]].flatten == [1, 2, 3, 4, 5, 6]\n  #\n  # Hint: You can use the `uniq` method on arrays to remove duplicates.\n  # Example:",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  if my_matrix.length == 0\n    return false\n  end\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  if my_matrix.length.odd?\n    return false\n  end\n  sum = 0\n  my_matrix.each do |row|\n    sum += row[0]\n  end\n  my_matrix.each do |row|\n    sum_row = 0\n    row.each do |element|\n      sum_row += element\n    end\n    if sum_row != sum\n      return false\n    end\n  end\n  my_matrix.transpose.each do |row|\n    sum_row = 0\n    row.each do |element|\n      sum_row += element\n    end\n    if sum_row != sum\n      return false\n    end\n  end\n  sum_diag = 0\n  my_matrix.each_with_index do |row, index|\n    sum_diag += row[index]\n  end\n  if sum_diag != sum\n    return false\n  end\n  sum_diag = 0\n  my_matrix.each_with_index do |row, index|\n    sum_diag += row[my_matrix.length - index - 1]\n  end\n  if sum_diag != sum\n    return false\n  end\n  return true\nend",
    "  # check if the matrix is a square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal are equal.\n  # (More info: https://en.wikipedia.org/wiki/Magic_square)\n  # Hint: use the `rows`, `columns`, and `diagonals` functions you wrote earlier.\n  rows = my_matrix.rows\n  columns = my_matrix.columns\n  diagonals = my_matrix.diagonals",
    "  # get the sum of the first row\n  sum = 0\n  my_matrix[0].each do |num|\n    sum += num\n  end\n  # check if all rows have the same sum\n  my_matrix.each do |row|\n    row_sum = 0\n    row.each do |num|\n      row_sum += num\n    end\n    if row_sum != sum\n      return false\n    end\n  end\n  # check if all columns have the same sum\n  (0...my_matrix.length).each do |col_index|\n    col_sum = 0\n    my_matrix.each do |row|\n      col_sum += row[col_index]\n    end\n    if col_sum != sum\n      return false\n    end\n  end\n  # check if the diagonals have the same sum\n  diag_sum = 0\n  (0...my_matrix.length).each do |index|\n    diag_sum += my_matrix[index][index]\n  end\n  if diag_sum != sum\n    return false\n  end\n  diag_sum = 0\n  (0...my_matrix.length).each do |index|\n    diag_sum += my_matrix[index][my_matrix.length - index - 1]\n  end\n  if diag_sum != sum\n    return false\n  end\n  return true\nend",
    "  # TODO: Return whether the matrix is a magic square or not\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (Magic square Wikipedia page, https://en.wikipedia.org/wiki/Magic_square)\n  # Example:\n  # matrix = [[8, 1, 6],\n  #           [3, 5, 7],\n  #           [4, 9, 2]]\n  # magic_square_test(matrix) => true\n  #\n  # matrix = [[1, 2, 3],\n  #           [4, 5, 6],\n  #           [7, 8, 9]]\n  # magic_square_test(matrix) => false\n  #\n  # matrix = [[1, 2, 3],\n  #           [2, 3, 1],\n  #           [3, 1, 2]]\n  # magic_square_test(matrix) => false\n  #\n  # matrix = [[1, 2, 3],\n  #           [2, 3, 1],\n  #           [3, 1, 2]]\n  # magic_square_test(matrix) => false\n  #\n  # matrix = [[1, 2, 3],\n  #           [2, 3, 1],\n  #           [3, 1, 2]]\n  # magic_square_test(matrix) => false\n  #\n  # matrix = [[1, 2, 3],\n  #           [2, 3, 1],\n  #           [3, 1, 2]]\n  # magic_square_test(matrix) => false\n  #\n  # matrix = [[1, 2, 3],\n  #           [2, 3, 1],\n  #           [3, 1, 2]]\n  # magic_square_test(matrix) => false\n  #\n  # matrix = [[1, 2, 3],\n  #           [2, 3, 1],\n  #           [3, 1, 2]]\n  # magic_square_test(matrix) => false\n  #\n  # matrix = [[1, 2, 3],\n  #           [2, 3, 1],\n  #           [3, 1, 2]]",
    "  # Check if the matrix is a square matrix.\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # Check if the matrix is a square matrix\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: Return whether the matrix is a magic square or not\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # For example, this is a magic square:\n  # [[8, 1, 6],\n  #  [3, 5, 7],\n  #  [4, 9, 2]]\n  # This is not:\n  # [[1, 2, 3],\n  #  [4, 5, 6],\n  #  [7, 8, 9]]\n  # Hint: You can first transpose the matrix, then take the sum of each row.\n  # Then transpose the matrix again and take the sum of each row.\n  # Then take the sum of each diagonal.\n  # If all of these sums are the same, then it is a magic square.\n  # If any of these sums are not the same, then it is not a magic square.\n  # You can use the transpose method from the previous exercise.\n  # You can use the sum method from the previous exercise.\n  # You can use the diagonal_sum method from the previous exercise.\n  # You can use the square_matrix? method from the previous exercise.\n  # You can use the equal_to_the_sum_of_other_rows? method from the previous exercise.\n  # You can use the equal_to_the_sum_of_other_rows? method from the previous exercise.\n  # You can use the equal_to_the_sum_of_other_rows? method from the previous exercise.\n  # You can use the equal_to_the_sum_of_other_rows? method from the previous exercise.\n  # You can use the equal_to_the_sum_of_other_rows? method from the previous exercise.\n  # You can use the equal_to_the_sum_of_other_rows? method from the previous exercise.\n  # You can use the equal_to_the_sum_of_other_rows? method from the previous exercise.\n  # You can use the equal_to_the_sum_of_other_rows? method from the previous exercise.\n  # You can use the equal_to_the_sum_of_other",
    "  # Check that the matrix is square.\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # Check that the matrix is filled with integers.\n  my_matrix.each do |row|\n    row.each do |element|\n      if !element.is_a? Integer\n        return false\n      end\n    end\n  end\n  # Check that the matrix has an odd number of rows and columns.\n  if my_matrix.length % 2 == 0\n    return false\n  end\n  # Check that the sum of each row is the same.\n  sum = 0\n  my_matrix[0].each do |element|\n    sum += element\n  end\n  my_matrix.each do |row|\n    row_sum = 0\n    row.each do |element|\n      row_sum += element\n    end\n    if row_sum != sum\n      return false\n    end\n  end\n  # Check that the sum of each column is the same.\n  my_matrix.each_with_index do |row, row_index|\n    column_sum = 0\n    my_matrix.each do |row|\n      column_sum += row[row_index]\n    end\n    if column_sum != sum\n      return false\n    end\n  end\n  # Check that the sum of each diagonal is the same.\n  diagonal_sum = 0\n  my_matrix.each_with_index do |row, row_index|\n    diagonal_sum += row[row_index]\n  end\n  if diagonal_sum != sum\n    return false\n  end\n  diagonal_sum = 0\n  my_matrix.each_with_index do |row, row_index|\n    diagonal_sum += row[my_matrix.length - row_index - 1]\n  end\n  if diagonal_sum != sum\n    return false\n  end\n  # If all tests pass, return true.\n  return true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any built-in methods for determining whether a matrix is a magic square.\n  # You may not use any built-in methods for calculating the sum of a row, column, or diagonal.\n  # You may not use any built-in methods for finding the length of a row, column, or diagonal.\n  # You may not use any built-in methods for finding the size of the matrix.\n  # You may not use any built-in methods for finding the number of rows, columns, or diagonals.\n  # You may not use any built-in methods for finding the sum of a row, column, or diagonal.\n  # You may not use any built-in methods for finding the length of a row, column, or diagonal.\n  # You may not use any built-in methods for finding the size of the matrix.\n  # You may not use any built-in methods for finding the number of rows, columns, or diagonals.\n  # You may not use any built-in methods for finding the sum of a row, column, or diagonal.\n  # You may not use any built-in methods for finding the length of a row, column, or diagonal.\n  # You may not use any built-in methods for finding the size of the matrix.\n  # You may not use any built-in methods for finding the number of rows, columns, or diagonals.\n  # You may not use any built-in methods for finding the sum of a row, column, or diagonal.\n  # You may not use any built-in methods for finding the length of a row, column, or diagonal.\n  # You may not use any built-in methods for finding the size of the matrix.\n  # You may not use any built-in methods for finding the number of rows, columns, or diagonals.\n  # You may not use any built-in methods for finding the sum of a row, column, or diagonal.\n  # You may not",
    "  # Calculate the sum of the first row.\n  sum = 0\n  my_matrix[0].each do |element|\n    sum += element\n  end\n  # Check that all rows have the same sum.\n  my_matrix.each do |row|\n    row_sum = 0\n    row.each do |element|\n      row_sum += element\n    end\n    if row_sum != sum\n      return false\n    end\n  end\n  # Check that all columns have the same sum.\n  for i in 0..my_matrix.length-1\n    column_sum = 0\n    for j in 0..my_matrix.length-1\n      column_sum += my_matrix[j][i]\n    end\n    if column_sum != sum\n      return false\n    end\n  end\n  # Check that the diagonals have the same sum.\n  diagonal_sum = 0\n  for i in 0..my_matrix.length-1\n    diagonal_sum += my_matrix[i][i]\n  end\n  if diagonal_sum != sum\n    return false\n  end\n  diagonal_sum = 0\n  for i in 0..my_matrix.length-1\n    diagonal_sum += my_matrix[i][my_matrix.length-1-i]\n  end\n  if diagonal_sum != sum\n    return false\n  end\n  # If we get this far, the matrix is a magic square.\n  return true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal are equal.\n  # (More info: https://en.wikipedia.org/wiki/Magic_square)\n  sum = 0\n  my_matrix.each do |row|\n    sum += row.reduce(:+)\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # Note: you can use `sum` here to calculate the sum of each row/column/diagonal.\n  # Note: you can use `all?` to check if all elements are the same.\n  # Note: you can use `any?` to check if any element is true.\n  # Note: you can use `transpose` to transpose a matrix.\n  # Note: you can use `map` to apply a function to each element of a matrix.\n  # Note: you can use `flatten` to flatten a matrix.\n  # Note: you can use `uniq` to remove duplicates from an array.\n  # Note: you can use `include?` to check if an array contains a value.\n  # Note: you can use `max` to get the maximum value of an array.\n  # Note: you can use `min` to get the minimum value of an array.\n  # Note: you can use `sort` to sort an array.\n  # Note: you can use `zip` to zip two arrays together.\n  # Note: you can use `product` to get the cartesian product of two arrays.\n  # Note: you can use `count` to count the number of elements in an array.\n  # Note: you can use `each_with_index` to iterate over an array with an index.\n  # Note: you can use `each_with_object` to iterate over an array with an object.\n  # Note: you can use `each_cons` to iterate over an array in chunks of n elements.\n  # Note: you can use `each_slice` to iterate over an array in chunks of n elements.\n  # Note: you can use `cycle` to iterate over an array infinitely.\n  # Note: you can use `partition` to partition an array into two arrays.\n  # Note: you can use `group_by` to group an array by a value.\n  # Note: you can use `each_entry` to iterate over a multi-dimensional array.\n  # Note: you can use `each_slice` to iterate over a multi-dimensional array.\n  # Note: you",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal are equal.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining the sum of an array.\n  # You may not use any built-in methods for determining the sum of a row, column, or diagonal.\n  # You may not use any built-in methods for determining the length of an array.\n  # You may not use any built-in methods for determining the length of a row, column, or diagonal.\n  # You may not use any built-in methods for determining the size of a matrix.\n  # You may not use any built-in methods for determining the size of a row, column, or diagonal.\n  # You may not use any built-in methods for determining the type of an object.\n  # You may not use any built-in methods for determining the type of an element.\n  # You may not use any built-in methods for determining the type of a row, column, or diagonal.\n  # You may not use any built-in methods for determining the type of a matrix.\n  # You may not use any built-in methods for determining the type of a matrix element.\n  # You may not use any built-in methods for determining the type of a matrix row, column, or diagonal.\n  # You may not use any built-in methods for determining the type of a matrix row, column, or diagonal element.\n  # You may not use any built-in methods for determining the type of a matrix row, column, or diagonal element.\n  # You may not use any built-in methods for determining the type of a matrix row, column, or diagonal element.\n  # You may not use any built-in methods for determining the type of a matrix row, column, or diagonal element.\n  # You may not use any built-in methods for determining the type of a matrix row, column, or diagonal element.\n  # You may not use any built-in methods for determining the type of a matrix row,",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # Note: you may need to use a single line of code for this!\n  my_matrix.flatten.inject(:+) == 45\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  sum_array = []\n  sum_array << my_matrix.map { |row| row.reduce(:+) }\n  sum_array << my_matrix.transpose.map { |row| row.reduce(:+) }\n  sum_array << my_matrix.map.with_index { |row, i| row[i] }.reduce(:+)\n  sum_array << my_matrix.map.with_index { |row, i| row[-i - 1] }.reduce(:+)\n  sum_array.uniq.count == 1\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  sum_row = 0\n  sum_col = 0\n  sum_diag = 0\n  sum_diag2 = 0\n  for i in 0..2\n    for j in 0..2\n      sum_row += my_matrix[i][j]\n      sum_col += my_matrix[j][i]\n    end\n    sum_diag += my_matrix[i][i]\n    sum_diag2 += my_matrix[i][2-i]\n  end\n  if sum_row == sum_col && sum_col == sum_diag && sum_diag == sum_diag2\n    return true\n  else\n    return false\n  end\nend",
    "  # check if the matrix is a square matrix\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # calculate the sum of each row\n  row_sum = my_matrix.map { |row| row.reduce(:+) }\n  # calculate the sum of each column\n  col_sum = my_matrix.transpose.map { |col| col.reduce(:+) }\n  # calculate the sum of the diagonals\n  diag_sum = [my_matrix.map.with_index { |row, i| row[i] }.reduce(:+),\n              my_matrix.map.with_index { |row, i| row[-i - 1] }.reduce(:+)]\n  # check if all sums are equal\n  row_sum.uniq.size == 1 && col_sum.uniq.size == 1 && diag_sum.uniq.size == 1\nend",
    "  # Check if the matrix is a square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal are equal.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining equality.\n  # You may not use",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row,\n  # every column, and both diagonals is the same.\n  # (From https://en.wikipedia.org/wiki/Magic_square)\n  # Example:\n  # 153\n  #  48\n  # 962\n  # is a magic square because:\n  # 15 + 3 + 9 = 12 + 5 + 2 = 9 + 6 + 1 = 15 + 4 + 8 =\n  # 1 + 5 + 9 = 3 + 5 + 2 = 9 + 6 + 1 = 1 + 8 + 6 =\n  # 1 + 5 + 3 = 9 + 5 + 6 = 1 + 2 + 9 = 3 + 4 + 8 = 15\n  # (1 + 5 + 9) == (3 + 5 + 2) == (9 + 6 + 1) == (1 + 8 + 6) == (1 + 5 + 3) == (9 + 5 + 6) == (1 + 2 + 9) == (3 + 4 + 8) == 15\n  # (15 + 3 + 9) == (12 + 5 + 2) == (9 + 6 + 1) == (15 + 4 + 8) == (1 + 5 + 9) == (3 + 5 + 2) == (9 + 6 + 1) == (1 + 8 + 6) == (1 + 5 + 3) == (9 + 5 + 6) == (1 + 2 + 9) == (3 + 4 + 8) == 15\n  # (15 + 3 + 9) == (12 + 5 + 2) == (9 + 6 + 1) == (15 + 4 + 8) == (1 + 5 + 9) == (3 + 5 + 2) == (9 + 6 + 1) == (1 + 8 + 6) == (1 + 5 + 3) == (9 + 5 + 6) == (1 + 2 + 9) == (3 + 4 + 8) == 15\n  # (15 + 3 + 9) == (12 + 5 + 2) == (9 + 6 + 1) == (15 + 4 + 8) == (1 + 5 + 9) == (3 + 5 + 2) == (9 + 6 + 1) == (1 +",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # The sum of every row and column is 15.\n  # The sum of every diagonal is also 15.\n  # The sum of every row and column is 15.\n  # The sum of every diagonal is also 15.\n  # The sum of every row and column is 15.\n  # The sum of every diagonal is also 15.\n  # The sum of every row and column is 15.\n  # The sum of every diagonal is also 15.\n  # The sum of every row and column is 15.\n  # The sum of every diagonal is also 15.\n  # The sum of every row and column is 15.\n  # The sum of every diagonal is also 15.\n  # The sum of every row and column is 15.\n  # The sum of every diagonal is also 15.\n  # The sum of every row and column is 15.\n  # The sum of every diagonal is also 15.\n  # The sum of every row and column is 15.\n  # The sum of every diagonal is also 15.\n  # The sum of every row and column is 15.\n  # The sum of every diagonal is also 15.\n  # The sum of every row and column is 15.\n  # The sum of every diagonal is also 15.\n  # The sum of every row and column is 15.\n  # The sum of every diagonal is also 15.\n  # The sum of every row and column is 15.\n  # The sum of every diagonal is also 15.\n  # The sum of every row and column is 15.\n  # The sum of every diagonal is also 15.\n  # The sum of every row and column is 15.\n  # The sum of every diagonal is also 15.\n  # The sum of every row and column is 15.\n  # The sum of every diagonal is also 15.\n  # The sum of every row and column is 15.\n  # The sum of every diagonal is also 15.\n  # The sum of every row and column is 15.\n  # The sum of every diagonal is also 15.\n  # The sum of every row and column is 15.\n  #",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any built-in methods for determining whether a matrix is a magic square.\n  # You may not use any built-in methods for calculating the sum of a row, column, or diagonal.\n  # You may not use any built-in methods for finding the length of a row, column, or diagonal.\n  # You may not use any built-in methods for finding the number of rows, columns, or diagonals.\n  # You may not use any built-in methods for finding the sum of a row, column, or diagonal.\n  # You may not use any built-in methods for finding the length of a row, column, or diagonal.\n  # You may not use any built-in methods for finding the number of rows, columns, or diagonals.\n  # You may not use any built-in methods for finding the sum of a row, column, or diagonal.\n  # You may not use any built-in methods for finding the length of a row, column, or diagonal.\n  # You may not use any built-in methods for finding the number of rows, columns, or diagonals.\n  # You may not use any built-in methods for finding the sum of a row, column, or diagonal.\n  # You may not use any built-in methods for finding the length of a row, column, or diagonal.\n  # You may not use any built-in methods for finding the number of rows, columns, or diagonals.\n  # You may not use any built-in methods for finding the sum of a row, column, or diagonal.\n  # You may not use any built-in methods for finding the length of a row, column, or diagonal.\n  # You may not use any built-in methods for finding the number of rows, columns, or diagonals.\n  # You may not use any built-in methods for finding the sum of a row, column, or diagonal.\n  # You may not use any built-",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  sum = 0\n  sum_row = 0\n  sum_column = 0\n  sum_diagonal = 0\n  sum_diagonal_2 = 0\n  my_matrix.each_with_index do |row, i|\n    row.each_with_index do |column, j|\n      sum += column\n      sum_row += my_matrix[i][j]\n      sum_column += my_matrix[j][i]\n      sum_diagonal += my_matrix[j][j]\n      sum_diagonal_2 += my_matrix[j][my_matrix.length - 1 - j]\n    end\n    return false if sum_row != sum\n    return false if sum_column != sum\n    sum_row = 0\n    sum_column = 0\n  end\n  return false if sum_diagonal != sum\n  return false if sum_diagonal_2 != sum\n  true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal are equal.\n  # (More info: https://en.wikipedia.org/wiki/Magic_square)\n  # Hint: you may want to use the `rows`, `columns` and `diagonals` functions you wrote earlier.\n  # Hint: you may want to use the `sum` function you wrote earlier.\n  # Hint: you may want to use the `all_equal?` function you wrote earlier.\n  # Hint: you may want to use the `map` function.\n  # Hint: you may want to use the `reduce` function.\n  # Hint: you may want to use the `zip` function.\n  # Hint: you may want to use the `flatten` function.\n  # Hint: you may want to use the `transpose` function.\n  # Hint: you may want to use the `reverse` function.\n  # Hint: you may want to use the `concat` function.\n  # Hint: you may want to use the `rotate` function.\n  # Hint: you may want to use the `uniq` function.\n  # Hint: you may want to use the `size` function.\n  # Hint: you may want to use the `==` operator.\n  # Hint: you may want to use the `[]` operator.\n  # Hint: you may want to use the `[]=` operator.\n  # Hint: you may want to use the `+` operator.\n  # Hint: you may want to use the `-` operator.\n  # Hint: you may want to use the `*` operator.\n  # Hint: you may want to use the `/` operator.\n  # Hint: you may want to use the `%` operator.\n  # Hint: you may want to use the `**` operator.\n  # Hint: you may want to use the `<` operator.\n  # Hint: you may want to use the `<=` operator.\n  # Hint: you may want",
    "  # TODO: return true if the matrix is a magic square, false otherwise.\n  # A magic square is a square matrix in which the sum of every row,\n  # column, and diagonal is the same.\n  # (Magic Square: https://en.wikipedia.org/wiki/Magic_square)\n  # (Examples of Magic Squares: http://mathworld.wolfram.com/MagicSquare.html)\n  # (More Examples of Magic Squares: https://en.wikipedia.org/wiki/Magic_square#3_%C3%97_3_magic_squares)\n  # (More Examples of Magic Squares: http://www.1728.org/magicsq1.htm)\n  # (More Examples of Magic Squares: http://www.1728.org/magicsq2.htm)\n  # (More Examples of Magic Squares: http://www.1728.org/magicsq3.htm)\n  # (More Examples of Magic Squares: http://www.1728.org/magicsq4.htm)\n  # (More Examples of Magic Squares: http://www.1728.org/magicsq5.htm)\n  # (More Examples of Magic Squares: http://www.1728.org/magicsq6.htm)\n  # (More Examples of Magic Squares: http://www.1728.org/magicsq7.htm)\n  # (More Examples of Magic Squares: http://www.1728.org/magicsq8.htm)\n  # (More Examples of Magic Squares: http://www.1728.org/magicsq9.htm)\n  # (More Examples of Magic Squares: http://www.1728.org/magicsq10.htm)\n  # (More Examples of Magic Squares: http://www.1728.org/magicsq11.htm)\n  # (More Examples of Magic Squares: http://www.1728.org/magicsq12.htm)\n  # (More Examples of Magic Squares: http://www.1728.org/magicsq13.htm)\n  # (More Examples of Magic Squares: http://www.1728.org/magicsq14.htm)",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (More info: https://en.wikipedia.org/wiki/Magic_square)\n  # Example:\n  # matrix = [\n  #   [1, 2, 3],\n  #   [4, 5, 6],\n  #   [7, 8, 9]\n  # ]\n  # magic_square_test(matrix) => true\n  return false if my_matrix.length != my_matrix[0].length\n  sum = my_matrix[0].inject(:+)\n  my_matrix.each do |row|\n    return false if row.inject(:+) != sum\n  end\n  my_matrix.transpose.each do |row|\n    return false if row.inject(:+) != sum\n  end\n  diag1 = 0\n  diag2 = 0\n  my_matrix.each_with_index do |row, i|\n    diag1 += row[i]\n    diag2 += row[-i-1]\n  end\n  return false if diag1 != sum || diag2 != sum\n  true\nend",
    "  # TODO: return true if all rows, columns and diagonals have\n  # the same sum\n  sum = my_matrix[0].sum\n  my_matrix.each do |row|\n    return false if row.sum != sum\n  end\n  my_matrix.transpose.each do |col|\n    return false if col.sum != sum\n  end\n  diag1 = 0\n  diag2 = 0\n  my_matrix.each_with_index do |row, i|\n    diag1 += row[i]\n    diag2 += row[-i-1]\n  end\n  return false if diag1 != sum || diag2 != sum\n  true\nend",
    "  # check for squareness\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal are equal.\n  # (More info: https://en.wikipedia.org/wiki/Magic_square)\n  # Example:\n  # matrix_1 = [\n  #   [1, 2, 3],\n  #   [4, 5, 6],\n  #   [7, 8, 9]\n  # ]\n  # matrix_1 is NOT a magic square because 1 + 2 + 3 = 6, 4 + 5 + 6 = 15, 7 + 8 + 9 = 24,\n  # and 1 + 4 + 7 = 12, 2 + 5 + 8 = 15, 3 + 6 + 9 = 18.\n  # The sum of each row and column are not equal.\n  #\n  # matrix_2 = [\n  #   [4, 9, 2],\n  #   [3, 5, 7],\n  #   [8, 1, 6]\n  # ]\n  # matrix_2 is a magic square because 4 + 9 + 2 = 15, 3 + 5 + 7 = 15, 8 + 1 + 6 = 15,\n  # 4 + 3 + 8 = 15, 9 + 5 + 1 = 15, 2 + 7 + 6 = 15,\n  # and 4 + 5 + 6 = 9, 9 + 5 + 1 = 15, 2 + 5 + 8 = 15.\n  # The sum of each row, column, and diagonal are equal.\n  #\n  # Note: You can assume that the matrix will be a square matrix.\n  # Note: You can assume that the matrix will contain integers only.\n  # Note: You can assume that the matrix will contain positive integers only.\n  # Note: You can assume that the matrix will contain integers between 1 and 9 only.\n  # Note: You can assume that the matrix will contain integers between 1 and 9 only.\n  # Note: You can assume that the matrix will contain integers between 1 and 9 only.\n  # Note: You can assume that the matrix will contain integers between 1 and 9 only.\n  # Note: You can assume that the matrix will contain integers between 1 and 9 only.\n  # Note: You can assume that the matrix will"
  ]
}