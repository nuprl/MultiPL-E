{
  "name": "mbpp_129_magic_square_test",
  "language": "rb",
  "prompt": "# Write a function to calculate whether the matrix is a magic square.\ndef magic_square_test(my_matrix)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_magic_square_test\n    candidate = method(:magic_square_test)\n    assert_equal(true, candidate.call([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]))\n    assert_equal(true, candidate.call([[2, 7, 6], [9, 5, 1], [4, 3, 8]]))\n    assert_equal(false, candidate.call([[2, 7, 6], [9, 5, 1], [4, 3, 7]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  # Write your code here\nend",
    "  # Calculate the sum of the first row\n  sum = 0\n  my_matrix[0].each do |num|\n    sum += num\n  end\n  # Check if the sum of each row is equal to the sum of the first row\n  my_matrix.each do |row|\n    row_sum = 0\n    row.each do |num|\n      row_sum += num\n    end\n    if row_sum != sum\n      return false\n    end\n  end\n  # Check if the sum of each column is equal to the sum of the first row\n  my_matrix.transpose.each do |col|\n    col_sum = 0\n    col.each do |num|\n      col_sum += num\n    end\n    if col_sum != sum\n      return false\n    end\n  end\n  # Check if the sum of the diagonals is equal to the sum of the first row\n  diag_sum = 0\n  my_matrix.each_with_index do |row, i|\n    diag_sum += row[i]\n  end\n  if diag_sum != sum\n    return false\n  end\n  diag_sum = 0\n  my_matrix.each_with_index do |row, i|\n    diag_sum += row[my_matrix.length - 1 - i]\n  end\n  if diag_sum != sum\n    return false\n  end\n  # If all the above tests pass, return true\n  return true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  sum = 0\n  sum_array = []\n  my_matrix.each do |row|\n    sum_array << row.inject(:+)\n  end\n  sum = sum_array[0]\n  sum_array.each do |sum_row|\n    if sum_row != sum\n      return false\n    end\n  end\n  return true\nend",
    "  # check if the matrix is a square matrix\n  return false unless my_matrix.length == my_matrix[0].length\n  # check if the matrix is a magic square\n  return false unless my_matrix.length.odd?\n  # check if the matrix is a magic square\n  return false unless my_matrix.flatten.sort == (1..my_matrix.length**2).to_a\n  # check if the matrix is a magic square\n  return false unless my_matrix.map { |row| row.reduce(:+) }.uniq.length == 1\n  # check if the matrix is a magic square\n  return false unless my_matrix.transpose.map { |row| row.reduce(:+) }.uniq.length == 1\n  # check if the matrix is a magic square\n  return false unless my_matrix.map.with_index { |row, i| row[i] }.reduce(:+) == my_matrix.length * (my_matrix.length**2 + 1) / 2\n  # check if the matrix is a magic square\n  return false unless my_matrix.map.with_index { |row, i| row[-i - 1] }.reduce(:+) == my_matrix.length * (my_matrix.length**2 + 1) / 2\n  true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix of the same size where the sum of each row, column, and diagonal are equal.\n  # The sum of each row and each column are equal to the same number, and all the numbers are different.\n  # The sum of the main diagonal is equal to the sum of the other diagonal.\n  # The sum of the numbers in each row, each column, and each diagonal have to be the same.\n  # The numbers in the matrix are different from each other.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The matrix has an odd number of rows and columns.\n  # The",
    "  # check if the matrix is a square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # Note: you can use `.sum` on an array to get the sum of its elements.\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example: [].sum == 0\n  # Example: [1, 2, 3].sum == 6\n  # Example",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.",
    "  # Get the size of the matrix\n  size = my_matrix.size\n  # Get the sum of the first row\n  sum = my_matrix[0].reduce(:+)\n  # Check if all rows have the same sum\n  for i in 1..size-1\n    if sum != my_matrix[i].reduce(:+)\n      return false\n    end\n  end\n  # Check if all columns have the same sum\n  for i in 0..size-1\n    sum_col = 0\n    for j in 0..size-1\n      sum_col += my_matrix[j][i]\n    end\n    if sum_col != sum\n      return false\n    end\n  end\n  # Check if the sum of the diagonals is the same\n  sum_diag1 = 0\n  sum_diag2 = 0\n  for i in 0..size-1\n    sum_diag1 += my_matrix[i][i]\n    sum_diag2 += my_matrix[i][size-1-i]\n  end\n  if sum_diag1 != sum || sum_diag2 != sum\n    return false\n  end\n  # If all tests passed, return true\n  return true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal are equal.\n  # (More info: https://en.wikipedia.org/wiki/Magic_square)\n  # Hint: you may want to use the `rows`, `cols`, and `diagonals` functions you wrote.\n  # Hint: you may want to use the `sum` function you wrote.\n  # Hint: you may want to use the `all_equal?` function you wrote.\n  # Hint: you may want to use the `map` function.\n  # Hint: you may want to use the `reduce` function.\n  # Hint: you may want to use the `zip` function.\n  # Hint: you may want to use the `flatten` function.\n  # Hint: you may want to use the `transpose` function.\n  # Hint: you may want to use the `reverse` function.\n  # Hint: you may want to use the `each_with_index` function.\n  # Hint: you may want to use the `each_with_object` function.\n  # Hint: you may want to use the `inject` function.\n  # Hint: you may want to use the `cycle` function.\n  # Hint: you may want to use the `take` function.\n  # Hint: you may want to use the `drop` function.\n  # Hint: you may want to use the `rotate` function.\n  # Hint: you may want to use the `product` function.\n  # Hint: you may want to use the `uniq` function.\n  # Hint: you may want to use the `sort` function.\n  # Hint: you may want to use the `==` function.\n  # Hint: you may want to use the `all?` function.\n  # Hint: you may want to use the `any?` function.\n  # Hint: you may want to use the `none?` function.\n  # Hint: you may want to use the `one?` function.\n ",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # Note: you can use `sum` here to get the sum of all the elements in a matrix row.\n  # Example: sum([1,2,3]) # => 6\n  # Example: sum(matrix[0]) # => 15\n  # Hint: you'll need to use `each_with_index`\n  # Note: remember that `each_with_index` gives you both the element and its index.\n  # You'll probably need to use both!\n  # Hint: you'll need a variable to keep track of whether or not the matrix is magic.\n  # Remember: not every square is magic!\n  # Hint: you'll need to use nested loops.\n  # Hint: you'll need to use `break` to get out of a loop early.\n  # Bonus: refactor your solution to make it more concise!\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (More info: https://en.wikipedia.org/wiki/Magic_square)\n  # Hint: use the `sum` method\n  # Hint: use the `all?` method\n  # Hint: use the `diagonal` method\n  # Hint: use the `transpose` method\n  # Hint: use the `map` method\n  # Hint: use the `sum` method\n  # Hint: use the `==` method\n  # Hint: use the `flatten` method\n  # Hint: use the `uniq` method\n  # Hint: use the `length` method\n  # Hint: use the `==` method\n  # Hint: use the `all?` method\n  # Hint: use the `==` method\n  # Hint: use the `all?` method\n  # Hint: use the `==` method\n  # Hint: use the `all?` method\n  # Hint: use the `==` method\n  # Hint: use the `all?` method\n  # Hint: use the `==` method\n  # Hint: use the `all?` method\n  # Hint: use the `==` method\n  # Hint: use the `all?` method\n  # Hint: use the `==` method\n  # Hint: use the `all?` method\n  # Hint: use the `==` method\n  # Hint: use the `all?` method\n  # Hint: use the `==` method\n  # Hint: use the `all?` method\n  # Hint: use the `==` method\n  # Hint: use the `all?` method\n  # Hint: use the `==` method\n  # Hint: use the `all?` method\n  # Hint: use the `==` method\n  # Hint: use the `all?` method\n  # Hint: use the `==` method\n  # Hint: use the",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any of the built-in sum functions.\n  # You may not use any of the built-in diagonal functions.\n  # You may not use any of the built-in row or column functions.\n  # You may not use any of the built-in equality functions.\n  # You may not use any of the built-in comparison functions.\n  # You may not use any of the built-in arithmetic functions.\n  # You may not use any of the built-in boolean functions.\n  # You may not use any of the built-in string functions.\n  # You may not use any of the built-in array functions.\n  # You may not use any of the built-in hash functions.\n  # You may not use any of the built-in range functions.\n  # You may not use any of the built-in integer functions.\n  # You may not use any of the built-in float functions.\n  # You may not use any of the built-in complex functions.\n  # You may not use any of the built-in rational functions.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any of the built-in set functions.\n  # You may not use any of the built-in time functions.\n  # You may not use any of the built-in random functions.\n  # You may not use any of the built-in socket functions.\n  # You may not use any of the built-in process functions.\n  # You may not use any of the built-in thread functions.\n  # You may not use any of the built-in file functions.\n  # You may not use any of the built-in dir functions.\n  # You may not use any of the built-in encoding functions.\n  # You may not use any of the built-in exception functions.\n  # You may not use any of the built-in security functions.\n  #",
    "  # Check that the matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # calculate the sum of the first row\n  sum = 0\n  my_matrix[0].each do |num|\n    sum += num\n  end\n  # check that all rows have the same sum\n  my_matrix.each do |row|\n    row_sum = 0\n    row.each do |num|\n      row_sum += num\n    end\n    if row_sum != sum\n      return false\n    end\n  end\n  # check that all columns have the same sum\n  my_matrix.transpose.each do |col|\n    col_sum = 0\n    col.each do |num|\n      col_sum += num\n    end\n    if col_sum != sum\n      return false\n    end\n  end\n  # check that the diagonals have the same sum\n  diag_sum = 0\n  (0..my_matrix.length - 1).each do |i|\n    diag_sum += my_matrix[i][i]\n  end\n  if diag_sum != sum\n    return false\n  end\n  diag_sum = 0\n  (0..my_matrix.length - 1).each do |i|\n    diag_sum += my_matrix[i][my_matrix.length - 1 - i]\n  end\n  if diag_sum != sum\n    return false\n  end\n  return true\nend",
    "  # check if the matrix is a square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # Note: you can use `sum` and `all?`\n  # Note 2: remember that two matrices are equal if they contain the same elements\n  # in the same order.\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sums of the rows, columns, and diagonals are all equal.\n  # You may assume that the matrix contains only distinct integers between 1 and 9.\n  # More info: https://en.wikipedia.org/wiki/Magic_square\n  # Hint: use the helper function you wrote in the previous exercise.\n  # Hint: you may want to create more helper functions.\n  # Hint: you may want to use the transpose method from the previous exercise.\n  # Hint: you may want to use the flatten method from the previous exercise.\n  # Hint: you may want to use the sum method from the previous exercise.\n  # Hint: you may want to use the diagonal_sum method from the previous exercise.\n  # Hint: you may want to use the antidiagonal_sum method from the previous exercise.\n  # Hint: you may want to use the all_equal? method from the previous exercise.\n  # Hint: you may want to use the any? method from the previous exercise.\n  # Hint: you may want to use the all? method from the previous exercise.\n  # Hint: you may want to use the map method from the previous exercise.\n  # Hint: you may want to use the zip method from the previous exercise.\n  # Hint: you may want to use the transpose method from the previous exercise.\n  # Hint: you may want to use the flatten method from the previous exercise.\n  # Hint: you may want to use the sum method from the previous exercise.\n  # Hint: you may want to use the diagonal_sum method from the previous exercise.\n  # Hint: you may want to use the antidiagonal_sum method from the previous exercise.\n  # Hint: you may want to use the all_equal? method from the previous exercise.\n  # Hint: you may want to use the any? method from the previous exercise.\n  # Hint: you may want to use the all? method from the previous exercise.\n  # Hint: you may want to use the map method from the previous exercise.\n  # Hint: you may",
    "  # Check if the matrix is square\n  return false unless my_matrix.length == my_matrix[0].length\n  # Check if the matrix is a magic square\n  # Check the sum of each row\n  row_sum = my_matrix[0].reduce(:+)\n  my_matrix.each do |row|\n    return false unless row.reduce(:+) == row_sum\n  end\n  # Check the sum of each column\n  column_sum = my_matrix.map { |row| row[0] }.reduce(:+)\n  my_matrix.each_with_index do |row, row_index|\n    row.each_with_index do |column, column_index|\n      return false unless my_matrix[column_index][row_index] == column_sum\n    end\n  end\n  # Check the sum of the diagonals\n  diagonal_sum = 0\n  my_matrix.each_with_index do |row, row_index|\n    diagonal_sum += row[row_index]\n  end\n  return false unless diagonal_sum == row_sum\n  diagonal_sum = 0\n  my_matrix.each_with_index do |row, row_index|\n    diagonal_sum += row[row.length - 1 - row_index]\n  end\n  return false unless diagonal_sum == row_sum\n  # If all checks pass, return true\n  true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (Magic squares have appeared here and there in recreational mathematics.)\n  # Example:\n  #   [8, 1, 6]\n  #   [3, 5, 7]\n  #   [4, 9, 2]\n  # is a magic square because every row, column and diagonal sums to 15.\n  # (The diagonal from top left to bottom right is 8 + 5 + 2 = 15.)\n  # Note that the rows, columns, and diagonals do not have to be distinct.\n  # Example:\n  #   [16, 2, 3, 13]\n  #   [5, 11, 10, 8]\n  #   [9, 7, 6, 12]\n  #   [4, 14, 15, 1]\n  # is a magic square because every row, column and diagonal sums to 34.\n  # (The diagonals are 16 + 11 + 6 + 1 = 34 and 4 + 11 + 10 + 15 = 34.)\n  # Hint: You can use the transpose method to get the transpose of a matrix.\n  # For example, if m is a matrix, then m.transpose is the transpose of m.\n  # Hint: You can use the flatten method to convert a matrix to a one-dimensional array.\n  # For example, if m is a matrix, then m.flatten is a one-dimensional array containing the elements of m.\n  # Hint: You can use the sum method to add up the elements of an array.\n  # For example, if a is an array, then a.sum is the sum of the elements of a.\n  # Hint: You can use the each_with_index method to iterate over the elements of an array,\n  # passing the index of each element into the block.\n  # For example, if a is an array, then a.each_with_index { |e, i| puts \"#{e} is at index #{i}\" }\n  # will print out something like \"3 is at index 0\", \"4 is at index 1\", \"5 is at"
  ]
}