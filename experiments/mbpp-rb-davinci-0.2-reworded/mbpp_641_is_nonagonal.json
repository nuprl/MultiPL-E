{
  "name": "mbpp_641_is_nonagonal",
  "language": "rb",
  "prompt": "# Write a function to find the nth nonagonal number.\ndef is_nonagonal(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nonagonal\n    candidate = method(:is_nonagonal)\n    assert_equal(325, candidate.call(10))\n    assert_equal(750, candidate.call(15))\n    assert_equal(1089, candidate.call(18))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  (1 + Math.sqrt(1 + 8 * n)) / 2 % 1 == 0\nend",
    "  (Math.sqrt(1 + 8 * n) + 1) % 4 == 0\nend",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 -",
    "  if n == 1\n    return 1\n  end\n  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  return nth_nonagonal\nend",
    "  nth = 0\n  while n > 0\n    nth += 1\n    n -= nth\n  end\n  n == 0\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) - 1) / 2) % 1 == 0\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n^2 - n - 2 * n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 /",
    "  n = (Math.sqrt(1 + 8 * n) - 1) / 2\n  n == n.to_i\nend",
    "  nth_nonagonal = 0\n  i = 0\n  while nth_nonagonal < n\n    i += 1\n    nth_nonagonal = i * (3 * i - 1) / 2\n  end\n  nth_nonagonal == n\nend",
    "  return false if n < 1\n  return true if n == 1\n  return false if n % 2 == 0\n  return true if n % 2 == 1\nend",
    "  # n = (3 * x^2) - x\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 3) / 2\n  # n = (3 * n**2 - 3 * n + 4) / 2\n  # n = (3 * n**2 - 3 * n + 5) / 2\n  # n = (3 * n**2 - 3 * n + 6) / 2\n  # n = (3 * n**2 - 3 * n + 7) / 2\n  # n = (3 * n**2 - 3 * n + 8) / 2\n  # n = (3 * n**2 - 3 * n + 9) / 2\n  # n = (3 * n**2 - 3 * n + 10) / 2\n  # n = (3 * n**2 - 3 * n + 11) / 2\n  # n = (3 * n**2 - 3 * n + 12) / 2\n  # n = (3 * n**2 - 3 * n + 13) / 2\n  # n = (3 * n**2 - 3 * n + 14) / 2\n  # n = (3 * n**2 - 3 * n + 15) / 2\n  # n = (3 * n**2 - 3 * n + 16) / 2\n  # n = (3 * n**2 - 3 * n + 17) / 2\n  # n = (3 * n**2 - 3 * n + 18) / 2\n  # n = (3 * n**2 - 3 * n + 19) / 2\n  # n = (3 * n**2 - 3 * n + 20) / 2\n  # n = (3 * n**2 - 3 * n + 21) / 2\n  # n = (3 * n**2 - 3 * n + 22) / 2\n  # n = (3 * n**2 - 3 * n + 23) / 2\n  # n = (3 * n**2 - 3 * n + 24) / 2\n  # n = (3 * n**2 - 3 * n + 25) / 2\n  # n = (3 * n**2 -",
    "  n = n.to_f\n  ((Math.sqrt(1 + 8 * n) - 1) / 2) % 1 == 0\nend",
    "  nth = 1\n  while nth * (3 * nth - 1) / 2 < n\n    nth += 1\n  end\n  nth * (3 * nth - 1) / 2 == n\nend",
    "  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 -",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 3) / 2\n  # n = (3 * n**2 - 3 * n + 4) / 2\n  # n = (3 * n**2 - 3 * n + 5) / 2\n  # n = (3 * n**2 - 3 * n + 6) / 2\n  # n = (3 * n**2 - 3 * n + 7) / 2\n  # n = (3 * n**2 - 3 * n + 8) / 2\n  # n = (3 * n**2 - 3 * n + 9) / 2\n  # n = (3 * n**2 - 3 * n + 10) / 2\n  # n = (3 * n**2 - 3 * n + 11) / 2\n  # n = (3 * n**2 - 3 * n + 12) / 2\n  # n = (3 * n**2 - 3 * n + 13) / 2\n  # n = (3 * n**2 - 3 * n + 14) / 2\n  # n = (3 * n**2 - 3 * n + 15) / 2\n  # n = (3 * n**2 - 3 * n + 16) / 2\n  # n = (3 * n**2 - 3 * n + 17) / 2\n  # n = (3 * n**2 - 3 * n + 18) / 2\n  # n = (3 * n**2 - 3 * n + 19) / 2\n  # n = (3 * n**2 - 3 * n + 20) / 2\n  # n = (3 * n**2 - 3 * n + 21) / 2\n  # n = (3 * n**2 - 3 * n + 22) / 2\n  # n = (3 * n**2 - 3 * n + 23) / 2\n  # n = (3 * n**2 - 3 * n + 24) / 2\n  # n = (3 * n**2 - 3 * n + 25) / 2\n  # n = (3 * n**2 -",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  nth_nonagonal = 1\n  nth_nonagonal += 1 while nth_nonagonal * (3 * nth_nonagonal - 1) / 2 < n\n  nth_nonagonal * (3 * nth_nonagonal - 1) / 2 == n\nend",
    "  nth_nonagonal = (1..n).inject(0) { |sum, i| sum + i }\n  nth_nonagonal == n\nend"
  ]
}