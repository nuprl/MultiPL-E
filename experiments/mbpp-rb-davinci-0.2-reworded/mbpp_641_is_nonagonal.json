{
  "name": "mbpp_641_is_nonagonal",
  "language": "rb",
  "prompt": "# Write a function to find the nth nonagonal number.\ndef is_nonagonal(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nonagonal\n    candidate = method(:is_nonagonal)\n    assert_equal(325, candidate.call(10))\n    assert_equal(750, candidate.call(15))\n    assert_equal(1089, candidate.call(18))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  (1 + Math.sqrt(1 + 8 * n)) / 2 % 1 == 0\nend",
    "  (Math.sqrt(1 + 8 * n) + 1) % 4 == 0\nend",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 -",
    "  if n == 1\n    return 1\n  end\n  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  return nth_nonagonal\nend",
    "  nth = 0\n  while n > 0\n    nth += 1\n    n -= nth\n  end\n  n == 0\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) - 1) / 2) % 1 == 0\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n^2 - n - 2 * n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 / 3 = 0\n  # n^2 - n - 2n / 3 + 1 /",
    "  n = (Math.sqrt(1 + 8 * n) - 1) / 2\n  n == n.to_i\nend",
    "  nth_nonagonal = 0\n  i = 0\n  while nth_nonagonal < n\n    i += 1\n    nth_nonagonal = i * (3 * i - 1) / 2\n  end\n  nth_nonagonal == n\nend",
    "  return false if n < 1\n  return true if n == 1\n  return false if n % 2 == 0\n  return true if n % 2 == 1\nend",
    "  # n = (3 * x^2) - x\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 3) / 2\n  # n = (3 * n**2 - 3 * n + 4) / 2\n  # n = (3 * n**2 - 3 * n + 5) / 2\n  # n = (3 * n**2 - 3 * n + 6) / 2\n  # n = (3 * n**2 - 3 * n + 7) / 2\n  # n = (3 * n**2 - 3 * n + 8) / 2\n  # n = (3 * n**2 - 3 * n + 9) / 2\n  # n = (3 * n**2 - 3 * n + 10) / 2\n  # n = (3 * n**2 - 3 * n + 11) / 2\n  # n = (3 * n**2 - 3 * n + 12) / 2\n  # n = (3 * n**2 - 3 * n + 13) / 2\n  # n = (3 * n**2 - 3 * n + 14) / 2\n  # n = (3 * n**2 - 3 * n + 15) / 2\n  # n = (3 * n**2 - 3 * n + 16) / 2\n  # n = (3 * n**2 - 3 * n + 17) / 2\n  # n = (3 * n**2 - 3 * n + 18) / 2\n  # n = (3 * n**2 - 3 * n + 19) / 2\n  # n = (3 * n**2 - 3 * n + 20) / 2\n  # n = (3 * n**2 - 3 * n + 21) / 2\n  # n = (3 * n**2 - 3 * n + 22) / 2\n  # n = (3 * n**2 - 3 * n + 23) / 2\n  # n = (3 * n**2 - 3 * n + 24) / 2\n  # n = (3 * n**2 - 3 * n + 25) / 2\n  # n = (3 * n**2 -",
    "  n = n.to_f\n  ((Math.sqrt(1 + 8 * n) - 1) / 2) % 1 == 0\nend",
    "  nth = 1\n  while nth * (3 * nth - 1) / 2 < n\n    nth += 1\n  end\n  nth * (3 * nth - 1) / 2 == n\nend",
    "  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 -",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 3) / 2\n  # n = (3 * n**2 - 3 * n + 4) / 2\n  # n = (3 * n**2 - 3 * n + 5) / 2\n  # n = (3 * n**2 - 3 * n + 6) / 2\n  # n = (3 * n**2 - 3 * n + 7) / 2\n  # n = (3 * n**2 - 3 * n + 8) / 2\n  # n = (3 * n**2 - 3 * n + 9) / 2\n  # n = (3 * n**2 - 3 * n + 10) / 2\n  # n = (3 * n**2 - 3 * n + 11) / 2\n  # n = (3 * n**2 - 3 * n + 12) / 2\n  # n = (3 * n**2 - 3 * n + 13) / 2\n  # n = (3 * n**2 - 3 * n + 14) / 2\n  # n = (3 * n**2 - 3 * n + 15) / 2\n  # n = (3 * n**2 - 3 * n + 16) / 2\n  # n = (3 * n**2 - 3 * n + 17) / 2\n  # n = (3 * n**2 - 3 * n + 18) / 2\n  # n = (3 * n**2 - 3 * n + 19) / 2\n  # n = (3 * n**2 - 3 * n + 20) / 2\n  # n = (3 * n**2 - 3 * n + 21) / 2\n  # n = (3 * n**2 - 3 * n + 22) / 2\n  # n = (3 * n**2 - 3 * n + 23) / 2\n  # n = (3 * n**2 - 3 * n + 24) / 2\n  # n = (3 * n**2 - 3 * n + 25) / 2\n  # n = (3 * n**2 -",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  nth_nonagonal = 1\n  nth_nonagonal += 1 while nth_nonagonal * (3 * nth_nonagonal - 1) / 2 < n\n  nth_nonagonal * (3 * nth_nonagonal - 1) / 2 == n\nend",
    "  nth_nonagonal = (1..n).inject(0) { |sum, i| sum + i }\n  nth_nonagonal == n\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 -",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal = (i * (i * 3 - 1)) / 2\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  return false if n < 1\n  return true if n == 1\n  return false if n % 2 == 0\n  return true if n % 2 == 1\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8*n) + 1) / 2) % 1 == 0\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  # n = 1/2 * (3 * n^2 - n)\n  # n^2 - n - 2n = 0\n  # n^2 - 3n = 0\n  # n(n - 3) = 0\n  # n = 0 or n = 3\n  # n = 3k + 1\n  # 3k^2 + 3k + 1 = n\n  # 3k^2 + 3k + 1 - n = 0\n  # (3k + 1)(k + 1) = n\n  # n = 3k^2 + 3k + 1\n  # n = 3k(k + 1) + 1\n  # n = 3k^2 + 3k + 1\n  # n = 3k^2 + 3k + 1\n  # n = 3k^2 + 3k + 1\n  # n = 3k^2 + 3k + 1\n  # n = 3k^2 + 3k + 1\n  # n = 3k^2 + 3k + 1\n  # n = 3k^2 + 3k + 1\n  # n = 3k^2 + 3k + 1\n  # n = 3k^2 + 3k + 1\n  # n = 3k^2 + 3k + 1\n  # n = 3k^2 + 3k + 1\n  # n = 3k^2 + 3k + 1\n  # n = 3k^2 + 3k + 1\n  # n = 3k^2 + 3k + 1\n  # n = 3k^2 + 3k + 1\n  # n = 3k^2 + 3k + 1\n  # n = 3k^2 + 3k + 1\n  # n = 3k^2 + 3k + 1\n  # n = 3k^2 + 3k + 1\n  # n = 3k^2 + 3k + 1\n  # n = 3k^2 + 3k + 1\n  # n = 3k^2 + 3k + 1\n  # n = 3k^2 + 3k + 1\n  # n = 3k^2 + 3k + 1\n  # n = 3k^2 + 3k + 1\n  # n = 3k^2 + 3k + 1\n  #",
    "  n = Math.sqrt(8 * n + 1)\n  n.to_i == n\nend",
    "  nth_nonagonal = 1\n  i = 1\n  while nth_nonagonal < n\n    i += 1\n    nth_nonagonal += i\n  end\n  nth_nonagonal == n\nend",
    "  nth = 0\n  i = 1\n  while nth < n\n    nth += i\n    i += 1\n  end\n  nth == n\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal = (i * (i + 1) * (i + 2)) / 6\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) - 1) / 2) % 1 == 0\nend",
    "  nth_nonagonal = (3 * n**2 - 3 * n + 1)\n  nth_nonagonal\nend",
    "  n = n.to_f\n  return (Math.sqrt(1 + 8 * n) + 1) / 2 % 1 == 0\nend",
    "  n = n.to_f\n  ((Math.sqrt(1 + 8 * n) + 1) / 2) % 1 == 0\nend",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 -",
    "  nth = 0\n  i = 1\n  while nth < n\n    nth += i\n    i += 1\n  end\n  nth == n\nend",
    "  (Math.sqrt(1 + 8 * n) + 1) / 2 % 1 == 0\nend",
    "  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n) / 2",
    "  n = n.to_f\n  # (n**2 + n) / 2\n  (Math.sqrt(1 + 8 * n) - 1) / 2\nend",
    "  i = 1\n  while true\n    if (i * (i + 1) / 2) == n\n      return true\n    elsif (i * (i + 1) / 2) > n\n      return false\n    end\n    i += 1\n  end\nend",
    "  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x - 2 * n) / 2\n  # n = (3 * x^2 - x - 2 * n) / 2\n  # n = (3 * x^2 - x - 2 * n) / 2\n  # n = (3 * x^2 - x - 2 * n) / 2\n  # n = (3 * x^2 - x - 2 * n) / 2\n  # n = (3 * x^2 - x - 2 * n) / 2\n  # n = (3 * x^2 - x - 2 * n) / 2\n  # n = (3 * x^2 - x - 2 * n) / 2\n  # n = (3 * x^2 - x - 2 * n) / 2\n  # n = (3 * x^2 - x - 2 * n) / 2\n  # n = (3 * x^2 - x - 2 * n) / 2\n  # n = (3 * x^2 - x - 2 * n) / 2\n  # n = (3 * x^2 - x - 2 * n) / 2\n  # n = (3 * x^2 - x - 2 * n) / 2\n  # n = (3 * x^2 - x - 2 * n) / 2\n  # n = (3 * x^2 - x - 2 * n) / 2\n  # n = (3 * x^2 - x - 2 * n) / 2\n  # n = (3 * x^2 - x - 2 * n) / 2\n  # n = (3 * x^2 - x - 2 * n) / 2\n  # n = (3 * x^2 - x - 2 * n) / 2\n  # n = (3 * x^2 - x - 2 * n) / 2\n  # n = (3 * x^2 - x - 2 * n) / 2\n  # n = (3 * x^2 - x - 2 * n) / 2\n  # n = (3 * x^2 - x - 2 * n) / 2\n  # n = (3 * x^2 - x - 2 *",
    "  nth_nonagonal = (Math.sqrt(1 + 8 * n) - 1) / 2\n  nth_nonagonal == nth_nonagonal.to_i\nend",
    "  nth_nonagonal = (Math.sqrt(1 + 8 * n) - 1) / 2\n  nth_nonagonal == nth_nonagonal.to_i\nend",
    "  nth_root = Math.sqrt(1 + 8 * n)\n  nth_root % 1 == 0\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal = (i * (i + 1) * (i + 2)) / 6\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  nth = (Math.sqrt(1 + 8 * n) - 1) / 2\n  nth == nth.to_i\nend",
    "  # n = (3 * x ** 2) - x\n  # n = 3x^2 - x\n  # 0 = 3x^2 - x - n\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (1 + sqrt(1 + 12n)) / 6\n  # x = (1 - sqrt(1 + 12n)) / 6\n  # x = (",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 3) / 2\n  # n = (3 * n**2 - 3 * n + 4) / 2\n  # n = (3 * n**2 - 3 * n + 5) / 2\n  # n = (3 * n**2 - 3 * n + 6) / 2\n  # n = (3 * n**2 - 3 * n + 7) / 2\n  # n = (3 * n**2 - 3 * n + 8) / 2\n  # n = (3 * n**2 - 3 * n + 9) / 2\n  # n = (3 * n**2 - 3 * n + 10) / 2\n  # n = (3 * n**2 - 3 * n + 11) / 2\n  # n = (3 * n**2 - 3 * n + 12) / 2\n  # n = (3 * n**2 - 3 * n + 13) / 2\n  # n = (3 * n**2 - 3 * n + 14) / 2\n  # n = (3 * n**2 - 3 * n + 15) / 2\n  # n = (3 * n**2 - 3 * n + 16) / 2\n  # n = (3 * n**2 - 3 * n + 17) / 2\n  # n = (3 * n**2 - 3 * n + 18) / 2\n  # n = (3 * n**2 - 3 * n + 19) / 2\n  # n = (3 * n**2 - 3 * n + 20) / 2\n  # n = (3 * n**2 - 3 * n + 21) / 2\n  # n = (3 * n**2 - 3 * n + 22) / 2\n  # n = (3 * n**2 - 3 * n + 23) / 2\n  # n = (3 * n**2 - 3 * n + 24) / 2\n  # n = (3 * n**2 - 3 * n + 25) / 2\n  # n = (3 * n**2 -",
    "  nth = 0\n  i = 1\n  while nth < n\n    nth += i\n    i += 1\n  end\n  nth == n\nend",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 -",
    "  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)/2\n ",
    "  # (1 + sqrt(1 + 8n)) / 2\n  (1 + Math.sqrt(1 + 8 * n)) / 2\nend",
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  (Math.sqrt(1 + 8 * n) + 1) % 4 == 0\nend",
    "  return false if n < 1\n  return true if n == 1\n  return true if n == 2\n  return true if n == 3\n  return true if n == 4\n  return true if n == 5\n  return true if n == 6\n  return true if n == 7\n  return true if n == 8\n  return true if n == 9\n  return true if n == 10\n  return true if n == 11\n  return true if n == 12\n  return true if n == 13\n  return true if n == 14\n  return true if n == 15\n  return true if n == 16\n  return true if n == 17\n  return true if n == 18\n  return true if n == 19\n  return true if n == 20\n  return true if n == 21\n  return true if n == 22\n  return true if n == 23\n  return true if n == 24\n  return true if n == 25\n  return true if n == 26\n  return true if n == 27\n  return true if n == 28\n  return true if n == 29\n  return true if n == 30\n  return true if n == 31\n  return true if n == 32\n  return true if n == 33\n  return true if n == 34\n  return true if n == 35\n  return true if n == 36\n  return true if n == 37\n  return true if n == 38\n  return true if n == 39\n  return true if n == 40\n  return true if n == 41\n  return true if n == 42\n  return true if n == 43\n  return true if n == 44\n  return true if n == 45\n  return true if n == 46\n  return true if n == 47\n  return true if n == 48\n  return true if n == 49\n  return true if n == 50\n  return true if n == 51\n  return true if n == 52\n  return true if n == 53\n  return true if n == 54\n  return true if n == 55\n  return true if n == 56\n  return true if n == 57\n  return true if n == 58\n  return true if n == 59\n  return true if n == 60\n  return true if n == 61\n  return true if n == 62\n  return true if n == 63",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) + 1) / 2) % 1 == 0\nend",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 -",
    "  return false if n < 1\n  return true if n == 1\n  return true if n == 3\n  return false if n == 2\n  return false if n == 4\n  return true if n == 6\n  return false if n == 5\n  return false if n == 7\n  return true if n == 9\n  return false if n == 8\n  return false if n == 10\n  return true if n == 12\n  return false if n == 11\n  return false if n == 13\n  return true if n == 15\n  return false if n == 14\n  return false if n == 16\n  return true if n == 18\n  return false if n == 17\n  return false if n == 19\n  return true if n == 21\n  return false if n == 20\n  return false if n == 22\n  return true if n == 24\n  return false if n == 23\n  return false if n == 25\n  return true if n == 27\n  return false if n == 26\n  return false if n == 28\n  return true if n == 30\n  return false if n == 29\n  return false if n == 31\n  return true if n == 33\n  return false if n == 32\n  return false if n == 34\n  return true if n == 36\n  return false if n == 35\n  return false if n == 37\n  return true if n == 39\n  return false if n == 38\n  return false if n == 40\n  return true if n == 42\n  return false if n == 41\n  return false if n == 43\n  return true if n == 45\n  return false if n == 44\n  return false if n == 46\n  return true if n == 48\n  return false if n == 47\n  return false if n == 49\n  return true if n == 51\n  return false if n == 50\n  return false if n == 52\n  return true if n == 54\n  return false if n == 53\n  return false if n == 55\n  return true if n == 57\n  return false if n == 56\n  return false if n == 58\n  return true if n == 60\n  return false if n == 59\n  return false if n == 61\n  return true if n == 63\n  return false if n == 62",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  nth_nonagonal = 0\n  counter = 1\n  while nth_nonagonal < n\n    nth_nonagonal += counter\n    counter += 1\n  end\n  nth_nonagonal == n\nend",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 3) / 2\n  # n = (3 * n**2 - 3 * n + 4) / 2\n  # n = (3 * n**2 - 3 * n + 5) / 2\n  # n = (3 * n**2 - 3 * n + 6) / 2\n  # n = (3 * n**2 - 3 * n + 7) / 2\n  # n = (3 * n**2 - 3 * n + 8) / 2\n  # n = (3 * n**2 - 3 * n + 9) / 2\n  # n = (3 * n**2 - 3 * n + 10) / 2\n  # n = (3 * n**2 - 3 * n + 11) / 2\n  # n = (3 * n**2 - 3 * n + 12) / 2\n  # n = (3 * n**2 - 3 * n + 13) / 2\n  # n = (3 * n**2 - 3 * n + 14) / 2\n  # n = (3 * n**2 - 3 * n + 15) / 2\n  # n = (3 * n**2 - 3 * n + 16) / 2\n  # n = (3 * n**2 - 3 * n + 17) / 2\n  # n = (3 * n**2 - 3 * n + 18) / 2\n  # n = (3 * n**2 - 3 * n + 19) / 2\n  # n = (3 * n**2 - 3 * n + 20) / 2\n  # n = (3 * n**2 - 3 * n + 21) / 2\n  # n = (3 * n**2 - 3 * n + 22) / 2\n  # n = (3 * n**2 - 3 * n + 23) / 2\n  # n = (3 * n**2 - 3 * n + 24) / 2\n  # n = (3 * n**2 - 3 * n + 25) / 2\n  # n = (3 * n**2 -",
    "  # n = (3*n^2 - 3*n + 1) / 2\n  # n^2 - n - 2*n + 1 = 0\n  # n^2 - 3*n + 1 = 0\n  # (n - 1)^2 = 0\n  # n - 1 = 0\n  # n = 1\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n +",
    "  nth_nonagonal = (Math.sqrt(8*n + 1) + 1)/2\n  nth_nonagonal == nth_nonagonal.to_i\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  n = n.to_f\n  (Math.sqrt(1 + 8 * n) + 1) / 2 % 1 == 0\nend",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 -",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  n = n.to_f\n  ((Math.sqrt(1 + 8 * n) - 1) / 2) % 1 == 0\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  n = n.abs\n  return false if n < 1\n  return true if n == 1\n  return true if n == 2\n  return false if n == 3\n  return true if n == 4\n  return false if n == 5\n  return true if n == 6\n  return false if n == 7\n  return true if n == 8\n  return false if n == 9\n  return true if n == 10\n  return false if n == 11\n  return true if n == 12\n  return false if n == 13\n  return true if n == 14\n  return false if n == 15\n  return true if n == 16\n  return false if n == 17\n  return true if n == 18\n  return false if n == 19\n  return true if n == 20\n  return false if n == 21\n  return true if n == 22\n  return false if n == 23\n  return true if n == 24\n  return false if n == 25\n  return true if n == 26\n  return false if n == 27\n  return true if n == 28\n  return false if n == 29\n  return true if n == 30\n  return false if n == 31\n  return true if n == 32\n  return false if n == 33\n  return true if n == 34\n  return false if n == 35\n  return true if n == 36\n  return false if n == 37\n  return true if n == 38\n  return false if n == 39\n  return true if n == 40\n  return false if n == 41\n  return true if n == 42\n  return false if n == 43\n  return true if n == 44\n  return false if n == 45\n  return true if n == 46\n  return false if n == 47\n  return true if n == 48\n  return false if n == 49\n  return true if n == 50\n  return false if n == 51\n  return true if n == 52\n  return false if n == 53\n  return true if n == 54\n  return false if n == 55\n  return true if n == 56\n  return false if n == 57\n  return true if n == 58\n  return false if n == 59\n  return true if n == 60\n  return false if n == 61\n  return true if n == 62\n",
    "  nth = 1\n  while true\n    return nth if n == nth * (3 * nth - 1) / 2\n    nth += 1\n  end\nend",
    "  i = 1\n  while true\n    return true if n == (i * (3 * i - 1)) / 2\n    return false if n < (i * (3 * i - 1)) / 2\n    i += 1\n  end\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) + 1) / 2) % 1 == 0\nend",
    "  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 -",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8*n) + 1) / 2) % 1 == 0\nend",
    "  (Math.sqrt(1 + 8 * n) + 1) % 4 == 0\nend",
    "  (1 + Math.sqrt(1 + 8 * n)) / 2 % 1 == 0\nend",
    "  n = Math.sqrt(8 * n + 1)\n  n == n.to_i\nend",
    "  i = 1\n  while true\n    if n == i * (3 * i - 1) / 2\n      return true\n    elsif n < i * (3 * i - 1) / 2\n      return false\n    end\n    i += 1\n  end\nend",
    "  nth_nonagonal = (Math.sqrt(1 + 8 * n) - 1) / 2\n  nth_nonagonal == nth_nonagonal.to_i\nend",
    "  nth_nonagonal = (Math.sqrt(1 + 8 * n) - 1) / 2\n  nth_nonagonal == nth_nonagonal.to_i\nend",
    "  nth = 1\n  while nth * (3 * nth - 2) < n\n    nth += 1\n  end\n  nth * (3 * nth - 2) == n\nend",
    "  n = n.to_f\n  ((Math.sqrt(1 + 8 * n) + 1) / 2) % 1 == 0\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 -",
    "  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x - 2n) / 2\n  # 3 * x^2 - x - 2n = 0\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1",
    "  n = n.abs\n  return false if n < 1\n  return true if n == 1\n  return false if n % 2 == 0\n  return true if n == 3\n  return false if n % 4 == 3\n  return true if n == 7\n  return false if n % 8 == 7\n  return true if n == 15\n  return false if n % 16 == 15\n  return true if n == 31\n  return false if n % 32 == 31\n  return true if n == 63\n  return false if n % 64 == 63\n  return true if n == 127\n  return false if n % 128 == 127\n  return true if n == 255\n  return false if n % 256 == 255\n  return true if n == 511\n  return false if n % 512 == 511\n  return true if n == 1023\n  return false if n % 1024 == 1023\n  return true if n == 2047\n  return false if n % 2048 == 2047\n  return true if n == 4095\n  return false if n % 4096 == 4095\n  return true if n == 8191\n  return false if n % 8192 == 8191\n  return true if n == 16383\n  return false if n % 16384 == 16383\n  return true if n == 32767\n  return false if n % 32768 == 32767\n  return true if n == 65535\n  return false if n % 65536 == 65535\n  return true if n == 131071\n  return false if n % 131072 == 131071\n  return true if n == 262143\n  return false if n % 262144 == 262143\n  return true if n == 524287\n  return false if n % 524288 == 524287\n  return true if n == 1048575\n  return false if n % 1048576 == 1048575\n  return true if n == 2097151\n  return false if n % 2097152 == 2097151\n  return true if n == 4194303\n  return false if n % 4194304 == 4194303\n  return true if n == 8388607\n  return false if n % 8388608 == 8388607\n  return true if n == 16777215\n  return false if n % 16777216 == 16",
    "  nth_root = Math.sqrt(1 + 8 * n)\n  nth_root == nth_root.to_i\nend",
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  (1 + Math.sqrt(1 + 8 * n)) % 2 == 1\nend",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 3) / 2\n  # n = (3 * n**2 - 3 * n + 4) / 2\n  # n = (3 * n**2 - 3 * n + 5) / 2\n  # n = (3 * n**2 - 3 * n + 6) / 2\n  # n = (3 * n**2 - 3 * n + 7) / 2\n  # n = (3 * n**2 - 3 * n + 8) / 2\n  # n = (3 * n**2 - 3 * n + 9) / 2\n  # n = (3 * n**2 - 3 * n + 10) / 2\n  # n = (3 * n**2 - 3 * n + 11) / 2\n  # n = (3 * n**2 - 3 * n + 12) / 2\n  # n = (3 * n**2 - 3 * n + 13) / 2\n  # n = (3 * n**2 - 3 * n + 14) / 2\n  # n = (3 * n**2 - 3 * n + 15) / 2\n  # n = (3 * n**2 - 3 * n + 16) / 2\n  # n = (3 * n**2 - 3 * n + 17) / 2\n  # n = (3 * n**2 - 3 * n + 18) / 2\n  # n = (3 * n**2 - 3 * n + 19) / 2\n  # n = (3 * n**2 - 3 * n + 20) / 2\n  # n = (3 * n**2 - 3 * n + 21) / 2\n  # n = (3 * n**2 - 3 * n + 22) / 2\n  # n = (3 * n**2 - 3 * n + 23) / 2\n  # n = (3 * n**2 - 3 * n + 24) / 2\n  # n = (3 * n**2 - 3 * n + 25) / 2\n  # n = (3 * n**2 -",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  nth = 1\n  while nth * (3 * nth - 1) / 2 < n\n    nth += 1\n  end\n  nth * (3 * nth - 1) / 2 == n\nend",
    "  nth_nonagonal = (3 * n * n - n) / 2\n  nth_nonagonal\nend",
    "  (1 + Math.sqrt(1 + 8 * n)) / 2 % 1 == 0\nend",
    "  n = n.to_f\n  ((Math.sqrt(1 + 8 * n) - 1) / 2).to_i == (Math.sqrt(1 + 8 * n) - 1) / 2\nend",
    "  return false if n < 1\n  n == 1 || is_nonagonal(n - 1) && n % 2 == 1 || is_nonagonal(n - 1) && n % 2 == 0\nend",
    "  return false if n < 1\n  return true if n == 1\n  return false if n % 2 == 0\n  return true if n == 3\n  return false if n % 4 == 1\n  return true if n == 7\n  return false if n % 8 == 3\n  return true if n == 15\n  return false if n % 16 == 7\n  return true if n == 31\n  return false if n % 32 == 15\n  return true if n == 63\n  return false if n % 64 == 31\n  return true if n == 127\n  return false if n % 128 == 63\n  return true if n == 255\n  return false if n % 256 == 127\n  return true if n == 511\n  return false if n % 512 == 255\n  return true if n == 1023\n  return false if n % 1024 == 511\n  return true if n == 2047\n  return false if n % 2048 == 1023\n  return true if n == 4095\n  return false if n % 4096 == 2047\n  return true if n == 8191\n  return false if n % 8192 == 4095\n  return true if n == 16383\n  return false if n % 16384 == 8191\n  return true if n == 32767\n  return false if n % 32768 == 16383\n  return true if n == 65535\n  return false if n % 65536 == 32767\n  return true if n == 131071\n  return false if n % 131072 == 65535\n  return true if n == 262143\n  return false if n % 262144 == 131071\n  return true if n == 524287\n  return false if n % 524288 == 262143\n  return true if n == 1048575\n  return false if n % 1048576 == 524287\n  return true if n == 2097151\n  return false if n % 2097152 == 1048575\n  return true if n == 4194303\n  return false if n % 4194304 == 2097151\n  return true if n == 8388607\n  return false if n % 8388608 == 4194303\n  return true if n == 16777215\n  return false if n % 16777216 == 8388607\n  return true if n ==",
    "  i = 1\n  while true\n    if n == i * (3 * i - 1) / 2\n      return true\n    elsif n < i * (3 * i - 1) / 2\n      return false\n    end\n    i += 1\n  end\nend",
    "  nth = 0\n  i = 1\n  while nth < n\n    nth += i\n    i += 1\n  end\n  nth == n\nend",
    "  # n = (3 * x^2 - x) / 2\n  # x = (sqrt(8n + 1) + 1) / 3\n  x = (Math.sqrt(8 * n + 1) + 1) / 3\n  x.to_i == x\nend",
    "  return false if n < 1\n  return true if n == 1\n  return true if n == 2\n  return false if n == 3\n  return false if n == 4\n  return true if n == 5\n  return false if n == 6\n  return false if n == 7\n  return true if n == 8\n  return false if n == 9\n  return false if n == 10\n  return true if n == 11\n  return false if n == 12\n  return false if n == 13\n  return true if n == 14\n  return false if n == 15\n  return false if n == 16\n  return true if n == 17\n  return false if n == 18\n  return false if n == 19\n  return true if n == 20\n  return false if n == 21\n  return false if n == 22\n  return true if n == 23\n  return false if n == 24\n  return false if n == 25\n  return true if n == 26\n  return false if n == 27\n  return false if n == 28\n  return true if n == 29\n  return false if n == 30\n  return false if n == 31\n  return true if n == 32\n  return false if n == 33\n  return false if n == 34\n  return true if n == 35\n  return false if n == 36\n  return false if n == 37\n  return true if n == 38\n  return false if n == 39\n  return false if n == 40\n  return true if n == 41\n  return false if n == 42\n  return false if n == 43\n  return true if n == 44\n  return false if n == 45\n  return false if n == 46\n  return true if n == 47\n  return false if n == 48\n  return false if n == 49\n  return true if n == 50\n  return false if n == 51\n  return false if n == 52\n  return true if n == 53\n  return false if n == 54\n  return false if n == 55\n  return true if n == 56\n  return false if n == 57\n  return false if n == 58\n  return true if n == 59\n  return false if n == 60\n  return false if n == 61\n  return true if n == 62\n  return false if n == 63",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) - 1) / 2) % 1 == 0\nend",
    "  (Math.sqrt(1 + 8 * n) + 1) % 4 == 0\nend",
    "  nth_nonagonal = (Math.sqrt(1 + 8 * n) - 1) / 2\n  nth_nonagonal % 1 == 0\nend",
    "  return false if n < 1\n  return true if n == 1\n  return false if n % 2 == 0\n  return true if n % 2 != 0\n  return false\nend",
    "  (1 + Math.sqrt(1 + 8 * n)) / 2 % 1 == 0\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  (1 + Math.sqrt(1 + 8 * n)) % 2 == 0\nend",
    "  n = n.to_f\n  (Math.sqrt(1 + 8 * n) + 1) / 2 % 1 == 0\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  nth_nonagonal = (Math.sqrt(1 + 8 * n) - 1) / 2\n  nth_nonagonal % 1 == 0\nend",
    "  n = (Math.sqrt(1 + 8 * n) - 1) / 2\n  n.to_i == n\nend",
    "  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 -",
    "  nth = 1\n  while nth * (3 * nth - 1) / 2 < n\n    nth += 1\n  end\n  nth * (3 * nth - 1) / 2 == n\nend",
    "  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1)\n  # n = 3 * n^2 - 3 * n + 1\n  # n = 3 * n^2 - 3 * n\n  # n = 3 * n^2 - 3 * n + 1\n  # n = 3 * n^2 - 3 * n + 1\n  # n = 3 * n^2 - 3 * n + 1\n  # n = 3 * n^2 - 3 * n + 1\n  # n = 3 * n^2 - 3 * n + 1\n  # n = 3 * n^2 - 3 * n + 1\n  # n = 3 * n^2 - 3 * n + 1\n  # n = 3 * n^2 - 3 * n + 1\n  # n = 3 * n^2 - 3 * n + 1\n  # n = 3 * n^2 - 3 * n + 1\n  # n = 3 * n^2 - 3 * n + 1\n  # n = 3 * n^2 - 3 * n + 1\n  # n = 3 * n^2 - 3 * n + 1\n  # n = 3 * n^2 - 3 * n + 1\n  # n = 3 * n^2 - 3 * n + 1\n  # n = 3 * n^2 - 3 * n + 1\n  # n = 3 * n^2 - 3 * n + 1\n  # n = 3 * n^2 - 3 * n + 1\n  # n = 3 * n^2 - 3 * n + 1\n  # n = 3 * n^2 - 3 * n + 1\n  # n = 3 * n^2 - 3 * n + 1\n  # n = 3 * n^2 - 3 * n + 1\n  # n = 3 * n^2 - 3 * n + 1\n  # n = 3 * n^2 - 3 * n + 1\n  # n = 3 * n^2 - 3 * n + 1\n  # n = 3 * n^2 - 3 * n + 1\n  # n = 3 * n^2 - 3 * n + 1\n  # n = 3 * n^2 - 3",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 -",
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  i = 1\n  while true\n    if n == (i * (i + 1)) / 2\n      return true\n    elsif n < (i * (i + 1)) / 2\n      return false\n    end\n    i += 1\n  end\nend",
    "  nth_nonagonal = (Math.sqrt(1 + 8 * n) - 1) / 2\n  nth_nonagonal == nth_nonagonal.to_i\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  return false if n < 0\n  n = n.to_f\n  return true if (Math.sqrt(1 + 8 * n) - 1) % 2 == 0\n  false\nend",
    "  i = 1\n  while true\n    return true if n == i * (3 * i - 1) / 2\n    return false if n < i * (3 * i - 1) / 2\n    i += 1\n  end\nend",
    "  n = n.to_f\n  ((Math.sqrt(1 + 8 * n) + 1) / 2) % 1 == 0\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) + 1) / 2) % 1 == 0\nend",
    "  nth_nonagonal = ((Math.sqrt(1 + 8 * n) - 1) / 2).to_i\n  return nth_nonagonal if nth_nonagonal * (nth_nonagonal + 1) / 2 == n\n  return false\nend",
    "  nth = 1\n  while nth <= n\n    return true if nth * (3 * nth - 1) / 2 == n\n    nth += 1\n  end\n  false\nend",
    "  nth_nonagonal = n * (3 * n - 2) / 2\n  return nth_nonagonal\nend",
    "  nth_root = (Math.sqrt(1 + 8 * n) - 1) / 2\n  nth_root == nth_root.to_i\nend",
    "  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 -",
    "  # n = (3 * n^2 - n) / 2\n  # n^2 - n - 2n = 0\n  # n^2 - 3n = 0\n  # n(n - 3) = 0\n  # n = 0 or n = 3\n  # n = 3k + 1\n  # 3k^2 + k - 2k = 0\n  # 3k^2 - k = 0\n  # k(3k - 1) = 0\n  # k = 0 or k = 1/3\n  # k = 1/3\n  # n = 3(1/3) + 1\n  # n = 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3k + 1\n  # n = 3",
    "  i = 1\n  while n > 0\n    n -= i\n    i += 1\n  end\n  n == 0\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 -",
    "  nth_nonagonal = (n * (n - 1)) / 2\n  nth_nonagonal\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 -",
    "  i = 1\n  while n > 0\n    n -= i\n    i += 1\n  end\n  n == 0\nend",
    "  n = n.to_f\n  ((Math.sqrt(1 + 8 * n) - 1) / 2) % 1 == 0\nend",
    "  return false if n < 1\n  return true if n == 1\n  return false if n % 2 == 0\n  return true if n % 2 == 1\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) - 1) / 2) % 1 == 0\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal = (i * (i + 1)) / 2\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  (Math.sqrt(1 + 8 * n) - 1) % 2 == 0\nend",
    "  n = n.to_f\n  (Math.sqrt(1 + 8 * n) + 1) / 2 % 1 == 0\nend",
    "  # n = (3 * n^2 - 3 * n + 1) / 2\n  # 3n^2 - 3n + 1 = 2n\n  # 3n^2 - 3n - 2n = 1\n  # 3n(n - 1) - 2n = 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2n + 1\n  # 3n(n - 1) = 2",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) + 1) / 2) % 1 == 0\nend",
    "  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x - 2n) / 2\n  # 3x^2 - x - 2n = 0\n  # x = (1 +- sqrt(1 + 24n)) / 6\n  x = (1 + Math.sqrt(1 + 24 * n)) / 6\n  x == x.to_i\nend",
    "  nth_triangle = (Math.sqrt(1 + 8 * n) - 1) / 2\n  nth_triangle == nth_triangle.to_i\nend",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 -",
    "  n = n.to_f\n  return (Math.sqrt(1 + 8 * n) + 1) / 2 % 1 == 0\nend",
    "  nth_nonagonal = 0\n  nth_nonagonal += n\n  nth_nonagonal += n - 1\n  nth_nonagonal += n - 2\n  nth_nonagonal += n - 3\n  nth_nonagonal += n - 4\n  nth_nonagonal += n - 5\n  nth_nonagonal += n - 6\n  nth_nonagonal += n - 7\n  nth_nonagonal += n - 8\n  nth_nonagonal += n - 9\n  nth_nonagonal += n - 10\n  nth_nonagonal += n - 11\n  nth_nonagonal += n - 12\n  nth_nonagonal += n - 13\n  nth_nonagonal += n - 14\n  nth_nonagonal += n - 15\n  nth_nonagonal += n - 16\n  nth_nonagonal += n - 17\n  nth_nonagonal += n - 18\n  nth_nonagonal += n - 19\n  nth_nonagonal += n - 20\n  nth_nonagonal += n - 21\n  nth_nonagonal += n - 22\n  nth_nonagonal += n - 23\n  nth_nonagonal += n - 24\n  nth_nonagonal += n - 25\n  nth_nonagonal += n - 26\n  nth_nonagonal += n - 27\n  nth_nonagonal += n - 28\n  nth_nonagonal += n - 29\n  nth_nonagonal += n - 30\n  nth_nonagonal += n - 31\n  nth_nonagonal += n - 32\n  nth_nonagonal += n - 33\n  nth_nonagonal += n - 34\n  nth_nonagonal += n - 35\n  nth_nonagonal += n - 36\n  nth_nonagonal += n - 37\n  nth_nonagonal += n - 38\n  nth_nonagonal += n - 39\n  nth_nonagonal += n - 40\n  nth_nonagonal += n - 41\n  nth_nonagonal += n - 42\n  nth_nonagonal += n - 43\n  nth_nonagonal += n - 44\n  nth_nonagonal += n -",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  # n = (3*n**2 - 3*n + 2)/2\n  # n = (3*n**2 - 3*n + 2)/2\n  # n = (3*n**2 - 3*n + 2)/2\n  # n = (3*n**2 - 3*n + 2)/2\n  # n = (3*n**2 - 3*n + 2)/2\n  # n = (3*n**2 - 3*n + 2)/2\n  # n = (3*n**2 - 3*n + 2)/2\n  # n = (3*n**2 - 3*n + 2)/2\n  # n = (3*n**2 - 3*n + 2)/2\n  # n = (3*n**2 - 3*n + 2)/2\n  # n = (3*n**2 - 3*n + 2)/2\n  # n = (3*n**2 - 3*n + 2)/2\n  # n = (3*n**2 - 3*n + 2)/2\n  # n = (3*n**2 - 3*n + 2)/2\n  # n = (3*n**2 - 3*n + 2)/2\n  # n = (3*n**2 - 3*n + 2)/2\n  # n = (3*n**2 - 3*n + 2)/2\n  # n = (3*n**2 - 3*n + 2)/2\n  # n = (3*n**2 - 3*n + 2)/2\n  # n = (3*n**2 - 3*n + 2)/2\n  # n = (3*n**2 - 3*n + 2)/2\n  # n = (3*n**2 - 3*n + 2)/2\n  # n = (3*n**2 - 3*n + 2)/2\n  # n = (3*n**2 - 3*n + 2)/2\n  # n = (3*n**2 - 3*n + 2)/2\n  # n = (3*n**2 - 3*n + 2)/2\n  # n = (3*n**2 - 3*n + 2)/",
    "  nth_nonagonal = (3 * n * n - n) / 2\n  nth_nonagonal\nend",
    "  nth_nonagonal = (1..n).inject(:+)\n  nth_nonagonal\nend",
    "  # n = (3 * m**2 - m) / 2\n  # 3m**2 - m - 2n = 0\n  # m = (1 + sqrt(1 + 24n)) / 6\n  m = (1 + Math.sqrt(1 + 24 * n)) / 6\n  m.to_i == m\nend",
    "  return false if n < 0\n  n == (Math.sqrt(8 * n + 1) - 1) / 2\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal = (i * (i + 1)) / 2\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  nth = (Math.sqrt(1 + 8 * n) - 1) / 2\n  nth == nth.to_i\nend",
    "  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 -",
    "  nth = 1\n  while nth * (3 * nth - 1) / 2 < n\n    nth += 1\n  end\n  nth * (3 * nth - 1) / 2 == n\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) - 1) / 2) % 1 == 0\nend",
    "  n == (Math.sqrt(8*n + 1) + 1)/2\nend",
    "  nth_nonagonal = (3 * n**2 - 3 * n + 1)\n  nth_nonagonal\nend",
    "  (Math.sqrt(1 + 8 * n) + 1) % 4 == 0\nend",
    "  return false if n < 1\n  return true if n == 1\n  return false if n % 2 == 0\n  return true if n == 3\n  return false if n % 4 == 3\n  return true if n == 7\n  return false if n % 8 == 7\n  return true if n == 15\n  return false if n % 16 == 15\n  return true if n == 31\n  return false if n % 32 == 31\n  return true if n == 63\n  return false if n % 64 == 63\n  return true if n == 127\n  return false if n % 128 == 127\n  return true if n == 255\n  return false if n % 256 == 255\n  return true if n == 511\n  return false if n % 512 == 511\n  return true if n == 1023\n  return false if n % 1024 == 1023\n  return true if n == 2047\n  return false if n % 2048 == 2047\n  return true if n == 4095\n  return false if n % 4096 == 4095\n  return true if n == 8191\n  return false if n % 8192 == 8191\n  return true if n == 16383\n  return false if n % 16384 == 16383\n  return true if n == 32767\n  return false if n % 32768 == 32767\n  return true if n == 65535\n  return false if n % 65536 == 65535\n  return true if n == 131071\n  return false if n % 131072 == 131071\n  return true if n == 262143\n  return false if n % 262144 == 262143\n  return true if n == 524287\n  return false if n % 524288 == 524287\n  return true if n == 1048575\n  return false if n % 1048576 == 1048575\n  return true if n == 2097151\n  return false if n % 2097152 == 2097151\n  return true if n == 4194303\n  return false if n % 4194304 == 4194303\n  return true if n == 8388607\n  return false if n % 8388608 == 8388607\n  return true if n == 16777215\n  return false if n % 16777216 == 16777215\n  return true",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  i = 1\n  while true\n    return i if n == i * (3 * i - 1) / 2\n    return false if i * (3 * i - 1) / 2 > n\n    i += 1\n  end\nend",
    "  nth_nonagonal = (Math.sqrt(1 + 8 * n) - 1) / 2\n  nth_nonagonal == nth_nonagonal.to_i\nend",
    "  nth_nonagonal = (Math.sqrt(1 + 8 * n) - 1) / 2\n  nth_nonagonal == nth_nonagonal.to_i\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  nth = 1\n  while nth * (3 * nth - 1) / 2 < n\n    nth += 1\n  end\n  nth * (3 * nth - 1) / 2 == n\nend",
    "  nth_root = Math.sqrt(1 + 8 * n)\n  nth_root == nth_root.to_i\nend",
    "  n = (Math.sqrt(1 + 8 * n) - 1) / 2\n  n == n.to_i\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal = (i * (i + 1)) / 2\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal = i * (3 * i - 1) / 2\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 3) / 2\n  # n = (3 * n**2 - 3 * n + 4) / 2\n  # n = (3 * n**2 - 3 * n + 5) / 2\n  # n = (3 * n**2 - 3 * n + 6) / 2\n  # n = (3 * n**2 - 3 * n + 7) / 2\n  # n = (3 * n**2 - 3 * n + 8) / 2\n  # n = (3 * n**2 - 3 * n + 9) / 2\n  # n = (3 * n**2 - 3 * n + 10) / 2\n  # n = (3 * n**2 - 3 * n + 11) / 2\n  # n = (3 * n**2 - 3 * n + 12) / 2\n  # n = (3 * n**2 - 3 * n + 13) / 2\n  # n = (3 * n**2 - 3 * n + 14) / 2\n  # n = (3 * n**2 - 3 * n + 15) / 2\n  # n = (3 * n**2 - 3 * n + 16) / 2\n  # n = (3 * n**2 - 3 * n + 17) / 2\n  # n = (3 * n**2 - 3 * n + 18) / 2\n  # n = (3 * n**2 - 3 * n + 19) / 2\n  # n = (3 * n**2 - 3 * n + 20) / 2\n  # n = (3 * n**2 - 3 * n + 21) / 2\n  # n = (3 * n**2 - 3 * n + 22) / 2\n  # n = (3 * n**2 - 3 * n + 23) / 2\n  # n = (3 * n**2 - 3 * n + 24) / 2\n  # n = (3 * n**2 - 3 * n + 25) / 2\n  # n = (3 * n**2 -",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) + 1) / 2) % 1 == 0\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal = i * (3 * i - 1) / 2\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  nth_nonagonal = (Math.sqrt(1 + 8 * n) - 1) / 2\n  nth_nonagonal == nth_nonagonal.to_i\nend",
    "  return false if n < 1\n  nth_root = Math.sqrt(1 + 8 * n)\n  nth_root.floor == nth_root\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) + 1) / 2) % 1 == 0\nend",
    "  nth_nonagonal = (1..Float::INFINITY).lazy.map { |i| i * (3 * i - 2) }\n  nth_nonagonal.include?(n)\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  # n = (3*n**2 - n)/2\n  # (1 + Math.sqrt(1 + 24*n))/6 % 1 == 0\n  # (1 + Math.sqrt(1 + 24*n)) % 6 == 0\n  # (1 + Math.sqrt(1 + 24*n)) % 2 == 0\n  # (1 + Math.sqrt(1 + 24*n)) % 3 == 0\n  # (1 + Math.sqrt(1 + 24*n)) % 6 == 0\n  # (1 + Math.sqrt(1 + 24*n)) % 6 == 0\n  # (1 + Math.sqrt(1 + 24*n)) % 6 == 0\n  # (1 + Math.sqrt(1 + 24*n)) % 6 == 0\n  # (1 + Math.sqrt(1 + 24*n)) % 6 == 0\n  # (1 + Math.sqrt(1 + 24*n)) % 6 == 0\n  # (1 + Math.sqrt(1 + 24*n)) % 6 == 0\n  # (1 + Math.sqrt(1 + 24*n)) % 6 == 0\n  # (1 + Math.sqrt(1 + 24*n)) % 6 == 0\n  # (1 + Math.sqrt(1 + 24*n)) % 6 == 0\n  # (1 + Math.sqrt(1 + 24*n)) % 6 == 0\n  # (1 + Math.sqrt(1 + 24*n)) % 6 == 0\n  # (1 + Math.sqrt(1 + 24*n)) % 6 == 0\n  # (1 + Math.sqrt(1 + 24*n)) % 6 == 0\n  # (1 + Math.sqrt(1 + 24*n)) % 6 == 0\n  # (1 + Math.sqrt(1 + 24*n)) % 6 == 0\n  # (1 + Math.sqrt(1 + 24*n)) % 6 == 0\n  # (1 + Math.sqrt(1 + 24*n)) % 6 == 0\n  # (1 + Math.sqrt(1 + 24*n)) % 6 == 0\n  # (1 + Math.sqrt(1",
    "  (Math.sqrt(1 + 8 * n) + 1) % 4 == 0\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  return false if n < 1\n  return true if n == 1\n  return false if n % 2 == 0\n  return true if n == 3\n  return false if n % 2 == 1\n  return true if n == 5\n  return false if n % 2 == 0\n  return true if n == 7\n  return false if n % 2 == 1\n  return true if n == 9\n  return false if n % 2 == 0\n  return true if n == 11\n  return false if n % 2 == 1\n  return true if n == 13\n  return false if n % 2 == 0\n  return true if n == 15\n  return false if n % 2 == 1\n  return true if n == 17\n  return false if n % 2 == 0\n  return true if n == 19\n  return false if n % 2 == 1\n  return true if n == 21\n  return false if n % 2 == 0\n  return true if n == 23\n  return false if n % 2 == 1\n  return true if n == 25\n  return false if n % 2 == 0\n  return true if n == 27\n  return false if n % 2 == 1\n  return true if n == 29\n  return false if n % 2 == 0\n  return true if n == 31\n  return false if n % 2 == 1\n  return true if n == 33\n  return false if n % 2 == 0\n  return true if n == 35\n  return false if n % 2 == 1\n  return true if n == 37\n  return false if n % 2 == 0\n  return true if n == 39\n  return false if n % 2 == 1\n  return true if n == 41\n  return false if n % 2 == 0\n  return true if n == 43\n  return false if n % 2 == 1\n  return true if n == 45\n  return false if n % 2 == 0\n  return true if n == 47\n  return false if n % 2 == 1\n  return true if n == 49\n  return false if n % 2 == 0\n  return true if n == 51\n  return false if n % 2 == 1\n  return true if n == 53\n  return false if n % 2 == 0\n  return true if n == 55\n  return false if n % 2 == 1",
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 3) / 2\n  # n = (3 * n**2 - 3 * n + 4) / 2\n  # n = (3 * n**2 - 3 * n + 5) / 2\n  # n = (3 * n**2 - 3 * n + 6) / 2\n  # n = (3 * n**2 - 3 * n + 7) / 2\n  # n = (3 * n**2 - 3 * n + 8) / 2\n  # n = (3 * n**2 - 3 * n + 9) / 2\n  # n = (3 * n**2 - 3 * n + 10) / 2\n  # n = (3 * n**2 - 3 * n + 11) / 2\n  # n = (3 * n**2 - 3 * n + 12) / 2\n  # n = (3 * n**2 - 3 * n + 13) / 2\n  # n = (3 * n**2 - 3 * n + 14) / 2\n  # n = (3 * n**2 - 3 * n + 15) / 2\n  # n = (3 * n**2 - 3 * n + 16) / 2\n  # n = (3 * n**2 - 3 * n + 17) / 2\n  # n = (3 * n**2 - 3 * n + 18) / 2\n  # n = (3 * n**2 - 3 * n + 19) / 2\n  # n = (3 * n**2 - 3 * n + 20) / 2\n  # n = (3 * n**2 - 3 * n + 21) / 2\n  # n = (3 * n**2 - 3 * n + 22) / 2\n  # n = (3 * n**2 - 3 * n + 23) / 2\n  # n = (3 * n**2 - 3 * n + 24) / 2\n  # n = (3 * n**2 - 3 * n + 25) / 2\n  # n = (3 * n**2 -",
    "  i = 1\n  while true\n    if n == i * (3 * i - 1) / 2\n      return true\n    elsif n < i * (3 * i - 1) / 2\n      return false\n    end\n    i += 1\n  end\nend",
    "  # n = (x * (x + 1)) / 2\n  # x = (sqrt(8n + 1) - 1) / 2\n  x = (Math.sqrt(8 * n + 1) - 1) / 2\n  x == x.to_i\nend",
    "  return false if n < 0\n  n = n.to_f\n  return true if (Math.sqrt(1 + 8 * n) - 1) % 2 == 0\n  false\nend"
  ]
}