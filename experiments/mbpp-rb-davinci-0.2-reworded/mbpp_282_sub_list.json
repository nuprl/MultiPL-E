{
  "name": "mbpp_282_sub_list",
  "language": "rb",
  "prompt": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  # Write your code here\n  result = []\n  nums1.each_with_index do |num, i|\n    result << num - nums2[i]\n  end\n  result\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map {|x, y| x - y}\nend",
    "  result = []\n  nums1.each_with_index do |num, idx|\n    result << num - nums2[idx]\n  end\n  result\nend",
    "  # Your code here\nend",
    "  # your code here\n  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  # Write your code here\n  result = []\n  nums1.each_with_index do |num, index|\n    result << num - nums2[index]\n  end\n  result\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |num1, num2| num1 - num2 }\nend",
    "  nums1.map.with_index { |num, i| num - nums2[i] }\nend",
    "  # Your code here\nend",
    "  nums1.zip(nums2).map {|x, y| x - y}\nend",
    "  # TODO: Write your code here\n  result = []\n  nums1.each_with_index do |num, index|\n    result << num - nums2[index]\n  end\n  result\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |a, b| a - b }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |a, b| a - b }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  result = []\n  nums1.each_with_index do |num, i|\n    result << num - nums2[i]\n  end\n  result\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  result = []\n  nums1.each_with_index do |num, i|\n    result << num - nums2[i]\n  end\n  result\nend",
    "  result = []\n  nums1.each_with_index do |num, idx|\n    result << num - nums2[idx]\n  end\n  result\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  result = []\n  nums1.each_with_index do |num, idx|\n    result << num - nums2[idx]\n  end\n  result\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  result = []\n  nums1.each_with_index do |num, index|\n    result << num - nums2[index]\n  end\n  result\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |a, b| a - b }\nend",
    "  result = []\n  nums1.each_with_index do |num, i|\n    result << num - nums2[i]\n  end\n  result\nend",
    "  nums1.map.with_index { |num, index| num - nums2[index] }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |a, b| a - b }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  result = []\n  nums1.each_with_index do |num, index|\n    result << num - nums2[index]\n  end\n  result\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  # your code here\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  # Write your code here\n  result = []\n  nums1.each_with_index do |num, index|\n    result << num - nums2[index]\n  end\n  result\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  # TODO: implement me\n  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.map.with_index { |num, i| num - nums2[i] }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  # Your code here\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.map.with_index { |num, i| num - nums2[i] }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  # TODO\nend",
    "  nums1.map.with_index { |num, i| num - nums2[i] }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  # Your code here\nend",
    "  nums1.zip(nums2).map { |a, b| a - b }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  # Write your code here\nend",
    "  # TODO: implement me\n  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  # Write your code here\n  result = []\n  nums1.each_with_index do |num, index|\n    result << num - nums2[index]\n  end\n  result\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  # TODO: implement me\n  nums1.zip(nums2).map { |x,y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  result = []\n  nums1.each_with_index do |num, idx|\n    result << num - nums2[idx]\n  end\n  result\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  if nums1.length != nums2.length\n    return \"The arrays are not the same length\"\n  end\n  result = []\n  for i in 0..nums1.length - 1\n    result.push(nums1[i] - nums2[i])\n  end\n  return result\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  # Write your code here\n  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.map.with_index { |num, i| num - nums2[i] }\nend",
    "  # Your code here\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.map.with_index { |num, i| num - nums2[i] }\nend",
    "  result = []\n  nums1.each_with_index do |num, idx|\n    result << num - nums2[idx]\n  end\n  result\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map {|x, y| x - y}\nend",
    "  # nums1.zip(nums2).map { |x, y| x - y }\n  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  result = []\n  nums1.each_with_index do |num, i|\n    result << num - nums2[i]\n  end\n  result\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  result = []\n  nums1.each_with_index do |num, i|\n    result << num - nums2[i]\n  end\n  result\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map {|x, y| x - y}\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |a, b| a - b }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  result = []\n  nums1.each_with_index do |num, i|\n    result << num - nums2[i]\n  end\n  result\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  # Write your code here\n  result = []\n  nums1.each_with_index do |num, index|\n    result << num - nums2[index]\n  end\n  result\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  # Write your code here.\n  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  # TODO: Implement this function\n  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  # Your code here\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.map.with_index { |num, i| num - nums2[i] }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  result = []\n  nums1.each_with_index do |num, index|\n    result << num - nums2[index]\n  end\n  result\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  # TODO: Implement me!\n  nums1.map.with_index { |num, i| num - nums2[i] }\nend"
  ]
}