{
  "name": "mbpp_291_count_no_of_ways",
  "language": "rb",
  "prompt": "# Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef count_no_of_ways(n, k)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_no_of_ways\n    candidate = method(:count_no_of_ways)\n    assert_equal(16, candidate.call(2, 4))\n    assert_equal(6, candidate.call(3, 2))\n    assert_equal(228, candidate.call(4, 4))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  same = 0\n  diff = k",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  same = 0\n  diff = k",
    "  return 0 if n == 0 || k == 0\n  return k if n == 1\n  return k * k if n == 2\n  same_color = k\n  diff_color = k * (k - 1)\n  total = same_color + diff_color\n  for i in 3..n\n    same_color = diff_color\n    diff_color = (k - 1) * total\n    total = same_color + diff_color\n  end\n  total\nend",
    "  same = 0\n  diff = k\n  total = same + diff\n  for i in 2..n\n    same = diff\n    diff = total * (k - 1)\n    total = same + diff\n  end\n  total\nend",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  same = 0\n  diff = k",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  diff_color_count = k * (k - 1)\n  same_color_count = k\n  for i in 3..n\n    temp = diff_color_count\n    diff_color_count = (diff_color_count + same_color_count) * (k - 1)\n    same_color_count = temp\n  end\n  return diff_color_count + same_color_count\nend",
    "  same = 0\n  diff = k\n  total = k\n  for i in 2..n\n    same = diff\n    diff = total * (k - 1)\n    total = same + diff\n  end\n  total\nend",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  if n == 0\n    0\n  elsif n == 1\n    k\n  else\n    same = k\n    diff = k * (k - 1)\n    for i in 3..n\n      temp = diff\n      diff = (same + diff) * (k - 1)\n      same = temp\n    end\n    same + diff\n  end\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end"
  ]
}