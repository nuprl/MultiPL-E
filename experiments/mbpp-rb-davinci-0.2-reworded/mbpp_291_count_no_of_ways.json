{
  "name": "mbpp_291_count_no_of_ways",
  "language": "rb",
  "prompt": "# Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef count_no_of_ways(n, k)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_no_of_ways\n    candidate = method(:count_no_of_ways)\n    assert_equal(16, candidate.call(2, 4))\n    assert_equal(6, candidate.call(3, 2))\n    assert_equal(228, candidate.call(4, 4))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  same = 0\n  diff = k",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  same = 0\n  diff = k",
    "  return 0 if n == 0 || k == 0\n  return k if n == 1\n  return k * k if n == 2\n  same_color = k\n  diff_color = k * (k - 1)\n  total = same_color + diff_color\n  for i in 3..n\n    same_color = diff_color\n    diff_color = (k - 1) * total\n    total = same_color + diff_color\n  end\n  total\nend",
    "  same = 0\n  diff = k\n  total = same + diff\n  for i in 2..n\n    same = diff\n    diff = total * (k - 1)\n    total = same + diff\n  end\n  total\nend",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  same = 0\n  diff = k",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  diff_color_count = k * (k - 1)\n  same_color_count = k\n  for i in 3..n\n    temp = diff_color_count\n    diff_color_count = (diff_color_count + same_color_count) * (k - 1)\n    same_color_count = temp\n  end\n  return diff_color_count + same_color_count\nend",
    "  same = 0\n  diff = k\n  total = k\n  for i in 2..n\n    same = diff\n    diff = total * (k - 1)\n    total = same + diff\n  end\n  total\nend",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  if n == 0\n    0\n  elsif n == 1\n    k\n  else\n    same = k\n    diff = k * (k - 1)\n    for i in 3..n\n      temp = diff\n      diff = (same + diff) * (k - 1)\n      same = temp\n    end\n    same + diff\n  end\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 1\n    return k\n  end\n  if n == 2\n    return k * k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  same + diff\nend",
    "  same = 0\n  diff = k\n  total = k\n  for i in 2..n\n    same = diff\n    diff = total * (k - 1)\n    total = same + diff\n  end\n  total\nend",
    "  if n == 0\n    return 0\n  end\n  if n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  elsif n == 2\n    return k*k\n  end\n  same = k\n  diff = k*(k-1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff)*(k-1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  if n == 1\n    return k\n  end\n  if n == 2\n    return k * k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 2..n-1\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  return 0 if n == 0\n  return k if n == 1\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  if n == 1\n    return k\n  end\n  if n == 2\n    return k * k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 1\n    k\n  elsif n == 2\n    k * k\n  else\n    same = k\n    diff = k * (k - 1)\n    for i in 3..n\n      temp = diff\n      diff = (same + diff) * (k - 1)\n      same = temp\n    end\n    same + diff\n  end\nend",
    "  if n == 1\n    return k\n  end\n  if n == 2\n    return k * k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same_color = k\n  diff_color = k * (k - 1)\n  total = same_color + diff_color\n  for i in 3..n\n    same_color = diff_color\n    diff_color = total * (k - 1)\n    total = same_color + diff_color\n  end\n  return total\nend",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  same = 0\n  diff = k",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  same + diff\nend",
    "  if n == 1\n    return k\n  end\n  if n == 2\n    return k*k\n  end\n  same = k\n  diff = k*(k-1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff)*(k-1)\n    same = temp\n  end\n  return same + diff\nend",
    "  dp = Array.new(n) { Array.new(2, 0) }\n  dp[0][0] = k\n  dp[0][1] = 0\n  dp[1][0] = k * (k - 1)\n  dp[1][1] = k\n  (2..n - 1).each do |i|\n    dp[i][0] = (dp[i - 1][0] + dp[i - 1][1]) * (k - 1)\n    dp[i][1] = dp[i - 1][0]\n  end\n  dp[n - 1][0] + dp[n - 1][1]\nend",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  same = 0\n  diff = k\n  total = k",
    "  return 0 if n == 0\n  return k if n == 1\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  same + diff\nend",
    "  return 0 if n == 0 || k == 0\n  return k if n == 1\n  same = k\n  diff = k * (k - 1)\n  for i in 2..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  same + diff\nend",
    "  # dp[i][0] = dp[i-1][0] + dp[i-1][1]\n  # dp[i][1] = dp[i-1][0]\n  # dp[i][2] = dp[i-1][1]\n  # dp[i][j] = dp[i-1][j-1] + dp[i-1][j+1]\n  dp = Array.new(n) { Array.new(3, 0) }\n  dp[0][0] = k\n  dp[0][1] = k\n  dp[0][2] = k",
    "  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  same + diff\nend",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  total_count = same_color_count + diff_color_count\n  for i in 3..n\n    same_color_count = diff_color_count\n    diff_color_count = total_count * (k - 1)\n    total_count = same_color_count + diff_color_count\n  end\n  return total_count\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  same_color = 0\n  diff_color = k\n  total = same_color + diff_color\n  (n - 1).times do\n    same_color = diff_color\n    diff_color = total * (k - 1)\n    total = same_color + diff_color\n  end\n  total\nend",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 1\n    k\n  elsif n == 2\n    k * k\n  else\n    same = k\n    diff = k * (k - 1)\n    for i in 3..n\n      temp = diff\n      diff = (same + diff) * (k - 1)\n      same = temp\n    end\n    same + diff\n  end\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 1\n    return k\n  end\n  if n == 2\n    return k * k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 2..n-1\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  same, diff = k, k * (k - 1)\n  for i in 3..n\n    same, diff = diff, (same + diff) * (k - 1)\n  end\n  same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 1\n    k\n  elsif n == 2\n    k * k\n  else\n    same = k\n    diff = k * (k - 1)\n    for i in 3..n\n      temp = diff\n      diff = (same + diff) * (k - 1)\n      same = temp\n    end\n    same + diff\n  end\nend",
    "  # if n == 1, then there are k ways to paint\n  # if n == 2, there are two situations\n  # 1) You paint the same color with the previous post: k*1 ways to paint, named it as same\n  # 2) You paint differently with the previous post: k*(k-1) ways to paint this way, named it as dif\n  # So, you can think, if n >= 3, you can always maintain these two variables, same and dif,\n  # and you can build the loop to calculate the result.\n  # When you do the loop from 3 to n, you can always maintain the two variables,\n  # same and dif, and it will be the next loop's dif and next loop's same + dif.\n  same, dif = k, k * (k - 1)\n  for i in 3..n\n    same, dif = dif, (same + dif) * (k - 1)\n  end\n  same + dif\nend",
    "  same = 0\n  diff = k\n  total = k",
    "  # if n == 1, then there are k ways to paint\n  # if n == 2, then there are two situations\n  # 1. You paint the same color with the previous post: k*1 ways to paint, named it as same\n  # 2. You paint differently with the previous post: k*(k-1) ways to paint this way, named it as dif\n  # So, you can think, if n >= 3, you can always maintain these two situations,\n  # You either paint the same color with the previous one, or differently.\n  # Since there is a rule: \"at most 2 adjacent fence posts have the same color.\"\n  # We can further analyze:\n  # 1. if you paint the same color with the previous one, it means you cannot paint the same color with the previous of the previous one, you have k-1 options to paint this way;\n  # 2. if you paint differently with the previous one, it means you can only paint differently with the previous of the previous one, which has k*(k-1) options to paint this way.\n  # Here you can conclude, when painting the same with the previous, you have k options, but the next one you could only have k-1 options, because all of the k options have been used in the previous step; and when painting differently with the previous, you have k*(k-1) options to paint this way, and for the next step, all the k*(k-1) options are available again.\n  # So, we can use dp[i] to represent the ith post, and the state transformation is dp[i] = dp[i-1]*(k-1) + dp[i-2]*(k-1).\n  dp = Array.new(n, 0)\n  dp[0] = k\n  dp[1] = k*k\n  2.upto(n-1) do |i|\n    dp[i] = dp[i-1]*(k-1) + dp[i-2]*(k-1)\n  end\n  dp[n-1]\nend",
    "  if n == 0\n    0\n  elsif n == 1\n    k\n  elsif n == 2\n    k * k\n  else\n    same = k\n    diff = k * (k - 1)\n    for i in 3..n\n      temp = diff\n      diff = (same + diff) * (k - 1)\n      same = temp\n    end\n    same + diff\n  end\nend",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  if n == 1\n    return k\n  end\n  if n == 2\n    return k * k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 1\n    return k\n  end\n  if n == 2\n    return k * k\n  end\n  diff_color_count = k * (k - 1)\n  same_color_count = k\n  total_count = diff_color_count + same_color_count\n  for i in 3..n\n    temp = diff_color_count\n    diff_color_count = (diff_color_count * (k - 1)) + (same_color_count * (k - 1))\n    same_color_count = temp\n  end\n  return total_count\nend",
    "  return 0 if n == 0\n  return k if n == 1\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  same + diff\nend",
    "  if n == 1\n    return k\n  end\n  if n == 2\n    return k * k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 1\n    return k\n  end\n  if n == 2\n    return k * k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 1\n    k\n  elsif n == 2\n    k * k\n  else\n    same = k\n    diff = k * (k - 1)\n    for i in 3..n\n      temp = diff\n      diff = (same + diff) * (k - 1)\n      same = temp\n    end\n    same + diff\n  end\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  same = 0\n  diff = k\n  total = k\n  for i in 2..n\n    same = diff\n    diff = total * (k - 1)\n    total = same + diff\n  end\n  total\nend",
    "  if n == 1\n    k\n  elsif n == 2\n    k * k\n  else\n    same = k\n    diff = k * (k - 1)\n    for i in 3..n\n      temp = diff\n      diff = (same + diff) * (k - 1)\n      same = temp\n    end\n    same + diff\n  end\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 2..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  same, diff = k, k * (k - 1)\n  for i in 3..n\n    same, diff = diff, (same + diff) * (k - 1)\n  end\n  same + diff\nend",
    "  if n == 0\n    return 0\n  end\n  if n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 1\n    k\n  elsif n == 2\n    k * k\n  else\n    same = k\n    diff = k * (k - 1)\n    for i in 3..n\n      temp = diff\n      diff = (same + diff) * (k - 1)\n      same = temp\n    end\n    same + diff\n  end\nend",
    "  dp = Array.new(n+1) { Array.new(k+1) }\n  (1..n).each do |i|\n    (1..k).each do |j|\n      if i == 1\n        dp[i][j] = j\n      else\n        dp[i][j] = dp[i-1][j] * (j-1) + dp[i-1][j-1] * (j-1)\n      end\n    end\n  end\n  dp[n][k]\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same_color = k\n  diff_color = k * (k - 1)\n  for i in 3..n\n    temp = diff_color\n    diff_color = (same_color + diff_color) * (k - 1)\n    same_color = temp\n  end\n  return same_color + diff_color\nend",
    "  same = 0\n  diff = k\n  total = k\n  for i in 2..n\n    same = diff\n    diff = total * (k - 1)\n    total = same + diff\n  end\n  total\nend",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  if n == 1\n    k\n  elsif n == 2\n    k * k\n  else\n    same = k\n    diff = k * (k - 1)\n    for i in 3..n\n      temp = diff\n      diff = (same + diff) * (k - 1)\n      same = temp\n    end\n    same + diff\n  end\nend",
    "  same = 0\n  diff = k",
    "  return 0 if n == 0 || k == 0\n  return k if n == 1\n  return k * k if n == 2",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  total_count = same_color_count + diff_color_count\n  for i in 3..n\n    same_color_count = diff_color_count\n    diff_color_count = total_count * (k - 1)\n    total_count = same_color_count + diff_color_count\n  end\n  total_count\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  same = 0\n  diff = k\n  total = same + diff\n  for i in 2..n\n    same = diff\n    diff = total * (k-1)\n    total = same + diff\n  end\n  total\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 0\n    return 0\n  end\n  if n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  dp = Array.new(n + 1) { Array.new(k) }\n  (0..n).each do |i|\n    (0..k - 1).each do |j|\n      if i == 0\n        dp[i][j] = 0\n      elsif i == 1\n        dp[i][j] = k\n      elsif i == 2\n        dp[i][j] = k * k\n      else\n        dp[i][j] = (k - 1) * (dp[i - 1][j] + dp[i - 2][j])\n      end\n    end\n  end\n  dp[n][k - 1]\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 0\n    return 0\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  if n == 1\n    return k\n  end\n  if n == 2\n    return k * k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 1\n    return k\n  end\n  if n == 2\n    return k * k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  same = 0\n  diff = k\n  total = k",
    "  same = 0\n  diff = k",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  return n if k == 1\n  return k if n == 1",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 1\n    k\n  elsif n == 2\n    k * k\n  else\n    same = k\n    diff = k * (k - 1)\n    for i in 3..n\n      temp = diff\n      diff = (same + diff) * (k - 1)\n      same = temp\n    end\n    same + diff\n  end\nend",
    "  same = 0\n  diff = k\n  total = k\n  (n - 1).times do\n    same = diff\n    diff = total * (k - 1)\n    total = same + diff\n  end\n  total\nend",
    "  return 0 if n == 0 || k == 0\n  same = 0\n  diff = k\n  total = same + diff\n  for i in 2..n\n    same = diff\n    diff = total * (k - 1)\n    total = same + diff\n  end\n  total\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 1\n    return k\n  end\n  if n == 2\n    return k * k\n  end\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  total_count = same_color_count + diff_color_count\n  for i in 3..n\n    same_color_count = diff_color_count\n    diff_color_count = total_count * (k - 1)\n    total_count = same_color_count + diff_color_count\n  end\n  return total_count\nend",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  else\n    return count_no_of_ways(n-1, k) * (k-1) + count_no_of_ways(n-2, k) * (k-1)\n  end\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 1\n    k\n  elsif n == 2\n    k * k\n  else\n    same = k\n    diff = k * (k - 1)\n    for i in 3..n\n      temp = diff\n      diff = (same + diff) * (k - 1)\n      same = temp\n    end\n    same + diff\n  end\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same_color = k\n  diff_color = k * (k - 1)\n  for i in 3..n\n    temp = diff_color\n    diff_color = (same_color + diff_color) * (k - 1)\n    same_color = temp\n  end\n  return same_color + diff_color\nend",
    "  if n == 1\n    return k\n  end\n  if n == 2\n    return k*k\n  end\n  same = k\n  diff = k*(k-1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff)*(k-1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  same = 0\n  diff = k\n  total = k\n  for i in 2..n\n    same = diff\n    diff = total * (k - 1)\n    total = same + diff\n  end\n  total\nend",
    "  if n == 1\n    return k\n  end\n  if n == 2\n    return k * k\n  end\n  same_color = k\n  diff_color = k * (k - 1)\n  total = same_color + diff_color\n  for i in 3..n\n    same_color = diff_color\n    diff_color = (k - 1) * total\n    total = same_color + diff_color\n  end\n  return total\nend",
    "  if n == 1\n    k\n  elsif n == 2\n    k * k\n  else\n    same = k\n    diff = k * (k - 1)\n    for i in 3..n\n      temp = diff\n      diff = (same + diff) * (k - 1)\n      same = temp\n    end\n    same + diff\n  end\nend",
    "  if n == 1\n    return k\n  end\n  if n == 2\n    return k * k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  return 0 if n == 0 || k == 0\n  return k if n == 1\n  same = k\n  diff = k * (k - 1)\n  for _ in 2..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  same + diff\nend",
    "  if n == 1\n    return k\n  end\n  if n == 2\n    return k * k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k*k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 1\n    k\n  elsif n == 2\n    k * k\n  else\n    same = k\n    diff = k * (k - 1)\n    for i in 3..n\n      temp = diff\n      diff = (same + diff) * (k - 1)\n      same = temp\n    end\n    same + diff\n  end\nend",
    "  if n == 1\n    k\n  elsif n == 2\n    k * k\n  else\n    same = k\n    diff = k * (k - 1)\n    for i in 3..n\n      temp = diff\n      diff = (same + diff) * (k - 1)\n      same = temp\n    end\n    same + diff\n  end\nend",
    "  return 0 if n == 0\n  return k if n == 1\n  same = k\n  diff = k * (k - 1)\n  for i in 2..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  same + diff\nend",
    "  if n == 0\n    return 0\n  end\n  if n == 1\n    return k\n  end\n  if n == 2\n    return k * k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 1\n    return k\n  end\n  if n == 2\n    return k * k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  same = 0\n  diff = k",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same_color = k\n  diff_color = k * (k - 1)\n  total = same_color + diff_color\n  for i in 3..n\n    same_color = diff_color\n    diff_color = total * (k - 1)\n    total = same_color + diff_color\n  end\n  total\nend",
    "  same = 0\n  diff = k\n  total = k",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end\n  same_color = k\n  diff_color = k * (k - 1)\n  total = same_color + diff_color\n  for i in 3..n\n    same_color = diff_color\n    diff_color = (k - 1) * total\n    total = same_color + diff_color\n  end\n  return total\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 1\n    return k\n  end",
    "  if n == 0\n    return 0\n  end\n  if n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 1\n    return k\n  end\n  if n == 2\n    return k * k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 2..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  same + diff\nend",
    "  same_color_counts = 0\n  diff_color_counts = k",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  same = 0\n  diff = k",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same_color = k\n  diff_color = k * (k - 1)\n  for i in 3..n\n    temp = diff_color\n    diff_color = (same_color + diff_color) * (k - 1)\n    same_color = temp\n  end\n  return same_color + diff_color\nend",
    "  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  same + diff\nend",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  return n if k == 1\n  return k * count_no_of_ways(n - 1, k) if n == 1\n  return (k - 1) * (count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k))\nend",
    "  same, diff = k, k * (k - 1)\n  for i in 3..n\n    same, diff = diff, (same + diff) * (k - 1)\n  end\n  same + diff\nend",
    "  if n == 0 || k == 0\n    return 0\n  end\n  if n == 1\n    return k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 2..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 1\n    return k\n  end\n  if n == 2\n    return k * k\n  end\n  diff_color_count = k * (k - 1)\n  same_color_count = k\n  for i in 3..n\n    temp = diff_color_count\n    diff_color_count = (diff_color_count + same_color_count) * (k - 1)\n    same_color_count = temp\n  end\n  return diff_color_count + same_color_count\nend",
    "  if n == 1\n    return k\n  end\n  if n == 2\n    return k * k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  same + diff\nend",
    "  if n == 0\n    return 0\n  elsif n == 1\n    return k\n  end",
    "  if n == 1\n    return k\n  elsif n == 2\n    return k * k\n  end\n  same = k\n  diff = k * (k - 1)\n  for i in 3..n\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  if n == 1\n    k\n  elsif n == 2\n    k * k\n  else\n    same = k\n    diff = k * (k - 1)\n    for i in 3..n\n      temp = diff\n      diff = (same + diff) * (k - 1)\n      same = temp\n    end\n    same + diff\n  end\nend",
    "  return 0 if n == 0\n  return k if n == 1\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for i in 2..n - 1\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  end\n  same_color_count + diff_color_count\nend"
  ]
}