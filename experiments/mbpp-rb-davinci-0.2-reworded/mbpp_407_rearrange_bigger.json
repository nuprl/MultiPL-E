{
  "name": "mbpp_407_rearrange_bigger",
  "language": "rb",
  "prompt": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  # get the digits of the number\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the next digit\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if there is no such digit, the number is already the biggest possible\n  return -1 if i == -1\n  # find the smallest digit that is bigger than the digit at i\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the digits at i and j\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits after i\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend",
    "  n_str = n.to_s\n  n_arr = n_str.split('')\n  n_arr_sorted = n_arr.sort\n  n_arr_sorted_rev = n_arr_sorted.reverse\n  n_arr_sorted_rev_join = n_arr_sorted_rev.join\n  n_arr_sorted_rev_join_to_i = n_arr_sorted_rev_join.to_i\n  if n_arr_sorted_rev_join_to_i == n\n    return -1\n  else\n    return n_arr_sorted_rev_join_to_i\n  end\nend",
    "  # get the digits of the number\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the one to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit exists, the number is the largest possible\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right that is larger than the pivot\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend",
    "  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the one to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i+1]\n    i -= 1\n  end\n  # if no such digit exists, the number is the largest possible\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # return the new number\n  digits.join.to_i\nend",
    "  digits = n.to_s.split('').map(&:to_i)\n  i = digits.length - 1\n  while i > 0 && digits[i - 1] >= digits[i]\n    i -= 1\n  end\n  return -1 if i == 0\n  j = digits.length - 1\n  while digits[j] <= digits[i - 1]\n    j -= 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  digits[i..-1] = digits[i..-1].reverse\n  digits.join.to_i\nend",
    "  return -1 if n.to_s.chars.uniq.size == 1\n  n = n.to_s.chars.sort.reverse.join.to_i\n  n.to_s.chars.permutation.map(&:join).map(&:to_i).sort.reverse.each { |i| return i if i > n }\nend",
    "  n_array = n.to_s.split('')\n  n_array.permutation.to_a.map { |x| x.join.to_i }.sort.reverse.each do |x|\n    return x if x > n\n  end\n  -1\nend",
    "  # get all permutations of the digits\n  perms = n.to_s.chars.permutation.map(&:join).map(&:to_i)\n  # return the first one that is bigger than the original number\n  perms.find { |perm| perm > n }\nend",
    "  n = n.to_s.split('').map(&:to_i)\n  (n.size - 2).downto(0) do |i|\n    if n[i] < n[i + 1]\n      n[i], n[i + 1] = n[i + 1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend",
    "  # get all permutations of the number\n  # select the permutations that are bigger than the original number\n  # return the smallest of those permutations\n  permutations = n.to_s.chars.permutation.to_a.map { |perm| perm.join.to_i }\n  permutations.select { |perm| perm > n }.min\nend",
    "  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is less than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i+1]\n    i -= 1\n  end\n  # if no such digit exists, the number is already the largest possible\n  return -1 if i < 0\n  # find the smallest digit to the right of i that is greater than digits[i]\n  j = digits.length - 1\n  while j > i && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap digits[i] and digits[j]\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of i\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # convert to integer and return\n  digits.join.to_i\nend",
    "  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j > i && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to the right of the pivot\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # convert back to integer\n  digits.join.to_i\nend",
    "  digits = n.to_s.split('').map(&:to_i)\n  (digits.size - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      (i + 1...digits.size).each do |j|\n        if digits[i] < digits[j]\n          digits[i], digits[j] = digits[j], digits[i]\n          break\n        end\n      end\n      digits[i + 1..-1] = digits[i + 1..-1].sort\n      return digits.join.to_i\n    end\n  end\n  -1\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if n_array[index + 1] && n_array[index + 1].to_i > num.to_i\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\n  -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i+1] && num < n_arr[i+1]\n      n_arr[i], n_arr[i+1] = n_arr[i+1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\n  -1\nend",
    "  # convert number to array of digits\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i+1]\n    i -= 1\n  end\n  # if no such digit exists, the number is already the largest possible\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to the right of the pivot\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # convert the array of digits back to a number\n  digits.join.to_i\nend",
    "  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = 0\n  while i < digits.length - 1\n    if digits[i] < digits[i+1]\n      break\n    end\n    i += 1\n  end\n  # if no such digit exists, return -1\n  if i == digits.length - 1\n    return -1\n  end\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = i + 1\n  while j < digits.length\n    if digits[j] > digits[i]\n      break\n    end\n    j += 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # return the new number\n  digits.join.to_i\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i + 1] && n_arr[i + 1].to_i > num.to_i\n      n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\n  -1\nend",
    "  # convert to string\n  n = n.to_s\n  # find the first digit from the right that is smaller than the digit to its right\n  n.reverse.each_char.with_index do |c, i|\n    if c.to_i > n[-i-2].to_i\n      # swap the digits\n      n[-i-1], n[-i-2] = n[-i-2], n[-i-1]\n      # sort the digits to the right of the swapped digits in ascending order\n      n[-i..-1] = n[-i..-1].chars.sort.join\n      # convert to integer\n      return n.to_i\n    end\n  end\n  # if no such digit exists, return -1\n  -1\nend",
    "  return -1 if n.to_s.size == 1\n  digits = n.to_s.split('').map(&:to_i)\n  i = digits.size - 1\n  while i > 0 && digits[i - 1] >= digits[i]\n    i -= 1\n  end\n  return -1 if i <= 0\n  j = digits.size - 1\n  while digits[j] <= digits[i - 1]\n    j -= 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  digits[i..-1] = digits[i..-1].reverse\n  digits.join.to_i\nend",
    "  n_array = n.to_s.split('')\n  n_array.permutation.to_a.map(&:join).map(&:to_i).sort.select { |x| x > n }.first\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i+1] && n_arr[i+1].to_i > num.to_i\n      n_arr[i], n_arr[i+1] = n_arr[i+1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\n  -1\nend",
    "  digits = n.to_s.split('')\n  digits.each_with_index do |digit, i|\n    next if i == 0\n    if digit > digits[i-1]\n      digits[i-1], digits[i] = digits[i], digits[i-1]\n      return digits.join.to_i\n    end\n  end\n  -1\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |n, i|\n    if n_array[i+1] && n_array[i+1].to_i > n.to_i\n      n_array[i], n_array[i+1] = n_array[i+1], n_array[i]\n      return n_array.join.to_i\n    end\n  end\n  -1\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif num < n_array[index + 1]\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\nend",
    "  n = n.to_s.split('').map(&:to_i)\n  i = n.length - 1\n  while i > 0\n    if n[i] > n[i - 1]\n      n[i], n[i - 1] = n[i - 1], n[i]\n      return n.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif n_array[index] < n_array[index + 1]\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index < n_array.length - 1\n      if num < n_array[index + 1]\n        n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n        break\n      end\n    end\n  end\n  n_array.join('').to_i\nend",
    "  # convert to string\n  num = n.to_s\n  # find the first digit that is smaller than the digit to its right\n  num.each_char.with_index do |char, index|\n    if index < num.length - 1 && char < num[index + 1]\n      # find the smallest digit to the right of the pivot that is greater than the pivot\n      # swap the pivot with the smallest digit to the right of the pivot\n      num[index], num[index + 1] = num[index + 1], num[index]\n      # reverse the digits to the right of the pivot\n      num[index + 1..-1] = num[index + 1..-1].reverse\n      # convert to integer and return\n      return num.to_i\n    end\n  end\n  # if no such digit exists, return -1\n  -1\nend",
    "  # get all permutations of the digits\n  # sort the permutations\n  # find the next biggest permutation\n  # return the next biggest permutation\n  permutations = n.to_s.split(\"\").permutation.to_a.map { |perm| perm.join(\"\").to_i }.sort\n  permutations[permutations.index(n) + 1]\nend",
    "  # find the first digit that is smaller than the digit to its right\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  # swap the pivot with the smallest digit to the right\n  # sort the digits to the right of the pivot\n  # join the digits and return the number\n  digits = n.to_s.chars\n  pivot = -1\n  (digits.length - 1).downto(1) do |i|\n    if digits[i] > digits[i - 1]\n      pivot = i - 1\n      break\n    end\n  end\n  return -1 if pivot == -1\n  smallest = pivot + 1\n  (pivot + 1).upto(digits.length - 1) do |i|\n    if digits[i] < digits[smallest] && digits[i] > digits[pivot]\n      smallest = i\n    end\n  end\n  digits[pivot], digits[smallest] = digits[smallest], digits[pivot]\n  digits[pivot + 1..-1] = digits[pivot + 1..-1].sort\n  digits.join.to_i\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i+1] && num < n_arr[i+1]\n      n_arr[i], n_arr[i+1] = n_arr[i+1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\n  -1\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, i|\n    if num < n_array[i + 1]\n      n_array[i], n_array[i + 1] = n_array[i + 1], n_array[i]\n      return n_array.join.to_i\n    end\n  end\n  -1\nend",
    "  # if n is a single digit, return -1\n  return -1 if n.to_s.length == 1\n  # convert n to an array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = 0\n  while i < digits.length - 1\n    break if digits[i] < digits[i + 1]\n    i += 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i == digits.length - 1\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = i + 1\n  while j < digits.length\n    break if digits[j] > digits[i]\n    j += 1\n  end\n  # swap the pivot with the smallest digit to the right of the pivot\n  digits[i], digits[j] = digits[j], digits[i]\n  # sort the digits to the right of the pivot in ascending order\n  digits[i + 1..-1] = digits[i + 1..-1].sort\n  # convert the array of digits back to a number\n  digits.join.to_i\nend",
    "  # split the number into an array of digits\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the digit to its right\n  i = 0\n  while i < digits.length - 1\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i += 1\n  end\n  # if no such digit exists, return -1\n  if i == digits.length - 1\n    return -1\n  end\n  # find the smallest digit to the right of the digit found in the previous step that is greater than the digit found in the previous step\n  j = i + 1\n  while j < digits.length\n    if digits[j] > digits[i]\n      break\n    end\n    j += 1\n  end\n  # swap the two digits found in the previous two steps\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the digit found in the first step\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # join the digits and convert to an integer\n  digits.join.to_i\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index < n_array.length - 1\n      if num < n_array[index + 1]\n        n_array[index] = n_array[index + 1]\n        n_array[index + 1] = num\n        return n_array.join('').to_i\n      end\n    end\n  end\n  return -1\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, idx|\n    if idx == n_array.length - 1\n      return -1\n    elsif num < n_array[idx + 1]\n      n_array[idx], n_array[idx + 1] = n_array[idx + 1], n_array[idx]\n      return n_array.join('').to_i\n    end\n  end\nend",
    "  # get the digits of the number\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit exists, the number is already the largest possible\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j > i && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right that is larger than the pivot\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number as an integer\n  digits.join.to_i\nend",
    "  digits = n.to_s.split('')\n  (digits.length - 2).downto(0).each do |i|\n    if digits[i] < digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join('').to_i\n    end\n  end\n  -1\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif n_array[index + 1] > num\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\nend",
    "  return -1 if n.to_s.size == 1\n  digits = n.to_s.split('').map(&:to_i)\n  i = digits.size - 1\n  while i > 0 && digits[i - 1] >= digits[i]\n    i -= 1\n  end\n  return -1 if i <= 0\n  j = digits.size - 1\n  while digits[j] <= digits[i - 1]\n    j -= 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  digits[i..-1] = digits[i..-1].reverse\n  digits.join.to_i\nend",
    "  digits = n.to_s.split('')\n  (digits.length - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join('').to_i\n    end\n  end\n  -1\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif n_array[index].to_i > n_array[index + 1].to_i\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, idx|\n    if idx < n_arr.length - 1\n      if n_arr[idx + 1].to_i > num.to_i\n        n_arr[idx], n_arr[idx + 1] = n_arr[idx + 1], n_arr[idx]\n        return n_arr.join('').to_i\n      end\n    end\n  end\n  -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, idx|\n    n_arr[idx] = n_arr[idx + 1]\n    n_arr[idx + 1] = num\n    return n_arr.join.to_i if n_arr.join.to_i > n\n  end\n  -1\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index < n_array.length - 1\n      if num < n_array[index + 1]\n        n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n        return n_array.join('').to_i\n      end\n    end\n  end\n  -1\nend",
    "  n = n.to_s.split('')\n  n.permutation.to_a.map(&:join).map(&:to_i).sort.reverse.each { |num| return num if num > n.join.to_i }\n  -1\nend",
    "  return -1 if n.to_s.length == 1\n  digits = n.to_s.split('').map(&:to_i)\n  i = digits.length - 1\n  while i > 0\n    if digits[i] > digits[i - 1]\n      digits[i], digits[i - 1] = digits[i - 1], digits[i]\n      return digits.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend",
    "  return -1 if n.to_s.length == 1\n  digits = n.to_s.split('').map(&:to_i)\n  i = digits.length - 1\n  while i > 0\n    if digits[i - 1] < digits[i]\n      digits[i - 1], digits[i] = digits[i], digits[i - 1]\n      return digits.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend",
    "  # get the digits of the number\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the next digit\n  i = 0\n  while i < digits.length - 1\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i += 1\n  end\n  # if no such digit exists, the number is the largest possible\n  return -1 if i == digits.length - 1\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = i + 1\n  while j < digits.length\n    if digits[j] > digits[i]\n      break\n    end\n    j += 1\n  end\n  # swap the pivot with the smallest digit to the right\n  digits[i], digits[j] = digits[j], digits[i]\n  # sort the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].sort\n  # return the number\n  digits.join('').to_i\nend",
    "  # get all permutations of the digits\n  perms = n.to_s.split('').permutation.to_a\n  # sort the permutations\n  perms.sort!\n  # find the index of the given number\n  index = perms.index(n.to_s.split(''))\n  # return the next bigger number\n  return perms[index + 1].join.to_i\nend",
    "  # convert number to string, split into array of chars, sort in descending order, join\n  n.to_s.chars.sort.reverse.join.to_i\nend",
    "  n = n.to_s.split('')\n  n.each_with_index do |num, index|\n    if n[index + 1] && n[index + 1].to_i > num.to_i\n      n[index], n[index + 1] = n[index + 1], n[index]\n      return n.join.to_i\n    end\n  end\n  -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if i < n_arr.length - 1\n      if num < n_arr[i + 1]\n        n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n        return n_arr.join('').to_i\n      end\n    end\n  end\n  -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.permutation.to_a.map { |x| x.join.to_i }.sort.reverse.each do |x|\n    return x if x > n\n  end\n  -1\nend",
    "  # get the digits of the number\n  digits = n.to_s.split('')\n  # get the length of the number\n  length = digits.length\n  # get the index of the digit to be swapped\n  index = length - 2\n  # loop through the digits from the end\n  while index >= 0\n    # if the digit is less than the digit after it\n    if digits[index] < digits[index + 1]\n      # get the index of the digit to be swapped with\n      swap_index = index + 1\n      # loop through the digits from the end\n      (index + 1...length).each do |i|\n        # if the digit is greater than the digit to be swapped\n        if digits[i] > digits[index]\n          # set the swap index to the index of the digit\n          swap_index = i\n        end\n      end\n      # swap the digits\n      digits[index], digits[swap_index] = digits[swap_index], digits[index]\n      # sort the digits after the index\n      digits[index + 1..-1] = digits[index + 1..-1].sort\n      # return the number\n      return digits.join('').to_i\n    end\n    # decrement the index\n    index -= 1\n  end\n  # return -1 if no bigger number exists\n  -1\nend",
    "  return -1 if n.to_s.size == 1\n  digits = n.to_s.chars.map(&:to_i)\n  i = digits.size - 1\n  while i > 0 && digits[i] <= digits[i - 1]\n    i -= 1\n  end\n  return -1 if i == 0\n  j = digits.size - 1\n  while j >= i && digits[j] <= digits[i - 1]\n    j -= 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  digits[i..-1] = digits[i..-1].sort\n  digits.join.to_i\nend",
    "  digits = n.to_s.split('')\n  length = digits.length\n  i = length - 1\n  while i > 0\n    if digits[i] > digits[i - 1]\n      temp = digits[i]\n      digits[i] = digits[i - 1]\n      digits[i - 1] = temp\n      break\n    end\n    i -= 1\n  end\n  digits.join.to_i\nend",
    "  # convert number to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i == -1\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the new number\n  digits.join.to_i\nend",
    "  n_arr = n.to_s.split('').map(&:to_i)\n  (n_arr.length - 1).downto(1) do |i|\n    if n_arr[i] > n_arr[i - 1]\n      n_arr[i], n_arr[i - 1] = n_arr[i - 1], n_arr[i]\n      return n_arr.join.to_i\n    end\n  end\n  -1\nend",
    "  digits = n.to_s.split('')\n  (digits.size - 2).downto(0) do |i|\n    if digits[i] < digits[i+1]\n      digits[i], digits[i+1] = digits[i+1], digits[i]\n      return digits.join.to_i\n    end\n  end\n  -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if i < n_arr.length - 1\n      if n_arr[i].to_i < n_arr[i + 1].to_i\n        n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n        return n_arr.join('').to_i\n      end\n    end\n  end\n  -1\nend",
    "  # return -1 if n.to_s.split('').uniq.length == 1\n  # return -1 if n.to_s.split('').sort.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split('').sort.reverse.join.to_i == n\n  # return -1 if n.to_s.split(",
    "  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the one after it\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i+1]\n    i -= 1\n  end\n  # if no such digit exists, the number is already the biggest possible\n  return -1 if i < 0\n  # find the smallest digit that is bigger than the one at i\n  j = digits.length - 1\n  while j > i && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the two digits\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits after i\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # convert back to integer\n  digits.join.to_i\nend",
    "  # convert to string, split into array of chars, sort in descending order, join, convert to int\n  n.to_s.split('').sort.reverse.join.to_i\nend",
    "  n_str = n.to_s\n  n_arr = n_str.split('')\n  n_arr.sort!\n  n_arr.reverse!\n  n_arr.join('').to_i\nend",
    "  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if n[i+1] && n[i+1].to_i > num.to_i\n      n[i], n[i+1] = n[i+1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend",
    "  n = n.to_s.split('')\n  n.each_with_index do |digit, index|\n    if index == n.length - 1\n      return -1\n    elsif digit < n[index + 1]\n      n[index], n[index + 1] = n[index + 1], n[index]\n      return n.join.to_i\n    end\n  end\nend",
    "  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = 0\n  while i < digits.length - 1\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i += 1\n  end\n  # if no such digit exists, return -1\n  if i == digits.length - 1\n    return -1\n  end\n  # find the smallest digit to the right of the digit found above that is greater than it\n  j = i + 1\n  while j < digits.length\n    if digits[j] > digits[i]\n      break\n    end\n    j += 1\n  end\n  # swap the two digits\n  digits[i], digits[j] = digits[j], digits[i]\n  # sort the digits to the right of the digit found above in ascending order\n  digits[i + 1..-1] = digits[i + 1..-1].sort\n  # return the number\n  digits.join.to_i\nend",
    "  n = n.to_s.split('')\n  n.each_with_index do |digit, i|\n    if n[i+1] && digit < n[i+1]\n      n[i], n[i+1] = n[i+1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend",
    "  n_str = n.to_s\n  n_str.split('').permutation.map(&:join).map(&:to_i).sort.reverse.find { |i| i > n }\nend",
    "  digits = n.to_s.split('')\n  i = digits.length - 1\n  while i > 0 && digits[i - 1] >= digits[i]\n    i -= 1\n  end\n  return -1 if i <= 0\n  j = digits.length - 1\n  while digits[j] <= digits[i - 1]\n    j -= 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  digits[i..-1] = digits[i..-1].reverse\n  digits.join.to_i\nend",
    "  # find the first digit that is smaller than the digit to its right\n  # find the smallest digit to the right of the digit found above that is larger than the digit found above\n  # swap the digits\n  # sort the digits to the right of the digit found above\n  # join the digits and return the number\n  n.to_s.split('').each_with_index do |digit, index|\n    next if index == n.to_s.length - 1\n    if digit < n.to_s[index + 1]\n      min_index = index + 1\n      min_digit = n.to_s[index + 1]\n      (index + 1).upto(n.to_s.length - 1) do |i|\n        if n.to_s[i] < min_digit && n.to_s[i] > digit\n          min_index = i\n          min_digit = n.to_s[i]\n        end\n      end\n      n.to_s[index], n.to_s[min_index] = n.to_s[min_index], n.to_s[index]\n      return n.to_s[0..index] + n.to_s[index + 1..-1].split('').sort.join('').to_i\n    end\n  end\n  -1\nend",
    "  # convert to string\n  # split into array\n  # sort array\n  # join array\n  # convert to integer\n  n.to_s.split('').sort.join.to_i\nend",
    "  n_array = n.to_s.split('')\n  i = n_array.length - 1\n  while i > 0\n    if n_array[i] > n_array[i - 1]\n      n_array[i], n_array[i - 1] = n_array[i - 1], n_array[i]\n      return n_array.join('').to_i\n    end\n    i -= 1\n  end\n  -1\nend",
    "  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is less than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i+1]\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # return the number\n  digits.join.to_i\nend",
    "  # convert number to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit exists, the number is already the largest possible\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if i == n_arr.length - 1\n      return -1\n    elsif num < n_arr[i + 1]\n      n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\nend",
    "  n = n.to_s.split(\"\")\n  n.each_with_index do |num, index|\n    if n[index + 1] && n[index + 1].to_i > num.to_i\n      n[index], n[index + 1] = n[index + 1], n[index]\n      return n.join.to_i\n    end\n  end\n  -1\nend",
    "  n_str = n.to_s\n  n_arr = n_str.split('')\n  n_arr.permutation.to_a.map { |a| a.join.to_i }.sort.reverse.each do |i|\n    return i if i > n\n  end\n  -1\nend",
    "  # get the digits of the number\n  digits = n.to_s.chars.map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit is found, the number is already the largest possible\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j > i && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |digit, i|\n    if n_arr[i+1] && digit < n_arr[i+1]\n      n_arr[i], n_arr[i+1] = n_arr[i+1], n_arr[i]\n      break\n    end\n  end\n  n_arr.join.to_i\nend",
    "  return -1 if n.to_s.length == 1\n  digits = n.to_s.split('').map(&:to_i)\n  i = digits.length - 1\n  while i > 0\n    if digits[i] > digits[i - 1]\n      digits[i], digits[i - 1] = digits[i - 1], digits[i]\n      return digits.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend",
    "  # convert to array of digits\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit exists, the number is already the largest possible\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j > i && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # convert back to integer\n  digits.join.to_i\nend",
    "  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if n[i+1] && num < n[i+1]\n      n[i], n[i+1] = n[i+1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend",
    "  n_array = n.to_s.split('')\n  n_array.permutation.to_a.map { |x| x.join.to_i }.sort.each do |x|\n    return x if x > n\n  end\n  -1\nend",
    "  # convert to string\n  n_str = n.to_s\n  # find the first decreasing digit\n  i = n_str.length - 2\n  while i >= 0 && n_str[i] >= n_str[i+1]\n    i -= 1\n  end\n  # if no decreasing digit, return -1\n  return -1 if i == -1\n  # find the smallest digit that is greater than the decreasing digit\n  j = n_str.length - 1\n  while n_str[j] <= n_str[i]\n    j -= 1\n  end\n  # swap the decreasing digit with the smallest digit that is greater than it\n  n_str[i], n_str[j] = n_str[j], n_str[i]\n  # reverse the digits after the decreasing digit\n  n_str[i+1..-1] = n_str[i+1..-1].reverse\n  # convert back to integer\n  n_str.to_i\nend",
    "  # find the rightmost digit that is smaller than the digit to its right\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  # swap the pivot with the smallest digit to the right\n  # sort the digits to the right of the pivot in ascending order\n  # return the new number\n  n_arr = n.to_s.split('')\n  pivot = n_arr.length - 2\n  while pivot >= 0 && n_arr[pivot] >= n_arr[pivot + 1]\n    pivot -= 1\n  end\n  return -1 if pivot < 0\n  smallest = pivot + 1\n  (pivot + 1).upto(n_arr.length - 1) do |i|\n    smallest = i if n_arr[i] > n_arr[pivot] && n_arr[i] < n_arr[smallest]\n  end\n  n_arr[pivot], n_arr[smallest] = n_arr[smallest], n_arr[pivot]\n  n_arr[pivot + 1..-1] = n_arr[pivot + 1..-1].sort\n  n_arr.join.to_i\nend",
    "  n = n.to_s.split('')\n  n.permutation.to_a.map(&:join).map(&:to_i).sort.reverse.each do |i|\n    return i if i > n.join.to_i\n  end\n  -1\nend",
    "  # get the digits of the number\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i+1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  if i < 0\n    return -1\n  end\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # return the number\n  digits.join.to_i\nend",
    "  # get all permutations of the digits of the number\n  permutations = n.to_s.split('').permutation.map(&:join).map(&:to_i)\n  # filter out permutations that are smaller than the original number\n  permutations.select { |perm| perm > n }.min\nend",
    "  n = n.to_s.split('')\n  (n.length - 2).downto(0) do |i|\n    if n[i] < n[i + 1]\n      n[i], n[i + 1] = n[i + 1], n[i]\n      return n.join('').to_i\n    end\n  end\n  -1\nend",
    "  n_str = n.to_s\n  n_str.split('').permutation.map(&:join).map(&:to_i).sort.reverse.each do |num|\n    return num if num > n\n  end\n  -1\nend",
    "  n_str = n.to_s\n  n_arr = n_str.split('')\n  n_arr.sort!\n  n_arr.reverse!\n  n_arr.join('').to_i\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i + 1] && num < n_arr[i + 1]\n      n_arr.delete_at(i)\n      n_arr.insert(i, num)\n      return n_arr.join.to_i\n    end\n  end\n  -1\nend",
    "  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if i == n.length - 1\n      return -1\n    elsif num < n[i + 1]\n      n[i], n[i + 1] = n[i + 1], n[i]\n      return n.join('').to_i\n    end\n  end\nend",
    "  # get all permutations of the digits\n  perms = n.to_s.split('').permutation.to_a\n  # sort the permutations\n  perms.sort!\n  # find the index of the original number\n  index = perms.index(n.to_s.split(''))\n  # return the next number in the sorted array\n  return perms[index + 1].join.to_i\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, i|\n    if n_array[i + 1] && n_array[i + 1].to_i > num.to_i\n      n_array[i], n_array[i + 1] = n_array[i + 1], n_array[i]\n      return n_array.join('').to_i\n    end\n  end\n  -1\nend",
    "  digits = n.to_s.split('')\n  return -1 if digits.length == 1\n  i = digits.length - 1\n  while i > 0\n    if digits[i] > digits[i - 1]\n      digits[i], digits[i - 1] = digits[i - 1], digits[i]\n      return digits.join('').to_i\n    end\n    i -= 1\n  end\n  -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if i == n_arr.length - 1\n      return -1\n    elsif n_arr[i] < n_arr[i + 1]\n      n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\nend",
    "  n = n.to_s.split('').map(&:to_i)\n  i = n.length - 1\n  while i > 0\n    if n[i] > n[i - 1]\n      n[i], n[i - 1] = n[i - 1], n[i]\n      return n.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend",
    "  # convert to string, split into array, sort, join\n  # if the result is the same as the original, return -1\n  # else return the result\n  result = n.to_s.split('').sort.join.to_i\n  result == n ? -1 : result\nend",
    "  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit from the right that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i+1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # return the rearranged number\n  digits.join.to_i\nend",
    "  # convert to string\n  # split into array\n  # sort\n  # join\n  # convert to integer\n  n.to_s.split('').sort.join.to_i\nend",
    "  # get the digits of the number\n  digits = n.to_s.split('')\n  # get the index of the first digit that is smaller than the digit to the right\n  index = digits.each_with_index.find { |d, i| digits[i + 1] && d < digits[i + 1] }[1]\n  # get the index of the smallest digit that is larger than the digit at the index\n  swap_index = digits[index + 1..-1].each_with_index.min[1]\n  # swap the digits\n  digits[index], digits[index + 1 + swap_index] = digits[index + 1 + swap_index], digits[index]\n  # sort the digits to the right of the index\n  digits[index + 1..-1] = digits[index + 1..-1].sort\n  # return the number\n  digits.join.to_i\nend",
    "  digits = n.to_s.chars.map(&:to_i)\n  (digits.length - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join.to_i\n    end\n  end\n  -1\nend",
    "  n_str = n.to_s\n  n_arr = n_str.split('')\n  n_arr.permutation.to_a.map { |x| x.join.to_i }.sort.reverse.each do |x|\n    return x if x > n\n  end\n  -1\nend",
    "  # convert to array\n  # sort array\n  # join array\n  # convert to integer\n  # return integer\n  n.to_s.split('').sort.reverse.join.to_i\nend",
    "  # convert to string, split into chars, sort, join, convert to int\n  n.to_s.chars.sort.join.to_i\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, idx|\n    if idx == n_arr.length - 1\n      return -1\n    elsif num < n_arr[idx + 1]\n      n_arr[idx], n_arr[idx + 1] = n_arr[idx + 1], n_arr[idx]\n      return n_arr.join('').to_i\n    end\n  end\nend",
    "  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  if i < 0\n    return -1\n  end\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the new number\n  digits.join.to_i\nend",
    "  n = n.to_s.split('')\n  i = n.length - 1\n  while i > 0\n    if n[i] > n[i - 1]\n      n[i], n[i - 1] = n[i - 1], n[i]\n      return n.join('').to_i\n    end\n    i -= 1\n  end\n  -1\nend",
    "  # convert to string, split into array of digits\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  if i < 0\n    return -1\n  end\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend",
    "  # convert to string, split into array, sort, join, convert to integer\n  n.to_s.split('').sort.join.to_i\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    n_arr[i] = num.to_i\n  end\n  n_arr.sort!\n  n_arr.reverse!\n  n_arr.join.to_i\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i + 1] && n_arr[i + 1] > num\n      n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\n  -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i+1] && n_arr[i+1].to_i > num.to_i\n      n_arr[i], n_arr[i+1] = n_arr[i+1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\n  -1\nend",
    "  n_arr = n.to_s.split('')\n  (n_arr.length - 2).downto(0) do |i|\n    if n_arr[i] < n_arr[i + 1]\n      n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\n  -1\nend",
    "  digits = n.to_s.split('')\n  (digits.length - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join.to_i\n    end\n  end\n  -1\nend",
    "  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if n[i+1] && n[i+1].to_i > num.to_i\n      n[i], n[i+1] = n[i+1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend",
    "  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i < 0\n  # find the smallest digit to the right of i that is larger than digits[i]\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap digits[i] and digits[j]\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of i\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend",
    "  # convert to string\n  # split into array\n  # sort array\n  # convert back to integer\n  n.to_s.split('').sort.join.to_i\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.permutation.to_a.map(&:join).map(&:to_i).sort.reverse.each do |num|\n    return num if num > n\n  end\n  -1\nend",
    "  digits = n.to_s.split('').map(&:to_i)\n  digits.permutation.to_a.map { |x| x.join.to_i }.sort.reverse.each do |x|\n    return x if x > n\n  end\n  -1\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif num < n_array[index + 1]\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\nend",
    "  digits = n.to_s.split('').map(&:to_i)\n  digits.permutation.to_a.map { |arr| arr.join.to_i }.sort.reverse.each do |num|\n    return num if num > n\n  end\n  -1\nend",
    "  n = n.to_s.split('')\n  n.each_with_index do |num, index|\n    next if index == n.length - 1\n    if num < n[index + 1]\n      n[index], n[index + 1] = n[index + 1], n[index]\n      break\n    end\n  end\n  n.join.to_i\nend",
    "  digits = n.to_s.split('')\n  digits.each_with_index do |d, i|\n    next if i == 0\n    if digits[i] > digits[i - 1]\n      digits[i], digits[i - 1] = digits[i - 1], digits[i]\n      return digits.join('').to_i\n    end\n  end\n  -1\nend",
    "  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the one to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to the right of the pivot\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the new number\n  digits.join('').to_i\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif num < n_array[index + 1]\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join.to_i\n    end\n  end\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif num < n_array[index + 1]\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join.to_i\n    end\n  end\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |val, index|\n    if index < n_array.length - 1\n      if n_array[index + 1].to_i > val.to_i\n        n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n        return n_array.join('').to_i\n      end\n    end\n  end\n  -1\nend",
    "  return -1 if n.to_s.size == 1\n  digits = n.to_s.chars.map(&:to_i)\n  i = digits.size - 1\n  while i > 0 && digits[i - 1] >= digits[i]\n    i -= 1\n  end\n  return -1 if i == 0\n  j = digits.size - 1\n  while digits[j] <= digits[i - 1]\n    j -= 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  digits[i..-1] = digits[i..-1].reverse\n  digits.join.to_i\nend",
    "  # If the number is a single digit, there is no bigger number\n  return -1 if n < 10",
    "  digits = n.to_s.split('')\n  return -1 if digits.length == 1\n  (digits.length - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join.to_i\n    end\n  end\n  -1\nend",
    "  n = n.to_s.split('').map(&:to_i)\n  i = n.length - 1\n  while i > 0 && n[i] <= n[i - 1]\n    i -= 1\n  end\n  return -1 if i == 0\n  j = n.length - 1\n  while n[j] <= n[i - 1]\n    j -= 1\n  end\n  n[i - 1], n[j] = n[j], n[i - 1]\n  n[i..-1] = n[i..-1].reverse\n  n.join.to_i\nend",
    "  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the one to the right\n  index = digits.each_index.select { |i| digits[i] < digits[i+1] }.last\n  # if no such digit exists, return -1\n  return -1 if index.nil?\n  # find the smallest digit to the right of the index that is larger than the digit at the index\n  swap_index = digits[index+1..-1].each_index.select { |i| digits[index+1+i] > digits[index] }.first + index + 1\n  # swap the digits at the index and the swap_index\n  digits[index], digits[swap_index] = digits[swap_index], digits[index]\n  # sort the digits to the right of the index\n  digits[index+1..-1] = digits[index+1..-1].sort\n  # convert to integer and return\n  digits.join.to_i\nend",
    "  # get all possible permutations of the number\n  permutations = n.to_s.split('').permutation.to_a.map { |perm| perm.join.to_i }\n  # sort the permutations\n  permutations.sort!\n  # find the index of the given number in the sorted permutations\n  index = permutations.index(n)\n  # if the index is the last index, return -1\n  return -1 if index == permutations.length - 1\n  # otherwise, return the next permutation\n  permutations[index + 1]\nend",
    "  n_arr = n.to_s.split('')\n  i = n_arr.length - 1\n  while i > 0 && n_arr[i] <= n_arr[i - 1]\n    i -= 1\n  end\n  return -1 if i == 0\n  j = n_arr.length - 1\n  while n_arr[j] <= n_arr[i - 1]\n    j -= 1\n  end\n  n_arr[i - 1], n_arr[j] = n_arr[j], n_arr[i - 1]\n  n_arr[i..-1] = n_arr[i..-1].sort\n  n_arr.join('').to_i\nend",
    "  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if n[i+1] && num < n[i+1]\n      n[i], n[i+1] = n[i+1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend",
    "  n = n.to_s.split('')\n  i = n.length - 1\n  while i > 0\n    if n[i] > n[i-1]\n      n[i], n[i-1] = n[i-1], n[i]\n      return n.join('').to_i\n    end\n    i -= 1\n  end\n  -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i+1] && n_arr[i+1].to_i > num.to_i\n      n_arr.insert(i, n_arr.delete_at(i+1))\n      return n_arr.join.to_i\n    end\n  end\n  -1\nend",
    "  # Find the first number from the right that is smaller than the number to its right\n  # Find the next bigger number to the right of the first number\n  # Swap the two numbers\n  # Sort the numbers to the right of the first number\n  # Return the new number\n  n = n.to_s.split('')\n  i = n.length - 1\n  while i > 0\n    if n[i] > n[i - 1]\n      j = i\n      while j < n.length\n        if n[j] > n[i - 1]\n          n[i - 1], n[j] = n[j], n[i - 1]\n          break\n        end\n        j += 1\n      end\n      n[i..-1] = n[i..-1].sort\n      return n.join('').to_i\n    end\n    i -= 1\n  end\n  -1\nend",
    "  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first number that is smaller than the next number\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  # if no such number is found, return -1\n  if i < 0\n    return -1\n  end\n  # find the smallest number that is bigger than the number at i\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the numbers at i and j\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the numbers after i\n  digits[i + 1..digits.length - 1] = digits[i + 1..digits.length - 1].reverse\n  # return the number\n  digits.join.to_i\nend",
    "  n_str = n.to_s\n  n_arr = n_str.split('')\n  n_arr.sort!\n  n_arr.reverse!\n  n_arr.join('').to_i\nend",
    "  # find the first digit from the right that is smaller than the digit to its right\n  # find the smallest digit to the right of the digit found in step 1 that is greater than the digit found in step 1\n  # swap the digits found in step 1 and 2\n  # reverse the digits to the right of the digit found in step 1\n  # return the number\n  n = n.to_s.split('')\n  i = n.length - 1\n  while i > 0\n    if n[i] > n[i - 1]\n      break\n    end\n    i -= 1\n  end\n  return -1 if i == 0\n  j = i\n  while j < n.length\n    if n[j] < n[i - 1]\n      break\n    end\n    j += 1\n  end\n  n[i - 1], n[j] = n[j], n[i - 1]\n  n[i..-1] = n[i..-1].reverse\n  n.join.to_i\nend",
    "  n = n.to_s.split('')\n  n.permutation.to_a.map { |x| x.join.to_i }.sort.reverse.each do |x|\n    return x if x > n.join.to_i\n  end\n  -1\nend",
    "  # get all permutations of the digits\n  # sort the permutations\n  # find the next biggest number\n  # return the next biggest number\n  digits = n.to_s.split('')\n  permutations = digits.permutation.to_a\n  permutations.map! { |permutation| permutation.join.to_i }\n  permutations.sort!\n  permutations.each_with_index do |permutation, index|\n    if permutation > n\n      return permutation\n    end\n  end\n  return -1\nend",
    "  # convert to string, split into array of chars, sort in descending order\n  # convert back to string, convert to integer\n  n.to_s.split('').sort.reverse.join.to_i\nend",
    "  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit after it\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i+1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i == -1\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to the right of the pivot\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # return the number\n  digits.join.to_i\nend",
    "  n_str = n.to_s\n  n_arr = n_str.split('')\n  n_arr.sort!\n  n_arr.reverse!\n  n_arr.join('').to_i\nend",
    "  # find the first digit that is smaller than the digit to its right\n  # find the next biggest digit to the right of the first digit\n  # swap the two digits\n  # sort the digits to the right of the first digit\n  # join the digits\n  # return the number\n  digits = n.to_s.split('')\n  first_digit = digits.each_with_index.find { |digit, i| digit < digits[i + 1] }\n  return -1 if first_digit.nil?",
    "  arr = n.to_s.split('')\n  i = arr.length - 1\n  while i > 0\n    if arr[i] > arr[i - 1]\n      arr[i], arr[i - 1] = arr[i - 1], arr[i]\n      return arr.join('').to_i\n    end\n    i -= 1\n  end\n  -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if i == n_arr.length - 1\n      return -1\n    elsif n_arr[i] < n_arr[i + 1]\n      n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i+1] && n_arr[i+1].to_i > num.to_i\n      n_arr[i], n_arr[i+1] = n_arr[i+1], n_arr[i]\n      return n_arr.join.to_i\n    end\n  end\n  -1\nend",
    "  # get the digits of the number\n  digits = n.to_s.split('')\n  # get the index of the digit to be swapped\n  index = digits.length - 2\n  while index >= 0\n    if digits[index] < digits[index + 1]\n      # swap the digits\n      temp = digits[index]\n      digits[index] = digits[index + 1]\n      digits[index + 1] = temp\n      break\n    end\n    index -= 1\n  end\n  # return the number\n  digits.join.to_i\nend",
    "  return -1 if n.to_s.size == 1\n  n = n.to_s.split('').map(&:to_i)\n  i = n.size - 1\n  while i > 0\n    if n[i] > n[i - 1]\n      n[i], n[i - 1] = n[i - 1], n[i]\n      return n.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend",
    "  digits = n.to_s.chars.map(&:to_i)\n  return -1 if digits.sort.reverse == digits\n  digits.each_with_index do |digit, i|\n    next if i == digits.length - 1\n    if digit > digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join.to_i\n    end\n  end\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, index|\n    if index == n_arr.length - 1\n      return -1\n    elsif num < n_arr[index + 1]\n      n_arr[index], n_arr[index + 1] = n_arr[index + 1], n_arr[index]\n      return n_arr.join('').to_i\n    end\n  end\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if n_array[index + 1] && n_array[index + 1].to_i > num.to_i\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\n  -1\nend",
    "  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if n[i+1] && n[i+1].to_i > num.to_i\n      n[i], n[i+1] = n[i+1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.permutation.to_a.map { |arr| arr.join.to_i }.sort.reverse.each do |num|\n    return num if num > n\n  end\n  -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i + 1] && num < n_arr[i + 1]\n      n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n      return n_arr.join.to_i\n    end\n  end\n  -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if i < n_arr.length - 1\n      if num < n_arr[i + 1]\n        n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n        return n_arr.join('').to_i\n      end\n    end\n  end\n  -1\nend",
    "  n_array = n.to_s.split('').map(&:to_i)\n  n_array.each_with_index do |num, index|\n    if num < n_array[index + 1]\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      break\n    end\n  end\n  n_array.join.to_i\nend",
    "  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, the number is the largest possible\n  if i < 0\n    return -1\n  end\n  # find the smallest digit to the right of i that is larger than digits[i]\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the two digits\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of i\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # convert back to integer\n  digits.join.to_i\nend",
    "  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if n[i+1] && num < n[i+1]\n      n[i], n[i+1] = n[i+1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend",
    "  digits = n.to_s.split('')\n  digits.each_with_index do |digit, index|\n    next if index == digits.length - 1\n    if digit < digits[index + 1]\n      digits[index], digits[index + 1] = digits[index + 1], digits[index]\n      return digits.join('').to_i\n    end\n  end\n  -1\nend",
    "  digits = n.to_s.split('').map(&:to_i)\n  (digits.length - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join.to_i\n    end\n  end\n  -1\nend",
    "  # Find the first digit that is smaller than the digit to its right\n  # Find the smallest digit to the right of the pivot that is greater than the pivot\n  # Swap the two digits\n  # Reverse all the digits to the right of the pivot\n  # Return the new number\n  return -1 if n.to_s.chars.sort.join.to_i == n\n  pivot = n.to_s.chars.each_with_index.find { |d, i| d < n.to_s[i + 1] }\n  swap = n.to_s.chars.each_with_index.find { |d, i| d > pivot[0] && i > pivot[1] }\n  n.to_s[pivot[1]] = swap[0]\n  n.to_s[swap[1]] = pivot[0]\n  n.to_s[0..pivot[1] + 1] + n.to_s[pivot[1] + 1..-1].chars.sort.join\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |n, i|\n    if n_array[i + 1] && n_array[i + 1].to_i > n.to_i\n      n_array[i], n_array[i + 1] = n_array[i + 1], n_array[i]\n      return n_array.join('').to_i\n    end\n  end\n  -1\nend",
    "  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is less than the digit to its right\n  i = 0\n  while i < digits.length - 1\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i += 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i == digits.length - 1\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = i + 1\n  while j < digits.length\n    if digits[j] > digits[i]\n      break\n    end\n    j += 1\n  end\n  # swap the pivot with the smallest digit to the right of the pivot\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend",
    "  n_str = n.to_s\n  n_str.split('').permutation.map(&:join).map(&:to_i).sort.reverse.each do |i|\n    return i if i > n\n  end\n  -1\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, i|\n    if n_array[i + 1] && n_array[i + 1].to_i > num.to_i\n      n_array[i], n_array[i + 1] = n_array[i + 1], n_array[i]\n      return n_array.join.to_i\n    end\n  end\n  -1\nend",
    "  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if n[i+1] && n[i+1].to_i > num.to_i\n      n[i], n[i+1] = n[i+1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend",
    "  # get the digits of the number\n  digits = n.to_s.chars.map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  if i < 0\n    return -1\n  end\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the new number\n  digits.join.to_i\nend",
    "  # Convert the number to a string, split it into an array, sort it, and join it back together\n  # Convert the number back to an integer\n  n.to_s.split(\"\").sort.join.to_i\nend",
    "  n = n.to_s.split('').map(&:to_i)\n  return -1 if n.length == 1\n  i = n.length - 1\n  while i > 0\n    if n[i] > n[i - 1]\n      n[i], n[i - 1] = n[i - 1], n[i]\n      return n.join('').to_i\n    end\n    i -= 1\n  end\n  -1\nend",
    "  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)",
    "  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  index = digits.each_index.find { |i| digits[i] < digits[i+1] }\n  # if no such digit exists, return -1\n  return -1 if index.nil?\n  # find the smallest digit to the right of the digit found above that is larger than the digit found above\n  swap_index = digits[index+1..-1].each_index.min { |a, b| digits[index+1+a] <=> digits[index+1+b] }\n  # swap the digits found above\n  digits[index], digits[index+1+swap_index] = digits[index+1+swap_index], digits[index]\n  # sort the digits to the right of the digit found above in ascending order\n  digits[index+1..-1] = digits[index+1..-1].sort\n  # join the digits and convert to integer\n  digits.join.to_i\nend",
    "  n = n.to_s.split('').map(&:to_i)\n  (n.size - 2).downto(0) do |i|\n    if n[i] < n[i + 1]\n      n[i], n[i + 1] = n[i + 1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if i == n_arr.length - 1\n      return -1\n    elsif num < n_arr[i + 1]\n      n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\nend",
    "  n = n.to_s.split('').map(&:to_i)\n  (n.length - 1).downto(1) do |i|\n    if n[i] > n[i - 1]\n      n[i], n[i - 1] = n[i - 1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    n_arr[i] = num.to_i\n  end\n  n_arr.sort!\n  n_arr.reverse!\n  n_arr.join.to_i\nend",
    "  n = n.to_s.split('')\n  (n.size - 2).downto(0) do |i|\n    if n[i] < n[i + 1]\n      n[i], n[i + 1] = n[i + 1], n[i]\n      return n.join('').to_i\n    end\n  end\n  -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.sort!\n  n_arr.reverse!\n  n_arr.join.to_i\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i + 1] && n_arr[i + 1].to_i > num.to_i\n      n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\n  -1\nend",
    "  # convert to string\n  # split into array\n  # sort\n  # join\n  # convert to int\n  n.to_s.split('').sort.join.to_i\nend",
    "  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if n[i + 1] && num < n[i + 1]\n      n[i], n[i + 1] = n[i + 1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend",
    "  # convert to string\n  # split into array\n  # sort array\n  # join array\n  # convert to integer\n  n.to_s.split('').sort.join.to_i\nend",
    "  digits = n.to_s.split('')\n  (digits.length - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join.to_i\n    end\n  end\n  -1\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, i|\n    if i < n_array.length - 1\n      if num < n_array[i + 1]\n        n_array[i], n_array[i + 1] = n_array[i + 1], n_array[i]\n        return n_array.join.to_i\n      end\n    end\n  end\n  return -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i+1] && n_arr[i+1].to_i > num.to_i\n      n_arr[i], n_arr[i+1] = n_arr[i+1], n_arr[i]\n      return n_arr.join.to_i\n    end\n  end\n  -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.permutation.to_a.map { |x| x.join.to_i }.sort.reverse.each do |x|\n    return x if x > n\n  end\n  -1\nend",
    "  # get all permutations of the digits\n  permutations = n.to_s.split('').permutation.to_a.map { |perm| perm.join.to_i }\n  # find the next biggest number\n  permutations.sort.each_with_index do |num, i|\n    return num if num > n\n  end\n  -1\nend",
    "  digits = n.to_s.split('')\n  (digits.length - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join('').to_i\n    end\n  end\n  -1\nend",
    "  # Get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # Find the first index where the digit is less than the digit to the right of it\n  i = digits.each_index.find { |i| digits[i] < digits[i+1] }\n  # If no such index exists, return -1\n  return -1 if i.nil?\n  # Find the smallest digit to the right of the digit at index i that is greater than the digit at index i\n  j = digits.each_index.find { |j| j > i && digits[j] < digits[i] }\n  # Swap the digits at indices i and j\n  digits[i], digits[j] = digits[j], digits[i]\n  # Sort the digits to the right of index i\n  digits[i+1..-1] = digits[i+1..-1].sort\n  # Return the number\n  digits.join.to_i\nend",
    "  # convert to array of digits\n  digits = n.to_s.split('')\n  # find the first digit that is less than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit, then no bigger number exists\n  return -1 if i < 0\n  # find the smallest digit to the right of i that is greater than digits[i]\n  j = digits.length - 1\n  while j > i && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap digits[i] and digits[j]\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of i\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend",
    "  n_array = n.to_s.split('')\n  n_array.permutation.to_a.map { |x| x.join.to_i }.sort.reverse.each do |x|\n    return x if x > n\n  end\n  -1\nend",
    "  n_array = n.to_s.split('')\n  n_array.permutation.to_a.map { |x| x.join('').to_i }.sort.reverse.each { |x| return x if x > n }\n  -1\nend"
  ]
}