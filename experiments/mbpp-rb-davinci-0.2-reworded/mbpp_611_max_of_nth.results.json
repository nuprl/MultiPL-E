{
  "name": "mbpp_611_max_of_nth",
  "language": "rb",
  "prompt": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map {|x| x[n]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp015sfwcz\nStarted\n.\nFinished in 0.000450395 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2220.27 tests/s, 6660.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_array| sub_array[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb0cm08rd\nStarted\n.\nFinished in 0.000817033 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1223.94 tests/s, 3671.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnpp2iwpd\nStarted\n.\nFinished in 0.000383288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.00 tests/s, 7827.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map {|x| x[n]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp015sfwcz\nStarted\n.\nFinished in 0.000450395 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2220.27 tests/s, 6660.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123465,
      "stdout": "Loaded suite /tmp/tmp28tac05n\nStarted\nF\n===============================================================================\nFailure: test_max_of_nth(TestHumanEval)\n/tmp/tmp28tac05n.rb:9:in `test_max_of_nth'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_max_of_nth\n      8:     candidate = method(:max_of_nth)\n  =>  9:     assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n     10:     assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n     11:     assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n     12:   end\n<19> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00772811 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.40 tests/s, 129.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map {|x| x[n]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp015sfwcz\nStarted\n.\nFinished in 0.000450395 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2220.27 tests/s, 6660.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnpp2iwpd\nStarted\n.\nFinished in 0.000383288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.00 tests/s, 7827.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnpp2iwpd\nStarted\n.\nFinished in 0.000383288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.00 tests/s, 7827.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnpp2iwpd\nStarted\n.\nFinished in 0.000383288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.00 tests/s, 7827.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnpp2iwpd\nStarted\n.\nFinished in 0.000383288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.00 tests/s, 7827.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnpp2iwpd\nStarted\n.\nFinished in 0.000383288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.00 tests/s, 7827.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_array| sub_array[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb0cm08rd\nStarted\n.\nFinished in 0.000817033 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1223.94 tests/s, 3671.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = 0\n  test_list.each do |row|\n    if row[n] > max\n      max = row[n]\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123465,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2uwb6p_w\nStarted\n.\nFinished in 0.000388825 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2571.85 tests/s, 7715.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnpp2iwpd\nStarted\n.\nFinished in 0.000383288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.00 tests/s, 7827.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map {|x| x[n]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp015sfwcz\nStarted\n.\nFinished in 0.000450395 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2220.27 tests/s, 6660.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = 0\n  test_list.each do |row|\n    if row[n] > max\n      max = row[n]\n    end\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123465,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp62y32q25\nStarted\n.\nFinished in 0.000391287 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2555.67 tests/s, 7667.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnpp2iwpd\nStarted\n.\nFinished in 0.000383288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.00 tests/s, 7827.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = test_list[0][n]\n  test_list.each do |row|\n    if row[n] > max\n      max = row[n]\n    end\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123465,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplbxncwbt\nStarted\n.\nFinished in 0.000386606 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2586.61 tests/s, 7759.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_array| sub_array[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb0cm08rd\nStarted\n.\nFinished in 0.000817033 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1223.94 tests/s, 3671.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_array| sub_array[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb0cm08rd\nStarted\n.\nFinished in 0.000817033 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1223.94 tests/s, 3671.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_array| sub_array[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb0cm08rd\nStarted\n.\nFinished in 0.000817033 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1223.94 tests/s, 3671.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map {|x| x[n]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp015sfwcz\nStarted\n.\nFinished in 0.000450395 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2220.27 tests/s, 6660.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_array| sub_array[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb0cm08rd\nStarted\n.\nFinished in 0.000817033 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1223.94 tests/s, 3671.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_array| sub_array[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb0cm08rd\nStarted\n.\nFinished in 0.000817033 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1223.94 tests/s, 3671.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnpp2iwpd\nStarted\n.\nFinished in 0.000383288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.00 tests/s, 7827.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnpp2iwpd\nStarted\n.\nFinished in 0.000383288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.00 tests/s, 7827.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnpp2iwpd\nStarted\n.\nFinished in 0.000383288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.00 tests/s, 7827.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnpp2iwpd\nStarted\n.\nFinished in 0.000383288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.00 tests/s, 7827.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map {|x| x[n]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp015sfwcz\nStarted\n.\nFinished in 0.000450395 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2220.27 tests/s, 6660.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_array| sub_array[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb0cm08rd\nStarted\n.\nFinished in 0.000817033 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1223.94 tests/s, 3671.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_array| sub_array[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb0cm08rd\nStarted\n.\nFinished in 0.000817033 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1223.94 tests/s, 3671.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = test_list[0][n]\n  test_list.each do |sub_list|\n    if sub_list[n] > max\n      max = sub_list[n]\n    end\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123465,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp34gd5vu0\nStarted\n.\nFinished in 0.000483535 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2068.10 tests/s, 6204.31 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnpp2iwpd\nStarted\n.\nFinished in 0.000383288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.00 tests/s, 7827.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_array| sub_array[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb0cm08rd\nStarted\n.\nFinished in 0.000817033 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1223.94 tests/s, 3671.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_array| sub_array[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb0cm08rd\nStarted\n.\nFinished in 0.000817033 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1223.94 tests/s, 3671.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = test_list[0][n]\n  test_list.each do |sub_list|\n    if sub_list[n] > max\n      max = sub_list[n]\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123465,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy3kzggvy\nStarted\n.\nFinished in 0.000407908 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.53 tests/s, 7354.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123465,
      "stdout": "Loaded suite /tmp/tmp28tac05n\nStarted\nF\n===============================================================================\nFailure: test_max_of_nth(TestHumanEval)\n/tmp/tmp28tac05n.rb:9:in `test_max_of_nth'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_max_of_nth\n      8:     candidate = method(:max_of_nth)\n  =>  9:     assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n     10:     assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n     11:     assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n     12:   end\n<19> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00772811 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.40 tests/s, 129.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnpp2iwpd\nStarted\n.\nFinished in 0.000383288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.00 tests/s, 7827.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnpp2iwpd\nStarted\n.\nFinished in 0.000383288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.00 tests/s, 7827.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_array| sub_array[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb0cm08rd\nStarted\n.\nFinished in 0.000817033 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1223.94 tests/s, 3671.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnpp2iwpd\nStarted\n.\nFinished in 0.000383288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.00 tests/s, 7827.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.max_by { |x| x[n] }[n]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123465,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppaa9mnak\nStarted\n.\nFinished in 0.000396278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2523.48 tests/s, 7570.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = test_list[0][n]\n  test_list.each do |row|\n    if row[n] > max\n      max = row[n]\n    end\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123465,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplbxncwbt\nStarted\n.\nFinished in 0.000386606 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2586.61 tests/s, 7759.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_array| sub_array[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb0cm08rd\nStarted\n.\nFinished in 0.000817033 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1223.94 tests/s, 3671.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  # test_list.map { |x| x[n] }.max\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123465,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8bab61nj\nStarted\n.\nFinished in 0.000398398 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2510.05 tests/s, 7530.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map {|x| x[n]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp015sfwcz\nStarted\n.\nFinished in 0.000450395 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2220.27 tests/s, 6660.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnpp2iwpd\nStarted\n.\nFinished in 0.000383288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.00 tests/s, 7827.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnpp2iwpd\nStarted\n.\nFinished in 0.000383288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.00 tests/s, 7827.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_array| sub_array[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb0cm08rd\nStarted\n.\nFinished in 0.000817033 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1223.94 tests/s, 3671.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnpp2iwpd\nStarted\n.\nFinished in 0.000383288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.00 tests/s, 7827.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnpp2iwpd\nStarted\n.\nFinished in 0.000383288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.00 tests/s, 7827.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnpp2iwpd\nStarted\n.\nFinished in 0.000383288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.00 tests/s, 7827.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |arr| arr[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123465,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwgctw3k8\nStarted\n.\nFinished in 0.000396731 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2520.60 tests/s, 7561.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_array| sub_array[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb0cm08rd\nStarted\n.\nFinished in 0.000817033 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1223.94 tests/s, 3671.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |i| i[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123465,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfv4k7_si\nStarted\n.\nFinished in 0.000385387 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2594.79 tests/s, 7784.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = test_list[0][n]\n  test_list.each do |x|\n    if x[n] > max\n      max = x[n]\n    end\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123465,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpg050a987\nStarted\n.\nFinished in 0.00039946 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2503.38 tests/s, 7510.14 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.max_by { |sub_array| sub_array[n] }[n]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123465,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp86aiwi8u\nStarted\n.\nFinished in 0.000384246 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2602.50 tests/s, 7807.50 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  # test_list.map { |x| x[n] }.max\n  test_list.max_by { |x| x[n] }[n]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123465,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxdi5hemz\nStarted\n.\nFinished in 0.000407261 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2455.43 tests/s, 7366.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnpp2iwpd\nStarted\n.\nFinished in 0.000383288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.00 tests/s, 7827.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  # Write your code here\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123465,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb3g1sq2n\nStarted\n.\nFinished in 0.000385188 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2596.13 tests/s, 7788.40 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnpp2iwpd\nStarted\n.\nFinished in 0.000383288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.00 tests/s, 7827.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnpp2iwpd\nStarted\n.\nFinished in 0.000383288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.00 tests/s, 7827.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.max_by { |x| x[n] }[n]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123465,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppaa9mnak\nStarted\n.\nFinished in 0.000396278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2523.48 tests/s, 7570.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnpp2iwpd\nStarted\n.\nFinished in 0.000383288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.00 tests/s, 7827.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_array| sub_array[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb0cm08rd\nStarted\n.\nFinished in 0.000817033 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1223.94 tests/s, 3671.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnpp2iwpd\nStarted\n.\nFinished in 0.000383288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.00 tests/s, 7827.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poit9k2\nStarted\n.\nFinished in 0.000367309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2722.50 tests/s, 8167.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map{|i| i[n]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123465,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp92u4q5ey\nStarted\n.\nFinished in 0.000376342 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2657.16 tests/s, 7971.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpitpw5yfw\nStarted\n.\nFinished in 0.000370971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2695.63 tests/s, 8086.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}