{
  "name": "mbpp_576_is_Sub_Array",
  "language": "rb",
  "prompt": "# Write a rbthon function to check whether an array is subarray of another or not.\ndef is_Sub_Array(a, b)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_Sub_Array\n    candidate = method(:is_Sub_Array)\n    assert_equal(false, candidate.call([1, 4, 3, 5], [1, 2]))\n    assert_equal(true, candidate.call([1, 2, 1], [1, 2, 1]))\n    assert_equal(false, candidate.call([1, 0, 2, 2], [2, 2, 0]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  if a.size < b.size\n    return false\n  end\n  for i in 0..a.size-1\n    if a[i] == b[0]\n      for j in 0..b.size-1\n        if a[i+j] != b[j]\n          break\n        end\n        if j == b.size-1\n          return true\n        end\n      end\n    end\n  end\n  return false\nend",
    "  if a.size > b.size\n    return false\n  end\n  a.each_with_index do |item, index|\n    if item != b[index]\n      return false\n    end\n  end\n  return true\nend",
    "  if a.size > b.size\n    return false\n  end\n  a.each do |i|\n    if b.include?(i)\n      return true\n    end\n  end\n  return false\nend",
    "  a.each do |i|\n    if b.include?(i)\n      return true\n    else\n      return false\n    end\n  end\nend",
    "  a.each do |i|\n    return true if b.include?(i)\n  end\n  return false\nend",
    "  a.each do |i|\n    if b.include?(i)\n      return true\n    else\n      return false\n    end\n  end\nend",
    "  a.each do |i|\n    return true if b.include?(i)\n  end\n  return false\nend",
    "  a.each do |i|\n    if b.include?(i)\n      return true\n    end\n  end\n  return false\nend",
    "  a.each do |i|\n    if b.include?(i)\n      return true\n    else\n      return false\n    end\n  end\nend",
    "  if a.length < b.length\n    return false\n  end\n  for i in 0..a.length - b.length\n    if a[i..i + b.length - 1] == b\n      return true\n    end\n  end\n  return false\nend",
    "  a.each do |i|\n    if b.include?(i)\n      return true\n    end\n  end\n  return false\nend",
    "  a.each do |i|\n    if b.include?(i)\n      return true\n    end\n  end\n  return false\nend",
    "  b.each do |i|\n    return false if !a.include?(i)\n  end\n  return true\nend",
    "  a.each do |x|\n    if b.include?(x)\n      return true\n    end\n  end\n  return false\nend",
    "  a.each do |i|\n    if b.include?(i)\n      return true\n    else\n      return false\n    end\n  end\nend",
    "  a.each do |i|\n    if b.include?(i)\n      puts \"#{a} is sub array of #{b}\"\n    else\n      puts \"#{a} is not sub array of #{b}\"\n    end\n  end\nend",
    "  if a.size > b.size\n    return false\n  end\n  for i in 0..a.size-1\n    if a[i] != b[i]\n      return false\n    end\n  end\n  return true\nend",
    "  a.each do |i|\n    if b.include?(i)\n      return true\n    else\n      return false\n    end\n  end\nend",
    "  if a.size > b.size\n    return false\n  end\n  for i in 0..a.size-1\n    if a[i] != b[i]\n      return false\n    end\n  end\n  return true\nend",
    "  a.each do |i|\n    if b.include?(i)\n      return true\n    else\n      return false\n    end\n  end\nend"
  ]
}