{
  "name": "mbpp_772_remove_length",
  "language": "rb",
  "prompt": "# Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, k)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_length\n    candidate = method(:remove_length)\n    assert_equal(\"person is most value\", candidate.call(\"The person is most value tet\", 3))\n    assert_equal(\"If you me about ok\", candidate.call(\"If you told me about this ok\", 4))\n    assert_equal(\"Forces of darkeness is the\", candidate.call(\"Forces of darkeness is come into the play\", 4))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  test_str.split(' ').delete_if { |word| word.length == k }.join(' ')\nend",
    "  test_str.split(\" \").reject { |word| word.length == k }.join(\" \")\nend",
    "  test_str.split(' ').delete_if { |word| word.length == k }.join(' ')\nend",
    "  test_str.split.delete_if { |word| word.length == k }.join(' ')\nend",
    "  test_str.split(\" \").reject { |word| word.length == k }.join(\" \")\nend",
    "  test_str.split(\" \").delete_if { |word| word.length == k }.join(\" \")\nend",
    "  test_str.split(' ').reject { |word| word.length == k }.join(' ')\nend",
    "  test_str.split(\" \").reject { |word| word.length == k }.join(\" \")\nend",
    "  test_str.split.delete_if { |word| word.length == k }.join(' ')\nend",
    "  test_str.split(' ').delete_if { |word| word.length == k }.join(' ')\nend",
    "  test_str.split(\" \").reject { |word| word.length == k }.join(\" \")\nend",
    "  test_str.split(\" \").delete_if { |word| word.length == k }.join(\" \")\nend",
    "  test_str.split(\" \").delete_if { |word| word.length == k }.join(\" \")\nend",
    "  test_str.split.delete_if { |word| word.length == k }.join(' ')\nend",
    "  test_str.split(\" \").reject { |word| word.length == k }.join(\" \")\nend",
    "  test_str.split(\" \").delete_if { |word| word.length == k }.join(\" \")\nend",
    "  test_str.split.delete_if { |word| word.length == k }.join(' ')\nend",
    "  test_str.split.delete_if { |word| word.length == k }.join(' ')\nend",
    "  test_str.split(\" \").reject{|x| x.length == k}.join(\" \")\nend",
    "  test_str.split(\" \").reject { |word| word.length == k }.join(\" \")\nend"
  ]
}