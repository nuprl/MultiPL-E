{
  "name": "mbpp_409_min_product_tuple",
  "language": "rb",
  "prompt": "# Write a function to find the minimum product from the pairs of arrays within a given array.\ndef min_product_tuple(list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_409_min_product_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_product_tuple\n    candidate = method(:min_product_tuple)\n    assert_equal(8, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(30, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(100, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.inject(:*) }.min\nend",
    "  list1.combination(2).to_a.min_by { |x, y| x * y }\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.min_by { |x, y| x * y }\nend",
    "  list1.combination(2).map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.inject(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.min_by {|x,y| x*y}\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map{|x| x.reduce(:*)}.min\nend",
    "  list1.combination(2).to_a.map {|x| x.reduce(:*)}.min\nend",
    "  list1.combination(2).to_a.map {|x, y| x * y}.min\nend",
    "  min = list1.min\n  list1.delete_at(list1.index(min))\n  min * list1.min\nend",
    "  list1.combination(2).to_a.map {|x| x.inject(:*)}.min\nend",
    "  min_product = list1[0] * list1[1]\n  list1.each_with_index do |num1, i|\n    list1.each_with_index do |num2, j|\n      if i != j\n        product = num1 * num2\n        if product < min_product\n          min_product = product\n        end\n      end\n    end\n  end\n  min_product\nend",
    "  list1.combination(2).to_a.map {|x,y| x*y}.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map {|x| x.reduce(:*)}.min\nend",
    "  list1.combination(2).to_a.map {|x,y| x*y}.min\nend",
    "  list1.combination(2).min_by { |x, y| x * y }\nend",
    "  list1.combination(2).to_a.map {|x| x.reduce(:*)}.min\nend",
    "  min = list1[0] * list1[1]\n  list1.each_with_index do |num1, index1|\n    list1.each_with_index do |num2, index2|\n      next if index1 == index2\n      product = num1 * num2\n      min = product if product < min\n    end\n  end\n  min\nend",
    "  list1.combination(2).to_a.map {|x| x.inject(:*)}.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map {|x| x.inject(:*)}.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.inject(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).map {|x,y| x*y}.min\nend",
    "  min_product = list1[0] * list1[1]\n  list1.each_with_index do |num1, index1|\n    list1.each_with_index do |num2, index2|\n      next if index1 == index2\n      min_product = num1 * num2 if num1 * num2 < min_product\n    end\n  end\n  min_product\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).min_by { |x, y| x * y }\nend",
    "  list1.combination(2).map{|x,y| x*y}.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map {|x| x.inject(:*)}.min\nend",
    "  list1.combination(2).to_a.map { |x| x[0] * x[1] }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.min_by { |x, y| x * y }\nend",
    "  min_product = list1[0] * list1[1]\n  list1.each_with_index do |num1, index1|\n    list1.each_with_index do |num2, index2|\n      if index1 != index2\n        product = num1 * num2\n        if product < min_product\n          min_product = product\n        end\n      end\n    end\n  end\n  min_product\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map {|x| x.reduce(:*)}.min\nend",
    "  list1.combination(2).to_a.map { |x| x.inject(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map {|x| x.reduce(:*)}.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x,y| x*y }.min\nend",
    "  list1.combination(2).to_a.map {|x| x.reduce(:*)}.min\nend",
    "  list1.combination(2).to_a.map{|x| x.reduce(:*)}.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  min_product = list1[0] * list1[1]\n  list1.each_with_index do |num, index|\n    next if index == list1.length - 1\n    product = num * list1[index + 1]\n    min_product = product if product < min_product\n  end\n  min_product\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).map { |a, b| a * b }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  min_product = list1[0][0] * list1[1][0]\n  list1[0].each do |num1|\n    list1[1].each do |num2|\n      min_product = num1 * num2 if num1 * num2 < min_product\n    end\n  end\n  min_product\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map {|x| x.reduce(:*)}.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map{|x| x.reduce(:*)}.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  # sort the list\n  sorted_list = list1.sort\n  # find the product of the first and last elements of the list\n  product = sorted_list[0] * sorted_list[-1]\n  # return the product\n  product\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).min_by { |x, y| x * y }\nend",
    "  list1.combination(2).to_a.map {|x, y| x * y}.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  min_product = list1[0][0] * list1[1][0]\n  list1.each do |list|\n    list.each do |num|\n      if num * list[0] < min_product\n        min_product = num * list[0]\n      end\n    end\n  end\n  min_product\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  min = list1[0] * list1[1]\n  list1.each_with_index do |num1, index1|\n    list1.each_with_index do |num2, index2|\n      if index1 != index2\n        if num1 * num2 < min\n          min = num1 * num2\n        end\n      end\n    end\n  end\n  min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map {|x,y| x*y}.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map {|x| x.reduce(:*)}.min\nend",
    "  list1.combination(2).to_a.map { |x| x.inject(:*) }.min\nend",
    "  list1.combination(2).to_a.map{|x| x.reduce(:*)}.min\nend",
    "  list1.combination(2).to_a.map {|x| x.reduce(:*)}.min\nend",
    "  list1.combination(2).to_a.map{|x| x.reduce(:*)}.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.inject(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  min = list1[0] * list1[1]\n  for i in 0..list1.length-2\n    for j in i+1..list1.length-1\n      if list1[i] * list1[j] < min\n        min = list1[i] * list1[j]\n      end\n    end\n  end\n  return min\nend",
    "  list1.combination(2).to_a.map{|x| x.inject(:*)}.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.min_by {|x,y| x*y}\nend",
    "  list1.combination(2).to_a.map {|x,y| x*y}.min\nend",
    "  list1.combination(2).min_by { |x, y| x * y }\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map {|x| x.reduce(:*)}.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map{|x| x.reduce(:*)}.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  min_product = list1[0][0] * list1[1][0]\n  list1.each do |list|\n    list.each do |num|\n      if num * list[list.index(num) + 1] < min_product\n        min_product = num * list[list.index(num) + 1]\n      end\n    end\n  end\n  min_product\nend",
    "  min_product = list1[0] * list1[1]\n  list1.each_with_index do |num1, index1|\n    list1.each_with_index do |num2, index2|\n      if index1 != index2\n        product = num1 * num2\n        if product < min_product\n          min_product = product\n        end\n      end\n    end\n  end\n  min_product\nend",
    "  list1.combination(2).to_a.map {|x| x.reduce(:*)}.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.min_by{|x,y| x*y}\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).min_by { |x, y| x * y }\nend",
    "  min_product = list1[0] * list1[1]\n  list1.each_with_index do |num1, index1|\n    list1.each_with_index do |num2, index2|\n      if index2 > index1\n        product = num1 * num2\n        min_product = product if product < min_product\n      end\n    end\n  end\n  min_product\nend",
    "  list1.combination(2).to_a.map{|x| x.reduce(:*)}.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.inject(:*) }.min\nend",
    "  list1.combination(2).to_a.map{|x| x.reduce(:*)}.min\nend",
    "  list1.combination(2).to_a.map {|x| x.reduce(:*)}.min\nend",
    "  list1.combination(2).to_a.min_by { |x, y| x * y }\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map {|x| x.inject(:*)}.min\nend",
    "  list1.combination(2).to_a.map {|x| x.reduce(:*)}.min\nend",
    "  list1.combination(2).to_a.map { |x| x.inject(:*) }.min\nend",
    "  min_product = list1[0] * list1[1]\n  list1.each_with_index do |num1, index1|\n    list1.each_with_index do |num2, index2|\n      if index1 != index2\n        product = num1 * num2\n        if product < min_product\n          min_product = product\n        end\n      end\n    end\n  end\n  min_product\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map {|x| x.inject(:*)}.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map{|x| x.reduce(:*)}.min\nend",
    "  list1.combination(2).to_a.min_by {|x, y| x * y}\nend",
    "  list1.combination(2).to_a.map {|x| x.reduce(:*)}.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.min_by { |x| x.reduce(:*) }.reduce(:*)\nend",
    "  list1.combination(2).to_a.map {|x| x.reduce(:*)}.min\nend",
    "  list1.combination(2).to_a.min_by { |x, y| x * y }\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  min = list1[0] * list1[1]\n  list1.each_with_index do |num1, index1|\n    list1.each_with_index do |num2, index2|\n      if index1 != index2\n        if num1 * num2 < min\n          min = num1 * num2\n        end\n      end\n    end\n  end\n  min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  min_product = list1[0] * list1[1]\n  list1.each_with_index do |num1, index1|\n    list1.each_with_index do |num2, index2|\n      next if index1 == index2\n      product = num1 * num2\n      min_product = product if product < min_product\n    end\n  end\n  min_product\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).min_by { |x, y| x * y }\nend",
    "  list1.combination(2).to_a.map {|x| x.reduce(:*)}.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map {|x| x.reduce(:*)}.min\nend",
    "  min_product = list1[0] * list1[1]\n  list1.each_with_index do |num1, index1|\n    list1.each_with_index do |num2, index2|\n      next if index1 == index2\n      product = num1 * num2\n      min_product = product if product < min_product\n    end\n  end\n  min_product\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  min_product = list1[0] * list1[1]\n  list1.each_with_index do |num1, index1|\n    list1.each_with_index do |num2, index2|\n      next if index1 == index2\n      min_product = num1 * num2 if num1 * num2 < min_product\n    end\n  end\n  min_product\nend",
    "  list1.combination(2).to_a.min_by { |x, y| x * y }\nend",
    "  list1.combination(2).to_a.map {|x| x.reduce(:*)}.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map {|x| x.reduce(:*)}.min\nend",
    "  # list1.combination(2).to_a.map {|x| x.reduce(:*)}.min\n  list1.combination(2).to_a.map {|x| x.reduce(:*)}.min\nend",
    "  min = list1[0] * list1[1]\n  list1.each_with_index do |num1, index1|\n    list1.each_with_index do |num2, index2|\n      next if index1 == index2\n      product = num1 * num2\n      min = product if product < min\n    end\n  end\n  min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  min_product = list1[0] * list1[1]\n  list1.each_with_index do |num1, index1|\n    list1.each_with_index do |num2, index2|\n      next if index2 <= index1\n      product = num1 * num2\n      min_product = product if product < min_product\n    end\n  end\n  min_product\nend",
    "  list1.combination(2).map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.inject(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.inject(:*) }.min\nend",
    "  list1.combination(2).to_a.map {|x| x.reduce(:*)}.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map {|x,y| x*y}.min\nend",
    "  list1.combination(2).to_a.map { |x| x.inject(:*) }.min\nend",
    "  list1.combination(2).to_a.map {|x,y| x*y}.min\nend",
    "  list1.combination(2).to_a.map { |x| x.reduce(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x| x.inject(:*) }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map{|x| x.reduce(:*)}.min\nend",
    "  list1.combination(2).to_a.map {|x| x.reduce(:*)}.min\nend"
  ]
}