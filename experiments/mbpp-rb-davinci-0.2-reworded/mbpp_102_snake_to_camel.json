{
  "name": "mbpp_102_snake_to_camel",
  "language": "rb",
  "prompt": "# Write a function to convert a snake case string to camel case string.\ndef snake_to_camel(word)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"PythonProgram\", candidate.call(\"python_program\"))\n    assert_equal(\"PythonLanguage\", candidate.call(\"python_language\"))\n    assert_equal(\"ProgrammingLanguage\", candidate.call(\"programming_language\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split('_').map(&:capitalize).join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index{|x, i| i == 0 ? x : x.capitalize}.join\nend",
    "  words = word.split('_')\n  counter = 0",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |word, index| index == 0 ? word : word.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  # word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\n  word.split('_').map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |word, index| index == 0 ? word : word.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").each {|x| x.capitalize!}.join\nend",
    "  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index{|x,i| i == 0 ? x : x.capitalize}.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index {|w, i| i == 0 ? w : w.capitalize}.join\nend",
    "  word.split('_').map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index {|w, i| i == 0 ? w : w.capitalize}.join\nend",
    "  word.split(\"_\").map.with_index {|w, i| i == 0 ? w : w.capitalize}.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |word, index| index == 0 ? word : word.capitalize }.join\nend",
    "  word.split('_').each_with_index.map{|x, i| i > 0 ? x.capitalize : x}.join\nend",
    "  word.split('_').map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |word, i| i == 0 ? word : word.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  words = word.split('_')\n  counter = 0\n  while counter < words.size\n    words[counter] = words[counter].capitalize\n    counter += 1\n  end\n  words.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |word, index| index == 0 ? word : word.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i > 0 ? w.capitalize : w }.join\nend",
    "  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index {|x, i| i == 0 ? x : x.capitalize}.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').each { |word| word.capitalize! }.join\nend",
    "  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").each_with_index.map{|x, i| i == 0 ? x : x.capitalize}.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").each_with_index.map{|x, i| i == 0 ? x : x.capitalize}.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |word, index| index == 0 ? word : word.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  # word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\n  word.split(\"_\").map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split('_').map.with_index {|w, i| i == 0 ? w : w.capitalize}.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |word, i| i == 0 ? word : word.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index {|x, i| i == 0 ? x : x.capitalize}.join\nend",
    "  words = word.split('_')\n  capitalized_words = words.map.with_index do |word, index|\n    index == 0 ? word : word.capitalize\n  end\n  capitalized_words.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i > 0 ? w.capitalize : w }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |word, index| index == 0 ? word : word.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index{|x, i| i == 0 ? x : x.capitalize}.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index {|w, i| i == 0 ? w : w.capitalize}.join\nend",
    "  word.split(\"_\").each {|x| x.capitalize!}.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  # TODO: implement me\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |word, idx| idx == 0 ? word : word.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  # TODO: implement me\n  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend"
  ]
}