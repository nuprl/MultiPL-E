{
  "name": "mbpp_411_snake_to_camel",
  "language": "rb",
  "prompt": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').each { |w| w.capitalize! }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  return word if word !~ /_/ && word =~ /[A-Z]+.*/\n  word.split('_').map{|w| w.capitalize}.join\nend",
    "  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend",
    "  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend",
    "  word.split('_').map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend"
  ]
}