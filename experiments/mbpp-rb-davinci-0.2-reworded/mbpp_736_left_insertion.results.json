{
  "name": "mbpp_736_left_insertion",
  "language": "rb",
  "prompt": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxx2lguz2\nStarted\n.\nFinished in 0.000538259 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1857.84 tests/s, 5573.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp37huzkl7\nStarted\n.\nFinished in 0.000503055 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1987.85 tests/s, 5963.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1j6ctn9x\nStarted\n.\nFinished in 0.000645266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1549.75 tests/s, 4649.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp37huzkl7\nStarted\n.\nFinished in 0.000503055 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1987.85 tests/s, 5963.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if x > a[mid]\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_jat9szk\nStarted\n.\nFinished in 0.000535236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1868.33 tests/s, 5605.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwgvies1c\nStarted\n.\nFinished in 0.000525967 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1901.26 tests/s, 5703.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp37huzkl7\nStarted\n.\nFinished in 0.000503055 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1987.85 tests/s, 5963.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp37huzkl7\nStarted\n.\nFinished in 0.000503055 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1987.85 tests/s, 5963.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  return 0 if x < a[0]\n  return a.length if x > a[-1]\n  low, high = 0, a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpiwwyl_6x\nStarted\n.\nFinished in 0.000553691 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1806.06 tests/s, 5418.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "/tmp/tmpo6qplx6m.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpo6qplx6m.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp37huzkl7\nStarted\n.\nFinished in 0.000503055 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1987.85 tests/s, 5963.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp37huzkl7\nStarted\n.\nFinished in 0.000503055 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1987.85 tests/s, 5963.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  mid = 0\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  if x > a[mid]\n    mid + 1\n  else\n    mid\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpche_vqcu\nStarted\n.\nFinished in 0.000488003 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2049.17 tests/s, 6147.50 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp37huzkl7\nStarted\n.\nFinished in 0.000503055 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1987.85 tests/s, 5963.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "Loaded suite /tmp/tmp0j1dfa9v\nStarted\nF\n===============================================================================\nFailure: test_left_insertion(TestHumanEval)\n/tmp/tmp0j1dfa9v.rb:19:in `test_left_insertion'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_left_insertion\n     18:     candidate = method(:left_insertion)\n  => 19:     assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n     20:     assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n     21:     assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n     22:   end\n<4> expected but was\n<3>\n===============================================================================\n\nFinished in 0.006935707 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.18 tests/s, 144.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkt6jxsu8\nStarted\n.\nFinished in 0.000451986 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2212.46 tests/s, 6637.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp37huzkl7\nStarted\n.\nFinished in 0.000503055 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1987.85 tests/s, 5963.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  l = 0\n  r = a.length - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "Loaded suite /tmp/tmp4eykuwfq\nStarted\nF\n===============================================================================\nFailure: test_left_insertion(TestHumanEval)\n/tmp/tmp4eykuwfq.rb:19:in `test_left_insertion'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_left_insertion\n     18:     candidate = method(:left_insertion)\n  => 19:     assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n     20:     assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n     21:     assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n     22:   end\n<4> expected but was\n<3>\n===============================================================================\n\nFinished in 0.006872943 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n145.50 tests/s, 145.50 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1j6ctn9x\nStarted\n.\nFinished in 0.000645266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1549.75 tests/s, 4649.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  return 0 if a.empty? || x < a.first\n  return a.length if x > a.last\n  l, r = 0, a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] == x\n      return m\n    elsif a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1zk1isk0\nStarted\n.\nFinished in 0.000405735 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2464.66 tests/s, 7393.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if x > a[m]\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppphpk6r6\nStarted\n.\nFinished in 0.000747774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1337.30 tests/s, 4011.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  i = 0\n  while i < a.length\n    if a[i] >= x\n      return i\n    end\n    i += 1\n  end\n  return i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4tr9p3j9\nStarted\n.\nFinished in 0.000533897 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1873.02 tests/s, 5619.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp37huzkl7\nStarted\n.\nFinished in 0.000503055 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1987.85 tests/s, 5963.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  i = 0\n  while i < a.length\n    if a[i] >= x\n      return i\n    end\n    i += 1\n  end\n  return i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4tr9p3j9\nStarted\n.\nFinished in 0.000533897 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1873.02 tests/s, 5619.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1j6ctn9x\nStarted\n.\nFinished in 0.000645266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1549.75 tests/s, 4649.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp37huzkl7\nStarted\n.\nFinished in 0.000503055 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1987.85 tests/s, 5963.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbrgv7g7_\nStarted\n.\nFinished in 0.000473118 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2113.64 tests/s, 6340.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpimb82t54\nStarted\n.\nFinished in 0.000418306 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2390.59 tests/s, 7171.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  i = 0\n  while i < a.length && a[i] < x\n    i += 1\n  end\n  return i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpo4aaeldj\nStarted\n.\nFinished in 0.000411934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2427.57 tests/s, 7282.72 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  return 0 if a[0] > x\n  return a.length if a[-1] < x\n  low = 0\n  high = a.length - 1\n  while low < high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmcdig5cs\nStarted\n.\nFinished in 0.000485617 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2059.24 tests/s, 6177.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      return mid\n    end\n  end\n  return low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl97nox10\nStarted\n.\nFinished in 0.000431675 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2316.56 tests/s, 6949.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    elsif x < a[mid]\n      high = mid - 1\n    else\n      return mid\n    end\n  end\n  return low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfl6clkcf\nStarted\n.\nFinished in 0.000395864 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2526.12 tests/s, 7578.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbrgv7g7_\nStarted\n.\nFinished in 0.000473118 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2113.64 tests/s, 6340.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  i = 0\n  while i < a.length\n    if a[i] >= x\n      return i\n    end\n    i += 1\n  end\n  return i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4tr9p3j9\nStarted\n.\nFinished in 0.000533897 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1873.02 tests/s, 5619.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  return 0 if x < a[0]\n  return a.size if x > a[-1]\n  l = 0\n  r = a.size - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8ve0p0ig\nStarted\n.\nFinished in 0.00040107 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2493.33 tests/s, 7479.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  a.bsearch_index { |e| e >= x }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "Loaded suite /tmp/tmp41ocg_j8\nStarted\nF\n===============================================================================\nFailure: test_left_insertion(TestHumanEval)\n/tmp/tmp41ocg_j8.rb:9:in `test_left_insertion'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_left_insertion\n      8:     candidate = method(:left_insertion)\n  =>  9:     assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n     10:     assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n     11:     assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n     12:   end\n<4> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00666988 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.93 tests/s, 149.93 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  a.bsearch_index { |y| y >= x } || a.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpeq__msyo\nStarted\n.\nFinished in 0.000431026 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2320.05 tests/s, 6960.14 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp37huzkl7\nStarted\n.\nFinished in 0.000503055 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1987.85 tests/s, 5963.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  a.bsearch_index { |e| e >= x }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "Loaded suite /tmp/tmp41ocg_j8\nStarted\nF\n===============================================================================\nFailure: test_left_insertion(TestHumanEval)\n/tmp/tmp41ocg_j8.rb:9:in `test_left_insertion'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_left_insertion\n      8:     candidate = method(:left_insertion)\n  =>  9:     assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n     10:     assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n     11:     assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n     12:   end\n<4> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00666988 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.93 tests/s, 149.93 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6mw5g_73\nStarted\n.\nFinished in 0.000423256 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2362.64 tests/s, 7087.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6mw5g_73\nStarted\n.\nFinished in 0.000423256 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2362.64 tests/s, 7087.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1j6ctn9x\nStarted\n.\nFinished in 0.000645266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1549.75 tests/s, 4649.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  return 0 if x < a[0]\n  return a.length if x > a[-1]\n  l, r = 0, a.length - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp60nk5zec\nStarted\n.\nFinished in 0.000460765 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2170.30 tests/s, 6510.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkt6jxsu8\nStarted\n.\nFinished in 0.000451986 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2212.46 tests/s, 6637.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1j6ctn9x\nStarted\n.\nFinished in 0.000645266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1549.75 tests/s, 4649.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp53scqgbq\nStarted\n.\nFinished in 0.000457974 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2183.53 tests/s, 6550.59 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpimb82t54\nStarted\n.\nFinished in 0.000418306 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2390.59 tests/s, 7171.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp37huzkl7\nStarted\n.\nFinished in 0.000503055 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1987.85 tests/s, 5963.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp37huzkl7\nStarted\n.\nFinished in 0.000503055 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1987.85 tests/s, 5963.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp37huzkl7\nStarted\n.\nFinished in 0.000503055 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1987.85 tests/s, 5963.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp37huzkl7\nStarted\n.\nFinished in 0.000503055 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1987.85 tests/s, 5963.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp37huzkl7\nStarted\n.\nFinished in 0.000503055 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1987.85 tests/s, 5963.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  a.bsearch_index { |e| e >= x } || a.size\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmbg2ulut\nStarted\n.\nFinished in 0.000385255 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2595.68 tests/s, 7787.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_1clca_u\nStarted\n.\nFinished in 0.00051794 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1930.73 tests/s, 5792.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7bj67jns\nStarted\n.\nFinished in 0.000455576 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2195.02 tests/s, 6585.07 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_1clca_u\nStarted\n.\nFinished in 0.00051794 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1930.73 tests/s, 5792.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4nh3zi8d\nStarted\n.\nFinished in 0.000394831 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2532.73 tests/s, 7598.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1j6ctn9x\nStarted\n.\nFinished in 0.000645266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1549.75 tests/s, 4649.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpimb82t54\nStarted\n.\nFinished in 0.000418306 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2390.59 tests/s, 7171.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp37huzkl7\nStarted\n.\nFinished in 0.000503055 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1987.85 tests/s, 5963.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1j6ctn9x\nStarted\n.\nFinished in 0.000645266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1549.75 tests/s, 4649.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  l = 0\n  r = a.length - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "Loaded suite /tmp/tmp4eykuwfq\nStarted\nF\n===============================================================================\nFailure: test_left_insertion(TestHumanEval)\n/tmp/tmp4eykuwfq.rb:19:in `test_left_insertion'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_left_insertion\n     18:     candidate = method(:left_insertion)\n  => 19:     assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n     20:     assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n     21:     assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n     22:   end\n<4> expected but was\n<3>\n===============================================================================\n\nFinished in 0.006872943 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n145.50 tests/s, 145.50 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp37huzkl7\nStarted\n.\nFinished in 0.000503055 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1987.85 tests/s, 5963.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5le0m31b\nStarted\n.\nFinished in 0.000465175 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2149.73 tests/s, 6449.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxx2lguz2\nStarted\n.\nFinished in 0.000538259 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1857.84 tests/s, 5573.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbrgv7g7_\nStarted\n.\nFinished in 0.000473118 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2113.64 tests/s, 6340.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1j6ctn9x\nStarted\n.\nFinished in 0.000645266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1549.75 tests/s, 4649.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] >= x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphi1ged3n\nStarted\n.\nFinished in 0.000416416 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2401.44 tests/s, 7204.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  # left_index = 0\n  # right_index = a.length - 1\n  # while left_index < right_index\n  #   mid_index = (left_index + right_index) / 2\n  #   if a[mid_index] < x\n  #     left_index = mid_index + 1\n  #   else\n  #     right_index = mid_index\n  #   end\n  # end\n  # left_index\n  a.bsearch_index { |e| e >= x } || a.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_blq9zda\nStarted\n.\nFinished in 0.000407475 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.14 tests/s, 7362.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbrgv7g7_\nStarted\n.\nFinished in 0.000473118 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2113.64 tests/s, 6340.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2zhh9n7a\nStarted\n.\nFinished in 0.000398493 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.45 tests/s, 7528.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  return 0 if a.empty? || a.first > x\n  return a.size if a.last < x\n  l, r = 0, a.size - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppsuahswe\nStarted\n.\nFinished in 0.000411604 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2429.52 tests/s, 7288.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_1clca_u\nStarted\n.\nFinished in 0.00051794 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1930.73 tests/s, 5792.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkvqzviri\nStarted\n.\nFinished in 0.000391665 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2553.20 tests/s, 7659.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwgvies1c\nStarted\n.\nFinished in 0.000525967 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1901.26 tests/s, 5703.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpimb82t54\nStarted\n.\nFinished in 0.000418306 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2390.59 tests/s, 7171.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6oxzkhjl\nStarted\n.\nFinished in 0.000402307 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2485.66 tests/s, 7456.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1j6ctn9x\nStarted\n.\nFinished in 0.000645266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1549.75 tests/s, 4649.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  l = 0\n  r = a.length - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "Loaded suite /tmp/tmp4eykuwfq\nStarted\nF\n===============================================================================\nFailure: test_left_insertion(TestHumanEval)\n/tmp/tmp4eykuwfq.rb:19:in `test_left_insertion'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_left_insertion\n     18:     candidate = method(:left_insertion)\n  => 19:     assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n     20:     assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n     21:     assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n     22:   end\n<4> expected but was\n<3>\n===============================================================================\n\nFinished in 0.006872943 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n145.50 tests/s, 145.50 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkvqzviri\nStarted\n.\nFinished in 0.000391665 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2553.20 tests/s, 7659.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  l = 0\n  r = a.length - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "Loaded suite /tmp/tmp4eykuwfq\nStarted\nF\n===============================================================================\nFailure: test_left_insertion(TestHumanEval)\n/tmp/tmp4eykuwfq.rb:19:in `test_left_insertion'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_left_insertion\n     18:     candidate = method(:left_insertion)\n  => 19:     assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n     20:     assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n     21:     assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n     22:   end\n<4> expected but was\n<3>\n===============================================================================\n\nFinished in 0.006872943 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n145.50 tests/s, 145.50 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpimb82t54\nStarted\n.\nFinished in 0.000418306 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2390.59 tests/s, 7171.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_1clca_u\nStarted\n.\nFinished in 0.00051794 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1930.73 tests/s, 5792.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  # if x is less than the first element of the array, return 0\n  if x < a[0]\n    return 0\n  end\n  # if x is greater than the last element of the array, return the length of the array\n  if x > a[-1]\n    return a.length\n  end\n  # if x is greater than the first element of the array and less than the last element of the array, do the following\n  if x > a[0] && x < a[-1]\n    # iterate through the array\n    a.each_with_index do |element, index|\n      # if the element is greater than x, return the index\n      if element > x\n        return index\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbkszm3yk\nStarted\n.\nFinished in 0.000420981 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2375.40 tests/s, 7126.21 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7bj67jns\nStarted\n.\nFinished in 0.000455576 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2195.02 tests/s, 6585.07 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low < high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124255,
      "stdout": "Loaded suite /tmp/tmp1oze46qj\nStarted\nF\n===============================================================================\nFailure: test_left_insertion(TestHumanEval)\n/tmp/tmp1oze46qj.rb:19:in `test_left_insertion'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_left_insertion\n     18:     candidate = method(:left_insertion)\n  => 19:     assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n     20:     assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n     21:     assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n     22:   end\n<4> expected but was\n<3>\n===============================================================================\n\nFinished in 0.006402971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n156.18 tests/s, 156.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  return 0 if a.empty? || x < a[0]\n  return a.length if x > a[-1]\n  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7s5yopsa\nStarted\n.\nFinished in 0.000412459 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2424.48 tests/s, 7273.45 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  return 0 if a.empty? || x < a[0]\n  return a.length if x > a[-1]\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmv0s51jy\nStarted\n.\nFinished in 0.000422251 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.26 tests/s, 7104.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] >= x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkqs_enox\nStarted\n.\nFinished in 0.000404286 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2473.50 tests/s, 7420.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if x <= a[mid]\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpm_7hwluv\nStarted\n.\nFinished in 0.000408678 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2446.91 tests/s, 7340.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbrgv7g7_\nStarted\n.\nFinished in 0.000473118 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2113.64 tests/s, 6340.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if x > a[mid]\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_jat9szk\nStarted\n.\nFinished in 0.000535236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1868.33 tests/s, 5605.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  return 0 if a.empty? || x < a[0]\n  return a.length if x > a[-1]\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcamhuva9\nStarted\n.\nFinished in 0.000394194 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2536.82 tests/s, 7610.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpys0pk979\nStarted\n.\nFinished in 0.000412288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.49 tests/s, 7276.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4nh3zi8d\nStarted\n.\nFinished in 0.000394831 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2532.73 tests/s, 7598.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp53scqgbq\nStarted\n.\nFinished in 0.000457974 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2183.53 tests/s, 6550.59 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  i = 0\n  while i < a.length\n    if a[i] > x\n      return i\n    end\n    i += 1\n  end\n  return i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkoyryyor\nStarted\n.\nFinished in 0.00040244 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2484.84 tests/s, 7454.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1j6ctn9x\nStarted\n.\nFinished in 0.000645266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1549.75 tests/s, 4649.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      return mid\n    end\n  end\n  return low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl97nox10\nStarted\n.\nFinished in 0.000431675 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2316.56 tests/s, 6949.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplvp7pl0a\nStarted\n.\nFinished in 0.000897305 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1114.45 tests/s, 3343.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low < high\n    mid = (low + high) / 2\n    if x <= a[mid]\n      high = mid\n    else\n      low = mid + 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124255,
      "stdout": "Loaded suite /tmp/tmp86cf0plr\nStarted\nF\n===============================================================================\nFailure: test_left_insertion(TestHumanEval)\n/tmp/tmp86cf0plr.rb:19:in `test_left_insertion'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_left_insertion\n     18:     candidate = method(:left_insertion)\n  => 19:     assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n     20:     assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n     21:     assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n     22:   end\n<4> expected but was\n<3>\n===============================================================================\n\nFinished in 0.006312406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n158.42 tests/s, 158.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1j6ctn9x\nStarted\n.\nFinished in 0.000645266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1549.75 tests/s, 4649.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph34600ds\nStarted\n.\nFinished in 0.000951553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.91 tests/s, 3152.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  a.bsearch_index { |e| e >= x }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "Loaded suite /tmp/tmp41ocg_j8\nStarted\nF\n===============================================================================\nFailure: test_left_insertion(TestHumanEval)\n/tmp/tmp41ocg_j8.rb:9:in `test_left_insertion'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_left_insertion\n      8:     candidate = method(:left_insertion)\n  =>  9:     assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n     10:     assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n     11:     assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n     12:   end\n<4> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00666988 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.93 tests/s, 149.93 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "/tmp/tmpvn6viyp0.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvn6viyp0.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "/tmp/tmpvn6viyp0.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvn6viyp0.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwg29wsg2\nStarted\n.\nFinished in 0.000509369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.21 tests/s, 5889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  a.bsearch_index { |y| y >= x }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124255,
      "stdout": "Loaded suite /tmp/tmpifo9uikf\nStarted\nF\n===============================================================================\nFailure: test_left_insertion(TestHumanEval)\n/tmp/tmpifo9uikf.rb:9:in `test_left_insertion'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_left_insertion\n      8:     candidate = method(:left_insertion)\n  =>  9:     assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n     10:     assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n     11:     assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n     12:   end\n<4> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006431284 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n155.49 tests/s, 155.49 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpimb82t54\nStarted\n.\nFinished in 0.000418306 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2390.59 tests/s, 7171.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}