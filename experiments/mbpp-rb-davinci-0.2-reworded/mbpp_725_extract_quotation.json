{
  "name": "mbpp_725_extract_quotation",
  "language": "rb",
  "prompt": "# Write a function to extract values between quotation marks \" \" of the given string.\ndef extract_quotation(text1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_725_extract_quotation.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_quotation\n    candidate = method(:extract_quotation)\n    assert_equal([\"A53\", \"multi\", \"Processor\"], candidate.call(\"Cortex \"A53\" Based \"multi\" tasking \"Processor\"\"))\n    assert_equal([\"favorite\", \"apps\"], candidate.call(\"Cast your \"favorite\" entertainment \"apps\"\"))\n    assert_equal([\"4k Ultra HD\", \"HDR 10\"], candidate.call(\"Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support\"))\n    assert_equal([], candidate.call(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  text1.scan(/\"(.*?)\"/)\nend",
    "  text1.scan(/\"(.*?)\"/)\nend",
    "  text1.scan(/\"(.*?)\"/)\nend",
    "  text1.scan(/\"(.*?)\"/)\nend",
    "  text1.scan(/\"(.*?)\"/)\nend",
    "  text1.scan(/\"(.*?)\"/)\nend",
    "  text1.scan(/\"(.*?)\"/)\nend",
    "  text1.scan(/\\\"(.*?)\\\"/)\nend",
    "  text1.scan(/\"(.*?)\"/)\nend",
    "  text1.scan(/\"(.*?)\"/)\nend",
    "  text1.scan(/\"(.*?)\"/)\nend",
    "  text1.scan(/\"(.*?)\"/)\nend",
    "  text1.scan(/\"(.*?)\"/)\nend",
    "  text1.scan(/\"(.*?)\"/)\nend",
    "  text1.scan(/\"(.*?)\"/)\nend",
    "  text1.scan(/\"(.*?)\"/)\nend",
    "  text1.scan(/\"(.*?)\"/)\nend",
    "  text1.scan(/\"(.*?)\"/)\nend",
    "  text1.scan(/\"(.*?)\"/)\nend",
    "  text1.scan(/\"(.*?)\"/)\nend"
  ]
}