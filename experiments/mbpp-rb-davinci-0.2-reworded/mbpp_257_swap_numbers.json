{
  "name": "mbpp_257_swap_numbers",
  "language": "rb",
  "prompt": "# Write a function that takes in two numbers and returns an array with the second number and then the first number.\ndef swap_numbers(a, b)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_257_swap_numbers.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_swap_numbers\n    candidate = method(:swap_numbers)\n    assert_equal([20, 10], candidate.call(10, 20))\n    assert_equal([17, 15], candidate.call(15, 17))\n    assert_equal([200, 100], candidate.call(100, 200))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  return [b, a]\nend",
    "  return [b, a]\nend",
    "  return [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  return [b, a]\nend",
    "  return [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  return [b, a]\nend",
    "  return [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  return [b, a]\nend",
    "  [b, a]\nend",
    "  return [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  return [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  return [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  return [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  return [b, a]\nend",
    "  return [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  return [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "\t[b, a]\nend",
    "  [b, a]\nend",
    "\t[b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  return [b, a]\nend",
    "  [b, a]\nend",
    "  return [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  return [b, a]\nend",
    "  return [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  # Write your code here\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  return [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  return [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  return [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  return [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  return [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  return [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "  return [b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend",
    "\t[b, a]\nend",
    "  [b, a]\nend",
    "  [b, a]\nend"
  ]
}