{
  "name": "mbpp_622_get_median",
  "language": "rb",
  "prompt": "# Write a function to find the median of two sorted arrays of same size.\ndef get_median(arr1, arr2, n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_median\n    candidate = method(:get_median)\n    assert_equal(16.0, candidate.call([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5))\n    assert_equal(8.5, candidate.call([2, 4, 8, 9], [7, 13, 19, 28], 4))\n    assert_equal(25.0, candidate.call([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    m1 = m2\n    if i == n\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m2 = arr1[i]\n      i += 1\n    else\n      m2 = arr2[j]\n      j += 1\n    end\n    count += 1\n  end\n  (m1 + m2) / 2.0\nend",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  i = 0\n  j = 0\n  count = 0\n  m1 = 0\n  m2 = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  count = 0\n  m1 = 0\n  m2 = 0\n  while count < n + 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n    count += 1\n  end\n  (m1 + m2) / 2.0\nend",
    "  i = 0\n  j = 0\n  count = 0\n  m1 = 0\n  m2 = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  return (arr1[n - 1] + arr2[n - 1]) / 2.0 if n == 1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n    count += 1\n  end\n  return (m1 + m2) / 2.0\nend",
    "  i, j = 0, 0\n  m1, m2 = -1, -1\n  count = 0",
    "  return -1 if n <= 0\n  return ((arr1[0] + arr2[0]) / 2.0).round(2) if n == 1\n  return (([arr1[0], arr2[0]].max + [arr1[1], arr2[1]].min) / 2.0).round(2) if n == 2",
    "  i = 0\n  j = 0\n  count = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  return (arr1[n - 1] + arr2[n - 1]) / 2.0 if n == 1",
    "  (get_median_single(arr1, n) + get_median_single(arr2, n)) / 2.0\nend",
    "  return get_median_of_single_array(arr1, n) if arr2.empty?\n  return get_median_of_single_array(arr2, n) if arr1.empty?",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n    count += 1\n  end\n  return (m1 + m2) / 2.0\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    count += 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n  end\n  (m1 + m2) / 2.0\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    count += 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n  end\n  (m1 + m2) / 2.0\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2",
    "  return (arr1[n-1] + arr2[n-1])/2 if n == 1\n  return [arr1[n-1], arr2[n-1]].min if n == 2",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end",
    "  return -1 if n <= 0\n  return ((arr1[0] + arr2[0]) / 2.0) if n == 1\n  return (([arr1[0], arr2[0]].max + [arr1[1], arr2[1]].min) / 2.0) if n == 2",
    "  return -1 if n <= 0\n  return -1 if arr1.size != arr2.size",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  return nil if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    count += 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n  end\n  (m1 + m2) / 2.0\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  return -1 if n <= 0\n  return -1 if n != arr1.length || n != arr2.length",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    count += 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n  end\n  (m1 + m2) / 2.0\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    count += 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n  end\n  (m1 + m2) / 2.0\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    count += 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n  end\n  (m1 + m2) / 2.0\nend",
    "  return (arr1[n - 1] + arr2[n - 1]) / 2 if n == 1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n    count += 1\n  end\n  (m1 + m2) / 2.0\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  return (arr1[n - 1] + arr2[n - 1]) / 2 if n == 1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n    count += 1\n  end\n  (m1 + m2) / 2.0\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  return (arr1[n - 1] + arr2[n - 1]) / 2.0 if n == 1\n  return [arr1[0], arr2[0]].max if n == 2",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  return (arr1[n - 1] + arr2[n - 1]) / 2 if n == 1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n    count += 1\n  end\n  (m1 + m2) / 2.0\nend",
    "  return nil if arr1.size != arr2.size\n  return (arr1[n-1] + arr2[n-1])/2.0 if n == 1\n  m1 = median(arr1)\n  m2 = median(arr2)\n  if m1 == m2\n    return m1\n  elsif m1 < m2\n    return get_median(arr1[n/2..-1], arr2[0...n/2], n/2)\n  else\n    return get_median(arr1[0...n/2], arr2[n/2..-1], n/2)\n  end\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    count += 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n  end\n  (m1 + m2) / 2.0\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    count += 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n  end\n  (m1 + m2) / 2.0\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  if n == 0\n    return -1\n  end\n  if n == 1\n    return (arr1[0] + arr2[0]) / 2\n  end\n  if n == 2\n    return ( [arr1[0], arr2[0]].max + [arr1[1], arr2[1]].min ) / 2\n  end",
    "  return (arr1[n - 1] + arr2[n - 1]) / 2 if n == 1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    count += 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n  end\n  (m1 + m2) / 2.0\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n    count += 1\n  end\n  return (m1 + m2) / 2.0\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    m1 = m2\n    if i == n\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m2 = arr1[i]\n      i += 1\n    else\n      m2 = arr2[j]\n      j += 1\n    end\n    count += 1\n  end\n  (m1 + m2).to_f / 2\nend",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2",
    "  return ((arr1[n-1] + arr2[n-1])/2.0).round(1) if n == 1\n  return (arr1[0] + arr2[0])/2.0 if n == 2",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    count += 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n  end\n  return (m1 + m2) / 2.0\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  (get_median_single(arr1, n) + get_median_single(arr2, n)) / 2.0\nend",
    "  # return -1 if n <= 0\n  # return -1 if n != arr1.length || n != arr2.length",
    "  i = 0\n  j = 0\n  count = 0\n  m1 = 0\n  m2 = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    count += 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n  end\n  (m1 + m2) / 2.0\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n    count += 1\n  end\n  return (m1 + m2) / 2.0\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  count = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    count += 1\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n  end\n  (m1 + m2) / 2.0\nend",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n    count += 1\n  end\n  (m1 + m2) / 2.0\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    count += 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    end\n    if j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n  end\n  (m1 + m2) / 2.0\nend",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n    count += 1\n  end\n  (m1 + m2) / 2.0\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n    count += 1\n  end\n  return (m1 + m2) / 2.0\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n    count += 1\n  end\n  (m1 + m2) / 2.0\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    count += 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n  end\n  (m1 + m2) / 2.0\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    count += 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n  end\n  (m1 + m2) / 2.0\nend",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end",
    "  return -1 if n <= 0\n  return ((arr1[0] + arr2[0]) / 2.0) if n == 1\n  return ((arr1[0] + arr2[1]) / 2.0) if n == 2",
    "  return (arr1[n - 1] + arr2[n - 1]) / 2 if n == 1\n  return [arr1[n - 1], arr2[n - 1]].min if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  return -1 if n <= 0\n  return -1 if n != arr2.length",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  count = 0\n  m1 = 0\n  m2 = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  return -1 if n <= 0\n  return ((arr1[0] + arr2[0]) / 2.0).round(1) if n == 1\n  return (([arr1[0], arr2[0]].max + [arr1[1], arr2[1]].min) / 2.0).round(1) if n == 2",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    count += 1\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n  end\n  (m1 + m2) / 2.0\nend",
    "  i = 0\n  j = 0\n  count = 0\n  m1 = 0\n  m2 = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n    count += 1\n  end\n  (m1 + m2) / 2.0\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2",
    "  i = 0\n  j = 0\n  count = 0\n  m1 = 0\n  m2 = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  count = 0\n  m1 = 0\n  m2 = 0",
    "  i = 0\n  j = 0\n  count = 0\n  m1 = 0\n  m2 = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    count += 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n  end\n  (m1 + m2) / 2.0\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    count += 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n  end\n  (m1 + m2) / 2.0\nend",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  return -1 if n <= 0\n  return -1 if n != arr1.length || n != arr2.length",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  return -1 if n <= 0\n  return -1 if arr1.size != arr2.size",
    "  return (arr1[n-1] + arr2[n-1])/2 if n == 1\n  return [arr1[n-1], arr2[n-1]].min if n == 2\n  m1 = median(arr1, n)\n  m2 = median(arr2, n)\n  return m1 if m1 == m2\n  if m1 < m2\n    get_median(arr1[n/2..-1], arr2[0..n/2], n/2 + 1)\n  else\n    get_median(arr1[0..n/2], arr2[n/2..-1], n/2 + 1)\n  end\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end",
    "  i = 0\n  j = 0\n  count = 0\n  m1 = 0\n  m2 = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n    count += 1\n  end\n  (m1 + m2) / 2.0\nend",
    "  return nil if arr1.length != arr2.length\n  return (arr1[n - 1] + arr2[n - 1]) / 2.0 if n == 1\n  m1 = median(arr1, n)\n  m2 = median(arr2, n)\n  if m1 == m2\n    m1\n  elsif m1 < m2\n    get_median(arr1[n / 2..-1], arr2[0..n / 2 - 1], n - n / 2)\n  else\n    get_median(arr1[0..n / 2 - 1], arr2[n / 2..-1], n - n / 2)\n  end\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n    count += 1\n  end\n  (m1 + m2) / 2.0\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    count += 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n  end\n  return (m1 + m2) / 2.0\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    count += 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n  end\n  (m1 + m2) / 2.0\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n    count += 1\n  end\n  (m1 + m2) / 2.0\nend",
    "  return nil if arr1.size != arr2.size\n  return (arr1[n-1] + arr2[n-1]) / 2.0 if n == 1\n  m1 = median(arr1, n)\n  m2 = median(arr2, n)\n  if m1 > m2\n    get_median(arr1[0..n/2], arr2[n/2..-1], n/2 + 1)\n  elsif m1 < m2\n    get_median(arr1[n/2..-1], arr2[0..n/2], n/2 + 1)\n  else\n    m1\n  end\nend",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  return (arr1[n-1] + arr2[n-1])/2 if n == 1\n  return [arr1[n-1], arr2[n-1]].min if n == 2",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2",
    "  i = 0\n  j = 0\n  count = 0\n  m1 = 0\n  m2 = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    count += 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n  end\n  (m1 + m2) / 2.0\nend",
    "  return -1 if n <= 0\n  return ((arr1[0] + arr2[0]) / 2.0).round(1) if n == 1\n  return (([arr1[0], arr2[0]].max + [arr1[1], arr2[1]].min) / 2.0).round(1) if n == 2"
  ]
}