{
  "name": "mbpp_778_pack_consecutive_duplicates",
  "language": "rb",
  "prompt": "# Write a function to pack consecutive duplicates of a given array elements into subarrays.\ndef pack_consecutive_duplicates(list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  list1.chunk{|x| x}.map{|x,y| y}\nend",
    "  list1.chunk { |n| n }.map(&:last)\nend",
    "  list1.chunk { |x| x }.map(&:last)\nend",
    "  list1.chunk { |x| x }.map(&:last)\nend",
    "  list1.chunk { |n| n }.map(&:last)\nend",
    "  list1.chunk{|x| x}.map{|x,y| y}\nend",
    "  list1.chunk { |n| n }.map(&:last)\nend",
    "  list1.chunk { |x| x }.map(&:last)\nend",
    "  list1.chunk { |x| x }.map { |x, y| y }\nend",
    "  list1.chunk { |x| x }.map(&:last)\nend",
    "  list1.chunk{|x| x}.map{|x,y| y}\nend",
    "  list1.chunk { |n| n }.map(&:last)\nend",
    "  list1.chunk{|x| x}.map{|x,y| y}\nend",
    "  list1.chunk { |e| e }.map { |e| e[1] }\nend",
    "  list1.chunk { |x| x }.map(&:last)\nend",
    "  list1.chunk { |n| n }.map(&:last)\nend",
    "  list1.chunk{|x| x}.map{|x,y| y}\nend",
    "  list1.chunk { |e| e }.map(&:last)\nend",
    "  list1.chunk { |n| n }.map(&:last)\nend",
    "  list1.chunk { |x| x }.map(&:last)\nend"
  ]
}