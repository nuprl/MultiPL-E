{
  "name": "mbpp_94_index_minimum",
  "language": "rb",
  "prompt": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    min_index = index if sub_list[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppynr2w37\nStarted\n.\nFinished in 0.000404073 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2474.80 tests/s, 7424.40 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index do |value, index|\n    if value[1] == test_list.map {|x| x[1]}.min\n      return index\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpr96uco8q\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpr96uco8q.rb:13:in `test_index_minimum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_index_minimum\n     12:     candidate = method(:index_minimum)\n  => 13:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     14:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     15:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     16:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006351041 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n157.45 tests/s, 157.45 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_index = index\n      min_value = sub_list[1]\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp78ysplgu\nStarted\n.\nFinished in 0.000384017 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2604.05 tests/s, 7812.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_index = index\n      min_value = sub_list[1]\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp78ysplgu\nStarted\n.\nFinished in 0.000384017 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2604.05 tests/s, 7812.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_index = index\n      min_value = sub_list[1]\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp78ysplgu\nStarted\n.\nFinished in 0.000384017 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2604.05 tests/s, 7812.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_array, index|\n    if sub_array[1] < min_value\n      min_index = index\n      min_value = sub_array[1]\n    end\n  end\n  return test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1z552l4v\nStarted\n.\nFinished in 0.000382842 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2612.04 tests/s, 7836.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  # Write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmp2ph8dcnk\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp2ph8dcnk.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006429463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n155.53 tests/s, 155.53 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_index = index\n      min_value = sub_list[1]\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpijpfmr7f\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpijpfmr7f.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006499667 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.85 tests/s, 153.85 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_index = index\n      min_value = sub_list[1]\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpijpfmr7f\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpijpfmr7f.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006499667 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.85 tests/s, 153.85 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_index = index\n      min_value = sub_list[1]\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp78ysplgu\nStarted\n.\nFinished in 0.000384017 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2604.05 tests/s, 7812.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |sub_list, i|\n    if sub_list[1] < min\n      min = sub_list[1]\n      index = i\n    end\n  end\n  return index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmp3v05n3d9\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp3v05n3d9.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007564981 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.19 tests/s, 132.19 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    min_index = index if sub_list[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppynr2w37\nStarted\n.\nFinished in 0.000404073 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2474.80 tests/s, 7424.40 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_index = index\n      min_value = sub_list[1]\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpijpfmr7f\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpijpfmr7f.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006499667 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.85 tests/s, 153.85 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  smallest_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[smallest_index][1]\n      smallest_index = index\n    end\n  end\n  return test_list[smallest_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpm2gmduam\nStarted\n.\nFinished in 0.000423417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2361.74 tests/s, 7085.21 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_array, index|\n    if sub_array[1] < min_value\n      min_index = index\n      min_value = sub_array[1]\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmp2c16bjis\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp2c16bjis.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006941094 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.07 tests/s, 144.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_value = sub_list[1]\n      min_index = index\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmp9ap9g7h2\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp9ap9g7h2.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007233459 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.25 tests/s, 138.25 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index do |value, index|\n    if value[1] == test_list.map {|x| x[1]}.min\n      return index\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpr96uco8q\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpr96uco8q.rb:13:in `test_index_minimum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_index_minimum\n     12:     candidate = method(:index_minimum)\n  => 13:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     14:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     15:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     16:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006351041 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n157.45 tests/s, 157.45 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  smallest = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |sub_array, i|\n    if sub_array[1] < smallest\n      smallest = sub_array[1]\n      index = i\n    end\n  end\n  index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpk6b3zrvu\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpk6b3zrvu.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007179875 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n139.28 tests/s, 139.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_array, index|\n    if sub_array[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps3e1eiqu\nStarted\n.\nFinished in 0.00107182 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n932.99 tests/s, 2798.98 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |sub_array, i|\n    if sub_array[1] < min\n      min = sub_array[1]\n      index = i\n    end\n  end\n  index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmp1ypztnpe\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp1ypztnpe.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007520689 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.97 tests/s, 132.97 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  smallest_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[smallest_index][1]\n      smallest_index = index\n    end\n  end\n  test_list[smallest_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_6jnczyz\nStarted\n.\nFinished in 0.000433923 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2304.56 tests/s, 6913.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_value = test_list[0][1]\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_value = sub_list[1]\n      min_index = index\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpv4cx4vk1\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpv4cx4vk1.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007054987 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.74 tests/s, 141.74 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |value, index|\n    if value[1] < min_value\n      min_value = value[1]\n      min_index = index\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpn8fr1v_7\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpn8fr1v_7.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007221438 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.48 tests/s, 138.48 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpwr1dee1x\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpwr1dee1x.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00989087 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n101.10 tests/s, 101.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    min_index = index if sub_list[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppynr2w37\nStarted\n.\nFinished in 0.000404073 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2474.80 tests/s, 7424.40 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |item, index|\n    if item[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzkz3rtts\nStarted\n.\nFinished in 0.000409355 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.87 tests/s, 7328.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |sub_array, i|\n    if sub_array[1] < min\n      min = sub_array[1]\n      index = i\n    end\n  end\n  index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmp1ypztnpe\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp1ypztnpe.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007520689 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.97 tests/s, 132.97 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpe8q04cbl\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpe8q04cbl.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007464638 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.96 tests/s, 133.96 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |list, index|\n    if list[1] < min_value\n      min_value = list[1]\n      min_index = index\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpkcwwdd62\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpkcwwdd62.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007223684 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.43 tests/s, 138.43 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |value, index|\n    if value[1] < min_value\n      min_index = index\n      min_value = value[1]\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpcjvubj01\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpcjvubj01.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.010036984 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.63 tests/s, 99.63 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_array, index|\n    if sub_array[1] < min_value\n      min_index = index\n      min_value = sub_array[1]\n    end\n  end\n  return test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1z552l4v\nStarted\n.\nFinished in 0.000382842 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2612.04 tests/s, 7836.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min\n      min = sub_list[1]\n      min_index = index\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpfnlmz4s3\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpfnlmz4s3.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007225573 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.40 tests/s, 138.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  return test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpud38b1t2\nStarted\n.\nFinished in 0.000413918 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2415.94 tests/s, 7247.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_value = sub_list[1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmnfdw8cp\nStarted\n.\nFinished in 0.000412492 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2424.29 tests/s, 7272.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_index = index\n      min_value = sub_list[1]\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp78ysplgu\nStarted\n.\nFinished in 0.000384017 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2604.05 tests/s, 7812.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index do |value, index|\n    if value[1] == test_list.map { |value| value[1] }.min\n      return index\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpg9s3jwqb\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpg9s3jwqb.rb:13:in `test_index_minimum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_index_minimum\n     12:     candidate = method(:index_minimum)\n  => 13:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     14:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     15:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     16:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.012420313 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n80.51 tests/s, 80.51 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_array, index|\n    if sub_array[1] < min_value\n      min_index = index\n      min_value = sub_array[1]\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpluyhfpe4\nStarted\n.\nFinished in 0.000404634 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2471.37 tests/s, 7414.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    min_index = index if sub_list[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppynr2w37\nStarted\n.\nFinished in 0.000404073 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2474.80 tests/s, 7424.40 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpowafhp1z\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpowafhp1z.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.012192383 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n82.02 tests/s, 82.02 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_index = index\n      min_value = sub_list[1]\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpijpfmr7f\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpijpfmr7f.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006499667 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.85 tests/s, 153.85 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  min_index = 0\n  test_list.each_with_index do |arr, index|\n    if arr[1] < min\n      min = arr[1]\n      min_index = index\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpjxhjth9k\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpjxhjth9k.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006932853 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.24 tests/s, 144.24 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |sub_list, i|\n    if sub_list[1] < min\n      min = sub_list[1]\n      index = i\n    end\n  end\n  index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmph28qvjph\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmph28qvjph.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006822917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.56 tests/s, 146.56 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_value = sub_list[1]\n      min_index = index\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmp9ap9g7h2\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp9ap9g7h2.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007233459 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.25 tests/s, 138.25 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  test_list.map { |x| x[1] }.index(test_list.map { |x| x[1] }.min)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmp9f8jfauo\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp9f8jfauo.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006785019 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.38 tests/s, 147.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpwr1dee1x\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpwr1dee1x.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00989087 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n101.10 tests/s, 101.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_index = index\n      min_value = sub_list[1]\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp78ysplgu\nStarted\n.\nFinished in 0.000384017 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2604.05 tests/s, 7812.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_index = index\n      min_value = sub_list[1]\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp78ysplgu\nStarted\n.\nFinished in 0.000384017 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2604.05 tests/s, 7812.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_array, index|\n    if sub_array[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps3e1eiqu\nStarted\n.\nFinished in 0.00107182 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n932.99 tests/s, 2798.98 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min\n      min = sub_list[1]\n      min_index = index\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpfnlmz4s3\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpfnlmz4s3.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007225573 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.40 tests/s, 138.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  smallest = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |sub_array, i|\n    if sub_array[1] < smallest\n      smallest = sub_array[1]\n      index = i\n    end\n  end\n  index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpk6b3zrvu\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpk6b3zrvu.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007179875 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n139.28 tests/s, 139.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_index = index\n      min_value = sub_list[1]\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpijpfmr7f\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpijpfmr7f.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006499667 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.85 tests/s, 153.85 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |sub_array, i|\n    if sub_array[1] < min\n      min = sub_array[1]\n      index = i\n    end\n  end\n  index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmp1ypztnpe\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp1ypztnpe.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007520689 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.97 tests/s, 132.97 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_index = index\n      min_value = sub_list[1]\n    end\n  end\n  return test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpre5ixem3\nStarted\n.\nFinished in 0.000430113 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2324.97 tests/s, 6974.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_index = index\n      min_value = sub_list[1]\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpijpfmr7f\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpijpfmr7f.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006499667 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.85 tests/s, 153.85 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpowafhp1z\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpowafhp1z.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.012192383 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n82.02 tests/s, 82.02 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_array, index|\n    if sub_array[1] < min_value\n      min_value = sub_array[1]\n      min_index = index\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmp5wi_91ol\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp5wi_91ol.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006479708 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n154.33 tests/s, 154.33 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  # Write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmp2ph8dcnk\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp2ph8dcnk.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006429463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n155.53 tests/s, 155.53 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  return test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpud38b1t2\nStarted\n.\nFinished in 0.000413918 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2415.94 tests/s, 7247.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  min_index = 0\n  test_list.each_with_index do |sub_array, index|\n    if sub_array[1] < min\n      min = sub_array[1]\n      min_index = index\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmp5jr6v6yg\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp5jr6v6yg.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006424122 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n155.66 tests/s, 155.66 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_index = index\n      min_value = sub_list[1]\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp78ysplgu\nStarted\n.\nFinished in 0.000384017 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2604.05 tests/s, 7812.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |sub_array, i|\n    if sub_array[1] < min\n      min = sub_array[1]\n      index = i\n    end\n  end\n  index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmp1ypztnpe\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp1ypztnpe.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007520689 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.97 tests/s, 132.97 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    min_index = index if sub_list[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppynr2w37\nStarted\n.\nFinished in 0.000404073 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2474.80 tests/s, 7424.40 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  test_list.index(test_list.min_by { |x| x[1] })\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpgdop9334\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpgdop9334.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.011868495 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n84.26 tests/s, 84.26 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n    min_index = 0\n    test_list.each_with_index do |sub_list, index|\n        if sub_list[1] < test_list[min_index][1]\n            min_index = index\n        end\n    end\n    return test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcyruyypu\nStarted\n.\nFinished in 0.000495201 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2019.38 tests/s, 6058.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpowafhp1z\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpowafhp1z.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.012192383 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n82.02 tests/s, 82.02 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpowafhp1z\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpowafhp1z.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.012192383 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n82.02 tests/s, 82.02 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min\n      min = sub_list[1]\n      min_index = index\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpfnlmz4s3\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpfnlmz4s3.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007225573 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.40 tests/s, 138.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |value, index|\n    if value[1] < min_value\n      min_value = value[1]\n      min_index = index\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpn8fr1v_7\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpn8fr1v_7.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007221438 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.48 tests/s, 138.48 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_array, index|\n    min_index = index if sub_array[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdar54e5s\nStarted\n.\nFinished in 0.000447818 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2233.05 tests/s, 6699.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |array, index|\n    if array[1] < min_value\n      min_index = index\n      min_value = array[1]\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmp3h9jjbhf\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp3h9jjbhf.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006889429 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n145.15 tests/s, 145.15 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |sub_array, i|\n    if sub_array[1] < min\n      min = sub_array[1]\n      index = i\n    end\n  end\n  return index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpoybio0hm\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpoybio0hm.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006806455 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.92 tests/s, 146.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |sub_list, idx|\n    if sub_list[1] < min\n      min = sub_list[1]\n      index = idx\n    end\n  end\n  index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpikxkm9ai\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpikxkm9ai.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006702451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.20 tests/s, 149.20 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  test_list.index(test_list.min_by { |x| x[1] })\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpgdop9334\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpgdop9334.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.011868495 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n84.26 tests/s, 84.26 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_index = index\n      min_value = sub_list[1]\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp78ysplgu\nStarted\n.\nFinished in 0.000384017 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2604.05 tests/s, 7812.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_array, index|\n    if sub_array[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps3e1eiqu\nStarted\n.\nFinished in 0.00107182 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n932.99 tests/s, 2798.98 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |sub_list, i|\n    if sub_list[1] < min\n      min = sub_list[1]\n      index = i\n    end\n  end\n  index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmph28qvjph\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmph28qvjph.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006822917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.56 tests/s, 146.56 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |value, index|\n    if value[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn3nwff4p\nStarted\n.\nFinished in 0.000442671 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2259.01 tests/s, 6777.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  test_list.index(test_list.min_by { |x| x[1] })\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpgdop9334\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpgdop9334.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.011868495 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n84.26 tests/s, 84.26 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_index = index\n      min_value = sub_list[1]\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp78ysplgu\nStarted\n.\nFinished in 0.000384017 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2604.05 tests/s, 7812.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  # Write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmp2ph8dcnk\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp2ph8dcnk.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006429463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n155.53 tests/s, 155.53 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |value, index|\n    if value[1] < min_value\n      min_value = value[1]\n      min_index = index\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpn8fr1v_7\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpn8fr1v_7.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007221438 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.48 tests/s, 138.48 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |sub_array, i|\n    if sub_array[1] < min\n      min = sub_array[1]\n      index = i\n    end\n  end\n  index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmp1ypztnpe\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp1ypztnpe.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007520689 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.97 tests/s, 132.97 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_array, index|\n    if sub_array[1] < min_value\n      min_index = index\n      min_value = sub_array[1]\n    end\n  end\n  return test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1z552l4v\nStarted\n.\nFinished in 0.000382842 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2612.04 tests/s, 7836.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_index = index\n      min_value = sub_list[1]\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpijpfmr7f\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpijpfmr7f.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006499667 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.85 tests/s, 153.85 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |sub_array, i|\n    if sub_array[1] < min\n      min = sub_array[1]\n      index = i\n    end\n  end\n  index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmp1ypztnpe\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp1ypztnpe.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007520689 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.97 tests/s, 132.97 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  min_index = 0\n  test_list.each_with_index do |sub_array, index|\n    if sub_array[1] < min\n      min = sub_array[1]\n      min_index = index\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmp5jr6v6yg\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp5jr6v6yg.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006424122 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n155.66 tests/s, 155.66 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |array, index|\n    if array[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpddorbhuu\nStarted\n.\nFinished in 0.000449867 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2222.88 tests/s, 6668.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |sub_list, i|\n    if sub_list[1] < min\n      min = sub_list[1]\n      index = i\n    end\n  end\n  index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmph28qvjph\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmph28qvjph.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006822917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.56 tests/s, 146.56 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  return test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpud38b1t2\nStarted\n.\nFinished in 0.000413918 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2415.94 tests/s, 7247.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |sub_array, i|\n    if sub_array[1] < min\n      min = sub_array[1]\n      index = i\n    end\n  end\n  test_list[index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjx2cc130\nStarted\n.\nFinished in 0.000476505 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2098.61 tests/s, 6295.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  smallest_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[smallest_index][1]\n      smallest_index = index\n    end\n  end\n  test_list[smallest_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_6jnczyz\nStarted\n.\nFinished in 0.000433923 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2304.56 tests/s, 6913.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |sub_array, i|\n    if sub_array[1] < min\n      min = sub_array[1]\n      index = i\n    end\n  end\n  index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmp1ypztnpe\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp1ypztnpe.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007520689 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.97 tests/s, 132.97 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |sub_array, i|\n    if sub_array[1] < min\n      min = sub_array[1]\n      index = i\n    end\n  end\n  index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmp1ypztnpe\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp1ypztnpe.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007520689 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.97 tests/s, 132.97 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_array, index|\n    if sub_array[1] < min_value\n      min_index = index\n      min_value = sub_array[1]\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmp2c16bjis\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp2c16bjis.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006941094 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.07 tests/s, 144.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index do |sub_list, index|\n    return index if sub_list[1] == test_list.map { |sub_list| sub_list[1] }.min\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmp04aeg0fe\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp04aeg0fe.rb:11:in `test_index_minimum'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_index_minimum\n     10:     candidate = method(:index_minimum)\n  => 11:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     12:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     13:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     14:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006566336 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.29 tests/s, 152.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpwr1dee1x\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpwr1dee1x.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00989087 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n101.10 tests/s, 101.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index do |x, i|\n    if x[1] == test_list.map {|x| x[1]}.min\n      return i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpyne4oxic\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpyne4oxic.rb:13:in `test_index_minimum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_index_minimum\n     12:     candidate = method(:index_minimum)\n  => 13:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     14:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     15:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     16:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006620845 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.04 tests/s, 151.04 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |sub_array, i|\n    if sub_array[1] < min\n      min = sub_array[1]\n      index = i\n    end\n  end\n  index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmp1ypztnpe\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp1ypztnpe.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007520689 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.97 tests/s, 132.97 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "",
      "stderr": "/tmp/tmpzqeb37iq.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzqeb37iq.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_value = sub_list[1]\n      min_index = index\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmp9ap9g7h2\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp9ap9g7h2.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007233459 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.25 tests/s, 138.25 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_index = index\n      min_value = sub_list[1]\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpijpfmr7f\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpijpfmr7f.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006499667 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.85 tests/s, 153.85 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |value, index|\n    if value[1] < min_value\n      min_index = index\n      min_value = value[1]\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpcjvubj01\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpcjvubj01.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.010036984 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.63 tests/s, 99.63 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  test_list.index(test_list.min_by {|x| x[1]})\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpvdyozoa9\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpvdyozoa9.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006630224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n150.82 tests/s, 150.82 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_array, index|\n    if sub_array[1] < min_value\n      min_index = index\n      min_value = sub_array[1]\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmp2c16bjis\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp2c16bjis.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006941094 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.07 tests/s, 144.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  smallest_index = 0\n  smallest_value = test_list[0][1]\n  test_list.each_with_index do |sub_array, index|\n    if sub_array[1] < smallest_value\n      smallest_index = index\n      smallest_value = sub_array[1]\n    end\n  end\n  smallest_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpmbxq3v4b\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpmbxq3v4b.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006728979 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.61 tests/s, 148.61 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |array, index|\n    if array[1] < min_value\n      min_index = index\n      min_value = array[1]\n    end\n  end\n  return test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz72ntf5e\nStarted\n.\nFinished in 0.000432142 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2314.05 tests/s, 6942.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_index = index\n      min_value = sub_list[1]\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpijpfmr7f\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpijpfmr7f.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006499667 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.85 tests/s, 153.85 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    min_index = index if sub_list[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppynr2w37\nStarted\n.\nFinished in 0.000404073 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2474.80 tests/s, 7424.40 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  test_list.index(test_list.min_by { |x| x[1] })\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpgdop9334\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpgdop9334.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.011868495 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n84.26 tests/s, 84.26 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpowafhp1z\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpowafhp1z.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.012192383 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n82.02 tests/s, 82.02 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index do |sub_list, index|\n    return index if sub_list[1] == test_list.map { |sub_list| sub_list[1] }.min\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmp04aeg0fe\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp04aeg0fe.rb:11:in `test_index_minimum'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_index_minimum\n     10:     candidate = method(:index_minimum)\n  => 11:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     12:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     13:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     14:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006566336 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.29 tests/s, 152.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_index = index\n      min_value = sub_list[1]\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpijpfmr7f\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpijpfmr7f.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006499667 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.85 tests/s, 153.85 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  # Write your code here\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |value, index|\n    if value[1] < min_value\n      min_value = value[1]\n      min_index = index\n    end\n  end\n  return test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsl7isqn5\nStarted\n.\nFinished in 0.000431764 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2316.08 tests/s, 6948.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpowafhp1z\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpowafhp1z.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.012192383 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n82.02 tests/s, 82.02 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  # Write your code here\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |x, i|\n    if x[1] < min\n      min = x[1]\n      index = i\n    end\n  end\n  index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpyn5zqskb\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpyn5zqskb.rb:18:in `test_index_minimum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_index_minimum\n     17:     candidate = method(:index_minimum)\n  => 18:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     19:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     20:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     21:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006480255 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n154.31 tests/s, 154.31 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |sub_list, i|\n    if sub_list[1] < min\n      min = sub_list[1]\n      index = i\n    end\n  end\n  index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmph28qvjph\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmph28qvjph.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006822917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.56 tests/s, 146.56 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpowafhp1z\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpowafhp1z.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.012192383 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n82.02 tests/s, 82.02 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |value, index|\n    min_index = index if value[1] < test_list[min_index][1]\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmp2kkuwafl\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp2kkuwafl.rb:13:in `test_index_minimum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_index_minimum\n     12:     candidate = method(:index_minimum)\n  => 13:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     14:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     15:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     16:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006525067 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.26 tests/s, 153.26 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpwr1dee1x\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpwr1dee1x.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00989087 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n101.10 tests/s, 101.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_value = sub_list[1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmnfdw8cp\nStarted\n.\nFinished in 0.000412492 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2424.29 tests/s, 7272.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpowafhp1z\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpowafhp1z.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.012192383 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n82.02 tests/s, 82.02 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] == test_list.map { |sub_list| sub_list[1] }.min\n      return index\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpqwox59_d\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpqwox59_d.rb:13:in `test_index_minimum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_index_minimum\n     12:     candidate = method(:index_minimum)\n  => 13:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     14:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     15:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     16:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006512568 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.55 tests/s, 153.55 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_index = index\n      min_value = sub_list[1]\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpijpfmr7f\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpijpfmr7f.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006499667 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.85 tests/s, 153.85 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpowafhp1z\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpowafhp1z.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.012192383 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n82.02 tests/s, 82.02 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index do |x, i|\n    if x[1] == test_list.map {|x| x[1]}.min\n      return i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpyne4oxic\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpyne4oxic.rb:13:in `test_index_minimum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_index_minimum\n     12:     candidate = method(:index_minimum)\n  => 13:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     14:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     15:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     16:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006620845 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.04 tests/s, 151.04 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpe8q04cbl\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpe8q04cbl.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007464638 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.96 tests/s, 133.96 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |x, i|\n    if x[1] < min\n      min = x[1]\n      index = i\n    end\n  end\n  index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmpmggvzzx5\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpmggvzzx5.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006141558 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n162.83 tests/s, 162.83 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |element, index|\n    if element[1] < min_value\n      min_index = index\n      min_value = element[1]\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "Loaded suite /tmp/tmpdte2vveh\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpdte2vveh.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.005669028 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n176.40 tests/s, 176.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_index = index\n      min_value = sub_list[1]\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpijpfmr7f\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpijpfmr7f.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006499667 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.85 tests/s, 153.85 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_index = index\n      min_value = sub_list[1]\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp78ysplgu\nStarted\n.\nFinished in 0.000384017 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2604.05 tests/s, 7812.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |sub_array, i|\n    if sub_array[1] < min\n      min = sub_array[1]\n      index = i\n    end\n  end\n  index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmp1ypztnpe\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp1ypztnpe.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007520689 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.97 tests/s, 132.97 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprh3nr79c\nStarted\n.\nFinished in 0.000400546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.59 tests/s, 7489.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |sub_array, i|\n    if sub_array[1] < min\n      min = sub_array[1]\n      index = i\n    end\n  end\n  index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "Loaded suite /tmp/tmp1ypztnpe\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp1ypztnpe.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007520689 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.97 tests/s, 132.97 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |sub_list, index|\n    if sub_list[1] < min_value\n      min_index = index\n      min_value = sub_list[1]\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpijpfmr7f\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpijpfmr7f.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006499667 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.85 tests/s, 153.85 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |sub_array, index|\n    if sub_array[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123717,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps3e1eiqu\nStarted\n.\nFinished in 0.00107182 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n932.99 tests/s, 2798.98 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n  smallest = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |sub_array, i|\n    if sub_array[1] < smallest\n      smallest = sub_array[1]\n      index = i\n    end\n  end\n  return index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "Loaded suite /tmp/tmpy1r6jbzu\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpy1r6jbzu.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.005506618 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n181.60 tests/s, 181.60 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}