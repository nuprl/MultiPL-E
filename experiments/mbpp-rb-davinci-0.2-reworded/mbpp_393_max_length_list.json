{
  "name": "mbpp_393_max_length_list",
  "language": "rb",
  "prompt": "# Write a function to find the array with maximum length.\ndef max_length_list(input_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_393_max_length_list.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_length_list\n    candidate = method(:max_length_list)\n    assert_equal([3, [13, 15, 17]], candidate.call([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]))\n    assert_equal([5, [1, 2, 3, 4, 5]], candidate.call([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]]))\n    assert_equal([4, [6, 7, 8, 9]], candidate.call([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  input_list.max_by(&:length)\nend",
    "  max_length = 0\n  max_length_list = []\n  input_list.each do |list|\n    if list.length > max_length\n      max_length = list.length\n      max_length_list = list\n    end\n  end\n  max_length_list\nend",
    "  max_length = 0\n  max_length_list = []\n  input_list.each do |list|\n    if list.length > max_length\n      max_length = list.length\n      max_length_list = list\n    end\n  end\n  max_length_list\nend",
    "  input_list.max_by(&:length)\nend",
    "  input_list.max_by(&:length)\nend",
    "  max_length = 0\n  max_length_list = []\n  input_list.each do |list|\n    if list.length > max_length\n      max_length = list.length\n      max_length_list = list\n    end\n  end\n  max_length_list\nend",
    "  input_list.max_by { |x| x.length }\nend",
    "  max_length = 0\n  max_length_list = []\n  input_list.each do |list|\n    if list.length > max_length\n      max_length = list.length\n      max_length_list = list\n    end\n  end\n  max_length_list\nend",
    "  max_length = 0\n  max_length_list = []\n  input_list.each do |list|\n    if list.length > max_length\n      max_length = list.length\n      max_length_list = list\n    end\n  end\n  max_length_list\nend",
    "  max_length = 0\n  max_length_list = []\n  input_list.each do |list|\n    if list.length > max_length\n      max_length = list.length\n      max_length_list = list\n    end\n  end\n  max_length_list\nend",
    "  max_length = 0\n  max_length_list = []\n  input_list.each do |list|\n    if list.length > max_length\n      max_length = list.length\n      max_length_list = list\n    end\n  end\n  max_length_list\nend",
    "  input_list.max_by(&:length)\nend",
    "  input_list.max_by(&:length)\nend",
    "  input_list.max_by(&:length)\nend",
    "  input_list.max_by { |list| list.length }\nend",
    "  input_list.max_by { |x| x.length }\nend",
    "  max_length = 0\n  max_length_list = []\n  input_list.each do |list|\n    if list.length > max_length\n      max_length = list.length\n      max_length_list = list\n    end\n  end\n  max_length_list\nend",
    "  max_length = input_list[0].length\n  max_length_list = []\n  input_list.each do |list|\n    if list.length > max_length\n      max_length = list.length\n      max_length_list = list\n    end\n  end\n  max_length_list\nend",
    "  input_list.max_by { |x| x.length }\nend",
    "  input_list.max_by { |x| x.length }\nend"
  ]
}