{
  "name": "mbpp_632_move_zero",
  "language": "rb",
  "prompt": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = num_list.count(0)\n  num_list.delete(0)\n  count.times { num_list.push(0) }\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdmmbmz47\nStarted\n.\nFinished in 0.000376945 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2652.91 tests/s, 7958.72 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    else\n      print num\n    end\n  end\n  zero_count.times do\n    print 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpbusdt0af\nStarted\n123400F\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpbusdt0af.rb:19:in `test_move_zero'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_move_zero\n     18:     candidate = method(:move_zero)\n  => 19:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     20:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     21:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     22:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<2>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.006603844 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.43 tests/s, 151.43 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpc4_ziph7\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpc4_ziph7.rb:11:in `test_move_zero'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_move_zero\n     10:     candidate = method(:move_zero)\n  => 11:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     12:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     13:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     14:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.008454238 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n118.28 tests/s, 118.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    else\n      print num\n    end\n  end\n  zero_count.times do\n    print 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpbusdt0af\nStarted\n123400F\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpbusdt0af.rb:19:in `test_move_zero'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_move_zero\n     18:     candidate = method(:move_zero)\n  => 19:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     20:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     21:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     22:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<2>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.006603844 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.43 tests/s, 151.43 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk796a00z\nStarted\n.\nFinished in 0.000396768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2520.36 tests/s, 7561.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpzsdqeb0y\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpzsdqeb0y.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00874417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list << num\n    end\n  end\n  num_list.delete(0)\n  num_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplfyvi9rg\nStarted\n.\nFinished in 0.000398128 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2511.76 tests/s, 7535.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each_with_index do |num, index|\n    if num == 0\n      zero_count += 1\n      num_list.delete_at(index)\n    end\n  end\n  zero_count.times { num_list.push(0) }\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmp_9ec2x9x\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp_9ec2x9x.rb:18:in `test_move_zero'\n     15:   def test_move_zero\n     16:     candidate = method(:move_zero)\n     17:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 18:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     19:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     20:   end\n     21: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.010634581 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n94.03 tests/s, 188.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk796a00z\nStarted\n.\nFinished in 0.000396768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2520.36 tests/s, 7561.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpzsdqeb0y\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpzsdqeb0y.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00874417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    end\n  end\n  num_list.delete(0)\n  num_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptjs386xg\nStarted\n.\nFinished in 0.000413575 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2417.94 tests/s, 7253.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf0xiguiw\nStarted\n.\nFinished in 0.000435137 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2298.13 tests/s, 6894.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list << num\n    end\n  end\n  num_list.delete(0)\n  num_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplfyvi9rg\nStarted\n.\nFinished in 0.000398128 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2511.76 tests/s, 7535.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each_with_index do |num, index|\n    if num == 0\n      zero_count += 1\n      num_list.delete_at(index)\n    end\n  end\n  zero_count.times { num_list.push(0) }\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmp_9ec2x9x\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp_9ec2x9x.rb:18:in `test_move_zero'\n     15:   def test_move_zero\n     16:     candidate = method(:move_zero)\n     17:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 18:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     19:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     20:   end\n     21: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.010634581 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n94.03 tests/s, 188.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each_with_index do |num, index|\n    if num == 0\n      zero_count += 1\n      num_list.delete_at(index)\n    end\n  end\n  zero_count.times do\n    num_list.push(0)\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "Loaded suite /tmp/tmpm7mdb1mh\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpm7mdb1mh.rb:20:in `test_move_zero'\n     17:   def test_move_zero\n     18:     candidate = method(:move_zero)\n     19:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 20:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     21:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     22:   end\n     23: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.013358888 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n74.86 tests/s, 149.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf0xiguiw\nStarted\n.\nFinished in 0.000435137 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2298.13 tests/s, 6894.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  new_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    else\n      new_list.push(num)\n    end\n  end\n  zero_count.times do\n    new_list.push(0)\n  end\n  new_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvdyy465d\nStarted\n.\nFinished in 0.000421793 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2370.83 tests/s, 7112.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list << num\n    end\n  end\n  num_list.delete(0)\n  num_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplfyvi9rg\nStarted\n.\nFinished in 0.000398128 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2511.76 tests/s, 7535.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list << num\n    end\n  end\n  num_list.delete(0)\n  num_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplfyvi9rg\nStarted\n.\nFinished in 0.000398128 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2511.76 tests/s, 7535.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "/tmp/tmpo3gggu3v.rb:11: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpo3gggu3v.rb:18: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list << num\n    end\n  end\n  num_list.delete(0)\n  num_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplfyvi9rg\nStarted\n.\nFinished in 0.000398128 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2511.76 tests/s, 7535.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpzsdqeb0y\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpzsdqeb0y.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00874417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each_with_index do |num, index|\n    if num == 0\n      num_list.delete_at(index)\n      zero_count += 1\n    end\n  end\n  zero_count.times do\n    num_list.push(0)\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "Loaded suite /tmp/tmpatm58sek\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpatm58sek.rb:20:in `test_move_zero'\n     17:   def test_move_zero\n     18:     candidate = method(:move_zero)\n     19:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 20:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     21:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     22:   end\n     23: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.012953185 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n77.20 tests/s, 154.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each_with_index do |num, index|\n    if num == 0\n      zero_count += 1\n      num_list.delete_at(index)\n    end\n  end\n  zero_count.times { num_list.push(0) }\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmp_9ec2x9x\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp_9ec2x9x.rb:18:in `test_move_zero'\n     15:   def test_move_zero\n     16:     candidate = method(:move_zero)\n     17:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 18:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     19:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     20:   end\n     21: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.010634581 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n94.03 tests/s, 188.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk796a00z\nStarted\n.\nFinished in 0.000396768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2520.36 tests/s, 7561.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk796a00z\nStarted\n.\nFinished in 0.000396768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2520.36 tests/s, 7561.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each_with_index do |num, index|\n    if num == 0\n      zero_count += 1\n      num_list.delete_at(index)\n    end\n  end\n  zero_count.times { num_list.push(0) }\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmp_9ec2x9x\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp_9ec2x9x.rb:18:in `test_move_zero'\n     15:   def test_move_zero\n     16:     candidate = method(:move_zero)\n     17:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 18:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     19:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     20:   end\n     21: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.010634581 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n94.03 tests/s, 188.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list << num\n    end\n  end\n  num_list - zero_list + zero_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y6t4v8n\nStarted\n.\nFinished in 0.000455449 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2195.64 tests/s, 6586.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpzsdqeb0y\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpzsdqeb0y.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00874417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each_with_index do |num, index|\n    if num == 0\n      zero_count += 1\n      num_list.delete_at(index)\n    end\n  end\n  zero_count.times { num_list.push(0) }\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmp_9ec2x9x\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp_9ec2x9x.rb:18:in `test_move_zero'\n     15:   def test_move_zero\n     16:     candidate = method(:move_zero)\n     17:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 18:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     19:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     20:   end\n     21: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.010634581 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n94.03 tests/s, 188.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpzsdqeb0y\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpzsdqeb0y.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00874417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each_with_index do |num, index|\n    if num == 0\n      zero_count += 1\n      num_list.delete_at(index)\n    end\n  end\n  zero_count.times { num_list.push(0) }\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmp_9ec2x9x\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp_9ec2x9x.rb:18:in `test_move_zero'\n     15:   def test_move_zero\n     16:     candidate = method(:move_zero)\n     17:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 18:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     19:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     20:   end\n     21: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.010634581 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n94.03 tests/s, 188.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each_with_index do |num, index|\n    if num == 0\n      zero_count += 1\n      num_list.delete_at(index)\n    end\n  end\n  num_list.fill(0, num_list.length, zero_count)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "Loaded suite /tmp/tmpd97ky_os\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpd97ky_os.rb:17:in `test_move_zero'\n     14:   def test_move_zero\n     15:     candidate = method(:move_zero)\n     16:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 17:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     18:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     19:   end\n     20: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.013588925 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n73.59 tests/s, 147.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each_with_index do |num, index|\n    if num == 0\n      zero_count += 1\n      num_list.delete_at(index)\n    end\n  end\n  zero_count.times do\n    num_list.push(0)\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "Loaded suite /tmp/tmpm7mdb1mh\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpm7mdb1mh.rb:20:in `test_move_zero'\n     17:   def test_move_zero\n     18:     candidate = method(:move_zero)\n     19:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 20:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     21:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     22:   end\n     23: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.013358888 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n74.86 tests/s, 149.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each_with_index do |num, index|\n    if num == 0\n      zero_count += 1\n      num_list.delete_at(index)\n    end\n  end\n  zero_count.times { num_list.push(0) }\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmp_9ec2x9x\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp_9ec2x9x.rb:18:in `test_move_zero'\n     15:   def test_move_zero\n     16:     candidate = method(:move_zero)\n     17:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 18:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     19:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     20:   end\n     21: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.010634581 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n94.03 tests/s, 188.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpzsdqeb0y\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpzsdqeb0y.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00874417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each_with_index do |num, index|\n    if num == 0\n      zero_count += 1\n      num_list.delete_at(index)\n    end\n  end\n  zero_count.times { num_list.push(0) }\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmp_9ec2x9x\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp_9ec2x9x.rb:18:in `test_move_zero'\n     15:   def test_move_zero\n     16:     candidate = method(:move_zero)\n     17:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 18:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     19:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     20:   end\n     21: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.010634581 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n94.03 tests/s, 188.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpzsdqeb0y\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpzsdqeb0y.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00874417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpc4_ziph7\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpc4_ziph7.rb:11:in `test_move_zero'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_move_zero\n     10:     candidate = method(:move_zero)\n  => 11:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     12:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     13:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     14:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.008454238 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n118.28 tests/s, 118.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk796a00z\nStarted\n.\nFinished in 0.000396768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2520.36 tests/s, 7561.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpzsdqeb0y\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpzsdqeb0y.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00874417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf0xiguiw\nStarted\n.\nFinished in 0.000435137 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2298.13 tests/s, 6894.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpzsdqeb0y\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpzsdqeb0y.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00874417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf0xiguiw\nStarted\n.\nFinished in 0.000435137 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2298.13 tests/s, 6894.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpzsdqeb0y\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpzsdqeb0y.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00874417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list << num\n    end\n  end\n  num_list.delete(0)\n  num_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplfyvi9rg\nStarted\n.\nFinished in 0.000398128 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2511.76 tests/s, 7535.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk796a00z\nStarted\n.\nFinished in 0.000396768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2520.36 tests/s, 7561.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpzsdqeb0y\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpzsdqeb0y.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00874417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7tmumlo3\nStarted\n.\nFinished in 0.000419847 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2381.82 tests/s, 7145.46 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    else\n      print num\n    end\n  end\n  zero_count.times { print 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "Loaded suite /tmp/tmp954gjbub\nStarted\n123400F\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp954gjbub.rb:17:in `test_move_zero'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_move_zero\n     16:     candidate = method(:move_zero)\n  => 17:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     18:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     19:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     20:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<2>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.015496741 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n64.53 tests/s, 64.53 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk796a00z\nStarted\n.\nFinished in 0.000396768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2520.36 tests/s, 7561.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk796a00z\nStarted\n.\nFinished in 0.000396768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2520.36 tests/s, 7561.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpzsdqeb0y\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpzsdqeb0y.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00874417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  # Write your code here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphehwsu42\nStarted\n.\nFinished in 0.000427521 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.07 tests/s, 7017.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf0xiguiw\nStarted\n.\nFinished in 0.000435137 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2298.13 tests/s, 6894.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_list = []\n  non_zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list << num\n    else\n      non_zero_list << num\n    end\n  end\n  non_zero_list + zero_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtdioxgn\nStarted\n.\nFinished in 0.000429999 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2325.59 tests/s, 6976.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpzsdqeb0y\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpzsdqeb0y.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00874417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    end\n  end\n  num_list.delete(0)\n  num_list.push(zero_list)\n  num_list.flatten\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprt4octyk\nStarted\n.\nFinished in 0.000425498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2350.19 tests/s, 7050.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times { num_list.push(0) }\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps0t7lucq\nStarted\n.\nFinished in 0.000420219 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2379.71 tests/s, 7139.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  for i in 0...num_list.length\n    if num_list[i] != 0\n      num_list[count] = num_list[i]\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpak3uop1j\nStarted\n.\nFinished in 0.00043475 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2300.17 tests/s, 6900.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    end\n  end\n  num_list.delete(0)\n  num_list.push(zero_list)\n  num_list.flatten\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprt4octyk\nStarted\n.\nFinished in 0.000425498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2350.19 tests/s, 7050.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each_with_index do |num, index|\n    if num == 0\n      zero_count += 1\n      num_list.delete_at(index)\n    end\n  end\n  zero_count.times { num_list.push(0) }\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmp_9ec2x9x\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp_9ec2x9x.rb:18:in `test_move_zero'\n     15:   def test_move_zero\n     16:     candidate = method(:move_zero)\n     17:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 18:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     19:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     20:   end\n     21: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.010634581 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n94.03 tests/s, 188.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\np move_zero([0,1,2,0,3,4,0,5,0])\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "[1, 2, 3, 4, 5, 0]\nLoaded suite /tmp/tmpp1xpa4n5\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpp1xpa4n5.rb:11:in `test_move_zero'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_move_zero\n     10:     candidate = method(:move_zero)\n  => 11:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     12:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     13:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     14:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.011964155 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n83.58 tests/s, 83.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.sort!\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list << num\n      num_list.delete(num)\n    end\n  end\n  num_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "Loaded suite /tmp/tmpw8viq_aq\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpw8viq_aq.rb:17:in `test_move_zero'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_move_zero\n     16:     candidate = method(:move_zero)\n  => 17:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     18:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     19:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     20:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.011641304 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n85.90 tests/s, 85.90 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  # Write your code here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphehwsu42\nStarted\n.\nFinished in 0.000427521 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.07 tests/s, 7017.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "Loaded suite /tmp/tmp6jd5zvo5\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp6jd5zvo5.rb:11:in `test_move_zero'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_move_zero\n     10:     candidate = method(:move_zero)\n  => 11:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     12:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     13:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     14:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.011670604 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n85.69 tests/s, 85.69 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpc4_ziph7\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpc4_ziph7.rb:11:in `test_move_zero'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_move_zero\n     10:     candidate = method(:move_zero)\n  => 11:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     12:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     13:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     14:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.008454238 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n118.28 tests/s, 118.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    end\n  end\n  num_list.delete(0)\n  num_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptjs386xg\nStarted\n.\nFinished in 0.000413575 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2417.94 tests/s, 7253.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each_with_index do |num, index|\n    if num == 0\n      zero_count += 1\n      num_list.delete_at(index)\n    end\n  end\n  zero_count.times { num_list.push(0) }\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmp_9ec2x9x\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp_9ec2x9x.rb:18:in `test_move_zero'\n     15:   def test_move_zero\n     16:     candidate = method(:move_zero)\n     17:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 18:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     19:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     20:   end\n     21: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.010634581 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n94.03 tests/s, 188.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.each_with_index do |num, index|\n    if num == 0\n      num_list.delete_at(index)\n      num_list.push(0)\n    end\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "Loaded suite /tmp/tmp77nmuh01\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp77nmuh01.rb:16:in `test_move_zero'\n     13:   def test_move_zero\n     14:     candidate = method(:move_zero)\n     15:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 16:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     17:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     18:   end\n     19: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.01323506 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n75.56 tests/s, 151.11 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf0xiguiw\nStarted\n.\nFinished in 0.000435137 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2298.13 tests/s, 6894.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_list = []\n  non_zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list << num\n    else\n      non_zero_list << num\n    end\n  end\n  non_zero_list + zero_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtdioxgn\nStarted\n.\nFinished in 0.000429999 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2325.59 tests/s, 6976.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpzsdqeb0y\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpzsdqeb0y.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00874417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpzsdqeb0y\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpzsdqeb0y.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00874417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each_with_index do |num, index|\n    if num == 0\n      num_list.delete_at(index)\n      zero_count += 1\n    end\n  end\n  zero_count.times do\n    num_list.push(0)\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "Loaded suite /tmp/tmpatm58sek\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpatm58sek.rb:20:in `test_move_zero'\n     17:   def test_move_zero\n     18:     candidate = method(:move_zero)\n     19:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 20:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     21:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     22:   end\n     23: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.012953185 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n77.20 tests/s, 154.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = num_list.count(0)\n  num_list.delete(0)\n  zero_count.times { num_list.push(0) }\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9ka_ts7k\nStarted\n.\nFinished in 0.000422876 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2364.76 tests/s, 7094.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpzsdqeb0y\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpzsdqeb0y.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00874417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    else\n      print num\n    end\n  end\n  zero_count.times { print 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "Loaded suite /tmp/tmp954gjbub\nStarted\n123400F\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp954gjbub.rb:17:in `test_move_zero'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_move_zero\n     16:     candidate = method(:move_zero)\n  => 17:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     18:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     19:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     20:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<2>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.015496741 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n64.53 tests/s, 64.53 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf0xiguiw\nStarted\n.\nFinished in 0.000435137 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2298.13 tests/s, 6894.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpzsdqeb0y\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpzsdqeb0y.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00874417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    end\n  end\n  num_list.delete(0)\n  num_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptjs386xg\nStarted\n.\nFinished in 0.000413575 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2417.94 tests/s, 7253.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n\tcount = 0\n\tnum_list.each do |num|\n\t\tif num != 0\n\t\t\tnum_list[count] = num\n\t\t\tcount += 1\n\t\tend\n\tend\n\twhile count < num_list.length\n\t\tnum_list[count] = 0\n\t\tcount += 1\n\tend\n\treturn num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0uumq1ds\nStarted\n.\nFinished in 0.000421028 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2375.14 tests/s, 7125.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpzsdqeb0y\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpzsdqeb0y.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00874417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk796a00z\nStarted\n.\nFinished in 0.000396768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2520.36 tests/s, 7561.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each_with_index do |num, index|\n    if num == 0\n      zero_count += 1\n      num_list.delete_at(index)\n    end\n  end\n  num_list.concat([0] * zero_count)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "Loaded suite /tmp/tmpdtsobyjt\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpdtsobyjt.rb:17:in `test_move_zero'\n     14:   def test_move_zero\n     15:     candidate = method(:move_zero)\n     16:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 17:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     18:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     19:   end\n     20: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.013285493 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n75.27 tests/s, 150.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list << num\n    end\n  end\n  num_list.delete(0)\n  num_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplfyvi9rg\nStarted\n.\nFinished in 0.000398128 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2511.76 tests/s, 7535.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each_with_index do |num, index|\n    if num == 0\n      num_list.delete_at(index)\n      zero_count += 1\n    end\n  end\n  zero_count.times do\n    num_list << 0\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "Loaded suite /tmp/tmpxyx22rwr\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpxyx22rwr.rb:20:in `test_move_zero'\n     17:   def test_move_zero\n     18:     candidate = method(:move_zero)\n     19:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 20:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     21:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     22:   end\n     23: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.013714077 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n72.92 tests/s, 145.84 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each_with_index do |num, index|\n    if num == 0\n      zero_count += 1\n      num_list.delete_at(index)\n    end\n  end\n  num_list.concat(Array.new(zero_count, 0))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "Loaded suite /tmp/tmp8tuh7yx0\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp8tuh7yx0.rb:17:in `test_move_zero'\n     14:   def test_move_zero\n     15:     candidate = method(:move_zero)\n     16:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 17:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     18:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     19:   end\n     20: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.009621152 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n103.94 tests/s, 207.88 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpzsdqeb0y\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpzsdqeb0y.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00874417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "Loaded suite /tmp/tmp6jd5zvo5\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp6jd5zvo5.rb:11:in `test_move_zero'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_move_zero\n     10:     candidate = method(:move_zero)\n  => 11:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     12:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     13:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     14:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.011670604 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n85.69 tests/s, 85.69 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpzsdqeb0y\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpzsdqeb0y.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00874417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.each_with_index do |num, index|\n    if num == 0\n      num_list.delete_at(index)\n      num_list.push(0)\n    end\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "Loaded suite /tmp/tmp77nmuh01\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp77nmuh01.rb:16:in `test_move_zero'\n     13:   def test_move_zero\n     14:     candidate = method(:move_zero)\n     15:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 16:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     17:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     18:   end\n     19: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.01323506 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n75.56 tests/s, 151.11 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = num_list.count(0)\n  num_list.delete(0)\n  zero_count.times { num_list.push(0) }\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9ka_ts7k\nStarted\n.\nFinished in 0.000422876 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2364.76 tests/s, 7094.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk796a00z\nStarted\n.\nFinished in 0.000396768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2520.36 tests/s, 7561.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpzsdqeb0y\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpzsdqeb0y.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00874417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each_with_index do |num, index|\n    if num == 0\n      zero_count += 1\n      num_list.delete_at(index)\n    end\n  end\n  zero_count.times { num_list.push(0) }\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmp_9ec2x9x\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp_9ec2x9x.rb:18:in `test_move_zero'\n     15:   def test_move_zero\n     16:     candidate = method(:move_zero)\n     17:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 18:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     19:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     20:   end\n     21: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.010634581 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n94.03 tests/s, 188.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpzsdqeb0y\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpzsdqeb0y.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00874417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk796a00z\nStarted\n.\nFinished in 0.000396768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2520.36 tests/s, 7561.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.each_with_index do |num, index|\n    if num == 0\n      num_list.delete_at(index)\n      num_list.push(0)\n    end\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "Loaded suite /tmp/tmp77nmuh01\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp77nmuh01.rb:16:in `test_move_zero'\n     13:   def test_move_zero\n     14:     candidate = method(:move_zero)\n     15:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 16:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     17:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     18:   end\n     19: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.01323506 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n75.56 tests/s, 151.11 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpzsdqeb0y\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpzsdqeb0y.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00874417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each_with_index do |num, index|\n    if num == 0\n      zero_count += 1\n      num_list.delete_at(index)\n    end\n  end\n  zero_count.times do\n    num_list.push(0)\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "Loaded suite /tmp/tmpm7mdb1mh\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpm7mdb1mh.rb:20:in `test_move_zero'\n     17:   def test_move_zero\n     18:     candidate = method(:move_zero)\n     19:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 20:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     21:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     22:   end\n     23: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.013358888 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n74.86 tests/s, 149.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk796a00z\nStarted\n.\nFinished in 0.000396768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2520.36 tests/s, 7561.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    end\n  end\n  num_list.delete(0)\n  num_list.concat(zero_list)\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpml3izvdo\nStarted\n.\nFinished in 0.000473769 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2110.73 tests/s, 6332.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list << num\n    end\n  end\n  num_list.delete(0)\n  num_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplfyvi9rg\nStarted\n.\nFinished in 0.000398128 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2511.76 tests/s, 7535.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_list = []\n  non_zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    else\n      non_zero_list.push(num)\n    end\n  end\n  return non_zero_list + zero_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkpvv6af2\nStarted\n.\nFinished in 0.000369964 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2702.97 tests/s, 8108.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list << num\n    end\n  end\n  num_list - zero_list + zero_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y6t4v8n\nStarted\n.\nFinished in 0.000455449 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2195.64 tests/s, 6586.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpzsdqeb0y\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpzsdqeb0y.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00874417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each_with_index do |num, index|\n    if num == 0\n      zero_count += 1\n      num_list.delete_at(index)\n    end\n  end\n  num_list.concat(Array.new(zero_count, 0))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "Loaded suite /tmp/tmp8tuh7yx0\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp8tuh7yx0.rb:17:in `test_move_zero'\n     14:   def test_move_zero\n     15:     candidate = method(:move_zero)\n     16:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 17:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     18:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     19:   end\n     20: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.009621152 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n103.94 tests/s, 207.88 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpzsdqeb0y\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpzsdqeb0y.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00874417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list << num\n    end\n  end\n  num_list.delete(0)\n  num_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplfyvi9rg\nStarted\n.\nFinished in 0.000398128 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2511.76 tests/s, 7535.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each_with_index do |num, index|\n    if num == 0\n      zero_count += 1\n      num_list.delete_at(index)\n    end\n  end\n  zero_count.times { num_list << 0 }\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "Loaded suite /tmp/tmp18xm4spb\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp18xm4spb.rb:18:in `test_move_zero'\n     15:   def test_move_zero\n     16:     candidate = method(:move_zero)\n     17:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 18:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     19:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     20:   end\n     21: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.010677353 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.66 tests/s, 187.31 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list << num\n    end\n  end\n  num_list.delete(0)\n  num_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplfyvi9rg\nStarted\n.\nFinished in 0.000398128 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2511.76 tests/s, 7535.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpzsdqeb0y\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpzsdqeb0y.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00874417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each_with_index do |num, index|\n    if num == 0\n      zero_count += 1\n      num_list.delete_at(index)\n    end\n  end\n  zero_count.times { num_list.push(0) }\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmp_9ec2x9x\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp_9ec2x9x.rb:18:in `test_move_zero'\n     15:   def test_move_zero\n     16:     candidate = method(:move_zero)\n     17:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 18:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     19:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     20:   end\n     21: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.010634581 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n94.03 tests/s, 188.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpzsdqeb0y\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpzsdqeb0y.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00874417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_list = []\n  non_zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    else\n      non_zero_list.push(num)\n    end\n  end\n  non_zero_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1esucimm\nStarted\n.\nFinished in 0.000380775 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2626.22 tests/s, 7878.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk796a00z\nStarted\n.\nFinished in 0.000396768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2520.36 tests/s, 7561.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph1ejfzp0\nStarted\n.\nFinished in 0.000400129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2499.19 tests/s, 7497.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}