{
  "name": "mbpp_584_find_adverbs",
  "language": "rb",
  "prompt": "# Write a function to find the first adverb ending with ly and its positions in a given string.\ndef find_adverbs(text)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_adverbs\n    candidate = method(:find_adverbs)\n    assert_equal(\"0-7: Clearly\", candidate.call(\"Clearly, he has no excuse for such behavior.\"))\n    assert_equal(\"28-36: carefuly\", candidate.call(\"Please handle the situation carefuly\"))\n    assert_equal(\"18-25: quickly\", candidate.call(\"Complete the task quickly\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  text.scan(/\\w+ly/).each_with_index.map { |word, index| [word, text.index(word)] }\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?('ly')\n      adverbs << [word, index]\n    end\n  end\n  adverbs\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  puts \"Adverbs: #{adverbs}\"\n  adverbs.each do |adverb|\n    puts \"Position: #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly\\b/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      adverbs << [word, index]\n    end\n  end\n  adverbs\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?('ly')\n      adverbs << [word, index]\n    end\n  end\n  adverbs\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"Adverb: #{adverb}, Position: #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  positions = text.enum_for(:scan, /\\w+ly/).map { Regexp.last_match.begin(0) }\n  puts \"Adverbs: #{adverbs}\"\n  puts \"Positions: #{positions}\"\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  positions = text.enum_for(:scan, /\\w+ly/).map { Regexp.last_match.begin(0) }\n  [adverbs, positions]\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = []\n  text.split(\" \").each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      adverbs << [word, index]\n    end\n  end\n  adverbs\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\b\\w+ly\\b/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/).each_with_index.map { |word, index| [word, text.index(word)] }\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = []\n  text.scan(/\\w+ly/) do |adverb|\n    adverbs << adverb\n  end\n  adverbs\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?('ly')\n      adverbs << [word, index]\n    end\n  end\n  adverbs\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  puts \"Adverbs: #{adverbs}\"\n  adverbs.each do |adverb|\n    puts \"Position of #{adverb}: #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  text.scan(/\\w+ly/).each_with_index do |adverb, index|\n    puts \"Adverb: #{adverb}, position: #{index}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is found at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      adverbs << [word, index]\n    end\n  end\n  adverbs\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      adverbs << [word, index]\n    end\n  end\n  adverbs\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?('ly')\n      adverbs << [word, index]\n    end\n  end\n  adverbs\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each { |adverb| puts \"#{adverb} is at position #{text.index(adverb)}\" }\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/).each_with_index do |word, index|\n    puts \"#{word} is an adverb and it is at position #{index}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.map { |adverb| [adverb, text.index(adverb)] }\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.map { |adverb| [adverb, text.index(adverb)] }\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      adverbs << [word, index]\n    end\n  end\n  adverbs\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly\\b/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  positions = text.enum_for(:scan, /\\w+ly/).map { Regexp.last_match.begin(0) }\n  [adverbs, positions]\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"Adverb: #{adverb}, position: #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  puts \"Adverbs: #{adverbs}\"\n  adverbs.each do |adverb|\n    puts \"Position of #{adverb}: #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?('ly')\n      adverbs << [word, index]\n    end\n  end\n  adverbs\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?('ly')\n      adverbs << [word, index]\n    end\n  end\n  adverbs\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is found at positions #{text.index(adverb)} and #{text.rindex(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly\\b/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is found at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.map { |adverb| [adverb, text.index(adverb)] }\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?('ly')\n      adverbs << [word, index]\n    end\n  end\n  adverbs\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is found at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      adverbs << [word, index]\n    end\n  end\n  adverbs\nend",
    "  text.scan(/\\w+ly/)\nend"
  ]
}