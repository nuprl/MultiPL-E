{
  "name": "mbpp_133_sum_negativenum",
  "language": "rb",
  "prompt": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_133_sum_negativenum.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbabdy2ib\nStarted\n.\nFinished in 0.000382989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2611.04 tests/s, 7833.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbabdy2ib\nStarted\n.\nFinished in 0.000382989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2611.04 tests/s, 7833.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpugv1qyet\nStarted\n.\nFinished in 0.000480205 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2082.44 tests/s, 6247.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbabdy2ib\nStarted\n.\nFinished in 0.000382989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2611.04 tests/s, 7833.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbabdy2ib\nStarted\n.\nFinished in 0.000382989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2611.04 tests/s, 7833.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpugv1qyet\nStarted\n.\nFinished in 0.000480205 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2082.44 tests/s, 6247.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbabdy2ib\nStarted\n.\nFinished in 0.000382989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2611.04 tests/s, 7833.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpugv1qyet\nStarted\n.\nFinished in 0.000480205 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2082.44 tests/s, 6247.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpugv1qyet\nStarted\n.\nFinished in 0.000480205 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2082.44 tests/s, 6247.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  nums.select {|num| num < 0}.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkoao4023\nStarted\n.\nFinished in 0.000388391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.72 tests/s, 7724.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpugv1qyet\nStarted\n.\nFinished in 0.000480205 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2082.44 tests/s, 6247.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each { |num| sum += num if num < 0 }\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkvnadg86\nStarted\n.\nFinished in 0.000374831 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2667.87 tests/s, 8003.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  nums.select {|num| num < 0}.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkoao4023\nStarted\n.\nFinished in 0.000388391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.72 tests/s, 7724.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmploi429w4\nStarted\n.\nFinished in 0.000368622 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2712.81 tests/s, 8138.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  neg_nums = nums.select {|num| num < 0}\n  neg_nums.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcqp0zp6e\nStarted\n.\nFinished in 0.000382034 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2617.57 tests/s, 7852.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  total = 0\n  nums.each do |num|\n    if num < 0\n      total += num\n    end\n  end\n  total\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5gbxrmsl\nStarted\n.\nFinished in 0.000373396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2678.12 tests/s, 8034.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  nums.select {|num| num < 0}.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkoao4023\nStarted\n.\nFinished in 0.000388391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.72 tests/s, 7724.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpugv1qyet\nStarted\n.\nFinished in 0.000480205 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2082.44 tests/s, 6247.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  nums.select {|num| num < 0}.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkoao4023\nStarted\n.\nFinished in 0.000388391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.72 tests/s, 7724.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpugv1qyet\nStarted\n.\nFinished in 0.000480205 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2082.44 tests/s, 6247.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpugv1qyet\nStarted\n.\nFinished in 0.000480205 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2082.44 tests/s, 6247.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpugv1qyet\nStarted\n.\nFinished in 0.000480205 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2082.44 tests/s, 6247.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmploi429w4\nStarted\n.\nFinished in 0.000368622 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2712.81 tests/s, 8138.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpugv1qyet\nStarted\n.\nFinished in 0.000480205 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2082.44 tests/s, 6247.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpugv1qyet\nStarted\n.\nFinished in 0.000480205 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2082.44 tests/s, 6247.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbabdy2ib\nStarted\n.\nFinished in 0.000382989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2611.04 tests/s, 7833.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpugv1qyet\nStarted\n.\nFinished in 0.000480205 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2082.44 tests/s, 6247.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each { |num| sum += num if num < 0 }\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkvnadg86\nStarted\n.\nFinished in 0.000374831 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2667.87 tests/s, 8003.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.inject(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbirgx0ma\nStarted\n.\nFinished in 0.000378359 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2642.99 tests/s, 7928.98 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpugv1qyet\nStarted\n.\nFinished in 0.000480205 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2082.44 tests/s, 6247.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptqnmgkrr\nStarted\n.\nFinished in 0.00037256 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2684.13 tests/s, 8052.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpugv1qyet\nStarted\n.\nFinished in 0.000480205 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2082.44 tests/s, 6247.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpugv1qyet\nStarted\n.\nFinished in 0.000480205 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2082.44 tests/s, 6247.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  nums.select {|num| num < 0}.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkoao4023\nStarted\n.\nFinished in 0.000388391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.72 tests/s, 7724.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpugv1qyet\nStarted\n.\nFinished in 0.000480205 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2082.44 tests/s, 6247.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  nums.select {|num| num < 0}.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkoao4023\nStarted\n.\nFinished in 0.000388391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.72 tests/s, 7724.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  nums.select {|num| num < 0}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3jmbiiab\nStarted\n.\nFinished in 0.000380467 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2628.35 tests/s, 7885.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpugv1qyet\nStarted\n.\nFinished in 0.000480205 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2082.44 tests/s, 6247.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpugv1qyet\nStarted\n.\nFinished in 0.000480205 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2082.44 tests/s, 6247.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpugv1qyet\nStarted\n.\nFinished in 0.000480205 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2082.44 tests/s, 6247.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  neg_nums = nums.select { |num| num < 0 }\n  neg_nums.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnuqfwv6b\nStarted\n.\nFinished in 0.000373287 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2678.90 tests/s, 8036.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpugv1qyet\nStarted\n.\nFinished in 0.000480205 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2082.44 tests/s, 6247.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmploi429w4\nStarted\n.\nFinished in 0.000368622 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2712.81 tests/s, 8138.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpugv1qyet\nStarted\n.\nFinished in 0.000480205 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2082.44 tests/s, 6247.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmploi429w4\nStarted\n.\nFinished in 0.000368622 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2712.81 tests/s, 8138.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpugv1qyet\nStarted\n.\nFinished in 0.000480205 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2082.44 tests/s, 6247.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  # your code here\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcdxx8cdz\nStarted\n.\nFinished in 0.00037277 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.62 tests/s, 8047.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mkdhxj6\nStarted\n.\nFinished in 0.000522335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.48 tests/s, 5743.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}