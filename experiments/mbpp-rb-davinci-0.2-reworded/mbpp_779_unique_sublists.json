{
  "name": "mbpp_779_unique_sublists",
  "language": "rb",
  "prompt": "# Write a function to count the number of arrays within an array. The function should return a hash, where every array is turned to an array, and the value of the array is the number of its occurrences.\ndef unique_sublists(list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_779_unique_sublists.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_sublists\n    candidate = method(:unique_sublists)\n    assert_equal({[1, 3] => 2, [5, 7] => 2, [13, 15, 17] => 1, [9, 11] => 1}, candidate.call([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]))\n    assert_equal({[\"green\", \"orange\"] => 2, [\"black\"] => 1, [\"white\"] => 1}, candidate.call([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]))\n    assert_equal({[1, 2] => 1, [3, 4] => 1, [4, 5] => 1, [6, 7] => 1}, candidate.call([[1, 2], [3, 4], [4, 5], [6, 7]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  list1.uniq.map { |sublist| [sublist, list1.count(sublist)] }.to_h\nend",
    "  hash = Hash.new(0)\n  list1.each do |sublist|\n    hash[sublist] += 1\n  end\n  hash\nend",
    "  list1.uniq.map { |e| [e, list1.count(e)] }.to_h\nend",
    "  list1.uniq.map { |e| [e, list1.count(e)] }.to_h\nend",
    "  list1.uniq.map { |x| [x, list1.count(x)] }.to_h\nend",
    "  hash = Hash.new(0)\n  list1.each do |element|\n    hash[element] += 1\n  end\n  hash\nend",
    "  sublists = []\n  list1.each do |sublist|\n    sublists << sublist.sort\n  end\n  sublists.uniq.map do |sublist|\n    [sublist, sublists.count(sublist)]\n  end.to_h\nend",
    "  list1.group_by { |x| x }.map { |k, v| [k, v.size] }.to_h\nend",
    "  result = {}\n  list1.each do |sublist|\n    if result.has_key?(sublist)\n      result[sublist] += 1\n    else\n      result[sublist] = 1\n    end\n  end\n  result\nend",
    "  hash = Hash.new(0)\n  list1.each do |array|\n    hash[array] += 1\n  end\n  hash\nend",
    "  list1.uniq.each_with_object({}) do |sublist, hash|\n    hash[sublist] = list1.count(sublist)\n  end\nend",
    "  list2 = []\n  list1.each do |x|\n    list2 << x.sort\n  end\n  list2.uniq.each do |x|\n    puts \"#{x} is found #{list2.count(x)} times\"\n  end\nend",
    "  list1.each_with_object(Hash.new(0)) { |item, hash| hash[item] += 1 }\nend",
    "  list1.uniq.map { |e| [e, list1.count(e)] }.to_h\nend",
    "  list1.uniq.map { |x| [x, list1.count(x)] }.to_h\nend",
    "  list1.uniq.map { |e| [e, list1.count(e)] }.to_h\nend",
    "  list1.each_with_object(Hash.new(0)) { |sublist, hash| hash[sublist] += 1 }\nend",
    "  list1.uniq.map { |e| [e, list1.count(e)] }.to_h\nend",
    "  list1.each_with_object(Hash.new(0)) { |e, h| h[e] += 1 }\nend",
    "  list1.each_with_object(Hash.new(0)) { |list, counts| counts[list] += 1 }\nend"
  ]
}