{
  "name": "mbpp_743_rotate_right",
  "language": "rb",
  "prompt": "# Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/rbthon-program-right-rotate-array-n/\ndef rotate_right(list, m)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rotate_right\n    candidate = method(:rotate_right)\n    assert_equal([8, 9, 10, 1, 2, 3, 4, 5, 6, 7], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\n    assert_equal([9, 10, 1, 2, 3, 4, 5, 6, 7, 8], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([6, 7, 8, 9, 10, 1, 2, 3, 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  list.rotate(-m)\nend",
    "  list.rotate(-m)\nend",
    "  list.drop(m) + list.take(m)\nend",
    "  m.times do\n    list.unshift(list.pop)\n  end\n  list\nend",
    "  m.times do\n    list.unshift(list.pop)\n  end\n  list\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(m)\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(m)\nend",
    "  m = m % list.length\n  list.push(list.shift(m)).flatten\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0..-m-1]\nend",
    "  list.rotate(m)\nend",
    "  list.rotate(m)\nend",
    "  list.rotate(m)\nend",
    "  list.rotate(m)\nend",
    "  list.rotate(m)\nend",
    "  list.rotate(m)\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(m)\nend"
  ]
}