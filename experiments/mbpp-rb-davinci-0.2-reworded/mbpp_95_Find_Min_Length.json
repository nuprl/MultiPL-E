{
  "name": "mbpp_95_Find_Min_Length",
  "language": "rb",
  "prompt": "# Write a rbthon function to find the length of the smallest array in an array of arrays.\ndef Find_Min_Length(lst)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_95_Find_Min_Length.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Find_Min_Length\n    candidate = method(:Find_Min_Length)\n    assert_equal(1, candidate.call([[1], [1, 2]]))\n    assert_equal(2, candidate.call([[1, 2], [1, 2, 3], [1, 2, 3, 4]]))\n    assert_equal(3, candidate.call([[3, 3, 3], [4, 4, 4, 4]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  lst.min_by(&:length).length\nend\nFind_Min_Length([[1,2,3,4,5],[1,2,3,4,5,6],[1,2,3,4,5,6,7]])",
    "  lst.map {|x| x.length}.min\nend",
    "  lst.map{|x| x.length}.min\nend\nFind_Min_Length([[1,2,3],[4,5],[6,7,8,9],[10,11,12,13,14,15]])",
    "  lst.min_by(&:length).length\nend\nFind_Min_Length([[1,2,3],[4,5],[6,7,8,9]])",
    "  lst.min_by(&:length).length\nend\nFind_Min_Length([[1,2,3,4,5],[1,2,3,4],[1,2,3,4,5,6,7]])",
    "  lst.min_by(&:length).length\nend\nFind_Min_Length([[1,2,3],[4,5],[6,7,8,9]])",
    "  lst.map(&:length).min\nend",
    "  lst.min_by(&:length).length\nend",
    "  lst.min_by(&:length).length\nend",
    "  min_length = lst[0].length\n  lst.each do |i|\n    if i.length < min_length\n      min_length = i.length\n    end\n  end\n  return min_length\nend",
    "  min_length = lst[0].length\n  lst.each do |sub_array|\n    if sub_array.length < min_length\n      min_length = sub_array.length\n    end\n  end\n  min_length\nend",
    "  lst.map{|x| x.length}.min\nend\nFind_Min_Length([[1,2,3],[4,5],[6,7,8,9]])",
    "  lst.min_by(&:length).length\nend\nFind_Min_Length([[1,2,3],[4,5],[6,7,8,9]])",
    "  lst.min_by(&:length).length\nend\nFind_Min_Length([[1,2,3],[4,5,6],[7,8,9]])",
    "  lst.min_by(&:length).length\nend\nFind_Min_Length([[1,2,3,4,5],[1,2,3,4,5,6],[1,2,3,4,5,6,7]])",
    "  lst.min_by(&:length).length\nend",
    "    min = lst[0].length\n    for i in 0...lst.length\n        if lst[i].length < min\n            min = lst[i].length\n        end\n    end\n    return min\nend",
    "  lst.min_by(&:length).length\nend\nFind_Min_Length([[1,2,3,4,5],[1,2,3,4],[1,2,3,4,5,6,7],[1,2,3,4,5,6,7,8,9]])",
    "  lst.min_by(&:length).length\nend\nFind_Min_Length([[1,2,3,4,5,6],[1,2,3,4,5,6,7],[1,2,3,4,5,6,7,8]])",
    "  min = lst[0].length\n  for i in 0..lst.length-1\n    if lst[i].length < min\n      min = lst[i].length\n    end\n  end\n  return min\nend"
  ]
}