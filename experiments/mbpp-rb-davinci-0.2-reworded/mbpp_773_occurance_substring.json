{
  "name": "mbpp_773_occurance_substring",
  "language": "rb",
  "prompt": "# Write a function to find the occurrence and position of the substrings within a string. Return nil if there is no match.\ndef occurance_substring(text, pattern)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_occurance_substring\n    candidate = method(:occurance_substring)\n    assert_equal([\"python\", 0, 6], candidate.call(\"python programming, python language\", \"python\"))\n    assert_equal([\"programming\", 7, 18], candidate.call(\"python programming,programming language\", \"programming\"))\n    assert_equal([\"language\", 31, 39], candidate.call(\"python programming,programming language\", \"language\"))\n    assert_equal(nil, candidate.call(\"c++ programming, c++ language\", \"python\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  return nil if text.nil? || pattern.nil?\n  return nil if text.empty? || pattern.empty?\n  return nil if text.length < pattern.length",
    "  return nil if text.nil? || pattern.nil?\n  return nil if text.empty? || pattern.empty?\n  return nil if text.length < pattern.length",
    "  return nil if text.nil? || pattern.nil?\n  return nil if text.empty? || pattern.empty?\n  return nil if pattern.length > text.length\n  return nil if text.length == pattern.length && text != pattern",
    "  return nil if text.length < pattern.length\n  return nil if text.scan(pattern).empty?\n  text.scan(pattern).map { |match| text.index(match) }\nend",
    "  text.scan(/#{pattern}/).map { |match| text.index(match) }\nend",
    "  return nil if text.nil? || pattern.nil?\n  return nil if text.empty? || pattern.empty?\n  return nil if pattern.length > text.length\n  return nil if text.index(pattern).nil?",
    "  text.scan(/#{pattern}/).size\nend",
    "  return nil if text.nil? || pattern.nil? || text.empty? || pattern.empty?\n  return nil if text.length < pattern.length\n  return nil if text.length == pattern.length && text != pattern\n  return nil if text.length == pattern.length && text == pattern",
    "  return nil if text.nil? || pattern.nil? || text.empty? || pattern.empty?\n  return nil if text.length < pattern.length\n  return nil if text.length == pattern.length && text != pattern",
    "  return nil if text.nil? || pattern.nil?\n  return nil if text.empty? || pattern.empty?\n  return nil if text.length < pattern.length\n  return nil if text == pattern\n  return nil if pattern.length == 1 && text.length > 1",
    "  return nil if text.nil? || pattern.nil?\n  return nil if text.empty? || pattern.empty?\n  return nil if text.size < pattern.size\n  return nil if text.size == pattern.size && text != pattern\n  return nil if text.size == pattern.size && text == pattern\n  return nil if text.size > pattern.size && text.include?(pattern) == false\n  return nil if text.size > pattern.size && text.include?(pattern) == true",
    "  return nil if text.nil? || pattern.nil?\n  return nil if text.empty? || pattern.empty?\n  return nil if text.length < pattern.length\n  return nil if text.length == pattern.length && text != pattern",
    "  return nil if text.nil? || pattern.nil?\n  return nil if text.empty? || pattern.empty?\n  return nil if text.length < pattern.length",
    "  return nil if text.nil? || pattern.nil? || text.empty? || pattern.empty?\n  return nil if text.length < pattern.length\n  text_array = text.split('')\n  pattern_array = pattern.split('')\n  result_array = []\n  text_array.each_with_index do |char, index|\n    if char == pattern_array[0]\n      if text_array[index, pattern_array.length] == pattern_array\n        result_array << index\n      end\n    end\n  end\n  result_array.empty? ? nil : result_array\nend",
    "  return nil if text.nil? || pattern.nil?\n  text.scan(/(?=#{pattern})/).count\nend",
    "  return nil if text.nil? || pattern.nil?\n  return nil if text.empty? || pattern.empty?\n  return nil if pattern.length > text.length\n  return nil if text.length == pattern.length && text != pattern",
    "  return nil if text.nil? || pattern.nil?\n  return nil if text.empty? || pattern.empty?\n  return nil if text.length < pattern.length",
    "  return nil if text.nil? || pattern.nil?\n  return nil if text.empty? || pattern.empty?\n  return nil if text.length < pattern.length\n  return nil if text.length == pattern.length && text != pattern\n  return nil if text.length == pattern.length && text == pattern\n  return nil if text.length > pattern.length && text.include?(pattern) == false\n  return nil if text.length > pattern.length && text.include?(pattern) == true\n  return nil if text.length > pattern.length && text.include?(pattern) == true && text.index(pattern) == nil\n  return nil if text.length > pattern.length && text.include?(pattern) == true && text.index(pattern) != nil\n  return nil if text.length > pattern.length && text.include?(pattern) == true && text.index(pattern) != nil && text.index(pattern) == 0\n  return nil if text.length > pattern.length && text.include?(pattern) == true && text.index(pattern) != nil && text.index(pattern) == 0 && text.index(pattern) == text.length - 1\n  return nil if text.length > pattern.length && text.include?(pattern) == true && text.index(pattern) != nil && text.index(pattern) == 0 && text.index(pattern) == text.length - 1 && text.index(pattern) == text.length - 2\n  return nil if text.length > pattern.length && text.include?(pattern) == true && text.index(pattern) != nil && text.index(pattern) == 0 && text.index(pattern) == text.length - 1 && text.index(pattern) == text.length - 2 && text.index(pattern) == text.length - 3\n  return nil if text.length > pattern.length && text.include?(pattern) == true && text.index(pattern) != nil && text.index(pattern) == 0 && text.index(pattern) == text.length - 1 && text.index(pattern) == text.length - 2 && text.index(pattern) == text.length - 3 && text.index(pattern) == text.length - 4\n  return nil",
    "  return nil if text.nil? || pattern.nil?\n  return nil if text.empty? || pattern.empty?\n  return nil if text.length < pattern.length\n  return nil if text.length == pattern.length && text != pattern\n  return nil if text.length == pattern.length && text == pattern\n  return nil if text.length > pattern.length && text.include?(pattern) == false",
    "  return nil if text.nil? || pattern.nil?\n  return nil if text.empty? || pattern.empty?\n  return nil if text.length < pattern.length"
  ]
}