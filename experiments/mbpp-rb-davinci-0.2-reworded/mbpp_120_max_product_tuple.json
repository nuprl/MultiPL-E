{
  "name": "mbpp_120_max_product_tuple",
  "language": "rb",
  "prompt": "# Write a function to find the maximum absolute product between numbers in pairs of arrays within a given array.\ndef max_product_tuple(list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  max_product = 0\n  list1.each do |list2|\n    list2.each do |num1|\n      list2.each do |num2|\n        product = num1 * num2\n        if product > max_product\n          max_product = product\n        end\n      end\n    end\n  end\n  max_product\nend",
    "  max_product = 0\n  list1.each_with_index do |num1, index1|\n    list1.each_with_index do |num2, index2|\n      next if index1 == index2\n      product = num1 * num2\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend",
    "  max_product = 0\n  list1.each do |array|\n    array.each_with_index do |num, index|\n      array.each_with_index do |num2, index2|\n        if index2 > index\n          product = num * num2\n          if product > max_product\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  max_product\nend",
    "  list1.map { |x| x.combination(2).to_a }.flatten(1).map { |x| x.inject(:*) }.max\nend",
    "  list1.map { |x| x.combination(2).to_a }.flatten(1).map { |x| x.inject(:*) }.max\nend",
    "  max_product = 0\n  list1.each do |sub_list|\n    sub_list.combination(2).to_a.each do |pair|\n      product = pair[0] * pair[1]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend",
    "  max_product = 0\n  list1.each do |num1|\n    list1.each do |num2|\n      product = num1 * num2\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend",
    "  max_product = 0\n  list1.each_with_index do |num1, index1|\n    list1.each_with_index do |num2, index2|\n      if index2 > index1\n        product = num1 * num2\n        if product > max_product\n          max_product = product\n        end\n      end\n    end\n  end\n  max_product\nend",
    "  max_product = 0\n  list1.each_with_index do |num1, idx1|\n    list1.each_with_index do |num2, idx2|\n      if idx2 > idx1\n        product = num1 * num2\n        max_product = product if product > max_product\n      end\n    end\n  end\n  max_product\nend",
    "  max_product = 0\n  list1.each do |list2|\n    list2.each do |num1|\n      list2.each do |num2|\n        product = num1 * num2\n        if product > max_product\n          max_product = product\n        end\n      end\n    end\n  end\n  max_product\nend",
    "  max_product = 0\n  list1.each do |list2|\n    list2.each_with_index do |num1, index1|\n      list2.each_with_index do |num2, index2|\n        if index2 > index1\n          product = num1 * num2\n          max_product = product if product > max_product\n        end\n      end\n    end\n  end\n  max_product\nend",
    "  list1.map { |x| x.combination(2).to_a }.flatten(1).map { |x| x.reduce(:*) }.max\nend",
    "  list1.combination(2).to_a.map { |x, y| (x - y).abs }.max\nend",
    "  max_product = 0\n  list1.each_with_index do |num1, index1|\n    list1.each_with_index do |num2, index2|\n      if index1 != index2\n        product = num1 * num2\n        if product > max_product\n          max_product = product\n        end\n      end\n    end\n  end\n  max_product\nend",
    "  max_product = 0\n  list1.each do |list2|\n    list2.each do |num1|\n      list2.each do |num2|\n        if num1 != num2\n          product = num1 * num2\n          if product > max_product\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  max_product\nend",
    "  max_product = 0\n  list1.each do |array|\n    array.combination(2).to_a.each do |pair|\n      product = pair[0] * pair[1]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend",
    "  max_product = 0\n  list1.each do |list2|\n    list2.each_with_index do |num, i|\n      list2.each_with_index do |num2, j|\n        if i != j\n          product = num * num2\n          max_product = product if product > max_product\n        end\n      end\n    end\n  end\n  max_product\nend",
    "  max_product = 0\n  list1.each_with_index do |num1, idx1|\n    list1.each_with_index do |num2, idx2|\n      next if idx1 == idx2\n      product = num1 * num2\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend",
    "  max_product = 0\n  list1.each do |list2|\n    list2.each_with_index do |num1, idx1|\n      list2.each_with_index do |num2, idx2|\n        if idx2 > idx1\n          product = num1 * num2\n          max_product = product if product > max_product\n        end\n      end\n    end\n  end\n  max_product\nend",
    "  list1.map { |x| x.sort.last * x.sort.first }.max\nend"
  ]
}