{
  "name": "mbpp_448_cal_sum",
  "language": "rb",
  "prompt": "# Write a function to calculate the sum of perrin numbers.\ndef cal_sum(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_448_cal_sum.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_cal_sum\n    candidate = method(:cal_sum)\n    assert_equal(49, candidate.call(9))\n    assert_equal(66, candidate.call(10))\n    assert_equal(88, candidate.call(11))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  sum = 0\n  perrin_numbers(n).each do |num|\n    sum += num\n  end\n  sum\nend",
    "  sum = 0\n  perrin_numbers(n).each do |num|\n    sum += num\n  end\n  sum\nend",
    "  sum = 0\n  perrin_numbers(n).each do |number|\n    sum += number\n  end\n  sum\nend",
    "  sum = 0\n  (1..n).each do |i|\n    sum += perrin(i)\n  end\n  sum\nend",
    "  sum = 0\n  for i in 0..n\n    sum += perrin(i)\n  end\n  return sum\nend",
    "  sum = 0\n  perrin_numbers(n).each do |num|\n    sum += num\n  end\n  sum\nend",
    "  sum = 0\n  perrin_numbers(n).each { |num| sum += num }\n  sum\nend",
    "  sum = 0\n  perrin_numbers(n).each do |num|\n    sum += num\n  end\n  sum\nend",
    "  sum = 0\n  for i in 0..n\n    sum += perrin(i)\n  end\n  return sum\nend",
    "  sum = 0\n  perrin_numbers(n).each do |i|\n    sum += i\n  end\n  sum\nend",
    "  sum = 0\n  (1..n).each do |i|\n    sum += perrin(i)\n  end\n  sum\nend",
    "  sum = 0\n  for i in 0..n\n    sum += perrin(i)\n  end\n  sum\nend",
    "  sum = 0\n  perrin = [3, 0, 2]\n  (n - 3).times do\n    perrin << perrin[-3] + perrin[-2]\n  end\n  perrin.each { |i| sum += i }\n  sum\nend",
    "  sum = 0\n  for i in 0..n\n    sum += perrin(i)\n  end\n  return sum\nend",
    "  sum = 0\n  for i in 0..n\n    sum += perrin(i)\n  end\n  return sum\nend",
    "  sum = 0\n  perrin_numbers(n).each do |num|\n    sum += num\n  end\n  sum\nend",
    "  sum = 0\n  perrin_numbers(n).each { |num| sum += num }\n  sum\nend",
    "  sum = 0\n  perrin_numbers(n).each do |num|\n    sum += num\n  end\n  sum\nend",
    "  sum = 0\n  perrin_numbers(n).each { |num| sum += num }\n  sum\nend",
    "  sum = 0\n  for i in 0..n\n    sum += perrin(i)\n  end\n  return sum\nend"
  ]
}