{
  "name": "mbpp_793_last",
  "language": "rb",
  "prompt": "# Write a rbthon function to find the last position of an element in a sorted array.\ndef last(arr, x)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_793_last.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_last\n    candidate = method(:last)\n    assert_equal(0, candidate.call([1, 2, 3], 1))\n    assert_equal(2, candidate.call([1, 1, 1, 2, 3, 4], 1))\n    assert_equal(3, candidate.call([2, 3, 2, 3, 6, 8, 9], 3))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  arr.each_with_index do |item, index|\n    if item == x\n      return index\n    end\n  end\n  return -1\nend",
    "  arr.index(x)\nend",
    "  arr.index(x)\nend",
    "  arr.each_with_index do |val, i|\n    if val == x\n      return i\n    end\n  end\nend",
    "  arr.each_with_index do |e, i|\n    if e == x\n      return i\n    end\n  end\n  return -1\nend",
    "  arr.each_with_index do |item, index|\n    if item == x\n      return index\n    end\n  end\n  return -1\nend",
    "  arr.each_with_index do |item, index|\n    if item == x\n      return index\n    end\n  end\n  return -1\nend",
    "  arr.index(x)\nend",
    "  return -1 if arr.empty?\n  return arr.length - 1 if arr[0] == x\n  return 0 if arr[-1] == x\n  return last(arr[1..-1], x)\nend",
    "  arr.rindex(x)\nend",
    "  arr.each_with_index do |a, i|\n    if a == x\n      return i\n    end\n  end\nend",
    "  return -1 if arr.empty?\n  return arr.length - 1 if arr.last == x\n  return -1 if arr.last < x\n  return -1 if arr.first > x\n  return 0 if arr.first == x",
    "  arr.index(x)\nend",
    "  arr.rindex(x)\nend",
    "  l = 0\n  r = arr.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if arr[m] == x && (m == arr.length - 1 || arr[m + 1] != x)\n      return m\n    elsif arr[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend",
    "  arr.rindex(x)\nend",
    "  arr.each_with_index do |item, index|\n    if item == x\n      return index\n    end\n  end\n  return -1\nend",
    "  arr.rindex(x)\nend",
    "  arr.each_with_index do |i, index|\n    if i == x\n      return index\n    end\n  end\nend",
    "  arr.each_with_index do |e, i|\n    if e == x\n      return i\n    end\n  end\nend"
  ]
}