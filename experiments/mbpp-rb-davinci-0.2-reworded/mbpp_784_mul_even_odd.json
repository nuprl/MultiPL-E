{
  "name": "mbpp_784_mul_even_odd",
  "language": "rb",
  "prompt": "# Write a function to find the product of first even and odd number of a given array.\ndef mul_even_odd(list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mul_even_odd\n    candidate = method(:mul_even_odd)\n    assert_equal(4, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(2, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(10, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  even_num = list1.select {|num| num.even?}\n  odd_num = list1.select {|num| num.odd?}\n  even_num[0] * odd_num[0]\nend",
    "  even_num = list1.select { |num| num.even? }\n  odd_num = list1.select { |num| num.odd? }\n  even_num[0] * odd_num[0]\nend",
    "  even_num = list1.select(&:even?)\n  odd_num = list1.select(&:odd?)\n  even_num[0] * odd_num[0]\nend",
    "  even = list1.select { |num| num.even? }\n  odd = list1.select { |num| num.odd? }\n  even[0] * odd[0]\nend",
    "  even_odd = []\n  list1.each do |num|\n    if num % 2 == 0\n      even_odd << num\n      break\n    end\n  end\n  list1.each do |num|\n    if num % 2 != 0\n      even_odd << num\n      break\n    end\n  end\n  even_odd.reduce(:*)\nend",
    "  even = list1.select{|x| x.even?}\n  odd = list1.select{|x| x.odd?}\n  puts \"Product of first even and odd number of a given array is #{even[0]*odd[0]}\"\nend\nmul_even_odd(list1)",
    "  even = list1.select{|x| x.even?}\n  odd = list1.select{|x| x.odd?}\n  even[0] * odd[0]\nend",
    "  even_num = list1.select { |num| num.even? }\n  odd_num = list1.select { |num| num.odd? }\n  even_num[0] * odd_num[0]\nend",
    "  even_odd = []\n  list1.each do |num|\n    if num % 2 == 0\n      even_odd << num\n      break\n    end\n  end\n  list1.each do |num|\n    if num % 2 != 0\n      even_odd << num\n      break\n    end\n  end\n  even_odd.inject(:*)\nend",
    "  even_num = list1.select(&:even?)\n  odd_num = list1.select(&:odd?)\n  even_num.first * odd_num.first\nend",
    "  even = list1.select {|num| num.even?}\n  odd = list1.select {|num| num.odd?}\n  return even[0] * odd[0]\nend",
    "  even_no = list1.select { |num| num.even? }\n  odd_no = list1.select { |num| num.odd? }\n  even_no[0] * odd_no[0]\nend",
    "  even_odd_list = []\n  list1.each do |i|\n    if i % 2 == 0\n      even_odd_list << i\n      break\n    end\n  end\n  list1.each do |i|\n    if i % 2 != 0\n      even_odd_list << i\n      break\n    end\n  end\n  return even_odd_list.inject(:*)\nend",
    "  even = list1.select { |num| num.even? }\n  odd = list1.select { |num| num.odd? }\n  even[0] * odd[0]\nend",
    "  even_num = list1.select { |num| num.even? }\n  odd_num = list1.select { |num| num.odd? }\n  puts \"Product of first even and odd number of a given array is #{even_num[0] * odd_num[0]}\"\nend",
    "  even_num = list1.select{|x| x%2==0}\n  odd_num = list1.select{|x| x%2!=0}\n  puts \"Product of first even and odd number of a given array is #{even_num[0]*odd_num[0]}\"\nend\nmul_even_odd(list1)",
    "  even = list1.select{|x| x%2==0}\n  odd = list1.select{|x| x%2!=0}\n  puts \"Product of first even and odd number of a given array is #{even[0]*odd[0]}\"\nend\nmul_even_odd([1,2,3,4,5,6,7,8,9,10])",
    "  even = list1.select {|x| x.even?}\n  odd = list1.select {|x| x.odd?}\n  puts even[0] * odd[0]\nend",
    "  even_num = list1.select { |num| num.even? }\n  odd_num = list1.select { |num| num.odd? }\n  even_num[0] * odd_num[0]\nend",
    "  even = list1.select{|x| x%2==0}\n  odd = list1.select{|x| x%2!=0}\n  puts \"Product of first even and odd number of a given array is #{even[0]*odd[0]}\"\nend"
  ]
}