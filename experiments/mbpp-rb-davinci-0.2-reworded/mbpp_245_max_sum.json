{
  "name": "mbpp_245_max_sum",
  "language": "rb",
  "prompt": "# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\ndef max_sum(arr)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum\n    candidate = method(:max_sum)\n    assert_equal(194, candidate.call([1, 15, 51, 45, 33, 100, 12, 18, 9]))\n    assert_equal(210, candidate.call([80, 60, 30, 40, 20, 10]))\n    assert_equal(138, candidate.call([2, 3, 14, 16, 21, 23, 29, 30]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  return arr.max if arr.length == 1\n  return arr.max(2).reduce(:+) if arr.length == 2",
    "  return 0 if arr.empty?\n  return arr[0] if arr.length == 1",
    "  max_sum = 0\n  (0...arr.length).each do |i|\n    left_sum = max_sum_increasing(arr[0...i])\n    right_sum = max_sum_decreasing(arr[i..-1])\n    max_sum = [max_sum, left_sum + right_sum].max\n  end\n  max_sum\nend",
    "  return arr.max if arr.length <= 1\n  max_sum = 0\n  (0...arr.length).each do |i|\n    left_sum = max_sum_increasing(arr[0..i])\n    right_sum = max_sum_decreasing(arr[i..-1])\n    max_sum = [max_sum, left_sum + right_sum].max\n  end\n  max_sum\nend",
    "  return arr.max if arr.length == 1\n  return arr.max if arr.length == 2 && arr[0] > arr[1]\n  return arr.max if arr.length == 2 && arr[0] < arr[1]\n  return arr[0] + arr[2] if arr.length == 3 && arr[0] < arr[1] && arr[1] > arr[2]\n  return arr[0] + arr[2] if arr.length == 3 && arr[0] > arr[1] && arr[1] < arr[2]\n  return arr[0] + arr[1] if arr.length == 3 && arr[0] < arr[1] && arr[1] < arr[2]\n  return arr[0] + arr[1] if arr.length == 3 && arr[0] > arr[1] && arr[1] > arr[2]",
    "  return arr.max if arr.length == 1\n  return arr.max if arr.length == 2",
    "  max_sum = 0\n  (0...arr.length).each do |i|\n    sum = arr[i]\n    (i + 1...arr.length).each do |j|\n      if arr[j] > arr[j - 1]\n        sum += arr[j]\n      else\n        break\n      end\n    end\n    (i - 1).downto(0).each do |j|\n      if arr[j] > arr[j + 1]\n        sum += arr[j]\n      else\n        break\n      end\n    end\n    max_sum = sum if sum > max_sum\n  end\n  max_sum\nend",
    "  return 0 if arr.empty?\n  return arr.max if arr.length == 1",
    "  return 0 if arr.empty?\n  return arr.first if arr.length == 1",
    "  return 0 if arr.empty?\n  return arr[0] if arr.length == 1\n  return arr.max if arr.length == 2",
    "  return 0 if arr.empty?\n  return arr[0] if arr.length == 1",
    "  max_sum = 0\n  (0...arr.length).each do |i|\n    left_sum = max_sum_subseq(arr[0...i])\n    right_sum = max_sum_subseq(arr[i..-1].reverse)\n    max_sum = [max_sum, left_sum + right_sum].max\n  end\n  max_sum\nend",
    "  return 0 if arr.empty?\n  return arr.first if arr.length == 1",
    "  return 0 if arr.empty?\n  return arr.first if arr.length == 1\n  return arr.max if arr.length == 2",
    "  max = 0\n  (0...arr.length).each do |i|\n    sum = 0\n    (i...arr.length).each do |j|\n      sum += arr[j]\n      max = sum if sum > max\n    end\n  end\n  max\nend",
    "  return arr.max if arr.length <= 1\n  return arr.max if arr.length == 2 && arr[0] >= arr[1]\n  return arr.max if arr.length == 2 && arr[0] < arr[1]",
    "  return 0 if arr.length == 0\n  return arr[0] if arr.length == 1\n  return arr.max if arr.length == 2",
    "  return arr.max if arr.length == 1\n  max = 0\n  (0...arr.length).each do |i|\n    left = max_sum_helper(arr[0...i])\n    right = max_sum_helper(arr[i..-1])\n    max = [max, left + right].max\n  end\n  max\nend",
    "  return 0 if arr.empty?\n  return arr[0] if arr.length == 1",
    "  return arr.max if arr.length <= 1\n  max_sum = 0\n  (0...arr.length).each do |i|\n    max_sum = [max_sum, arr[i] + max_sum(arr[i + 1..-1])].max\n  end\n  max_sum\nend"
  ]
}