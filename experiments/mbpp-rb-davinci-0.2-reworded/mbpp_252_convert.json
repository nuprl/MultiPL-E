{
  "name": "mbpp_252_convert",
  "language": "rb",
  "prompt": "# Write a rbthon function to convert complex numbers to polar coordinates.\ndef convert(numbers)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_252_convert.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_convert\n    candidate = method(:convert)\n    assert_equal([1.0, 0.0], candidate.call(1))\n    assert_equal([4.0, 0.0], candidate.call(4))\n    assert_equal([5.0, 0.0], candidate.call(5))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.each do |number|\n    puts \"The polar coordinate of #{number} is #{number.polar}\"\n  end\nend",
    "  numbers.each do |number|\n    puts \"The polar coordinates of #{number} are #{number.polar}\"\n  end\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| [number.abs, number.arg] }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map do |number|\n    number = number.split('+')\n    number[1] = number[1].chop\n    number[1] = number[1].to_i\n    number[0] = number[0].to_i\n    number = number.map do |num|\n      num = num.to_f\n    end\n    number[0] = Math.sqrt(number[0]**2 + number[1]**2)\n    number[1] = Math.atan(number[1]/number[0])\n    number\n  end\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.each do |number|\n    puts \"The polar coordinates of #{number} are #{number.polar}\"\n  end\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |n| n.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.each do |number|\n    puts \"Polar Coordinates of #{number} are #{number.polar}\"\n  end\nend",
    "  numbers.each do |number|\n    puts \"The polar coordinates of #{number} are #{number.polar}\"\n  end\nend",
    "  numbers.map do |number|\n    number = number.split('+')\n    number[0] = number[0].to_f\n    number[1] = number[1].to_f\n    number[2] = Math.sqrt(number[0]**2 + number[1]**2)\n    number[3] = Math.atan(number[1]/number[0])\n    number.delete_at(0)\n    number.delete_at(0)\n    number\n  end\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.each do |number|\n    puts \"Polar coordinates of #{number} are #{number.polar}\"\n  end\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.each do |number|\n    puts \"The polar coordinates of #{number} are #{number.polar}\"\n  end\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |x| x.abs.to_s + \" @ \" + x.arg.to_s }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.each do |number|\n    puts \"Polar coordinates of #{number} are #{number.polar}\"\n  end\nend",
    "  numbers.map { |n| n.to_c.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |n| n.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |n| n.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.abs.round(2) }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map do |number|\n    [Math.sqrt(number.real**2 + number.imaginary**2), Math.atan2(number.imaginary, number.real)]\n  end\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.each do |number|\n    puts \"#{number} => #{number.polar}\"\n  end\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.to_c.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.each do |number|\n    puts \"#{number} => #{number.polar}\"\n  end\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.each do |number|\n    puts \"The polar coordinates of #{number} are #{number.polar}\"\n  end\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |num| num.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.each do |number|\n    puts \"#{number} => #{number.polar}\"\n  end\nend",
    "  numbers.each do |number|\n    puts \"The polar coordinates of #{number} are #{number.polar}\"\n  end\nend",
    "  numbers.map do |number|\n    number = number.to_s.split('+')\n    number[1] = number[1].gsub('i', '')\n    number[0] = number[0].to_f\n    number[1] = number[1].to_f\n    number[2] = Math.sqrt(number[0]**2 + number[1]**2)\n    number[3] = Math.atan(number[1]/number[0])\n    number[3] = number[3]*180/Math::PI\n    number[3] = number[3].round(2)\n    number[2] = number[2].round(2)\n    number = number[2].to_s + '<' + number[3].to_s\n  end\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.each do |number|\n    puts \"The polar coordinates of #{number} are #{number.polar}\"\n  end\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map {|x| x.polar}\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map do |number|\n    number.to_s + \" => \" + number.polar.to_s\n  end\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| Complex(number).polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.each do |number|\n    puts \"The polar coordinates of #{number} are #{number.polar}\"\n  end\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.each do |number|\n    puts \"The polar coordinates of #{number} are #{number.polar}\"\n  end\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "\tputs \"The polar coordinates of #{numbers} are #{numbers.polar}\"\nend",
    "  numbers.map { |number| Complex(number).polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| Complex(number).polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map do |number|\n    [number.abs, number.arg]\n  end\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.each do |number|\n    puts \"The polar coordinate of #{number} is #{number.polar}\"\n  end\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map do |number|\n    number = number.to_s\n    if number.include?('+')\n      number = number.split('+')\n      number[1] = number[1].chop\n      number[0] = number[0].to_f\n      number[1] = number[1].to_f\n      number[0] = Math.sqrt(number[0]**2 + number[1]**2)\n      number[1] = Math.atan(number[1]/number[0])\n      number[1] = number[1] * 180 / Math::PI\n      number = number.join(', ')\n    else\n      number = number.chop\n      number = number.to_f\n      number = number.to_s + ', 0'\n    end\n  end\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map do |number|\n    number.to_s.split('+').map do |num|\n      num.to_f\n    end\n  end.map do |number|\n    [Math.sqrt(number[0]**2 + number[1]**2), Math.atan(number[1]/number[0])]\n  end\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |n| n.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |x| x.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |n| n.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |n| n.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| [number.abs, number.arg] }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.each do |number|\n    puts \"The polar coordinates of #{number} are #{number.polar}\"\n  end\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map do |number|\n    number.to_s + \" => \" + number.polar.to_s\n  end\nend",
    "  numbers.map do |number|\n    number.to_s + \" => \" + number.polar.to_s\n  end\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |n| n.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |x| x.abs.to_s + \" \" + x.arg.to_s }\nend"
  ]
}