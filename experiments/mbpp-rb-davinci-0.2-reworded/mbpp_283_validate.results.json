{
  "name": "mbpp_283_validate",
  "language": "rb",
  "prompt": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n\tn = n.to_s.split('')\n\tn.each do |i|\n\t\tif n.count(i) > i.to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpg5oyvx1o\nStarted\n.\nFinished in 0.000397337 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2516.76 tests/s, 7550.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnmpmq22y\nStarted\n.\nFinished in 0.000497901 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2008.43 tests/s, 6025.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5yt2hug_\nStarted\n.\nFinished in 0.000489559 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2042.65 tests/s, 6127.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5yt2hug_\nStarted\n.\nFinished in 0.000489559 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2042.65 tests/s, 6127.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  digits = n.to_s.split('').map(&:to_i)\n  digits.each do |digit|\n    return false if digits.count(digit) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1zcqawzy\nStarted\n.\nFinished in 0.000419251 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2385.21 tests/s, 7155.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  # Your code here\n  return false if n < 0\n  n.to_s.chars.group_by(&:to_i).all? { |k, v| k >= v.size }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8yihl3zt\nStarted\n.\nFinished in 0.000499837 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2000.65 tests/s, 6001.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnmpmq22y\nStarted\n.\nFinished in 0.000497901 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2008.43 tests/s, 6025.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  # Write your code here\n  n_arr = n.to_s.split('')\n  n_arr.each do |i|\n    if n_arr.count(i) > i.to_i\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0xrblkj1\nStarted\n.\nFinished in 0.000493955 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2024.48 tests/s, 6073.43 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  arr = n.to_s.split(\"\").map(&:to_i)\n  arr.each do |x|\n    if arr.count(x) > x\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfomro0c9\nStarted\n.\nFinished in 0.000633374 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1578.85 tests/s, 4736.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  # convert the integer to string\n  n_str = n.to_s\n  # convert the string to array\n  n_arr = n_str.split('')\n  # loop through the array\n  n_arr.each do |num|\n    # count the frequency of each digit\n    if n_arr.count(num) > num.to_i\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv79cwdz7\nStarted\n.\nFinished in 0.000893238 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1119.52 tests/s, 3358.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnmpmq22y\nStarted\n.\nFinished in 0.000497901 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2008.43 tests/s, 6025.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.each_with_object(Hash.new(0)) { |c, h| h[c] += 1 }.values.all? { |v| v <= n.to_s.to_i }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "Loaded suite /tmp/tmpwg96wk35\nStarted\nF\n===============================================================================\nFailure: test_validate(TestHumanEval)\n/tmp/tmpwg96wk35.rb:10:in `test_validate'\n      7:   def test_validate\n      8:     candidate = method(:validate)\n      9:     assert_equal(true, candidate.call(1234))\n  => 10:     assert_equal(false, candidate.call(51241))\n     11:     assert_equal(true, candidate.call(321))\n     12:   end\n     13: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\nFinished in 0.007256998 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.80 tests/s, 275.60 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  freq = Hash.new(0)\n  n.to_s.each_char { |c| freq[c.to_i] += 1 }\n  freq.each { |k, v| return false if v > k }\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn1ubji3t\nStarted\n.\nFinished in 0.000456075 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2192.62 tests/s, 6577.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5yt2hug_\nStarted\n.\nFinished in 0.000489559 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2042.65 tests/s, 6127.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.group_by(&:to_i).all? { |k, v| v.size <= k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvb1xk1mj\nStarted\n.\nFinished in 0.000617671 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1618.98 tests/s, 4856.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  # convert integer to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # create hash of digit frequencies\n  freq = Hash.new(0)\n  digits.each { |digit| freq[digit] += 1 }\n  # check if frequency of each digit is less than or equal to the digit itself\n  freq.each { |digit, count| return false if count > digit }\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpki5fjsq6\nStarted\n.\nFinished in 0.00044849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2229.70 tests/s, 6689.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnmpmq22y\nStarted\n.\nFinished in 0.000497901 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2008.43 tests/s, 6025.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  # Write your code here\n  n.to_s.split('').each do |i|\n    if n.to_s.count(i) > i.to_i\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnax11h61\nStarted\n.\nFinished in 0.000565726 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1767.64 tests/s, 5302.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5yt2hug_\nStarted\n.\nFinished in 0.000489559 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2042.65 tests/s, 6127.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.split('').map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw5fexgoc\nStarted\n.\nFinished in 0.000448602 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2229.15 tests/s, 6687.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.each do |c|\n    return false if n.to_s.count(c) > c.to_i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb3si4nn9\nStarted\n.\nFinished in 0.000605293 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1652.09 tests/s, 4956.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n\t# convert the integer to a string\n\tn = n.to_s\n\t# create a hash to store the frequency of each digit\n\tfreq = Hash.new(0)\n\t# iterate through the string and store the frequency of each digit in the hash\n\tn.each_char { |c| freq[c] += 1 }\n\t# iterate through the hash and check if the frequency of each digit is less than or equal to the digit itself\n\tfreq.each do |k, v|\n\t\tif v > k.to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb_mgz_0v\nStarted\n.\nFinished in 0.000889728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1123.94 tests/s, 3371.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.group_by { |x| x }.map { |k, v| v.size <= k.to_i }.all?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2senb26a\nStarted\n.\nFinished in 0.000616918 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1620.96 tests/s, 4862.88 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  # Write your code here\n  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_vtvk37r\nStarted\n.\nFinished in 0.000451268 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2215.98 tests/s, 6647.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnmpmq22y\nStarted\n.\nFinished in 0.000497901 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2008.43 tests/s, 6025.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.split(\"\").each do |i|\n    if n.to_s.count(i) > i.to_i\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnlhs9brf\nStarted\n.\nFinished in 0.000698444 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1431.75 tests/s, 4295.26 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  freq = Hash.new(0)\n  n.to_s.each_char { |c| freq[c.to_i] += 1 }\n  freq.each do |k, v|\n    return false if k < v\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphgwe4d73\nStarted\n.\nFinished in 0.000436411 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2291.42 tests/s, 6874.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnmpmq22y\nStarted\n.\nFinished in 0.000497901 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2008.43 tests/s, 6025.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.group_by(&:to_i).all? { |k, v| v.size <= k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvb1xk1mj\nStarted\n.\nFinished in 0.000617671 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1618.98 tests/s, 4856.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  # Write your code here\n  n = n.to_s.split('')\n  n.each do |i|\n    if n.count(i) > i.to_i\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpamzs86o6\nStarted\n.\nFinished in 0.000608407 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1643.64 tests/s, 4930.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnmpmq22y\nStarted\n.\nFinished in 0.000497901 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2008.43 tests/s, 6025.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnmpmq22y\nStarted\n.\nFinished in 0.000497901 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2008.43 tests/s, 6025.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  # Write your code here\n  n.to_s.chars.each do |i|\n    if n.to_s.count(i) > i.to_i\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5u1o2ja7\nStarted\n.\nFinished in 0.000426388 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2345.28 tests/s, 7035.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.split('').each do |i|\n    if n.to_s.count(i) > i.to_i\n      return false\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvz8js6yo\nStarted\n.\nFinished in 0.000596993 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1675.06 tests/s, 5025.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.each do |digit|\n    if n.to_s.count(digit) > digit.to_i\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_lmm6w84\nStarted\n.\nFinished in 0.00046865 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2133.79 tests/s, 6401.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  # Write your code here\n  n = n.to_s\n  n = n.split('')\n  n = n.map(&:to_i)\n  n.each do |i|\n    if n.count(i) > i\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpta2oynsp\nStarted\n.\nFinished in 0.000442233 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2261.25 tests/s, 6783.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  # Write your code here\n  n = n.to_s.split('')\n  n.each do |i|\n    if n.count(i) > i.to_i\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpamzs86o6\nStarted\n.\nFinished in 0.000608407 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1643.64 tests/s, 4930.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.each do |c|\n    return false if n.to_s.count(c) > c.to_i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb3si4nn9\nStarted\n.\nFinished in 0.000605293 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1652.09 tests/s, 4956.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.uniq.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphar7j4_m\nStarted\n.\nFinished in 0.000615938 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1623.54 tests/s, 4870.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.group_by(&:to_i).all? { |k, v| v.size <= k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvb1xk1mj\nStarted\n.\nFinished in 0.000617671 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1618.98 tests/s, 4856.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.each do |x|\n    return false if n.to_s.count(x) > x.to_i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2hz4wyse\nStarted\n.\nFinished in 0.000600609 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1664.98 tests/s, 4994.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.each do |char|\n    return false if n.to_s.count(char) > char.to_i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbjzj7yxb\nStarted\n.\nFinished in 0.000610715 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1637.42 tests/s, 4912.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.split('').map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw5fexgoc\nStarted\n.\nFinished in 0.000448602 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2229.15 tests/s, 6687.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.split('').map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw5fexgoc\nStarted\n.\nFinished in 0.000448602 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2229.15 tests/s, 6687.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.each do |c|\n    return false if n.to_s.count(c) > c.to_i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb3si4nn9\nStarted\n.\nFinished in 0.000605293 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1652.09 tests/s, 4956.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnmpmq22y\nStarted\n.\nFinished in 0.000497901 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2008.43 tests/s, 6025.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.each_with_object(Hash.new(0)) { |c, h| h[c] += 1 }.all? { |k, v| v <= k.to_i }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnc_ee3wo\nStarted\n.\nFinished in 0.000527685 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1895.07 tests/s, 5685.21 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  # Write your code here\n  n = n.to_s.split('')\n  n.each do |i|\n    if n.count(i) > i.to_i\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpamzs86o6\nStarted\n.\nFinished in 0.000608407 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1643.64 tests/s, 4930.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5yt2hug_\nStarted\n.\nFinished in 0.000489559 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2042.65 tests/s, 6127.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  # Write your code here\n  n = n.to_s.split('')\n  n.each do |i|\n    if n.count(i) > i.to_i\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpamzs86o6\nStarted\n.\nFinished in 0.000608407 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1643.64 tests/s, 4930.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnmpmq22y\nStarted\n.\nFinished in 0.000497901 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2008.43 tests/s, 6025.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  # Write your code here\n  n.to_s.split('').each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwao9i10a\nStarted\n.\nFinished in 0.000504652 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1981.56 tests/s, 5944.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  # Write your code here\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgodxiepd\nStarted\n.\nFinished in 0.000384681 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2599.56 tests/s, 7798.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.each do |digit|\n    if n.to_s.count(digit) > digit.to_i\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_lmm6w84\nStarted\n.\nFinished in 0.00046865 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2133.79 tests/s, 6401.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5yt2hug_\nStarted\n.\nFinished in 0.000489559 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2042.65 tests/s, 6127.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnmpmq22y\nStarted\n.\nFinished in 0.000497901 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2008.43 tests/s, 6025.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  # Write your code here\n  n.to_s.chars.each do |i|\n    return false if n.to_s.count(i) > i.to_i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv9y8z9mo\nStarted\n.\nFinished in 0.000370393 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2699.84 tests/s, 8099.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5yt2hug_\nStarted\n.\nFinished in 0.000489559 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2042.65 tests/s, 6127.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  # Write your code here\n  arr = n.to_s.split('')\n  arr.each do |i|\n    if arr.count(i) > i.to_i\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkr9zsgr5\nStarted\n.\nFinished in 0.000369469 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2706.59 tests/s, 8119.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.split('').map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw5fexgoc\nStarted\n.\nFinished in 0.000448602 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2229.15 tests/s, 6687.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnmpmq22y\nStarted\n.\nFinished in 0.000497901 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2008.43 tests/s, 6025.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.split('').map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw5fexgoc\nStarted\n.\nFinished in 0.000448602 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2229.15 tests/s, 6687.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.split('').map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw5fexgoc\nStarted\n.\nFinished in 0.000448602 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2229.15 tests/s, 6687.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  # convert integer to string\n  n = n.to_s\n  # split string into array of characters\n  n = n.split('')\n  # convert array of characters to array of integers\n  n = n.map(&:to_i)\n  # iterate through array of integers\n  n.each do |num|\n    # check if frequency of each digit is less than or equal to the digit itself\n    if n.count(num) > num\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpshbtc42f\nStarted\n.\nFinished in 0.000428846 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2331.84 tests/s, 6995.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnmpmq22y\nStarted\n.\nFinished in 0.000497901 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2008.43 tests/s, 6025.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.group_by(&:to_i).all? { |k, v| v.size <= k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvb1xk1mj\nStarted\n.\nFinished in 0.000617671 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1618.98 tests/s, 4856.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnmpmq22y\nStarted\n.\nFinished in 0.000497901 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2008.43 tests/s, 6025.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1665510244,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppcvffozj\nStarted\n.\nFinished in 0.000498728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.10 tests/s, 6015.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n  n.to_s.split('').map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw5fexgoc\nStarted\n.\nFinished in 0.000448602 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2229.15 tests/s, 6687.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}