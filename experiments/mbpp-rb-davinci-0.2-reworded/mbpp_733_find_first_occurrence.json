{
  "name": "mbpp_733_find_first_occurrence",
  "language": "rb",
  "prompt": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.size - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  return nil if a.empty?\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  nil\nend",
    "  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  -1\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  return -1 if a.nil? || a.empty?\n  return -1 if x.nil?\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  -1\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1"
  ]
}