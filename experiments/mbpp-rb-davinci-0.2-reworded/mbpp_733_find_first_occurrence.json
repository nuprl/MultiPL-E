{
  "name": "mbpp_733_find_first_occurrence",
  "language": "rb",
  "prompt": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.size - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  return nil if a.empty?\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  nil\nend",
    "  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  -1\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  return -1 if a.nil? || a.empty?\n  return -1 if x.nil?\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  -1\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.size - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.size - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend",
    "  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  -1\nend",
    "  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  -1\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  -1\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = left + (right - left) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        right = mid - 1\n      end\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend",
    "  low = 0\n  high = a.size - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if x == a[mid]\n      result = mid\n      high = mid - 1\n    elsif x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend",
    "  low = 0\n  high = a.size - 1\n  result = -1",
    "  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  -1\nend",
    "  # TODO: Implement me!\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  return -1 if a.empty?\n  return 0 if a.size == 1 && a[0] == x\n  return -1 if a.size == 1 && a[0] != x",
    "  return -1 if a.nil? || a.empty?\n  return 0 if a.size == 1 && a[0] == x\n  return -1 if a.size == 1 && a[0] != x",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  return -1 if a.nil? || a.empty?\n  return 0 if a.size == 1 && a[0] == x",
    "  return nil if a.nil?\n  return nil if a.size == 0\n  return nil if x.nil?",
    "  low = 0\n  high = a.size - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.size - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if x == a[mid]\n      result = mid\n      high = mid - 1\n    elsif x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  -1\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.size - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  -1\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  # return -1 if a.nil? || a.empty?\n  # return 0 if a.size == 1 && a[0] == x\n  # return -1 if a.size == 1 && a[0] != x\n  #\n  # mid = a.size / 2\n  # if a[mid] == x\n  #   return mid\n  # elsif a[mid] > x\n  #   find_first_occurrence(a[0..mid-1], x)\n  # else\n  #   find_first_occurrence(a[mid+1..-1], x)\n  # end",
    "  low = 0\n  high = a.size - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if x == a[mid]\n      result = mid\n      high = mid - 1\n    elsif x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  low = 0\n  high = a.length - 1",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  -1\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.size - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend",
    "  return nil if a.nil? || a.empty?\n  return 0 if a.size == 1 && a[0] == x",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if x < a[mid]\n      high = mid - 1\n    elsif x > a[mid]\n      low = mid + 1\n    else\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  low = 0\n  high = a.length - 1",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if x == a[mid]\n      result = mid\n      high = mid - 1\n    elsif x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if x == a[mid]\n      result = mid\n      high = mid - 1\n    elsif x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  return nil if a.nil? || a.empty?\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return nil\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  return -1 if a.empty?\n  return 0 if a.size == 1 && a[0] == x",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  -1\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend",
    "  return -1 if a.nil? || a.empty?\n  return 0 if a.size == 1 && a[0] == x\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  -1\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  -1\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.size - 1\n  result = -1",
    "  low = 0\n  high = a.size - 1\n  result = -1",
    "  low = 0\n  high = a.size - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if x == a[mid]\n      result = mid\n      high = mid - 1\n    elsif x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if x == a[mid]\n      result = mid\n      high = mid - 1\n    elsif x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if x < a[mid]\n      high = mid - 1\n    elsif x > a[mid]\n      low = mid + 1\n    else\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend",
    "  low = 0\n  high = a.size - 1\n  result = -1",
    "  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend",
    "  return -1 if a.empty?\n  return 0 if a.size == 1 && a[0] == x",
    "  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  -1\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  # return -1 if a.empty?\n  # return 0 if a.size == 1 && a[0] == x\n  # return -1 if a.size == 1 && a[0] != x",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  # return nil if a.empty?\n  # return 0 if a.size == 1 && a.first == x\n  # return nil if a.size == 1 && a.first != x\n  # mid = a.size / 2\n  # if a[mid] == x\n  #   return mid\n  # elsif a[mid] > x\n  #   find_first_occurrence(a[0...mid], x)\n  # else\n  #   find_first_occurrence(a[mid..-1], x)\n  # end",
    "  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  -1\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      return mid if mid == 0 || a[mid - 1] != x\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  -1\nend",
    "  return -1 if a.nil? || a.empty?\n  return -1 if x.nil?",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  return -1 if a.nil? || a.empty?\n  return -1 if x.nil?",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      return mid if mid == 0 || a[mid - 1] != x\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  -1\nend",
    "  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  -1\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  return -1 if a.empty?\n  low, high = 0, a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1 if a[low] != x\n  low\nend",
    "  low = 0\n  high = a.size - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend",
    "  return -1 if a.empty?\n  return 0 if a.size == 1 && a[0] == x",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        right = mid - 1\n      end\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend",
    "  return nil if a.empty?\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  nil\nend",
    "  return -1 if a.empty?\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  -1\nend",
    "  return -1 if a.nil? || a.empty?\n  return -1 if x.nil?",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  return -1 if a.nil? || a.empty?\n  return 0 if a.size == 1 && a[0] == x",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  return nil if a.nil? || a.empty?\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  nil\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  # TODO: Implement this method\nend",
    "  # TODO: Implement\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] == x\n      if m == 0 || a[m - 1] != x\n        return m\n      else\n        r = m - 1\n      end\n    elsif a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.size - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  return nil if a.nil? || a.empty?\n  return 0 if a.size == 1 && a[0] == x\n  return nil if a.size == 1 && a[0] != x",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  return -1 if a.empty?\n  return 0 if a.size == 1 && a[0] == x",
    "  low = 0\n  high = a.length - 1",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.size - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.size - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend",
    "  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend"
  ]
}