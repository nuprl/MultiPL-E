{
  "name": "mbpp_59_is_octagonal",
  "language": "rb",
  "prompt": "# Write a function to find the nth octagonal number.\ndef is_octagonal(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_octagonal\n    candidate = method(:is_octagonal)\n    assert_equal(65, candidate.call(5))\n    assert_equal(280, candidate.call(10))\n    assert_equal(645, candidate.call(15))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  return false if n < 0\n  root = (Math.sqrt(1 + 24 * n) + 1) / 6\n  root.to_i == root\nend",
    "  n = n.to_f\n  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 == 0\n  return true if n % 10 == 1\n  return false if n % 10 == 2\n  return true if n % 10 == 3\n  return false if n % 10 == 4\n  return true if n % 10 == 5\n  return false if n % 10 == 6\n  return true if n % 10 == 7\n  return false if n % 10 == 8\n  return true if n % 10 == 9\nend",
    "  a = (Math.sqrt(24 * n + 1) + 1) / 6\n  a == a.to_i\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  return false if n < 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n == 1\n  return true if n == 2\n  return false if n == 3\n  return true if n == 5\n  return false if n == 6\n  return true if n == 7\n  return false if n == 8\n  return true if n == 10\n  return false if n == 11\n  return true if n == 12\n  return false if n == 13\n  return true if n == 15\n  return false if n == 16\n  return true if n == 17\n  return false if n == 18\n  return true if n == 20\n  return false if n == 21\n  return true if n == 22\n  return false if n == 23\n  return true if n == 25\n  return false if n == 26\n  return true if n == 27\n  return false if n == 28\n  return true if n == 30\n  return false if n == 31\n  return true if n == 32\n  return false if n == 33\n  return true if n == 35\n  return false if n == 36\n  return true if n == 37\n  return false if n == 38\n  return true if n == 40\n  return false if n == 41\n  return true if n == 42\n  return false if n == 43\n  return true if n == 45\n  return false if n == 46\n  return true if n == 47\n  return false if n == 48\n  return true if n == 50\n  return false if n == 51\n  return true if n == 52\n  return false if n == 53\n  return true if n == 55\n  return false if n == 56\n  return true if n == 57\n  return false if n == 58\n  return true if n == 60\n  return false if n == 61\n  return true if n == 62\n  return false if n == 63\n  return true if n == 65\n  return false if n == 66\n  return true if n == 67\n  return false if n == 68\n  return true if n == 70\n  return false if n == 71\n  return true if n == 72\n  return false if n == 73\n  return true if n == 75\n  return false if n == 76\n  return true if n == 77",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n.to_i == n\nend",
    "  n = n.to_f\n  ((Math.sqrt(1 + 24 * n) + 1) / 6) % 1 == 0\nend",
    "  n = n.to_f\n  ((Math.sqrt(1 + 24 * n) + 1) / 6) % 1 == 0\nend",
    "  return false if n < 0\n  r = Math.sqrt(2 * n + 1.0 / 4)\n  return r.to_i == r\nend",
    "  return false if n < 0\n  return false if n == 0\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n ",
    "  return false if n <= 0\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n % 8 == 1\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  return false if n < 1\n  return true if n == 1\n  sqrt = Math.sqrt(n)\n  return false if sqrt != sqrt.to_i\n  sqrt % 3 == 1\nend",
    "  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n.to_i == n\nend"
  ]
}