{
  "name": "mbpp_59_is_octagonal",
  "language": "rb",
  "prompt": "# Write a function to find the nth octagonal number.\ndef is_octagonal(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_octagonal\n    candidate = method(:is_octagonal)\n    assert_equal(65, candidate.call(5))\n    assert_equal(280, candidate.call(10))\n    assert_equal(645, candidate.call(15))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  return false if n < 0\n  root = (Math.sqrt(1 + 24 * n) + 1) / 6\n  root.to_i == root\nend",
    "  n = n.to_f\n  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 == 0\n  return true if n % 10 == 1\n  return false if n % 10 == 2\n  return true if n % 10 == 3\n  return false if n % 10 == 4\n  return true if n % 10 == 5\n  return false if n % 10 == 6\n  return true if n % 10 == 7\n  return false if n % 10 == 8\n  return true if n % 10 == 9\nend",
    "  a = (Math.sqrt(24 * n + 1) + 1) / 6\n  a == a.to_i\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  return false if n < 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n == 1\n  return true if n == 2\n  return false if n == 3\n  return true if n == 5\n  return false if n == 6\n  return true if n == 7\n  return false if n == 8\n  return true if n == 10\n  return false if n == 11\n  return true if n == 12\n  return false if n == 13\n  return true if n == 15\n  return false if n == 16\n  return true if n == 17\n  return false if n == 18\n  return true if n == 20\n  return false if n == 21\n  return true if n == 22\n  return false if n == 23\n  return true if n == 25\n  return false if n == 26\n  return true if n == 27\n  return false if n == 28\n  return true if n == 30\n  return false if n == 31\n  return true if n == 32\n  return false if n == 33\n  return true if n == 35\n  return false if n == 36\n  return true if n == 37\n  return false if n == 38\n  return true if n == 40\n  return false if n == 41\n  return true if n == 42\n  return false if n == 43\n  return true if n == 45\n  return false if n == 46\n  return true if n == 47\n  return false if n == 48\n  return true if n == 50\n  return false if n == 51\n  return true if n == 52\n  return false if n == 53\n  return true if n == 55\n  return false if n == 56\n  return true if n == 57\n  return false if n == 58\n  return true if n == 60\n  return false if n == 61\n  return true if n == 62\n  return false if n == 63\n  return true if n == 65\n  return false if n == 66\n  return true if n == 67\n  return false if n == 68\n  return true if n == 70\n  return false if n == 71\n  return true if n == 72\n  return false if n == 73\n  return true if n == 75\n  return false if n == 76\n  return true if n == 77",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n.to_i == n\nend",
    "  n = n.to_f\n  ((Math.sqrt(1 + 24 * n) + 1) / 6) % 1 == 0\nend",
    "  n = n.to_f\n  ((Math.sqrt(1 + 24 * n) + 1) / 6) % 1 == 0\nend",
    "  return false if n < 0\n  r = Math.sqrt(2 * n + 1.0 / 4)\n  return r.to_i == r\nend",
    "  return false if n < 0\n  return false if n == 0\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 1\n ",
    "  return false if n <= 0\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n % 8 == 1\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  return false if n < 1\n  return true if n == 1\n  sqrt = Math.sqrt(n)\n  return false if sqrt != sqrt.to_i\n  sqrt % 3 == 1\nend",
    "  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n.to_i == n\nend",
    "  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  return false if n < 0\n  root = Math.sqrt(1 + 24 * n)\n  return false if root % 6 != 5\n  return true\nend",
    "  (1..Float::INFINITY).each do |i|\n    return true if n == i * (3 * i - 2)\n    return false if n < i * (3 * i - 2)\n  end\nend",
    "  return false if n < 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  nth = (Math.sqrt(24 * n + 1) + 1) / 6\n  nth.to_i == nth\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 24 * n) + 1) / 6) % 1 == 0\nend",
    "  x = (Math.sqrt(24 * n + 1) + 1) / 6\n  x == x.to_i\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n.to_i == n\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  return false if n < 1\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  n = n.to_f\n  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  root = (1 + Math.sqrt(1 + 24 * n)) / 6\n  root == root.to_i\nend",
    "  nth = (Math.sqrt(24 * n + 1) + 1) / 6\n  nth == nth.to_i\nend",
    "  nth = (Math.sqrt(24 * n + 1) + 1) / 6\n  nth == nth.to_i\nend",
    "  nth_octagonal = (Math.sqrt(24 * n + 1) + 1) / 6\n  nth_octagonal == nth_octagonal.to_i\nend",
    "  (1..Float::INFINITY).each do |i|\n    return true if n == i * (3 * i - 2)\n    return false if n < i * (3 * i - 2)\n  end\nend",
    "  return false if n < 0\n  return false if n == 0\n  return true if n == 1\n  return false if n == 2\n  return true if n == 3\n  return false if n == 4\n  return true if n == 5\n  return false if n == 6\n  return true if n == 7\n  return false if n == 8\n  return true if n == 9\n  return false if n == 10\n  return true if n == 11\n  return false if n == 12\n  return true if n == 13\n  return false if n == 14\n  return true if n == 15\n  return false if n == 16\n  return true if n == 17\n  return false if n == 18\n  return true if n == 19\n  return false if n == 20\n  return true if n == 21\n  return false if n == 22\n  return true if n == 23\n  return false if n == 24\n  return true if n == 25\n  return false if n == 26\n  return true if n == 27\n  return false if n == 28\n  return true if n == 29\n  return false if n == 30\n  return true if n == 31\n  return false if n == 32\n  return true if n == 33\n  return false if n == 34\n  return true if n == 35\n  return false if n == 36\n  return true if n == 37\n  return false if n == 38\n  return true if n == 39\n  return false if n == 40\n  return true if n == 41\n  return false if n == 42\n  return true if n == 43\n  return false if n == 44\n  return true if n == 45\n  return false if n == 46\n  return true if n == 47\n  return false if n == 48\n  return true if n == 49\n  return false if n == 50\n  return true if n == 51\n  return false if n == 52\n  return true if n == 53\n  return false if n == 54\n  return true if n == 55\n  return false if n == 56\n  return true if n == 57\n  return false if n == 58\n  return true if n == 59\n  return false if n == 60\n  return true if n == 61\n  return false if n == 62",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  n = n.to_f\n  return (((1 + Math.sqrt(1 + 24 * n)) / 6) % 1).zero?\nend",
    "  return false if n <= 0\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 9\n  is_octagonal(n - 8)\nend",
    "  return false if n < 0\n  return false if n == 0\n  return true if n == 1\n  return false if n == 2\n  return false if n == 3\n  return true if n == 4\n  return false if n == 5\n  return false if n == 6\n  return true if n == 7\n  return false if n == 8\n  return false if n == 9\n  return true if n == 10\n  return false if n == 11\n  return false if n == 12\n  return true if n == 13\n  return false if n == 14\n  return false if n == 15\n  return true if n == 16\n  return false if n == 17\n  return false if n == 18\n  return true if n == 19\n  return false if n == 20\n  return false if n == 21\n  return true if n == 22\n  return false if n == 23\n  return false if n == 24\n  return true if n == 25\n  return false if n == 26\n  return false if n == 27\n  return true if n == 28\n  return false if n == 29\n  return false if n == 30\n  return true if n == 31\n  return false if n == 32\n  return false if n == 33\n  return true if n == 34\n  return false if n == 35\n  return false if n == 36\n  return true if n == 37\n  return false if n == 38\n  return false if n == 39\n  return true if n == 40\n  return false if n == 41\n  return false if n == 42\n  return true if n == 43\n  return false if n == 44\n  return false if n == 45\n  return true if n == 46\n  return false if n == 47\n  return false if n == 48\n  return true if n == 49\n  return false if n == 50\n  return false if n == 51\n  return true if n == 52\n  return false if n == 53\n  return false if n == 54\n  return true if n == 55\n  return false if n == 56\n  return false if n == 57\n  return true if n == 58\n  return false if n == 59\n  return false if n == 60\n  return true if n == 61\n  return false if n == 62",
    "  root = (1 + Math.sqrt(1 + 24 * n)) / 6\n  root == root.to_i\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  ((1 + Math.sqrt(1 + 24 * n)) / 6) % 1 == 0\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  root = (1 + Math.sqrt(1 + 24 * n)) / 6\n  root == root.to_i\nend",
    "  ((1 + Math.sqrt(1 + 24 * n)) / 6) % 1 == 0\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  return false if n < 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  a = (Math.sqrt(1 + 24 * n) + 1) / 6\n  a.to_i == a\nend",
    "  nth = (Math.sqrt(1 + 24 * n) + 1) / 6\n  nth == nth.to_i\nend",
    "  return false if n < 0\n  root = (Math.sqrt(1 + 24 * n) + 1) / 6\n  root == root.to_i\nend",
    "  a = (Math.sqrt(1 + 24 * n) + 1) / 6\n  a.to_i == a\nend",
    "  return false if n < 1\n  r = Math.sqrt(n)\n  return r == r.to_i\nend",
    "  return false if n < 0\n  root = Math.sqrt(n * 2)\n  root.to_i == root\nend",
    "  n == (Math.sqrt(24 * n + 1) + 1) / 6\nend",
    "  n = n.to_f\n  return ((1 + Math.sqrt(1 + 24 * n)) / 6) % 1 == 0\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 24 * n) + 1) / 6) % 1 == 0\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  return false if n < 0\n  return false if n == 0\n  return true if n == 1\n  return true if n == 8\n  return true if n == 21\n  return true if n == 40\n  return true if n == 65\n  return true if n == 96\n  return true if n == 133\n  return true if n == 176\n  return true if n == 225\n  return true if n == 280\n  return true if n == 341\n  return true if n == 408\n  return true if n == 481\n  return true if n == 560\n  return true if n == 645\n  return true if n == 736\n  return true if n == 833\n  return true if n == 936\n  return true if n == 1045\n  return true if n == 1160\n  return true if n == 1281\n  return true if n == 1408\n  return true if n == 1541\n  return true if n == 1680\n  return true if n == 1825\n  return true if n == 1976\n  return true if n == 2133\n  return true if n == 2296\n  return true if n == 2465\n  return true if n == 2640\n  return true if n == 2821\n  return true if n == 3008\n  return true if n == 3201\n  return true if n == 3400\n  return true if n == 3605\n  return true if n == 3816\n  return true if n == 4033\n  return true if n == 4256\n  return true if n == 4485\n  return true if n == 4720\n  return true if n == 4961\n  return true if n == 5208\n  return true if n == 5461\n  return true if n == 5720\n  return true if n == 5985\n  return true if n == 6256\n  return true if n == 6533\n  return true if n == 6816\n  return true if n == 7105\n  return true if n == 7400\n  return true if n == 7701\n  return true if n == 8008\n  return true if n == 8321\n  return true if n == 8640\n  return true if n == 8965\n  return true if n == 9296\n  return true if",
    "  (1..Float::INFINITY).each do |i|\n    if n == i * (3 * i - 2)\n      return true\n    elsif n < i * (3 * i - 2)\n      return false\n    end\n  end\nend",
    "  nth_octagonal = (3 + Math.sqrt(9 + 8 * n)) / 2\n  nth_octagonal.to_i == nth_octagonal\nend",
    "  nth = (Math.sqrt(24 * n + 1) + 1) / 6\n  nth == nth.to_i\nend",
    "  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  nth_octagonal = (1..Float::INFINITY).lazy.map { |n| n * (3 * n - 2) }\n  nth_octagonal.include?(n)\nend",
    "  return false if n <= 0\n  root = Math.sqrt(n * 2)\n  root == root.to_i\nend",
    "  n = n.to_f\n  return ((Math.sqrt(24*n+1)+1)/6) % 1 == 0\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  return false if n <= 0\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 9\n  return false if n % 9 != 0\n  return true if n == 27\n  return false if n % 27 != 0\n  return true if n == 81\n  return false if n % 81 != 0\n  return true if n == 243\n  return false if n % 243 != 0\n  return true if n == 729\n  return false if n % 729 != 0\n  return true if n == 2187\n  return false if n % 2187 != 0\n  return true if n == 6561\n  return false if n % 6561 != 0\n  return true if n == 19683\n  return false if n % 19683 != 0\n  return true if n == 59049\n  return false if n % 59049 != 0\n  return true if n == 177147\n  return false if n % 177147 != 0\n  return true if n == 531441\n  return false if n % 531441 != 0\n  return true if n == 1594323\n  return false if n % 1594323 != 0\n  return true if n == 4782969\n  return false if n % 4782969 != 0\n  return true if n == 14348907\n  return false if n % 14348907 != 0\n  return true if n == 43046721\n  return false if n % 43046721 != 0\n  return true if n == 129140163\n  return false if n % 129140163 != 0\n  return true if n == 387420489\n  return false if n % 387420489 != 0\n  return true if n == 1162261467\n  return false if n % 1162261467 != 0\n  return true if n == 3486784401\n  return false if n % 3486784401 != 0\n  return true if n == 10460353203\n  return false if n % 10460353203 != 0\n  return true if n == 31381059609\n  return false if n % 31381059609 != 0\n  return true if n == 94143178827\n  return false if n % 94143178827 != 0\n ",
    "  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  return false if n < 0\n  root = Math.sqrt(n * 2)\n  root == root.to_i\nend",
    "  return false if n <= 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  return false if n < 0\n  root = Math.sqrt(n * 2)\n  root == root.to_i\nend",
    "  (Math.sqrt(24 * n + 1) + 1) % 6 == 0\nend",
    "  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  n = n.to_f\n  return (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  n = n.to_f\n  ((Math.sqrt(24*n+1)+1)/6).to_i == ((Math.sqrt(24*n+1)+1)/6)\nend",
    "  nth = (Math.sqrt(1 + 24 * n) + 1) / 6\n  nth == nth.to_i\nend",
    "  root = (Math.sqrt(1 + 24 * n) + 1) / 6\n  root == root.to_i\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  return false if n < 1\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  n == (1 + Math.sqrt(1 + 24 * n)) / 6\nend",
    "  n = n.to_f\n  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root.to_i == root\nend",
    "  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  nth = (Math.sqrt(24 * n + 1) + 1) / 6\n  nth == nth.to_i\nend",
    "  n = (1 + Math.sqrt(1 + 24 * n)) / 6\n  n == n.to_i\nend",
    "  nth_octagonal = (1..Float::INFINITY).find { |i| n == i * (3 * i - 2) }\n  nth_octagonal ? true : false\nend",
    "  return false if n <= 0\n  return false if n == 1\n  return true if n == 2\n  return false if n == 3\n  return true if n == 4\n  return false if n == 5\n  return true if n == 6\n  return false if n == 7\n  return true if n == 8\n  return false if n == 9\n  return true if n == 10\n  return false if n == 11\n  return true if n == 12\n  return false if n == 13\n  return true if n == 14\n  return false if n == 15\n  return true if n == 16\n  return false if n == 17\n  return true if n == 18\n  return false if n == 19\n  return true if n == 20\n  return false if n == 21\n  return true if n == 22\n  return false if n == 23\n  return true if n == 24\n  return false if n == 25\n  return true if n == 26\n  return false if n == 27\n  return true if n == 28\n  return false if n == 29\n  return true if n == 30\n  return false if n == 31\n  return true if n == 32\n  return false if n == 33\n  return true if n == 34\n  return false if n == 35\n  return true if n == 36\n  return false if n == 37\n  return true if n == 38\n  return false if n == 39\n  return true if n == 40\n  return false if n == 41\n  return true if n == 42\n  return false if n == 43\n  return true if n == 44\n  return false if n == 45\n  return true if n == 46\n  return false if n == 47\n  return true if n == 48\n  return false if n == 49\n  return true if n == 50\n  return false if n == 51\n  return true if n == 52\n  return false if n == 53\n  return true if n == 54\n  return false if n == 55\n  return true if n == 56\n  return false if n == 57\n  return true if n == 58\n  return false if n == 59\n  return true if n == 60\n  return false if n == 61\n  return true if n == 62\n  return false if n == 63",
    "  return false if n <= 0\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 9\n  return false if n % 9 != 0\n  return true if n == 64\n  return false if n % 64 != 0\n  return true if n == 729\n  return false if n % 729 != 0\n  return true if n == 4096\n  return false if n % 4096 != 0\n  return true if n == 15625\n  return false if n % 15625 != 0\n  return true if n == 46656\n  return false if n % 46656 != 0\n  return true if n == 117649\n  return false if n % 117649 != 0\n  return true if n == 262144\n  return false if n % 262144 != 0\n  return true if n == 531441\n  return false if n % 531441 != 0\n  return true if n == 1000000\n  return false if n % 1000000 != 0\n  return true if n == 1771561\n  return false if n % 1771561 != 0\n  return true if n == 2985984\n  return false if n % 2985984 != 0\n  return true if n == 4826809\n  return false if n % 4826809 != 0\n  return true if n == 7529536\n  return false if n % 7529536 != 0\n  return true if n == 11390625\n  return false if n % 11390625 != 0\n  return true if n == 16777216\n  return false if n % 16777216 != 0\n  return true if n == 24137569\n  return false if n % 24137569 != 0\n  return true if n == 34012224\n  return false if n % 34012224 != 0\n  return true if n == 47045881\n  return false if n % 47045881 != 0\n  return true if n == 64000000\n  return false if n % 64000000 != 0\n  return true if n == 85766121\n  return false if n % 85766121 != 0\n  return true if n == 113379904\n  return false if n % 113379904 != 0\n  return true if n == 148035889\n",
    "  n = n.to_f\n  return ((1 + Math.sqrt(1 + 24 * n)) / 6) % 1 == 0\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n.to_i == n\nend",
    "  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  n = n.to_f\n  return ((1 + Math.sqrt(1 + 24 * n)) / 6) % 1 == 0\nend",
    "  n = (Math.sqrt(24*n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  nth = (Math.sqrt(1 + 24 * n) + 1) / 6\n  nth == nth.to_i\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n == 1\n  return true if n == 2\n  return false if n == 3\n  return true if n == 4\n  return false if n == 5\n  return true if n == 6\n  return false if n == 7\n  return true if n == 8\n  return false if n == 9\n  return true if n == 10\n  return false if n == 11\n  return true if n == 12\n  return false if n == 13\n  return true if n == 14\n  return false if n == 15\n  return true if n == 16\n  return false if n == 17\n  return true if n == 18\n  return false if n == 19\n  return true if n == 20\n  return false if n == 21\n  return true if n == 22\n  return false if n == 23\n  return true if n == 24\n  return false if n == 25\n  return true if n == 26\n  return false if n == 27\n  return true if n == 28\n  return false if n == 29\n  return true if n == 30\n  return false if n == 31\n  return true if n == 32\n  return false if n == 33\n  return true if n == 34\n  return false if n == 35\n  return true if n == 36\n  return false if n == 37\n  return true if n == 38\n  return false if n == 39\n  return true if n == 40\n  return false if n == 41\n  return true if n == 42\n  return false if n == 43\n  return true if n == 44\n  return false if n == 45\n  return true if n == 46\n  return false if n == 47\n  return true if n == 48\n  return false if n == 49\n  return true if n == 50\n  return false if n == 51\n  return true if n == 52\n  return false if n == 53\n  return true if n == 54\n  return false if n == 55\n  return true if n == 56\n  return false if n == 57\n  return true if n == 58\n  return false if n == 59\n  return true if n == 60\n  return false if n == 61\n  return true if n == 62",
    "  root = (Math.sqrt(1 + 24 * n) + 1) / 6\n  root == root.to_i\nend",
    "  n = n.to_f\n  return (((1 + Math.sqrt(1 + 24 * n)) / 6) % 1).zero?\nend",
    "  ((Math.sqrt(24*n + 1) + 1)/6) % 1 == 0\nend",
    "  a = (Math.sqrt(24 * n + 1) + 1) / 6\n  a == a.to_i\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 3 != 1\n  return true if n % 3 == 1 && n % 4 == 1\n  return false\nend",
    "  nth_octagonal = (3 * n**2 - 2 * n)\n  nth_octagonal\nend",
    "  nth_octagonal = (1..Float::INFINITY).lazy.map { |i| i * (3 * i - 2) }.select { |i| i.to_s.size == n }.first\n  nth_octagonal\nend",
    "  return false if n < 0\n  root = (Math.sqrt(24*n+1)+1)/6\n  root == root.to_i\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 24 * n) + 1) / 6) % 1 == 0\nend",
    "  return false if n <= 0\n  root = (Math.sqrt(1 + 24 * n) + 1) / 6\n  root == root.to_i\nend",
    "  return false if n <= 0\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 9\n  return false if n % 64 != 9\n  return true if n == 65\n  return false if n % 512 != 65\n  return true if n == 577\n  return false if n % 4096 != 577\n  return true if n == 4369\n  return false if n % 32768 != 4369\n  return true if n == 4481\n  return false if n % 262144 != 4481\n  return true if n == 40953\n  return false if n % 2097152 != 40953\n  return true if n == 365025\n  return false if n % 16777216 != 365025\n  return true if n == 313841\n  return false if n % 134217728 != 313841\n  return true if n == 2657205\n  return false if n % 1073741824 != 2657205\n  return true if n == 21857161\n  return false if n % 8589934592 != 21857161\n  return true if n == 17367041\n  return false if n % 68719476736 != 17367041\n  return true if n == 13846721\n  return false if n % 549755813888 != 13846721\n  return true if n == 1118481\n  return false if n % 4398046511104 != 1118481\n  return true if n == 912673\n  return false if n % 35184372088832 != 912673\n  return true if n == 735471\n  return false if n % 281474976710656 != 735471\n  return true if n == 59049\n  return false if n % 2251799813685248 != 59049\n  return true if n == 4782969\n  return false if n % 18014398509481984 != 4782969\n  return true if n == 387420489\n  return false if n % 144115188075855872 != 387420489\n  return true if n == 31381059609\n  return false if n % 1152921504606846976 != 31381059609\n  return true if n",
    "  nth = (Math.sqrt(24 * n + 1) + 1) / 6\n  nth == nth.to_i\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 24 * n) + 1) / 6) % 1 == 0\nend",
    "  n = n.to_f\n  return false if n < 1\n  return ((Math.sqrt(1 + 24 * n) + 1) / 6) % 1 == 0\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 24 * n) + 1) / 6) % 1 == 0\nend",
    "  # n = (3*x^2 - 2*x) / 2\n  # n = 3*x^2 - 2*x\n  # n = 3*x^2 - 2*x - 2*n = 0\n  # x = (2 + sqrt(4 + 12*n)) / 6\n  # x = (2 + sqrt(4 + 12*n)) / 6\n  # x = (2 + sqrt(4 + 12*n)) / 6\n  # x = (2 + sqrt(4 + 12*n)) / 6\n  # x = (2 + sqrt(4 + 12*n)) / 6\n  # x = (2 + sqrt(4 + 12*n)) / 6\n  # x = (2 + sqrt(4 + 12*n)) / 6\n  # x = (2 + sqrt(4 + 12*n)) / 6\n  # x = (2 + sqrt(4 + 12*n)) / 6\n  # x = (2 + sqrt(4 + 12*n)) / 6\n  # x = (2 + sqrt(4 + 12*n)) / 6\n  # x = (2 + sqrt(4 + 12*n)) / 6\n  # x = (2 + sqrt(4 + 12*n)) / 6\n  # x = (2 + sqrt(4 + 12*n)) / 6\n  # x = (2 + sqrt(4 + 12*n)) / 6\n  # x = (2 + sqrt(4 + 12*n)) / 6\n  # x = (2 + sqrt(4 + 12*n)) / 6\n  # x = (2 + sqrt(4 + 12*n)) / 6\n  # x = (2 + sqrt(4 + 12*n)) / 6\n  # x = (2 + sqrt(4 + 12*n)) / 6\n  # x = (2 + sqrt(4 + 12*n)) / 6\n  # x = (2 + sqrt(4 + 12*n)) / 6\n  # x = (2 + sqrt(4 + 12*n)) / 6\n  # x = (2 + sqrt(4 + 12*n)) / 6\n  # x",
    "  return false if n < 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.floor\nend",
    "  return false if n < 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 9\n  is_octagonal(n - 8)\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  return false if n <= 0\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 9\n  return false if n % 9 != 0\n  return true if n == 27\n  return false if n % 27 != 0\n  return true if n == 81\n  return false if n % 81 != 0\n  return true if n == 243\n  return false if n % 243 != 0\n  return true if n == 729\n  return false if n % 729 != 0\n  return true if n == 2187\n  return false if n % 2187 != 0\n  return true if n == 6561\n  return false if n % 6561 != 0\n  return true if n == 19683\n  return false if n % 19683 != 0\n  return true if n == 59049\n  return false if n % 59049 != 0\n  return true if n == 177147\n  return false if n % 177147 != 0\n  return true if n == 531441\n  return false if n % 531441 != 0\n  return true if n == 1594323\n  return false if n % 1594323 != 0\n  return true if n == 4782969\n  return false if n % 4782969 != 0\n  return true if n == 14348907\n  return false if n % 14348907 != 0\n  return true if n == 43046721\n  return false if n % 43046721 != 0\n  return true if n == 129140163\n  return false if n % 129140163 != 0\n  return true if n == 387420489\n  return false if n % 387420489 != 0\n  return true if n == 1162261467\n  return false if n % 1162261467 != 0\n  return true if n == 3486784401\n  return false if n % 3486784401 != 0\n  return true if n == 10460353203\n  return false if n % 10460353203 != 0\n  return true if n == 31381059609\n  return false if n % 31381059609 != 0\n  return true if n == 94143178827\n  return false if n % 94143178827 != 0\n ",
    "  return false if n < 0\n  return true if (Math.sqrt(24 * n + 1) + 1) % 6 == 0\n  false\nend",
    "  n = n.to_f\n  root = (1 + Math.sqrt(1 + 24 * n)) / 6\n  root == root.to_i\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  nth = (Math.sqrt(1 + 24 * n) + 1) / 6\n  nth == nth.to_i\nend",
    "  return false if n < 0\n  return false if n == 0\n  return true if n == 1\n  return false if n == 2\n  return true if n == 3\n  return false if n == 4\n  return true if n == 5\n  return false if n == 6\n  return true if n == 7\n  return false if n == 8\n  return true if n == 9\n  return false if n == 10\n  return true if n == 11\n  return false if n == 12\n  return true if n == 13\n  return false if n == 14\n  return true if n == 15\n  return false if n == 16\n  return true if n == 17\n  return false if n == 18\n  return true if n == 19\n  return false if n == 20\n  return true if n == 21\n  return false if n == 22\n  return true if n == 23\n  return false if n == 24\n  return true if n == 25\n  return false if n == 26\n  return true if n == 27\n  return false if n == 28\n  return true if n == 29\n  return false if n == 30\n  return true if n == 31\n  return false if n == 32\n  return true if n == 33\n  return false if n == 34\n  return true if n == 35\n  return false if n == 36\n  return true if n == 37\n  return false if n == 38\n  return true if n == 39\n  return false if n == 40\n  return true if n == 41\n  return false if n == 42\n  return true if n == 43\n  return false if n == 44\n  return true if n == 45\n  return false if n == 46\n  return true if n == 47\n  return false if n == 48\n  return true if n == 49\n  return false if n == 50\n  return true if n == 51\n  return false if n == 52\n  return true if n == 53\n  return false if n == 54\n  return true if n == 55\n  return false if n == 56\n  return true if n == 57\n  return false if n == 58\n  return true if n == 59\n  return false if n == 60\n  return true if n == 61\n  return false if n == 62",
    "  n = n.to_f\n  return ((1 + Math.sqrt(1 + 24 * n)) / 6) % 1 == 0\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 3 != 0\n  return true if n % 9 == 0\n  return false if n % 27 != 0\n  return true if n % 81 == 0\n  return false if n % 243 != 0\n  return true if n % 729 == 0\n  return false if n % 2187 != 0\n  return true if n % 6561 == 0\n  return false if n % 19683 != 0\n  return true if n % 59049 == 0\n  return false if n % 177147 != 0\n  return true if n % 531441 == 0\n  return false if n % 1594323 != 0\n  return true if n % 4782969 == 0\n  return false if n % 14348907 != 0\n  return true if n % 43046721 == 0\n  return false if n % 129140163 != 0\n  return true if n % 387420489 == 0\n  return false if n % 1162261467 != 0\n  return true if n % 3486784401 == 0\n  return false if n % 10460353203 != 0\n  return true if n % 31381059609 == 0\n  return false if n % 94143178827 != 0\n  return true if n % 282429536481 == 0\n  return false if n % 847288609443 != 0\n  return true if n % 2541865828329 == 0\n  return false if n % 7625597484987 != 0\n  return true if n % 22876792454961 == 0\n  return false if n % 68630377364883 != 0\n  return true if n % 205891132094649 == 0\n  return false if n % 617673396283947 != 0\n  return true if n % 1853020188851841 == 0\n  return false if n % 5559060566555523 != 0\n  return true if n % 16677181699666569 == 0\n  return false if n % 50031545098999707 != 0\n  return true if n % 150094635296999121 == 0\n  return false if n % 450283905890997363 != 0\n  return true",
    "  n = n.to_f\n  return ((1 + Math.sqrt(1 + 24 * n)) / 6) % 1 == 0\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  root = (Math.sqrt(1 + 24 * n) + 1) / 6\n  root == root.to_i\nend",
    "  nth_octagonal = (3 * n**2 - 2 * n)\n  return nth_octagonal\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 24 * n) + 1) / 6) % 1 == 0\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 3 != 1\n  return true if n % 3 == 1\nend",
    "  nth = (Math.sqrt(1 + 24 * n) + 1) / 6\n  nth.to_i == nth\nend",
    "  nth = (Math.sqrt(24 * n + 1) + 1) / 6\n  nth == nth.to_i\nend",
    "  return true if (Math.sqrt(24*n + 1) + 1) % 6 == 0\n  false\nend",
    "  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 24 * n) + 1) / 6) % 1 == 0\nend",
    "  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  return false if n < 0\n  root = (Math.sqrt(1 + 24 * n) + 1) / 6\n  root == root.to_i\nend",
    "  return false if n < 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  return false if n < 0\n  return false if n == 0\n  return true if n == 1",
    "  return false if n < 0\n  return false if n == 1\n  return true if n == 8\n  is_octagonal(n - 8)\nend",
    "  return false if n < 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  n = n.to_f\n  ((Math.sqrt(1 + 24 * n) + 1) / 6) % 1 == 0\nend",
    "  return false if n < 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  return false if n <= 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  n = n.to_f\n  return ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  return false if n < 0\n  return false if n == 0\n  return true if n == 1\n  return false if n == 2\n  return true if n == 3\n  return false if n == 4\n  return true if n == 5\n  return false if n == 6\n  return true if n == 7\n  return false if n == 8\n  return true if n == 9\n  return false if n == 10\n  return true if n == 11\n  return false if n == 12\n  return true if n == 13\n  return false if n == 14\n  return true if n == 15\n  return false if n == 16\n  return true if n == 17\n  return false if n == 18\n  return true if n == 19\n  return false if n == 20\n  return true if n == 21\n  return false if n == 22\n  return true if n == 23\n  return false if n == 24\n  return true if n == 25\n  return false if n == 26\n  return true if n == 27\n  return false if n == 28\n  return true if n == 29\n  return false if n == 30\n  return true if n == 31\n  return false if n == 32\n  return true if n == 33\n  return false if n == 34\n  return true if n == 35\n  return false if n == 36\n  return true if n == 37\n  return false if n == 38\n  return true if n == 39\n  return false if n == 40\n  return true if n == 41\n  return false if n == 42\n  return true if n == 43\n  return false if n == 44\n  return true if n == 45\n  return false if n == 46\n  return true if n == 47\n  return false if n == 48\n  return true if n == 49\n  return false if n == 50\n  return true if n == 51\n  return false if n == 52\n  return true if n == 53\n  return false if n == 54\n  return true if n == 55\n  return false if n == 56\n  return true if n == 57\n  return false if n == 58\n  return true if n == 59\n  return false if n == 60\n  return true if n == 61\n  return false if n == 62",
    "  nth = (Math.sqrt(1 + 24 * n) + 1) / 6\n  nth.to_i == nth\nend",
    "  nth = (Math.sqrt(24 * n + 1) + 1) / 6\n  nth.to_i == nth\nend",
    "  return false if n < 0\n  x = (Math.sqrt(24 * n + 1) + 1) / 6\n  x == x.to_i\nend",
    "  root = (1 + Math.sqrt(1 + 24 * n)) / 6\n  root == root.to_i\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  (1 + Math.sqrt(1 + 12 * n)) % 6 == 0\nend",
    "  return false if n <= 0\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 9\n  return false if n % 9 != 0\n  return true if n == 64\n  return false if n % 64 != 0\n  return true if n == 729\n  return false if n % 729 != 0\n  return true if n == 4096\n  return false if n % 4096 != 0\n  return true if n == 15625\n  return false if n % 15625 != 0\n  return true if n == 46656\n  return false if n % 46656 != 0\n  return true if n == 117649\n  return false if n % 117649 != 0\n  return true if n == 262144\n  return false if n % 262144 != 0\n  return true if n == 531441\n  return false if n % 531441 != 0\n  return true if n == 1000000\n  return false if n % 1000000 != 0\n  return true if n == 1771561\n  return false if n % 1771561 != 0\n  return true if n == 2985984\n  return false if n % 2985984 != 0\n  return true if n == 4826809\n  return false if n % 4826809 != 0\n  return true if n == 7529536\n  return false if n % 7529536 != 0\n  return true if n == 11390625\n  return false if n % 11390625 != 0\n  return true if n == 16777216\n  return false if n % 16777216 != 0\n  return true if n == 24137569\n  return false if n % 24137569 != 0\n  return true if n == 34012224\n  return false if n % 34012224 != 0\n  return true if n == 47045881\n  return false if n % 47045881 != 0\n  return true if n == 64000000\n  return false if n % 64000000 != 0\n  return true if n == 85766121\n  return false if n % 85766121 != 0\n  return true if n == 113379904\n  return false if n % 113379904 != 0\n  return true if n == 148035889\n",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 3 != 1\n  return true if n % 3 == 1\nend",
    "  n = (1 + Math.sqrt(1 + 24 * n)) / 6\n  n == n.to_i\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  root = (Math.sqrt(1 + 24 * n) + 1) / 6\n  root == root.to_i\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  nth = (Math.sqrt(1 + 24 * n) + 1) / 6\n  nth == nth.to_i\nend",
    "  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  root = (1 + Math.sqrt(1 + 24 * n)) / 6\n  root.to_i == root\nend",
    "  x = (Math.sqrt(24*n + 1) + 1) / 6\n  x == x.to_i\nend",
    "  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  n = n.to_f\n  return ((1 + Math.sqrt(1 + 24 * n)) / 6) % 1 == 0\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 24 * n) + 1) / 6) % 1 == 0\nend",
    "  return false if n < 0\n  root = Math.sqrt(n * 2)\n  root == root.to_i\nend",
    "  nth = (Math.sqrt(24 * n + 1) + 1) / 6\n  nth == nth.to_i\nend",
    "  nth = (Math.sqrt(1 + 24 * n) + 1) / 6\n  nth == nth.to_i\nend",
    "  return false if n < 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  return false if n <= 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  n = n.to_f\n  return ((1 + Math.sqrt(1 + 24 * n)) / 6) % 1 == 0\nend",
    "  n = n.to_f\n  return (((1 + Math.sqrt(1 + 24 * n)) / 6) % 1).zero?\nend",
    "  return true if (Math.sqrt(24 * n + 1) + 1) % 6 == 0\n  false\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  return false if n < 0\n  x = (Math.sqrt(24 * n + 1) + 1) / 6\n  x == x.to_i\nend",
    "  return false if n < 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 9\n  return false if n % 9 != 0\n  return true if n == 64\n  return false if n % 64 != 0\n  return true if n == 729\n  return false if n % 729 != 0\n  return true if n == 4096\n  return false if n % 4096 != 0\n  return true if n == 15625\n  return false if n % 15625 != 0\n  return true if n == 46656\n  return false if n % 46656 != 0\n  return true if n == 117649\n  return false if n % 117649 != 0\n  return true if n == 262144\n  return false if n % 262144 != 0\n  return true if n == 531441\n  return false if n % 531441 != 0\n  return true if n == 1000000\n  return false if n % 1000000 != 0\n  return true if n == 1771561\n  return false if n % 1771561 != 0\n  return true if n == 2985984\n  return false if n % 2985984 != 0\n  return true if n == 4826809\n  return false if n % 4826809 != 0\n  return true if n == 7529536\n  return false if n % 7529536 != 0\n  return true if n == 11390625\n  return false if n % 11390625 != 0\n  return true if n == 16777216\n  return false if n % 16777216 != 0\n  return true if n == 24137569\n  return false if n % 24137569 != 0\n  return true if n == 34012224\n  return false if n % 34012224 != 0\n  return true if n == 47045881\n  return false if n % 47045881 != 0\n  return true if n == 64000000\n  return false if n % 64000000 != 0\n  return true if n == 85766121\n  return false if n % 85766121 != 0\n  return true if n == 113379904\n  return false if n % 113379904 != 0\n  return true if n == 148035889\n",
    "  return false if n < 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  n = n.to_f\n  return ((1 + Math.sqrt(1 + 24 * n)) / 6) % 1 == 0\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n == 1\n  return false if n == 2\n  return true if n == 3\n  return false if n == 4\n  return false if n == 5\n  return true if n == 6\n  return false if n == 7\n  return false if n == 8\n  return true if n == 9\n  return false if n == 10\n  return false if n == 11\n  return true if n == 12\n  return false if n == 13\n  return false if n == 14\n  return true if n == 15\n  return false if n == 16\n  return false if n == 17\n  return true if n == 18\n  return false if n == 19\n  return false if n == 20\n  return true if n == 21\n  return false if n == 22\n  return false if n == 23\n  return true if n == 24\n  return false if n == 25\n  return false if n == 26\n  return true if n == 27\n  return false if n == 28\n  return false if n == 29\n  return true if n == 30\n  return false if n == 31\n  return false if n == 32\n  return true if n == 33\n  return false if n == 34\n  return false if n == 35\n  return true if n == 36\n  return false if n == 37\n  return false if n == 38\n  return true if n == 39\n  return false if n == 40\n  return false if n == 41\n  return true if n == 42\n  return false if n == 43\n  return false if n == 44\n  return true if n == 45\n  return false if n == 46\n  return false if n == 47\n  return true if n == 48\n  return false if n == 49\n  return false if n == 50\n  return true if n == 51\n  return false if n == 52\n  return false if n == 53\n  return true if n == 54\n  return false if n == 55\n  return false if n == 56\n  return true if n == 57\n  return false if n == 58\n  return false if n == 59\n  return true if n == 60\n  return false if n == 61\n  return false if n == 62",
    "  ((1 + Math.sqrt(1 + 24 * n)) / 6) % 1 == 0\nend",
    "  nth = (Math.sqrt(24 * n + 1) + 1) / 6\n  nth == nth.to_i\nend",
    "  return false if n < 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n == 1\n  return true if n == 2\n  return false if n == 3\n  return true if n == 4\n  return false if n == 5\n  return true if n == 6\n  return false if n == 7\n  return true if n == 8\n  return false if n == 9\n  return true if n == 10\n  return false if n == 11\n  return true if n == 12\n  return false if n == 13\n  return true if n == 14\n  return false if n == 15\n  return true if n == 16\n  return false if n == 17\n  return true if n == 18\n  return false if n == 19\n  return true if n == 20\n  return false if n == 21\n  return true if n == 22\n  return false if n == 23\n  return true if n == 24\n  return false if n == 25\n  return true if n == 26\n  return false if n == 27\n  return true if n == 28\n  return false if n == 29\n  return true if n == 30\n  return false if n == 31\n  return true if n == 32\n  return false if n == 33\n  return true if n == 34\n  return false if n == 35\n  return true if n == 36\n  return false if n == 37\n  return true if n == 38\n  return false if n == 39\n  return true if n == 40\n  return false if n == 41\n  return true if n == 42\n  return false if n == 43\n  return true if n == 44\n  return false if n == 45\n  return true if n == 46\n  return false if n == 47\n  return true if n == 48\n  return false if n == 49\n  return true if n == 50\n  return false if n == 51\n  return true if n == 52\n  return false if n == 53\n  return true if n == 54\n  return false if n == 55\n  return true if n == 56\n  return false if n == 57\n  return true if n == 58\n  return false if n == 59\n  return true if n == 60\n  return false if n == 61\n  return true if n == 62",
    "  root = (Math.sqrt(1 + 24 * n) + 1) / 6\n  root.to_i == root\nend",
    "  return false if n <= 0\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 9\n  return false if n % 9 != 0\n  return true if n == 64\n  return false if n % 64 != 0\n  return true if n == 729\n  return false if n % 729 != 0\n  return true if n == 4096\n  return false if n % 4096 != 0\n  return true if n == 15625\n  return false if n % 15625 != 0\n  return true if n == 46656\n  return false if n % 46656 != 0\n  return true if n == 117649\n  return false if n % 117649 != 0\n  return true if n == 262144\n  return false if n % 262144 != 0\n  return true if n == 531441\n  return false if n % 531441 != 0\n  return true if n == 1000000\n  return false if n % 1000000 != 0\n  return true if n == 1771561\n  return false if n % 1771561 != 0\n  return true if n == 2985984\n  return false if n % 2985984 != 0\n  return true if n == 4826809\n  return false if n % 4826809 != 0\n  return true if n == 7529536\n  return false if n % 7529536 != 0\n  return true if n == 11390625\n  return false if n % 11390625 != 0\n  return true if n == 16777216\n  return false if n % 16777216 != 0\n  return true if n == 24137569\n  return false if n % 24137569 != 0\n  return true if n == 34012224\n  return false if n % 34012224 != 0\n  return true if n == 47045881\n  return false if n % 47045881 != 0\n  return true if n == 64000000\n  return false if n % 64000000 != 0\n  return true if n == 85766121\n  return false if n % 85766121 != 0\n  return true if n == 113379904\n  return false if n % 113379904 != 0\n  return true if n == 148035889\n",
    "  n = n.to_f\n  ((Math.sqrt(1 + 24 * n) + 1) / 6) % 1 == 0\nend",
    "  n = n.to_f\n  return ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  return false if n < 0\n  return false if n == 0\n  return true if n == 1\n  nth_octagonal(n) == n\nend",
    "  n = (Math.sqrt(24*n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  nth = (Math.sqrt(1 + 24 * n) + 1) / 6\n  nth.to_i == nth\nend",
    "  ((1 + Math.sqrt(1 + 24 * n)) / 6) % 1 == 0\nend",
    "  nth_octagonal = (Math.sqrt(1 + 24 * n) + 1) / 6\n  nth_octagonal == nth_octagonal.to_i\nend"
  ]
}