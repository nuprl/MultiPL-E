{
  "name": "mbpp_805_max_sum_list",
  "language": "rb",
  "prompt": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_list = []\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmp7ltac_jr.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ltac_jr.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_list = []\n  lists.each do |list|\n    sum = list.inject(0) { |sum, n| sum + n }\n    if sum > max_sum\n      max_sum = sum\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122584,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr18yizno\nStarted\n.\nFinished in 0.000383487 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2607.65 tests/s, 7822.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_list = nil\n  lists.each do |list|\n    sum = list.inject(:+)\n    if sum > max_sum\n      max_sum = sum\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122584,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsj5_0m9o\nStarted\n.\nFinished in 0.000631607 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1583.26 tests/s, 4749.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_list = []\n  lists.each do |list|\n    sum = 0\n    list.each do |element|\n      sum += element\n    end\n    if sum > max_sum\n      max_sum = sum\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122584,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5jxsd4lk\nStarted\n.\nFinished in 0.00037694 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2652.94 tests/s, 7958.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_list = []\n  lists.each do |list|\n    sum = list.reduce(:+)\n    if sum > max_sum\n      max_sum = sum\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122584,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfm6ghg_\nStarted\n.\nFinished in 0.000384939 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.81 tests/s, 7793.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_list = []\n  lists.each do |list|\n    sum = 0\n    list.each do |num|\n      sum += num\n    end\n    if sum > max_sum\n      max_sum = sum\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122584,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyqbhwfuv\nStarted\n.\nFinished in 0.000382819 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2612.20 tests/s, 7836.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122584,
      "stdout": "Loaded suite /tmp/tmpax9bhyhq\nStarted\nF\n===============================================================================\nFailure: test_max_sum_list(TestHumanEval)\n/tmp/tmpax9bhyhq.rb:9:in `test_max_sum_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_max_sum_list\n      8:     candidate = method(:max_sum_list)\n  =>  9:     assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n     10:     assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n     11:     assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n     12:   end\n<[10, 11, 12]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006918174 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.55 tests/s, 144.55 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_list = []\n  lists.each do |list|\n    sum = 0\n    list.each do |num|\n      sum += num\n    end\n    if sum > max_sum\n      max_sum = sum\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122584,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyqbhwfuv\nStarted\n.\nFinished in 0.000382819 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2612.20 tests/s, 7836.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_list = nil\n  lists.each do |list|\n    sum = 0\n    list.each do |num|\n      sum += num\n    end\n    if sum > max_sum\n      max_sum = sum\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122584,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuhk4qqa_\nStarted\n.\nFinished in 0.000386896 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2584.67 tests/s, 7754.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.sort_by { |list| list.reduce(:+) }.last\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122584,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3in800r\nStarted\n.\nFinished in 0.000393299 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2542.59 tests/s, 7627.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.map { |list| list.reduce(:+) }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122584,
      "stdout": "Loaded suite /tmp/tmpkw0zxem1\nStarted\nF\n===============================================================================\nFailure: test_max_sum_list(TestHumanEval)\n/tmp/tmpkw0zxem1.rb:9:in `test_max_sum_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_max_sum_list\n      8:     candidate = method(:max_sum_list)\n  =>  9:     assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n     10:     assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n     11:     assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n     12:   end\n<[10, 11, 12]> expected but was\n<33>\n===============================================================================\n\nFinished in 0.00661956 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.07 tests/s, 151.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_list = []\n  lists.each do |list|\n    sum = 0\n    list.each do |num|\n      sum += num\n    end\n    if sum > max_sum\n      max_sum = sum\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122584,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyqbhwfuv\nStarted\n.\nFinished in 0.000382819 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2612.20 tests/s, 7836.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max = 0\n  max_list = []\n  lists.each do |list|\n    if list.reduce(:+) > max\n      max = list.reduce(:+)\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122584,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz67qivmq\nStarted\n.\nFinished in 0.000374545 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2669.91 tests/s, 8009.72 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max = 0\n  max_list = []\n  lists.each do |list|\n    if list.reduce(:+) > max\n      max = list.reduce(:+)\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122584,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz67qivmq\nStarted\n.\nFinished in 0.000374545 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2669.91 tests/s, 8009.72 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122584,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptwm3baig\nStarted\n.\nFinished in 0.000390093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2563.49 tests/s, 7690.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by {|list| list.sum}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122584,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkxqn_d4z\nStarted\n.\nFinished in 0.000379992 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2631.63 tests/s, 7894.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6xov1u0\nStarted\n.\nFinished in 0.000603025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.31 tests/s, 4974.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi3hkh3j8\nStarted\n.\nFinished in 0.000618912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1615.74 tests/s, 4847.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}