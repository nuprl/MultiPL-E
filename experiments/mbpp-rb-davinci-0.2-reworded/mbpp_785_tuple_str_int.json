{
  "name": "mbpp_785_tuple_str_int",
  "language": "rb",
  "prompt": "# Write a function to convert array string to integer array.\ndef tuple_str_int(test_str)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_tuple_str_int\n    candidate = method(:tuple_str_int)\n    assert_equal([7, 8, 9], candidate.call(\"(7, 8, 9)\"))\n    assert_equal([1, 2, 3], candidate.call(\"(1, 2, 3)\"))\n    assert_equal([4, 5, 6], candidate.call(\"(4, 5, 6)\"))\n    assert_equal([7, 81, 19], candidate.call(\"(7, 81, 19)\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(\",\").map(&:to_i)\nend",
    "  test_str.split(\",\").map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.map{|x| x.to_i}\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.split(\",\").map(&:to_i)\nend",
    "  test_str.split(\",\").map(&:to_i)\nend",
    "  test_str.map{|x| x.to_i}\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.split(\",\").map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map { |str| str.to_i }\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(\",\").map(&:to_i)\nend",
    "  test_str.map{|x| x.to_i}\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(\",\").map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(\",\").map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.split(\",\").map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(\",\").map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.split(\",\").map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(\",\").map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(\",\").map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(\",\").map(&:to_i)\nend",
    "  test_str.split(\",\").map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.split(\",\").map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(\",\").map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(\",\").map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(\",\").map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(\",\").map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map { |str| str.to_i }\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(\",\").map(&:to_i)\nend",
    "  test_str.map { |str| str.to_i }\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.split(\",\").map(&:to_i)\nend",
    "  test_str.split(\",\").map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(\",\").map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(\",\").map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(\",\").map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(\",\").map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(\",\").map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.map { |x| x.to_i }\nend",
    "  test_str.split(',').map(&:to_i)\nend",
    "  test_str.split(',').map(&:to_i)\nend"
  ]
}