{
  "name": "mbpp_479_first_Digit",
  "language": "rb",
  "prompt": "# Write a rbthon function to find the first digit of a given number.\ndef first_Digit(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_first_Digit\n    candidate = method(:first_Digit)\n    assert_equal(1, candidate.call(123))\n    assert_equal(4, candidate.call(456))\n    assert_equal(1, candidate.call(12))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split(\"\").each do |i|\n    if i.to_i != 0\n      return i.to_i\n    end\n  end\nend",
    "  while n > 9\n    n /= 10\n  end\n  n\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').each do |i|\n    if i.to_i != 0\n      return i.to_i\n    end\n  end\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split(\"\")[0].to_i\nend",
    "  while n > 9\n    n /= 10\n  end\n  n\nend",
    "  n.to_s.split('').first.to_i\nend\nputs first_Digit(1234)\nputs first_Digit(12.34)\nputs first_Digit(0.1234)\nputs first_Digit(0.1234)\nputs first_Digit(0.1234)",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend\nputs first_Digit(3572)\nputs first_Digit(9)\nputs first_Digit(10)\nputs first_Digit(189)\nputs first_Digit(0)",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').each do |i|\n    if i.to_i != 0\n      return i.to_i\n    end\n  end\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split(\"\").each do |i|\n    if i.to_i != 0\n      return i.to_i\n    end\n  end\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  while n > 9\n    n /= 10\n  end\n  n\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split(\"\").first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('')[0].to_i\nend",
    "  n.to_s.split(\"\").first.to_i\nend",
    "  n.to_s.split(\"\").each do |i|\n    if i.to_i != 0\n      return i.to_i\n    end\n  end\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split(\"\").first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split(//).first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  while n > 9\n    n /= 10\n  end\n  n\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s[0].to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s[0].to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend\nputs first_Digit(1234)\nputs first_Digit(0)\nputs first_Digit(123456789)\nputs first_Digit
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split(\"\").each do |i|\n    if i.to_i != 0\n      return i.to_i\n    end\n  end\nend",
    "  while n > 9\n    n = n / 10\n  end\n  return n\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split(\"\")[0].to_i\nend",
    "  n.to_s.chars.first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split(//).first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.chars.first.to_i\nend",
    "  n.to_s.split(\"\").first.to_i\nend",
    "  while n > 9\n    n /= 10\n  end\n  n\nend",
    "  n.to_s.split(\"\").first.to_i\nend",
    "  n.to_s.split(//).first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  while n > 9\n    n /= 10\n  end\n  n\nend",
    "  n.to_s.split('').first\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend\nputs \"Enter a number\"\nn = gets.chomp.to_i\nputs \"First digit of #{n} is #{first_Digit(n)}\"",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.chars.first.to_i\nend",
    "  n.to_s.split(\"\").first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split(\"\").first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend\nfirst_Digit(1234)",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split(//).first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').each do |i|\n    if i.match(/\\d/)\n      return i\n    end\n  end\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split(\"\").first\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split(//).first.to_i\nend\nfirst_Digit(1234)",
    "  n.to_s.split('').first.to_i\nend",
    "  while n > 9\n    n /= 10\n  end\n  n\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n = n.to_s\n  n[0]\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  while n > 9\n    n /= 10\n  end\n  n\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend\nputs first_Digit(1234)\nputs first_Digit(123)\nputs first_Digit(12)\nputs first_Digit(1)\nputs first_Digit(0)",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend"
  ]
}