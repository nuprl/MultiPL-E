{
  "name": "mbpp_769_Diff",
  "language": "rb",
  "prompt": "# Write a rbthon function to get the difference between two arrays.\ndef Diff(li1, li2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Diff\n    candidate = method(:Diff)\n    assert_equal([10, 20, 30, 15], candidate.call([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]))\n    assert_equal([2, 3, 4, 5, 6, 7], candidate.call([1, 2, 3, 4, 5], [6, 7, 1]))\n    assert_equal([2, 3, 6, 7], candidate.call([1, 2, 3], [6, 7, 1]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif << i\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif << i\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif << i\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif << i\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "\tli_dif = []\n\tli1.each do |i|\n\t\tif li2.include?(i)\n\t\t\tnext\n\t\telse\n\t\t\tli_dif.push(i)\n\t\tend\n\tend\n\treturn li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li1 - li2\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "    li_dif = []\n    li1.each do |i|\n        if li2.include?(i)\n        else\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if li1.include?(i)\n        else\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "    li_dif = []\n    li1.each do |i|\n        if li2.include?(i)\n        else\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if li1.include?(i)\n        else\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li3 = []\n  li1.each do |i|\n    if !li2.include?(i)\n      li3.push(i)\n    end\n  end\n  li2.each do |i|\n    if !li1.include?(i)\n      li3.push(i)\n    end\n  end\n  return li3\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li3 = li1 - li2\n  return li3\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "    li_dif = []\n    li1.each do |i|\n        if li2.include?(i)\n        else\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if li1.include?(i)\n        else\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li1 - li2\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      li_dif << i\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif << i\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif << i\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "\tli_dif = []\n\tli1.each do |i|\n\t\tif li2.include?(i)\n\t\t\tli_dif.push(i)\n\t\tend\n\tend\n\treturn li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li1 - li2\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if !li2.include?(i)\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if !li1.include?(i)\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      li_dif << i\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li1 - li2\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li1 - li2\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      li_dif.push(i)\n    end\n  end\n  li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li1 - li2\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n      next\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n    else\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if li1.include?(i)\n    else\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if li2.include?(i)\n      li_dif << i\n    end\n  end\n  li_dif\nend"
  ]
}