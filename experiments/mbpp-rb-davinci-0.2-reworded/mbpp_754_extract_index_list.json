{
  "name": "mbpp_754_extract_index_list",
  "language": "rb",
  "prompt": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e[0] : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e.first : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e.first : nil }.compact\nend",
    "  # TODO: return an array of index where the elements are common\n  common_index = []\n  l1.each_with_index do |element, index|\n    if element == l2[index] && element == l3[index]\n      common_index << index\n    end\n  end\n  common_index\nend",
    "  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e.first : nil }.compact\nend",
    "  l1.each_with_index.select { |e, i| l2[i] == e && l3[i] == e }.map(&:first)\nend",
    "  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend",
    "  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend",
    "  l1.zip(l2, l3).map { |x, y, z| x if x == y && y == z }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x.first : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend",
    "  l1.zip(l2, l3).map { |x, y, z| x if x == y && x == z }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x if x.uniq.length == 1 }.compact\nend",
    "  # TODO: return an array of common elements\n  result = []\n  l1.each_with_index do |element, index|\n    if element == l2[index] && element == l3[index]\n      result << element\n    end\n  end\n  return result\nend",
    "  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend",
    "  l1.zip(l2, l3).map { |a, b, c| [a, b, c] if a == b && b == c }.compact\nend",
    "  # TODO: return an array of all indexes where the elements are the same\n  result = []\n  l1.each_with_index do |element, index|\n    result << index if element == l2[index] && element == l3[index]\n  end\n  result\nend",
    "  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend",
    "  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e.first : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |e| e if e.uniq.size == 1 }.compact\nend"
  ]
}