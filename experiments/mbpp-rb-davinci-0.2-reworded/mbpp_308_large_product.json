{
  "name": "mbpp_308_large_product",
  "language": "rb",
  "prompt": "# Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\ndef large_product(nums1, nums2, n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_large_product\n    candidate = method(:large_product)\n    assert_equal([60, 54, 50], candidate.call([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3))\n    assert_equal([60, 54, 50, 48], candidate.call([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4))\n    assert_equal([60, 54, 50, 48, 45], candidate.call([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[n - 1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[n-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[n-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[n - 1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[n - 1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[n - 1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[n-1]\nend",
    "  nums1.sort!\n  nums2.sort!\n  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort[-n..-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[n - 1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort[-n..-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[n - 1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[n-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[n - 1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[n - 1]\nend",
    "  products = []",
    "  nums1.sort!.reverse!\n  nums2.sort!.reverse!\n  result = []\n  i = 0\n  while i < n\n    result << nums1[i] * nums2[i]\n    i += 1\n  end\n  result\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[n - 1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[n - 1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[n - 1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[n - 1]\nend"
  ]
}