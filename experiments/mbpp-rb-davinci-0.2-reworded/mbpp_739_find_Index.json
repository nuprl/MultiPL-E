{
  "name": "mbpp_739_find_Index",
  "language": "rb",
  "prompt": "# Write a rbthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\ndef find_Index(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_Index\n    candidate = method(:find_Index)\n    assert_equal(4, candidate.call(2))\n    assert_equal(14, candidate.call(3))\n    assert_equal(45, candidate.call(4))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  i = 1\n  while true\n    tri = (i * (i + 1)) / 2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == Math.log10(i * (i + 1) / 2).floor + 1\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri = (i*(i+1))/2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while i.to_s.length < n\n    i += j\n    j += 1\n  end\n  j - 1\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 > 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == (i * (i + 1)) / 2\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while true\n    if j.to_s.length == n\n      return i\n    end\n    i += 1\n    j += i\n  end\nend",
    "  i = 1\n  while true\n    x = (i * (i + 1)) / 2\n    if x.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 >= 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while (j.to_s.length < n)\n    i += 1\n    j += i\n  end\n  return i\nend",
    "  i = 1\n  while true\n    tri_num = (i * (i + 1)) / 2\n    if tri_num.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while (i.to_s.length < n)\n    i = i + j\n    j = j + 1\n  end\n  return j\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend"
  ]
}