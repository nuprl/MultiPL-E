{
  "name": "mbpp_739_find_Index",
  "language": "rb",
  "prompt": "# Write a rbthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\ndef find_Index(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_Index\n    candidate = method(:find_Index)\n    assert_equal(4, candidate.call(2))\n    assert_equal(14, candidate.call(3))\n    assert_equal(45, candidate.call(4))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  i = 1\n  while true\n    tri = (i * (i + 1)) / 2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == Math.log10(i * (i + 1) / 2).floor + 1\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri = (i*(i+1))/2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while i.to_s.length < n\n    i += j\n    j += 1\n  end\n  j - 1\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 > 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == (i * (i + 1)) / 2\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while true\n    if j.to_s.length == n\n      return i\n    end\n    i += 1\n    j += i\n  end\nend",
    "  i = 1\n  while true\n    x = (i * (i + 1)) / 2\n    if x.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 >= 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while (j.to_s.length < n)\n    i += 1\n    j += i\n  end\n  return i\nend",
    "  i = 1\n  while true\n    tri_num = (i * (i + 1)) / 2\n    if tri_num.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while (i.to_s.length < n)\n    i = i + j\n    j = j + 1\n  end\n  return j\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri_num = (i * (i + 1)) / 2\n    if tri_num.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while (j.to_s.length < n)\n    i += 1\n    j += i\n  end\n  return i\nend",
    "  i = 1\n  while true\n    tri = (i * (i + 1)) / 2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == (i * (i + 1)) / 2\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 > 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while true\n    if (j.to_s.length == n)\n      return i\n    end\n    i += 1\n    j += i\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while(true)\n    if (triangular_number(i).to_s.length == n)\n      return i\n    end\n    i += 1\n  end\nend",
    "  # initialize index of triangular number\n  index = 1\n  # initialize triangular number\n  triangular_number = 1\n  # find triangular number\n  while triangular_number.to_s.length < n\n    index = index + 1\n    triangular_number = triangular_number + index\n  end\n  # return index\n  return index\nend",
    "  i = 1\n  while true\n    if (n*(n+1)/2).to_s.length == n\n      return i\n    end\n    i += 1\n    n += 1\n  end\nend",
    "  i = 1\n  while true\n    tri_num = (i * (i + 1)) / 2\n    if tri_num.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (n*(n+1))/2.to_s.length == n\n      return i\n    end\n    i += 1\n    n += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri = (i * (i + 1)) / 2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if triangular_number(i).to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri = (i * (i + 1)) / 2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while (j.to_s.length < n)\n    i += 1\n    j += i\n  end\n  return i\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  # Write your code here\n  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    num = (i * (i + 1)) / 2\n    if num.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while (true)\n    if (triangular(i) >= 10 ** (n - 1))\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (n * (n + 1)) / 2.to_s.length == n\n      return i\n    end\n    i += 1\n    n += 1\n  end\nend",
    "  i = 1\n  while true\n    tri_num = (i * (i + 1)) / 2\n    if tri_num.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == Math.log10(i * (i + 1) / 2).floor + 1\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == (i * (i + 1)) / 2\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if Math.sqrt(8*i+1)%1 == 0\n      if (i*(i+1)/2).to_s.length == n\n        return i\n      end\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri_num = (i * (i + 1)) / 2\n    if tri_num.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == (i * (i + 1)) / 2\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri_num = (i * (i + 1)) / 2\n    if tri_num.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "    i = 1\n    while true\n        if (i * (i + 1)) / 2 > 10 ** (n - 1)\n            return i\n        end\n        i += 1\n    end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == (i * (i + 1)) / 2\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while (j.to_s.length < n)\n    i += 1\n    j += i\n  end\n  return i\nend",
    "  i = 1\n  while true\n    t = (i*(i+1))/2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri_num = (i * (i + 1)) / 2\n    if tri_num.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri_num = (i * (i + 1)) / 2\n    if tri_num.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri_num = (i * (i + 1)) / 2\n    if tri_num.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == Math.log10(i * (i + 1) / 2).floor + 1\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 > 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  # Write your code here\n  i = 1\n  while true\n    num = (i * (i + 1)) / 2\n    if num.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    triangle = (i * (i + 1)) / 2\n    if triangle.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while true\n    if j.to_s.length == n\n      return i\n    end\n    i += 1\n    j += i\n  end\nend",
    "  i = 1\n  while true\n    if triangular_number(i).to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri_num = (i * (i + 1)) / 2\n    if tri_num.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == Math.log10(i * (i + 1) / 2).to_i + 1\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri = (i * (i + 1)) / 2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri = (i * (i + 1)) / 2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i = i + 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri_num = (i * (i + 1)) / 2\n    if tri_num.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (n * (n + 1) / 2).to_s.length == n\n      return i\n    end\n    i += 1\n    n += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri = (i * (i + 1)) / 2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    num = (i * (i + 1)) / 2\n    if num.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == Math.log10(i*(i+1)/2).to_i + 1\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri = (i * (i + 1)) / 2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (n * (n + 1) / 2).to_s.length == n\n      return i\n    end\n    i += 1\n    n += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == (i * (i + 1)) / 2\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == (i * (i + 1)) / 2\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while true\n    if j.to_s.length == n\n      return i\n    end\n    i += 1\n    j += i\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while true\n    if j.to_s.length == n\n      return i\n    end\n    i += 1\n    j += i\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if triangular(i).to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i*(i+1))/2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == (i * (i + 1)) / 2\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri_num = (i * (i + 1)) / 2\n    if tri_num.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (n * (n + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri = (i * (i + 1)) / 2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    triangle = i * (i + 1) / 2\n    if triangle.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1) / 2).to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri = (i*(i+1))/2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri_num = (i * (i + 1)) / 2\n    if tri_num.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri = (i * (i + 1)) / 2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (n * (n + 1)) / 2.to_s.length == n\n      return i\n    end\n    i += 1\n    n += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == Math.log10(i * (i + 1) / 2).floor + 1\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri = (i * (i + 1)) / 2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri = (i * (i + 1)) / 2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 > 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri = (i * (i + 1)) / 2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (n * (n + 1)) / 2.to_f > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri = (i * (i + 1)) / 2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    triangle = (i * (i + 1)) / 2\n    if triangle.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while (true)\n    if (triangular_number(i) >= 10**(n-1))\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == Math.log10(i * (i + 1) / 2).floor + 1\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri = (i * (i + 1)) / 2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri = (i * (i + 1)) / 2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while true\n    if j.to_s.length == n\n      return i\n    end\n    i += 1\n    j += i\n  end\nend",
    "  i = 1\n  while (n > 0)\n    n -= Math.log10(i).floor + 1\n    i += 1\n  end\n  return i - 1\nend",
    "  i = 1\n  while true\n    tri = (i * (i + 1)) / 2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while (n > 0)\n    n = n - Math.log10(i).floor + 1\n    i = i + 1\n  end\n  return i - 2\nend",
    "  i = 1\n  j = 1\n  while i.to_s.length < n\n    i = i + j\n    j = j + 1\n  end\n  return j\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while (i.to_s.length < n)\n    i = i + j\n    j = j + 1\n  end\n  return j\nend",
    "  i = 1\n  while true\n    if n == Math.log10(i*(i+1)/2).floor + 1\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 >= 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri = (i * (i + 1)) / 2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri = (i * (i + 1)) / 2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  # Initialize index of triangular number\n  index = 1\n  # Initialize triangular number\n  tri_num = 1\n  # Initialize count of digits in triangular number\n  count = 1\n  # Run loop till n-1\n  while count < n\n    # Increment index by 1\n    index += 1\n    # Add index to triangular number\n    tri_num += index\n    # Increment count by number of digits in tri_num\n    count += tri_num.to_s.length\n  end\n  # Return index\n  index\nend",
    "  i = 1\n  while true\n    triangle = (i * (i + 1)) / 2\n    if triangle.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri_num = (i * (i + 1)) / 2\n    if tri_num.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == Math.log10(i * (i + 1) / 2).to_i + 1\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n_digits(triangular_number(i)) == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while true\n    if j.to_s.length == n\n      return i\n    end\n    i += 1\n    j += i\n  end\nend",
    "  if n == 1\n    return 1\n  end\n  i = 1\n  while true\n    tri = (i * (i + 1)) / 2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  # initialize index\n  index = 1",
    "  if n == 1\n    return 1\n  end\n  i = 1\n  while true\n    tri = (i * (i + 1)) / 2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == Math.log10(i*(i+1)/2).floor + 1\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1) / 2).to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (n*(n+1))/2.to_s.length == n\n      return i\n    end\n    i += 1\n    n += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while (j.to_s.length < n)\n    i += 1\n    j += i\n  end\n  return i\nend",
    "  i = 1\n  while true\n    if n == (i * (i + 1)) / 2\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == (i * (i + 1)) / 2\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri = (i * (i + 1)) / 2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend"
  ]
}