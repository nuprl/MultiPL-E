{
  "name": "mbpp_790_even_position",
  "language": "rb",
  "prompt": "# Write a rbthon function to check whether every even index contains even numbers of a given array.\ndef even_position(nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_790_even_position.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_even_position\n    candidate = method(:even_position)\n    assert_equal(false, candidate.call([3, 2, 1]))\n    assert_equal(false, candidate.call([1, 2, 3]))\n    assert_equal(true, candidate.call([2, 1, 4]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  nums.each_with_index do |num, index|\n    if index.even?\n      if num.even?\n        puts \"#{num} is even\"\n      else\n        puts \"#{num} is odd\"\n      end\n    end\n  end\nend",
    "  nums.each_with_index do |num, index|\n    if index.even?\n      if num.even?\n        puts \"#{num} is even\"\n      else\n        puts \"#{num} is not even\"\n      end\n    end\n  end\nend",
    "  nums.each_with_index do |num, index|\n    if index.even? && num.even?\n      puts \"Even index #{index} contains even number #{num}\"\n    end\n  end\nend",
    "  nums.each_with_index do |num, index|\n    if index.even? && num.odd?\n      return false\n    end\n  end\n  true\nend",
    "  nums.each_with_index do |num, index|\n    if index.even?\n      if num.even?\n        puts \"#{num} is even\"\n      else\n        puts \"#{num} is odd\"\n      end\n    end\n  end\nend",
    "  nums.each_with_index do |num, index|\n    if index.even? && num.even?\n      puts \"Even index #{index} contains even number #{num}\"\n    end\n  end\nend",
    "  nums.each_with_index do |num, index|\n    if index.even? && num.even?\n      puts \"#{num} is even\"\n    end\n  end\nend",
    "  nums.each_with_index do |num, index|\n    if index.even? && num.even?\n      puts \"#{num} is even at index #{index}\"\n    end\n  end\nend",
    "  nums.each_with_index do |n, i|\n    if i.even? && n.odd?\n      return false\n    end\n  end\n  return true\nend",
    "  nums.each_with_index do |num, index|\n    if index.even?\n      if num.even?\n        puts \"#{num} is even\"\n      else\n        puts \"#{num} is odd\"\n      end\n    end\n  end\nend",
    "  nums.each_with_index do |num, index|\n    if index.even?\n      if num.even?\n        puts \"#{num} is even\"\n      else\n        puts \"#{num} is odd\"\n      end\n    end\n  end\nend",
    "  nums.each_with_index do |num, index|\n    if index.even? && num.even?\n      return true\n    else\n      return false\n    end\n  end\nend",
    "  nums.each_with_index do |num, index|\n    if index.even? && num.even?\n      puts \"The number #{num} is even\"\n    end\n  end\nend",
    "  nums.each_with_index do |num, index|\n    if index.even?\n      if num.even?\n        puts \"Even\"\n      else\n        puts \"Odd\"\n      end\n    end\n  end\nend",
    "  nums.each_with_index do |num, index|\n    if index.even? && num.even?\n      puts \"Even index #{index} contains even number #{num}\"\n    end\n  end\nend",
    "  nums.each_with_index do |num, index|\n    if index.even? && num.even?\n      puts \"Even index #{index} contains even number #{num}\"\n    end\n  end\nend",
    "  nums.each_with_index do |num, index|\n    if index.even?\n      return false if num.odd?\n    end\n  end\n  true\nend",
    "  nums.each_with_index do |num, index|\n    if index.even? && num.even?\n      puts \"Even index #{index} contains even number #{num}\"\n    end\n  end\nend",
    "  nums.each_with_index do |num, index|\n    if index.even?\n      if num.even?\n        puts \"#{num} is even\"\n      else\n        puts \"#{num} is odd\"\n      end\n    end\n  end\nend",
    "  nums.each_with_index do |num, index|\n    if index.even?\n      return false if num.odd?\n    end\n  end\n  true\nend"
  ]
}