{
  "name": "mbpp_130_max_occurrences",
  "language": "rb",
  "prompt": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmpapvhmxqg\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpapvhmxqg.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008467434 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n118.10 tests/s, 118.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz8n4ah2d\nStarted\n.\nFinished in 0.00041512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2408.94 tests/s, 7226.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbf1zitqg\nStarted\n.\nFinished in 0.000414367 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2413.32 tests/s, 7239.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  max_count = 0\n  max_item = nil\n  counts = Hash.new(0)\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpid419fpw.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpid419fpw.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each do |num|\n    counts[num] += 1\n  end\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmptn_pdlp6\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmptn_pdlp6.rb:14:in `test_max_occurrences'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_max_occurrences\n     13:     candidate = method(:max_occurrences)\n  => 14:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     15:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     16:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     17:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008360413 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.61 tests/s, 119.61 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyyow913p\nStarted\n.\nFinished in 0.000426624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2343.98 tests/s, 7031.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgj2z4fgp\nStarted\n.\nFinished in 0.00041624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2402.46 tests/s, 7207.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  count = Hash.new(0)\n  nums.each { |num| count[num] += 1 }\n  max_count = count.values.max\n  count.select { |num, c| c == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmpcz2xu23i\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpcz2xu23i.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008438005 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n118.51 tests/s, 118.51 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # Write your code here\n  max_count = 0\n  max_num = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_num = num\n    end\n  end\n  max_num\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqbgw7rms\nStarted\n.\nFinished in 0.000427775 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2337.68 tests/s, 7013.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # create a hash to store the frequency of each item\n  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  # find the max frequency\n  max_freq = freq.values.max\n  # find the items with the max frequency\n  max_freq_items = freq.select { |_, v| v == max_freq }.keys\n  # return the max frequency items\n  max_freq_items\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmp10dva0jt\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmp10dva0jt.rb:17:in `test_max_occurrences'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_max_occurrences\n     16:     candidate = method(:max_occurrences)\n  => 17:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     18:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     19:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     20:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.013067725 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n76.52 tests/s, 76.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # Write your code here\n  hash = Hash.new(0)\n  nums.each do |num|\n    hash[num] += 1\n  end\n  hash.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp05zx8t14\nStarted\n.\nFinished in 0.000415432 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2407.13 tests/s, 7221.40 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.each_with_object(Hash.new(0)) { |num, hash| hash[num] += 1 }.max_by { |k, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxf3942fa\nStarted\n.\nFinished in 0.000416715 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2399.72 tests/s, 7199.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.group_by(&:itself).values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6lj___8\nStarted\n.\nFinished in 0.000535985 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1865.72 tests/s, 5597.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # Write your code here\n  hash = Hash.new(0)\n  nums.each do |num|\n    hash[num] += 1\n  end\n  max = hash.values.max\n  hash.select { |k, v| v == max }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmpf3b3l0a8\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpf3b3l0a8.rb:15:in `test_max_occurrences'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_max_occurrences\n     14:     candidate = method(:max_occurrences)\n  => 15:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     16:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     17:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     18:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008646376 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.66 tests/s, 115.66 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  return nil if nums.empty?\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmp7g_8f5qa.rb:5: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp7g_8f5qa.rb:12: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz8n4ah2d\nStarted\n.\nFinished in 0.00041512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2408.94 tests/s, 7226.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmpa1hpzipy\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpa1hpzipy.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008701918 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.92 tests/s, 114.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.group_by(&:itself).values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6lj___8\nStarted\n.\nFinished in 0.000535985 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1865.72 tests/s, 5597.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.max_by { |num| nums.count(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa1_inoet\nStarted\n.\nFinished in 0.000449804 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2223.19 tests/s, 6669.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  hash = Hash.new(0)\n  nums.each do |num|\n    hash[num] += 1\n  end\n  hash.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi0gni9p_\nStarted\n.\nFinished in 0.000428827 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2331.94 tests/s, 6995.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpghhgdal5\nStarted\n.\nFinished in 0.000438529 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2280.35 tests/s, 6841.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz8n4ah2d\nStarted\n.\nFinished in 0.00041512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2408.94 tests/s, 7226.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # Write your code here\n  hash = Hash.new(0)\n  nums.each do |num|\n    hash[num] += 1\n  end\n  max_occurrences = hash.values.max\n  hash.select { |k, v| v == max_occurrences }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "Loaded suite /tmp/tmp0t2f5whu\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmp0t2f5whu.rb:15:in `test_max_occurrences'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_max_occurrences\n     14:     candidate = method(:max_occurrences)\n  => 15:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     16:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     17:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     18:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008643709 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.69 tests/s, 115.69 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpghhgdal5\nStarted\n.\nFinished in 0.000438529 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2280.35 tests/s, 6841.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  count = Hash.new(0)\n  nums.each { |num| count[num] += 1 }\n  count.max_by { |_, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7n4owjcp\nStarted\n.\nFinished in 0.000450168 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2221.39 tests/s, 6664.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  hash = Hash.new(0)\n  nums.each { |num| hash[num] += 1 }\n  hash.max_by { |_, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0is9783t\nStarted\n.\nFinished in 0.000455578 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2195.01 tests/s, 6585.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # Write your code here\n  max = 0\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max\n      max = count\n    end\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "Loaded suite /tmp/tmpma7oykbi\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpma7oykbi.rb:17:in `test_max_occurrences'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_max_occurrences\n     16:     candidate = method(:max_occurrences)\n  => 17:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     18:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     19:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     20:   end\n<2> expected but was\n<5>\n===============================================================================\n\nFinished in 0.007735052 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.28 tests/s, 129.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  max_freq = freq.values.max\n  freq.select { |k, v| v == max_freq }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "Loaded suite /tmp/tmpkw0okt3x\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpkw0okt3x.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008744443 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgj2z4fgp\nStarted\n.\nFinished in 0.00041624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2402.46 tests/s, 7207.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.each_with_object(Hash.new(0)) { |num, hash| hash[num] += 1 }.max_by { |_, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgmuhw9td\nStarted\n.\nFinished in 0.000439376 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2275.95 tests/s, 6827.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpghhgdal5\nStarted\n.\nFinished in 0.000438529 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2280.35 tests/s, 6841.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "Loaded suite /tmp/tmpk32k6j1a\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpk32k6j1a.rb:9:in `test_max_occurrences'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_max_occurrences\n      8:     candidate = method(:max_occurrences)\n  =>  9:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     10:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     11:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     12:   end\n<2> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008208717 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.82 tests/s, 121.82 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |num, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "Loaded suite /tmp/tmpqymy78jx\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpqymy78jx.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008895887 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n112.41 tests/s, 112.41 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz8n4ah2d\nStarted\n.\nFinished in 0.00041512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2408.94 tests/s, 7226.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmpa1hpzipy\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpa1hpzipy.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008701918 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.92 tests/s, 114.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # Write your code here\n  hash = Hash.new(0)\n  nums.each { |num| hash[num] += 1 }\n  max = hash.values.max\n  hash.select { |k, v| v == max }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "Loaded suite /tmp/tmpvadty39r\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpvadty39r.rb:13:in `test_max_occurrences'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_max_occurrences\n     12:     candidate = method(:max_occurrences)\n  => 13:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     14:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     15:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     16:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008645027 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.67 tests/s, 115.67 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each do |num|\n    counts[num] += 1\n  end\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmptn_pdlp6\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmptn_pdlp6.rb:14:in `test_max_occurrences'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_max_occurrences\n     13:     candidate = method(:max_occurrences)\n  => 14:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     15:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     16:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     17:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008360413 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.61 tests/s, 119.61 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbf1zitqg\nStarted\n.\nFinished in 0.000414367 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2413.32 tests/s, 7239.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # Write your code here\n  max = 0\n  max_num = nil\n  nums.each do |num|\n    if nums.count(num) > max\n      max = nums.count(num)\n      max_num = num\n    end\n  end\n  max_num\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7952vh30\nStarted\n.\nFinished in 0.000494131 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2023.75 tests/s, 6071.26 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  max_freq = freq.values.max\n  freq.select { |_, v| v == max_freq }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "Loaded suite /tmp/tmpdpglxd4i\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpdpglxd4i.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.01358663 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n73.60 tests/s, 73.60 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  freq.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmd0a2lab\nStarted\n.\nFinished in 0.000462113 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2163.97 tests/s, 6491.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmpa1hpzipy\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpa1hpzipy.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008701918 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.92 tests/s, 114.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  max_freq = freq.values.max\n  freq.select { |num, count| count == max_freq }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "Loaded suite /tmp/tmplfvjisid\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmplfvjisid.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008660137 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.47 tests/s, 115.47 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  max_freq = freq.values.max\n  freq.select { |num, count| count == max_freq }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "Loaded suite /tmp/tmplfvjisid\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmplfvjisid.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008660137 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.47 tests/s, 115.47 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyyow913p\nStarted\n.\nFinished in 0.000426624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2343.98 tests/s, 7031.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  max_count = 0\n  max_num = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_num = num\n    end\n  end\n  max_num\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbp_7nq25\nStarted\n.\nFinished in 0.000457608 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2185.28 tests/s, 6555.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, e| h[e] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnb6q1vdb\nStarted\n.\nFinished in 0.000467719 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2138.04 tests/s, 6414.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  max_freq = freq.values.max\n  freq.select { |k, v| v == max_freq }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "Loaded suite /tmp/tmpkw0okt3x\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpkw0okt3x.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008744443 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  max_freq = freq.values.max\n  freq.select { |k, v| v == max_freq }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "Loaded suite /tmp/tmpkw0okt3x\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpkw0okt3x.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008744443 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.max_by { |num| nums.count(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa1_inoet\nStarted\n.\nFinished in 0.000449804 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2223.19 tests/s, 6669.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.each_with_object(Hash.new(0)) { |num, hash| hash[num] += 1 }.max_by { |_, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzlakpo68\nStarted\n.\nFinished in 0.000445211 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2246.13 tests/s, 6738.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  freq.max_by { |k, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsbm75ncl\nStarted\n.\nFinished in 0.000432536 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2311.95 tests/s, 6935.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmpa1hpzipy\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpa1hpzipy.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008701918 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.92 tests/s, 114.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmpa1hpzipy\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpa1hpzipy.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008701918 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.92 tests/s, 114.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.each_with_object(Hash.new(0)) { |num, hash| hash[num] += 1 }.max_by { |_, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzlakpo68\nStarted\n.\nFinished in 0.000445211 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2246.13 tests/s, 6738.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz8n4ah2d\nStarted\n.\nFinished in 0.00041512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2408.94 tests/s, 7226.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.max_by { |_, v| v.size }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd0vd32vd\nStarted\n.\nFinished in 0.000423661 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2360.38 tests/s, 7081.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  max_freq = freq.values.max\n  freq.select { |k, v| v == max_freq }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "Loaded suite /tmp/tmpkw0okt3x\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpkw0okt3x.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008744443 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # Write your code here\n  hash = Hash.new(0)\n  nums.each do |num|\n    hash[num] += 1\n  end\n  max = hash.values.max\n  hash.select { |k, v| v == max }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmpf3b3l0a8\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpf3b3l0a8.rb:15:in `test_max_occurrences'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_max_occurrences\n     14:     candidate = method(:max_occurrences)\n  => 15:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     16:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     17:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     18:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008646376 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.66 tests/s, 115.66 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmpa1hpzipy\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpa1hpzipy.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008701918 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.92 tests/s, 114.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyyow913p\nStarted\n.\nFinished in 0.000426624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2343.98 tests/s, 7031.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each do |num|\n    counts[num] += 1\n  end\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmptn_pdlp6\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmptn_pdlp6.rb:14:in `test_max_occurrences'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_max_occurrences\n     13:     candidate = method(:max_occurrences)\n  => 14:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     15:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     16:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     17:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008360413 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.61 tests/s, 119.61 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # Write your code here\n  hash = Hash.new(0)\n  nums.each do |num|\n    hash[num] += 1\n  end\n  max_value = hash.values.max\n  hash.key(max_value)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzvrd0on6\nStarted\n.\nFinished in 0.000827833 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1207.97 tests/s, 3623.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  hash = Hash.new(0)\n  nums.each { |num| hash[num] += 1 }\n  hash.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmjzx6m1q\nStarted\n.\nFinished in 0.000452752 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2208.71 tests/s, 6626.14 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppkgma4dk\nStarted\n.\nFinished in 0.000427595 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2338.66 tests/s, 7015.98 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each do |num|\n    counts[num] += 1\n  end\n  counts.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6me681st\nStarted\n.\nFinished in 0.000423292 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2362.44 tests/s, 7087.31 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgj2z4fgp\nStarted\n.\nFinished in 0.00041624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2402.46 tests/s, 7207.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgj2z4fgp\nStarted\n.\nFinished in 0.00041624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2402.46 tests/s, 7207.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpghhgdal5\nStarted\n.\nFinished in 0.000438529 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2280.35 tests/s, 6841.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgj2z4fgp\nStarted\n.\nFinished in 0.00041624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2402.46 tests/s, 7207.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # Write your code here\n  hash = Hash.new(0)\n  nums.each do |num|\n    hash[num] += 1\n  end\n  max = hash.values.max\n  hash.select { |k, v| v == max }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmpf3b3l0a8\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpf3b3l0a8.rb:15:in `test_max_occurrences'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_max_occurrences\n     14:     candidate = method(:max_occurrences)\n  => 15:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     16:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     17:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     18:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008646376 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.66 tests/s, 115.66 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, e| h[e] += 1; h }.max_by { |k, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmparkc713b\nStarted\n.\nFinished in 0.000460577 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2171.19 tests/s, 6513.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmpa1hpzipy\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpa1hpzipy.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008701918 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.92 tests/s, 114.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmpapvhmxqg\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpapvhmxqg.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008467434 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n118.10 tests/s, 118.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  count = Hash.new(0)\n  nums.each do |num|\n    count[num] += 1\n  end\n  count.max_by { |k, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7jt60rcr\nStarted\n.\nFinished in 0.00048197 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2074.82 tests/s, 6224.45 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |num, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "Loaded suite /tmp/tmpqymy78jx\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpqymy78jx.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008895887 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n112.41 tests/s, 112.41 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  hash = Hash.new(0)\n  nums.each { |num| hash[num] += 1 }\n  max = hash.values.max\n  hash.select { |k, v| v == max }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "Loaded suite /tmp/tmpxbc0hspq\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpxbc0hspq.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.006921814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.47 tests/s, 144.47 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |num, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "Loaded suite /tmp/tmpqymy78jx\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpqymy78jx.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008895887 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n112.41 tests/s, 112.41 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |num, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "Loaded suite /tmp/tmpqymy78jx\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpqymy78jx.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008895887 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n112.41 tests/s, 112.41 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz8n4ah2d\nStarted\n.\nFinished in 0.00041512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2408.94 tests/s, 7226.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbf1zitqg\nStarted\n.\nFinished in 0.000414367 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2413.32 tests/s, 7239.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpghhgdal5\nStarted\n.\nFinished in 0.000438529 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2280.35 tests/s, 6841.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.group_by(&:itself).values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6lj___8\nStarted\n.\nFinished in 0.000535985 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1865.72 tests/s, 5597.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz8n4ah2d\nStarted\n.\nFinished in 0.00041512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2408.94 tests/s, 7226.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpghhgdal5\nStarted\n.\nFinished in 0.000438529 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2280.35 tests/s, 6841.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # create a hash\n  # iterate through the array\n  # if the element is not in the hash, add it\n  # if the element is in the hash, increment the value\n  # find the max value in the hash\n  # return the key with the max value\n  hash = Hash.new(0)\n  nums.each do |num|\n    hash[num] += 1\n  end\n  max_value = hash.values.max\n  hash.key(max_value)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpm1mco60d\nStarted\n.\nFinished in 0.000694935 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1438.98 tests/s, 4316.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # Write your code here\n  hash = Hash.new(0)\n  nums.each do |num|\n    hash[num] += 1\n  end\n  hash.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp05zx8t14\nStarted\n.\nFinished in 0.000415432 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2407.13 tests/s, 7221.40 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbf1zitqg\nStarted\n.\nFinished in 0.000414367 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2413.32 tests/s, 7239.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmpa1hpzipy\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpa1hpzipy.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008701918 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.92 tests/s, 114.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  hash = {}\n  nums.each do |num|\n    if hash[num]\n      hash[num] += 1\n    else\n      hash[num] = 1\n    end\n  end\n  max = hash.values.max\n  hash.select { |k, v| v == max }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "Loaded suite /tmp/tmpo9rkav59\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpo9rkav59.rb:18:in `test_max_occurrences'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_max_occurrences\n     17:     candidate = method(:max_occurrences)\n  => 18:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     19:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     20:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     21:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.007231868 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.28 tests/s, 138.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmpa1hpzipy\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpa1hpzipy.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008701918 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.92 tests/s, 114.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmpapvhmxqg\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpapvhmxqg.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008467434 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n118.10 tests/s, 118.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  hash = Hash.new(0)\n  nums.each do |num|\n    hash[num] += 1\n  end\n  hash.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi0gni9p_\nStarted\n.\nFinished in 0.000428827 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2331.94 tests/s, 6995.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.max_by { |num| nums.count(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa1_inoet\nStarted\n.\nFinished in 0.000449804 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2223.19 tests/s, 6669.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpghhgdal5\nStarted\n.\nFinished in 0.000438529 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2280.35 tests/s, 6841.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # Write your code here\n  max = 0\n  nums.each do |num|\n    if nums.count(num) > max\n      max = nums.count(num)\n    end\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "Loaded suite /tmp/tmp2n63hazp\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmp2n63hazp.rb:16:in `test_max_occurrences'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_occurrences\n     15:     candidate = method(:max_occurrences)\n  => 16:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     17:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     18:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     19:   end\n<2> expected but was\n<5>\n===============================================================================\n\nFinished in 0.006942755 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.04 tests/s, 144.04 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  max_freq = freq.values.max\n  freq.select { |num, count| count == max_freq }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "Loaded suite /tmp/tmplfvjisid\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmplfvjisid.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008660137 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.47 tests/s, 115.47 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each do |num|\n    counts[num] += 1\n  end\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmptn_pdlp6\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmptn_pdlp6.rb:14:in `test_max_occurrences'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_max_occurrences\n     13:     candidate = method(:max_occurrences)\n  => 14:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     15:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     16:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     17:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008360413 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.61 tests/s, 119.61 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  max_freq = freq.values.max\n  freq.select { |k, v| v == max_freq }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "Loaded suite /tmp/tmpkw0okt3x\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpkw0okt3x.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008744443 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_num = nums.first\n  max_count = counts[max_num]\n  counts.each do |num, count|\n    if count > max_count\n      max_num = num\n      max_count = count\n    end\n  end\n  max_num\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc_1a8ey_\nStarted\n.\nFinished in 0.000490466 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2038.88 tests/s, 6116.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.group_by{|x| x}.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp17h29zxl\nStarted\n.\nFinished in 0.000461583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2166.46 tests/s, 6499.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # Write your code here\n  max_count = 0\n  max_item = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_item = num\n    end\n  end\n  max_item\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjzwl2_qa\nStarted\n.\nFinished in 0.000516304 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1936.84 tests/s, 5810.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmpa1hpzipy\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpa1hpzipy.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008701918 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.92 tests/s, 114.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz8n4ah2d\nStarted\n.\nFinished in 0.00041512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2408.94 tests/s, 7226.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.group_by(&:itself).values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6lj___8\nStarted\n.\nFinished in 0.000535985 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1865.72 tests/s, 5597.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz8n4ah2d\nStarted\n.\nFinished in 0.00041512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2408.94 tests/s, 7226.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each do |num|\n    counts[num] += 1\n  end\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmptn_pdlp6\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmptn_pdlp6.rb:14:in `test_max_occurrences'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_max_occurrences\n     13:     candidate = method(:max_occurrences)\n  => 14:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     15:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     16:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     17:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008360413 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.61 tests/s, 119.61 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.max_by { |num| nums.count(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa1_inoet\nStarted\n.\nFinished in 0.000449804 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2223.19 tests/s, 6669.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each do |num|\n    counts[num] += 1\n  end\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmptn_pdlp6\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmptn_pdlp6.rb:14:in `test_max_occurrences'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_max_occurrences\n     13:     candidate = method(:max_occurrences)\n  => 14:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     15:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     16:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     17:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008360413 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.61 tests/s, 119.61 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbf1zitqg\nStarted\n.\nFinished in 0.000414367 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2413.32 tests/s, 7239.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  max_count = 0\n  max_item = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_item = num\n    end\n  end\n  max_item\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7q4915x5\nStarted\n.\nFinished in 0.001002365 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n997.64 tests/s, 2992.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # create a hash to store the frequency of each item\n  # iterate through the array and add each item to the hash\n  # if the item is already in the hash, increment its value by 1\n  # if the item is not in the hash, add it to the hash and set its value to 1\n  # create a variable to store the max value\n  # iterate through the hash and compare each value to the max value\n  # if the value is greater than the max value, set the max value to that value\n  # return the max value\n  frequency = Hash.new(0)\n  nums.each { |num| frequency[num] += 1 }\n  max = 0\n  frequency.each_value { |value| max = value if value > max }\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "Loaded suite /tmp/tmp5ijs7xlt\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmp5ijs7xlt.rb:21:in `test_max_occurrences'\n     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_max_occurrences\n     20:     candidate = method(:max_occurrences)\n  => 21:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     22:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     23:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     24:   end\n<2> expected but was\n<5>\n===============================================================================\n\nFinished in 0.007029203 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.26 tests/s, 142.26 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # Write your code here\n  max_count = 0\n  max_num = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_num = num\n    end\n  end\n  max_num\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqbgw7rms\nStarted\n.\nFinished in 0.000427775 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2337.68 tests/s, 7013.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each do |num|\n    counts[num] += 1\n  end\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmptn_pdlp6\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmptn_pdlp6.rb:14:in `test_max_occurrences'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_max_occurrences\n     13:     candidate = method(:max_occurrences)\n  => 14:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     15:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     16:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     17:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008360413 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.61 tests/s, 119.61 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # create a hash to store the frequency of each number\n  freq = Hash.new(0)\n  # iterate through the array, incrementing the frequency of each number\n  nums.each { |num| freq[num] += 1 }\n  # find the maximum frequency\n  max = freq.values.max\n  # return the number(s) that occur with the maximum frequency\n  freq.select { |num, count| count == max }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "Loaded suite /tmp/tmphu6kngm0\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmphu6kngm0.rb:16:in `test_max_occurrences'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_occurrences\n     15:     candidate = method(:max_occurrences)\n  => 16:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     17:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     18:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     19:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.007208828 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.72 tests/s, 138.72 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # Write your code here\n  hash = Hash.new(0)\n  nums.each do |num|\n    hash[num] += 1\n  end\n  hash.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp05zx8t14\nStarted\n.\nFinished in 0.000415432 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2407.13 tests/s, 7221.40 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz8n4ah2d\nStarted\n.\nFinished in 0.00041512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2408.94 tests/s, 7226.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.group_by{|x| x}.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp17h29zxl\nStarted\n.\nFinished in 0.000461583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2166.46 tests/s, 6499.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  freq.key(freq.values.max)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbetyaqad\nStarted\n.\nFinished in 0.000511291 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1955.83 tests/s, 5867.50 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.max_by { |num| nums.count(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa1_inoet\nStarted\n.\nFinished in 0.000449804 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2223.19 tests/s, 6669.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  hash = Hash.new(0)\n  nums.each do |num|\n    hash[num] += 1\n  end\n  hash.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi0gni9p_\nStarted\n.\nFinished in 0.000428827 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2331.94 tests/s, 6995.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgj2z4fgp\nStarted\n.\nFinished in 0.00041624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2402.46 tests/s, 7207.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.group_by(&:itself).values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6lj___8\nStarted\n.\nFinished in 0.000535985 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1865.72 tests/s, 5597.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz8n4ah2d\nStarted\n.\nFinished in 0.00041512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2408.94 tests/s, 7226.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.max_by { |num| nums.count(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa1_inoet\nStarted\n.\nFinished in 0.000449804 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2223.19 tests/s, 6669.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyyow913p\nStarted\n.\nFinished in 0.000426624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2343.98 tests/s, 7031.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # write your code here\n  nums.inject(Hash.new(0)) { |hash, num| hash[num] += 1; hash }.max_by { |k, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnpvq4zcu\nStarted\n.\nFinished in 0.000499622 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2001.51 tests/s, 6004.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  count = Hash.new(0)\n  nums.each { |num| count[num] += 1 }\n  max_key = count.max_by { |k, v| v }[0]\n  max_key\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4v2m3acj\nStarted\n.\nFinished in 0.00047216 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2117.93 tests/s, 6353.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # Write your code here\n  max_count = 0\n  max_item = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_item = num\n    end\n  end\n  max_item\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjzwl2_qa\nStarted\n.\nFinished in 0.000516304 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1936.84 tests/s, 5810.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each do |num|\n    counts[num] += 1\n  end\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmptn_pdlp6\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmptn_pdlp6.rb:14:in `test_max_occurrences'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_max_occurrences\n     13:     candidate = method(:max_occurrences)\n  => 14:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     15:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     16:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     17:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008360413 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.61 tests/s, 119.61 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # write your code here\n  hash = {}\n  nums.each do |num|\n    hash[num] = nums.count(num)\n  end\n  hash.max_by{|k,v| v}[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwqa6h39w\nStarted\n.\nFinished in 0.000485284 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2060.65 tests/s, 6181.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz8n4ah2d\nStarted\n.\nFinished in 0.00041512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2408.94 tests/s, 7226.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz8n4ah2d\nStarted\n.\nFinished in 0.00041512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2408.94 tests/s, 7226.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz8n4ah2d\nStarted\n.\nFinished in 0.00041512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2408.94 tests/s, 7226.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmpa1hpzipy\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpa1hpzipy.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008701918 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.92 tests/s, 114.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, e| h[e] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnb6q1vdb\nStarted\n.\nFinished in 0.000467719 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2138.04 tests/s, 6414.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.each_with_object(Hash.new(0)) { |num, hash| hash[num] += 1 }.max_by { |_, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzlakpo68\nStarted\n.\nFinished in 0.000445211 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2246.13 tests/s, 6738.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  hash = Hash.new(0)\n  nums.each { |num| hash[num] += 1 }\n  hash.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmjzx6m1q\nStarted\n.\nFinished in 0.000452752 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2208.71 tests/s, 6626.14 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # Write your code here\n  hash = Hash.new(0)\n  nums.each do |num|\n    hash[num] += 1\n  end\n  max_value = hash.values.max\n  hash.select { |k, v| v == max_value }.keys.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpaz7pit81\nStarted\n.\nFinished in 0.000863444 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1158.15 tests/s, 3474.46 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz8n4ah2d\nStarted\n.\nFinished in 0.00041512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2408.94 tests/s, 7226.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # Write your code here\n  max = 0\n  nums.each do |num|\n    if nums.count(num) > max\n      max = nums.count(num)\n    end\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "Loaded suite /tmp/tmp2n63hazp\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmp2n63hazp.rb:16:in `test_max_occurrences'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_occurrences\n     15:     candidate = method(:max_occurrences)\n  => 16:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     17:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     18:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     19:   end\n<2> expected but was\n<5>\n===============================================================================\n\nFinished in 0.006942755 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.04 tests/s, 144.04 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.group_by(&:itself).values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6lj___8\nStarted\n.\nFinished in 0.000535985 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1865.72 tests/s, 5597.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmpa1hpzipy\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpa1hpzipy.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008701918 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.92 tests/s, 114.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # Write your code here\n  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  freq.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkxyp5q0j\nStarted\n.\nFinished in 0.000520637 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1920.72 tests/s, 5762.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each do |num|\n    counts[num] += 1\n  end\n  counts.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6me681st\nStarted\n.\nFinished in 0.000423292 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2362.44 tests/s, 7087.31 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each do |num|\n    counts[num] += 1\n  end\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmptn_pdlp6\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmptn_pdlp6.rb:14:in `test_max_occurrences'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_max_occurrences\n     13:     candidate = method(:max_occurrences)\n  => 14:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     15:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     16:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     17:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008360413 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.61 tests/s, 119.61 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  max_freq = freq.values.max\n  freq.select { |k, v| v == max_freq }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "Loaded suite /tmp/tmpkw0okt3x\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpkw0okt3x.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008744443 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.36 tests/s, 114.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # Write your code here\n  max_count = 0\n  max_num = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_num = num\n    end\n  end\n  max_num\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqbgw7rms\nStarted\n.\nFinished in 0.000427775 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2337.68 tests/s, 7013.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, e| h[e] += 1; h }.max_by { |k, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmparkc713b\nStarted\n.\nFinished in 0.000460577 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2171.19 tests/s, 6513.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.max_by { |num| nums.count(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa1_inoet\nStarted\n.\nFinished in 0.000449804 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2223.19 tests/s, 6669.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # Write your code here\n  hash = Hash.new(0)\n  nums.each do |num|\n    hash[num] += 1\n  end\n  hash.max_by{|k,v| v}[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplhk2vjxx\nStarted\n.\nFinished in 0.000477773 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2093.04 tests/s, 6279.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # Write your code here\n  hash = Hash.new(0)\n  nums.each do |num|\n    hash[num] += 1\n  end\n  max = hash.values.max\n  hash.select { |k, v| v == max }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmpf3b3l0a8\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpf3b3l0a8.rb:15:in `test_max_occurrences'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_max_occurrences\n     14:     candidate = method(:max_occurrences)\n  => 15:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     16:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     17:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     18:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008646376 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.66 tests/s, 115.66 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdh_ryj7j\nStarted\n.\nFinished in 0.000660462 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1514.09 tests/s, 4542.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.max_by { |num| nums.count(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa1_inoet\nStarted\n.\nFinished in 0.000449804 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2223.19 tests/s, 6669.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # Write your code here\n  nums.max_by { |num| nums.count(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxi7wsw7h\nStarted\n.\nFinished in 0.000522167 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1915.10 tests/s, 5745.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmpa1hpzipy\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpa1hpzipy.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008701918 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.92 tests/s, 114.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbf1zitqg\nStarted\n.\nFinished in 0.000414367 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2413.32 tests/s, 7239.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  freq.max_by { |_, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxro3aojb\nStarted\n.\nFinished in 0.000703526 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1421.41 tests/s, 4264.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmpa1hpzipy\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpa1hpzipy.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008701918 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.92 tests/s, 114.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpghhgdal5\nStarted\n.\nFinished in 0.000438529 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2280.35 tests/s, 6841.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # create a hash to store the frequency of each number\n  freq = Hash.new(0)\n  # iterate through the array and increment the frequency of each number\n  nums.each { |num| freq[num] += 1 }\n  # find the number with the highest frequency\n  max_freq = freq.values.max\n  # return the number with the highest frequency\n  freq.key(max_freq)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5p8cddzk\nStarted\n.\nFinished in 0.000497735 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2009.10 tests/s, 6027.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # Write your code here\n  max = 0\n  max_num = nil\n  nums.each do |num|\n    if nums.count(num) > max\n      max = nums.count(num)\n      max_num = num\n    end\n  end\n  max_num\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7952vh30\nStarted\n.\nFinished in 0.000494131 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2023.75 tests/s, 6071.26 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, e| h[e] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnb6q1vdb\nStarted\n.\nFinished in 0.000467719 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2138.04 tests/s, 6414.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.group_by(&:itself).values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6lj___8\nStarted\n.\nFinished in 0.000535985 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1865.72 tests/s, 5597.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # Write your code here\n  max_count = 0\n  max_num = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_num = num\n    end\n  end\n  max_num\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqbgw7rms\nStarted\n.\nFinished in 0.000427775 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2337.68 tests/s, 7013.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.max_by { |num| nums.count(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa1_inoet\nStarted\n.\nFinished in 0.000449804 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2223.19 tests/s, 6669.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  max_count = 0\n  max_num = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_num = num\n    end\n  end\n  max_num\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbp_7nq25\nStarted\n.\nFinished in 0.000457608 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2185.28 tests/s, 6555.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgj2z4fgp\nStarted\n.\nFinished in 0.00041624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2402.46 tests/s, 7207.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # create a hash to store the number of occurrences of each number\n  occurrences = Hash.new(0)\n  nums.each do |num|\n    occurrences[num] += 1\n  end\n  # find the number with the highest number of occurrences\n  max_occurrences = occurrences.values.max\n  # return the number with the highest number of occurrences\n  occurrences.key(max_occurrences)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpm4moik2z\nStarted\n.\nFinished in 0.000422253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.25 tests/s, 7104.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz8n4ah2d\nStarted\n.\nFinished in 0.00041512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2408.94 tests/s, 7226.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.each_with_object(Hash.new(0)) { |num, hash| hash[num] += 1 }.max_by { |_, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzlakpo68\nStarted\n.\nFinished in 0.000445211 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2246.13 tests/s, 6738.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmpa1hpzipy\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpa1hpzipy.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008701918 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.92 tests/s, 114.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdh_ryj7j\nStarted\n.\nFinished in 0.000660462 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1514.09 tests/s, 4542.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, n| h[n] += 1; h }.max_by { |k, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjtmsqyvk\nStarted\n.\nFinished in 0.000416529 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2400.79 tests/s, 7202.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # write your code here\n  max = 0\n  nums.each do |num|\n    max = num if nums.count(num) > max\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122596,
      "stdout": "Loaded suite /tmp/tmp_fur3ip_\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmp_fur3ip_.rb:14:in `test_max_occurrences'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_max_occurrences\n     13:     candidate = method(:max_occurrences)\n  => 14:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     15:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     16:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     17:   end\n<2> expected but was\n<6>\n===============================================================================\n\nFinished in 0.006532503 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.08 tests/s, 153.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmpapvhmxqg\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpapvhmxqg.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008467434 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n118.10 tests/s, 118.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz8n4ah2d\nStarted\n.\nFinished in 0.00041512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2408.94 tests/s, 7226.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # Write your code here\n  h = Hash.new(0)\n  nums.each do |num|\n    h[num] += 1\n  end\n  max = h.values.max\n  h.select { |k, v| v == max }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122596,
      "stdout": "Loaded suite /tmp/tmplfymcxrb\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmplfymcxrb.rb:15:in `test_max_occurrences'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_max_occurrences\n     14:     candidate = method(:max_occurrences)\n  => 15:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     16:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     17:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     18:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.006411968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n155.96 tests/s, 155.96 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # write your code here\n  hash = Hash.new(0)\n  nums.each do |num|\n    hash[num] += 1\n  end\n  max = hash.values.max\n  hash.select { |k, v| v == max }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122596,
      "stdout": "Loaded suite /tmp/tmp4w7ac7wq\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmp4w7ac7wq.rb:15:in `test_max_occurrences'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_max_occurrences\n     14:     candidate = method(:max_occurrences)\n  => 15:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     16:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     17:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     18:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.006166899 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n162.16 tests/s, 162.16 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmpa1hpzipy\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpa1hpzipy.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008701918 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.92 tests/s, 114.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |num, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "Loaded suite /tmp/tmpqymy78jx\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpqymy78jx.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008895887 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n112.41 tests/s, 112.41 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, e| h[e] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnb6q1vdb\nStarted\n.\nFinished in 0.000467719 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2138.04 tests/s, 6414.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # write your code here\n  count = Hash.new(0)\n  nums.each do |num|\n    count[num] += 1\n  end\n  max_value = count.values.max\n  count.select { |k, v| v == max_value }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122596,
      "stdout": "Loaded suite /tmp/tmpaw9qbu7w\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpaw9qbu7w.rb:15:in `test_max_occurrences'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_max_occurrences\n     14:     candidate = method(:max_occurrences)\n  => 15:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     16:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     17:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     18:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.006297974 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n158.78 tests/s, 158.78 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmpapvhmxqg\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpapvhmxqg.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008467434 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n118.10 tests/s, 118.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbf1zitqg\nStarted\n.\nFinished in 0.000414367 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2413.32 tests/s, 7239.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  max = freq.values.max\n  freq.select { |k, v| v == max }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122596,
      "stdout": "Loaded suite /tmp/tmpzj13ozmm\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpzj13ozmm.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.006428473 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n155.56 tests/s, 155.56 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) {|h,v| h[v] += 1; h}.max_by{|k,v| v}[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpscyxdpec\nStarted\n.\nFinished in 0.000773119 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1293.46 tests/s, 3880.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  max_key = freq.max_by { |k, v| v }[0]\n  max_val = freq.max_by { |k, v| v }[1]\n  [max_key, max_val]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122596,
      "stdout": "Loaded suite /tmp/tmpsztclk1m\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpsztclk1m.rb:13:in `test_max_occurrences'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_max_occurrences\n     12:     candidate = method(:max_occurrences)\n  => 13:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     14:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     15:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     16:   end\n<2> expected but was\n<[2, 5]>\n\ndiff:\n? [2, 5]\n===============================================================================\n\nFinished in 0.014108116 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n70.88 tests/s, 70.88 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each do |num|\n    counts[num] += 1\n  end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "/tmp/tmpqo_3swez.rb:8: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpqo_3swez.rb:15: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each do |num|\n    counts[num] += 1\n  end\n  counts.max_by { |k, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpod8x_98n\nStarted\n.\nFinished in 0.000410226 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2437.68 tests/s, 7313.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, e| h[e] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnb6q1vdb\nStarted\n.\nFinished in 0.000467719 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2138.04 tests/s, 6414.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbf1zitqg\nStarted\n.\nFinished in 0.000414367 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2413.32 tests/s, 7239.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpghhgdal5\nStarted\n.\nFinished in 0.000438529 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2280.35 tests/s, 6841.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  # Write your code here\n  nums.group_by(&:itself).values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxy9ozt7q\nStarted\n.\nFinished in 0.000827093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1209.05 tests/s, 3627.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplii99_tr\nStarted\n.\nFinished in 0.000384608 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2600.05 tests/s, 7800.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpghhgdal5\nStarted\n.\nFinished in 0.000438529 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2280.35 tests/s, 6841.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmpapvhmxqg\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpapvhmxqg.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008467434 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n118.10 tests/s, 118.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgj2z4fgp\nStarted\n.\nFinished in 0.00041624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2402.46 tests/s, 7207.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517254,
      "stdout": "Loaded suite /tmp/tmpapvhmxqg\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpapvhmxqg.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008467434 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n118.10 tests/s, 118.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n  count = Hash.new(0)\n  nums.each { |num| count[num] += 1 }\n  count.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxml_8_2g\nStarted\n.\nFinished in 0.000410142 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2438.18 tests/s, 7314.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}