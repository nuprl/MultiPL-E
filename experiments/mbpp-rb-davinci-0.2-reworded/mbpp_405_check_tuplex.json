{
  "name": "mbpp_405_check_tuplex",
  "language": "rb",
  "prompt": "# Write a function to check whether an element exists within an array.\ndef check_tuplex(tuplex, tuple1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_405_check_tuplex.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_tuplex\n    candidate = method(:check_tuplex)\n    assert_equal(true, candidate.call([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"r\"))\n    assert_equal(false, candidate.call([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"5\"))\n    assert_equal(true, candidate.call([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], 3))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  puts tuplex.include?(tuple1)\nend",
    "    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False",
    "  if tuplex.include?(tuple1)\n    puts \"Tuple exists in list.\"\n  else\n    puts \"Tuple does not exist in list.\"\n  end\nend",
    "    if tuple1 in tuplex:\n        print(\"Exists\")\n    else:\n        print(\"Doesn't exist\")",
    "  if tuplex.include?(tuple1)\n    puts \"Tuple exists in list.\"\n  else\n    puts \"Tuple does not exist in list.\"\n  end\nend",
    "  if tuplex.include?(tuple1)\n    puts \"Tuple exists in list.\"\n  else\n    puts \"Tuple does not exist in list.\"\n  end\nend\ntuplex = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntuple1 = [1, 2]\ncheck_tuplex(tuplex, tuple1)",
    "    for i in tuplex\n        if i == tuple1\n            return True\n        end\n    end\n    return False\nend\ntuplex = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\ntuple1 = (1, 2, 3)\nprint(check_tuplex(tuplex, tuple1))",
    "    if tuple1 in tuplex:\n        return True\n    else:\n        return False",
    "    if tuplex.include?(tuple1)\n        puts \"Tuple exists in list.\"\n    else\n        puts \"Tuple does not exist in list.\"\n    end\nend\ntuplex = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntuple1 = [1, 2, 3]\ncheck_tuplex(tuplex, tuple1)",
    "    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False",
    "    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False",
    "  if tuplex.include?(tuple1)\n    puts \"Tuple exists in list.\"\n  else\n    puts \"Tuple does not exist in list.\"\n  end\nend\ntuplex = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntuple1 = [1, 2, 3]\ncheck_tuplex(tuplex, tuple1)",
    "    if tuplex.include?(tuple1)\n        puts \"Tuple exists in the list\"\n    else\n        puts \"Tuple does not exist in the list\"\n    end\nend\ntuplex = [(1,2,3), (4,5), (6,7,8)]\ntuple1 = (4,5)\ncheck_tuplex(tuplex, tuple1)",
    "  if tuplex.include?(tuple1)\n    puts \"Tuple exists in list.\"\n  else\n    puts \"Tuple does not exist in list.\"\n  end\nend",
    "    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False",
    "    if tuple1 in tuplex:\n        print(\"True\")\n    else:\n        print(\"False\")",
    "    if tuplex.include?(tuple1)\n        puts \"Tuple exists in the list\"\n    else\n        puts \"Tuple does not exist in the list\"\n    end\nend\ntuplex = [(1,2,3), (4,5), (6,7,8)]\ntuple1 = (4,5)\ncheck_tuplex(tuplex, tuple1)",
    "  puts tuplex.include?(tuple1)\nend",
    "    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False",
    "    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False"
  ]
}