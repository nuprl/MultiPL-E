{
  "name": "mbpp_279_is_num_decagonal",
  "language": "rb",
  "prompt": "# Write a function to find the nth decagonal number.\ndef is_num_decagonal(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_num_decagonal\n    candidate = method(:is_num_decagonal)\n    assert_equal(27, candidate.call(3))\n    assert_equal(175, candidate.call(7))\n    assert_equal(370, candidate.call(10))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  nth_decagonal = n * (3 * n - 2)\n  nth_decagonal\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  nth_decagonal = (3 * n * n - n) / 2\n  return nth_decagonal\nend",
    "  nth_decagonal = (Math.sqrt(1 + 4 * 2 * n) - 1) / 2\n  nth_decagonal == nth_decagonal.to_i\nend",
    "  nth_decagonal = n * (3 * n - 2)\n  nth_decagonal\nend",
    "  nth_decagonal_number(n) == n\nend",
    "  return false if n <= 0\n  return true if n == 1\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  # n = (3 * n^2 - n) / 2\n  # n^2 - 3n + 2n = 0\n  # n(n - 3) + 2(n - 3) = 0\n  # (n + 2)(n - 3) = 0\n  # n = -2 or n = 3\n  # n = -2 is not a positive integer\n  # n = 3 is the first decagonal number\n  # n = 3 + 10k\n  # n = 3 + 10k\n  # 3 + 10k = (3 * n^2 - n) / 2\n  # 6 + 20k = 3n^2 - n\n  # 3n^2 - n - 6 - 20k = 0\n  # n = (3 + sqrt(9 + 24k)) / 6\n  # n = (3 + sqrt(9 + 24k)) / 6\n  # n = (3 + sqrt(9 + 24k)) / 6\n  # n = (3 + sqrt(9 + 24k)) / 6\n  # n = (3 + sqrt(9 + 24k)) / 6\n  # n = (3 + sqrt(9 + 24k)) / 6\n  # n = (3 + sqrt(9 + 24k)) / 6\n  # n = (3 + sqrt(9 + 24k)) / 6\n  # n = (3 + sqrt(9 + 24k)) / 6\n  # n = (3 + sqrt(9 + 24k)) / 6\n  # n = (3 + sqrt(9 + 24k)) / 6\n  # n = (3 + sqrt(9 + 24k)) / 6\n  # n = (3 + sqrt(9 + 24k)) / 6\n  # n = (3 + sqrt(9 + 24k)) / 6\n  # n = (3 + sqrt(9 + 24k)) / 6\n  # n = (3 + sqrt(9 + 24k)) / 6\n  # n = (3 + sqrt(9 + 24k)) / 6\n  # n = (3 + sqrt(9 + 24k)) / 6\n  # n = (3 + sqrt(9 + 24k)) / 6\n  # n = (",
    "  return false if n <= 0\n  return true if n == 1\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  nth_decagonal = 0\n  i = 1\n  while nth_decagonal < n\n    nth_decagonal = i * (3 * i - 1) / 2\n    i += 1\n  end\n  nth_decagonal == n\nend",
    "  # n = (3x^2 - x) / 2\n  # 3x^2 - x - 2n = 0\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n",
    "  nth_decagonal = (3 * n * n - n) / 2\n  return nth_decagonal\nend",
    "  nth_decagonal_number(n) == n\nend",
    "  # n = (3 * n^2 - n) / 2\n  # 3n^2 - n - 2n = 0\n  # n = (1 +- sqrt(1 + 12 * 2)) / 6\n  # n = (1 +- sqrt(25)) / 6\n  # n = (1 + 5) / 6\n  # n = 6 / 6\n  # n = 1\n  # n = (1 - 5) / 6\n  # n = -4 / 6\n  # n = -2 / 3\n  # n = -0.66666...\n  # n = -1 / 3\n  # n = -0.333333...\n  # n = -1 / 3\n  # n = -0.333333...\n  # n = -1 / 3\n  # n = -0.333333...\n  # n = -1 / 3\n  # n = -0.333333...\n  # n = -1 / 3\n  # n = -0.333333...\n  # n = -1 / 3\n  # n = -0.333333...\n  # n = -1 / 3\n  # n = -0.333333...\n  # n = -1 / 3\n  # n = -0.333333...\n  # n = -1 / 3\n  # n = -0.333333...\n  # n = -1 / 3\n  # n = -0.333333...\n  # n = -1 / 3\n  # n = -0.333333...\n  # n = -1 / 3\n  # n = -0.333333...\n  # n = -1 / 3\n  # n = -0.333333...\n  # n = -1 / 3\n  # n = -0.333333...\n  # n = -1 / 3\n  # n = -0.333333...\n  # n = -1 / 3\n  # n = -0.333333...\n  # n = -1 / 3\n  # n = -0.333333...\n  # n = -1 / 3\n  # n = -0.333333...\n  # n = -1 / 3\n  # n = -0.333333",
    "  nth_decagonal_number = (3 * n**2 - n) / 2\n  nth_decagonal_number % 1 == 0\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  nth_decagonal = n * (3 * n - 2)\n  nth_decagonal.to_s.split('').map(&:to_i).inject(:+) == n\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  return true if (Math.sqrt(1 + 4 * 2 * n) - 1) % 4 == 0\n  false\nend",
    "  (Math.sqrt(1 + 4 * 2 * n) + 1) % 4 == 0\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  return false if n < 0\n  a = 3\n  b = -1\n  c = -2 * n\n  d = b**2 - 4 * a * c\n  return false if d < 0\n  x1 = (-b + Math.sqrt(d)) / (2 * a)\n  x2 = (-b - Math.sqrt(d)) / (2 * a)\n  return true if x1 % 1 == 0 || x2 % 1 == 0\n  false\nend",
    "  nth_decagonal = n * (3 * n - 2)\n  nth_decagonal.to_s.chars.map(&:to_i).inject(:+) == n\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  (Math.sqrt(1 + 4 * 2 * n) + 1) % 4 == 0\nend",
    "  (Math.sqrt(1 + 4 * 2 * n) + 1) % 4 == 0\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal.to_s.split('').map(&:to_i).inject(:+) == n\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal\nend",
    "  nth_decagonal = (3 * n * n - n) / 2\n  return nth_decagonal\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal % 1 == 0\nend",
    "  # n = (3x^2 - x) / 2\n  # 3x^2 - x - 2n = 0\n  # x = (1 +- sqrt(1 + 24n)) / 6\n  # x must be an integer\n  # 1 + 24n must be a perfect square\n  # 1 + 24n = y^2\n  # 24n = y^2 - 1\n  # n = (y^2 - 1) / 24\n  # y^2 - 1 must be a multiple of 24\n  # y^2 - 1 = 24k\n  # y^2 = 24k + 1\n  # y = sqrt(24k + 1)\n  # y must be an integer\n  # sqrt(24k + 1) must be an integer\n  # 24k + 1 must be a perfect square\n  # 24k + 1 = z^2\n  # 24k = z^2 - 1\n  # k = (z^2 - 1) / 24\n  # z^2 - 1 must be a multiple of 24\n  # z^2 - 1 = 24m\n  # z^2 = 24m + 1\n  # z = sqrt(24m + 1)\n  # z must be an integer\n  # sqrt(24m + 1) must be an integer\n  # 24m + 1 must be a perfect square\n  # 24m + 1 = w^2\n  # 24m = w^2 - 1\n  # m = (w^2 - 1) / 24\n  # w^2 - 1 must be a multiple of 24\n  # w^2 - 1 = 24p\n  # w^2 = 24p + 1\n  # w = sqrt(24p + 1)\n  # w must be an integer\n  # sqrt(24p + 1) must be an integer\n  # 24p + 1 must be a perfect square\n  # 24p + 1 = q^2\n  # 24p = q^2 - 1\n  # p = (q^2 - 1) / 24\n  # q^2 - 1 must be a multiple of 24\n  # q^2 - 1 = 24r\n  # q^2 = 24r + 1\n  # q = sqrt(24r + 1",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  nth_decagonal = 0\n  i = 1\n  while nth_decagonal < n\n    nth_decagonal = i * (3 * i - 1) / 2\n    i += 1\n  end\n  nth_decagonal == n\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal % 1 == 0\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal == n\nend",
    "  nth_decagonal_number = (3 * n**2 - n) / 2\n  nth_decagonal_number.to_s.split('').map(&:to_i).inject(:+) == n\nend",
    "  n = n.to_f\n  return (Math.sqrt(1 + 40 * n) + 1) % 10 == 0\nend",
    "  root = (3 + Math.sqrt(9 + 40 * n)) / 10\n  root == root.to_i\nend",
    "  return false if n < 1\n  root = (Math.sqrt(4 * n + 1) + 1) / 2\n  root.to_i == root\nend",
    "  nth_decagonal = 0\n  i = 1\n  while nth_decagonal < n\n    nth_decagonal = i * (3 * i - 1) / 2\n    i += 1\n  end\n  nth_decagonal == n\nend",
    "  (Math.sqrt(4 * n + 1) + 1) % 4 == 0\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  if nth_decagonal.to_s.length == n.to_s.length\n    return true\n  else\n    return false\n  end\nend",
    "  nth_decagonal = (3 * n * n - n) / 2\n  return nth_decagonal\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal % 1 == 0\nend",
    "  decagonal_number = n * (3 * n - 2)\n  decagonal_number.to_s.length == n.to_s.length\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  nth_decagonal = (3*n**2 - n)/2\n  return nth_decagonal\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  # n = (3 * n^2 - n) / 2\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n",
    "  if n < 0\n    return false\n  end\n  root = (Math.sqrt(4 * n + 1) + 1) / 2\n  return root == root.to_i\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  nth_decagonal = 0\n  nth_decagonal += n * (3 * n - 2)\n  nth_decagonal\nend",
    "  n = n.to_f\n  (Math.sqrt(1 + 4 * 2 * n) + 1) / 2 % 1 == 0\nend",
    "  # a = 3\n  # b = -1\n  # c = -2n\n  # if (b**2 - 4ac) is a perfect square, then n is decagonal\n  # b**2 - 4ac = (1 + 8n)**2 - 4 * 3 * (-2n)\n  #            = 1 + 16n + 64n**2 - 24n\n  #            = 64n**2 + 41n + 1\n  #            = (8n + 1)**2\n  #            = (8n + 1) * (8n + 1)\n  #            = (8n + 1)**2\n  #            = (8n + 1)**2\n  #            = (8n + 1)**2\n  #            = (8n + 1)**2\n  #            = (8n + 1)**2\n  #            = (8n + 1)**2\n  #            = (8n + 1)**2\n  #            = (8n + 1)**2\n  #            = (8n + 1)**2\n  #            = (8n + 1)**2\n  #            = (8n + 1)**2\n  #            = (8n + 1)**2\n  #            = (8n + 1)**2\n  #            = (8n + 1)**2\n  #            = (8n + 1)**2\n  #            = (8n + 1)**2\n  #            = (8n + 1)**2\n  #            = (8n + 1)**2\n  #            = (8n + 1)**2\n  #            = (8n + 1)**2\n  #            = (8n + 1)**2\n  #            = (8n + 1)**2\n  #            = (8n + 1)**2\n  #            = (8n + 1)**2\n  #            = (8n + 1)**2\n  #            = (8n + 1)**2\n  #            = (8n + 1)**2\n  #            = (8n + 1)**2\n  #            = (8n + 1)**2\n  #",
    "  n = n.to_f\n  return (Math.sqrt(1 + 4 * 2 * n) + 1) % 4 == 0\nend",
    "  nth_decagonal = n * (3 * n - 2)\n  nth_decagonal.to_s.length == n.to_s.length\nend",
    "  nth_decagonal = ((3 * n**2) - n) / 2\n  nth_decagonal.to_s.length == n.to_s.length\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  nth_decagonal = (3 * n * n - n) / 2\n  return nth_decagonal\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  nth_decagonal = n * (3 * n - 2)\n  nth_decagonal\nend",
    "  return false if n <= 0\n  root = (Math.sqrt(4 * n + 1) + 1) / 2\n  root.to_i == root\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal % 1 == 0\nend",
    "  nth_decagonal = n * (3 * n - 2)\n  nth_decagonal.to_s.chars.map(&:to_i).inject(:+) == n\nend",
    "  return true if (Math.sqrt(4*n+1) + 1) % 4 == 0\n  false\nend",
    "  num = (Math.sqrt(4 * n + 1) + 1) / 2\n  num == num.to_i\nend",
    "  nth_decagonal = n * (3 * n - 2)\n  return nth_decagonal\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  nth_decagonal_number(n) == n\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal % 1 == 0\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal.to_s.split('').map(&:to_i).inject(:+) == n\nend",
    "  (Math.sqrt(1 + 4 * 2 * n) + 1) % 4 == 0\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  (Math.sqrt(4 * n + 1) + 1) % 4 == 0\nend",
    "  nth_decagonal_number = (3 * n * n - n) / 2\n  nth_decagonal_number % 10 == 0\nend",
    "  return false if n < 0\n  return true if n == 0\n  return true if n == 1\n  return false if n % 10 != 0\n  return true if n % 100 == 10\n  return false if n % 1000 != 100\n  return true if n % 10000 == 1000\n  return false if n % 100000 != 10000\n  return true if n % 1000000 == 100000\n  return false if n % 10000000 != 1000000\n  return true if n % 100000000 == 10000000\n  return false if n % 1000000000 != 100000000\n  return true if n % 10000000000 == 1000000000\n  return false if n % 100000000000 != 10000000000\n  return true if n % 1000000000000 == 100000000000\n  return false if n % 10000000000000 != 1000000000000\n  return true if n % 100000000000000 == 10000000000000\n  return false if n % 1000000000000000 != 100000000000000\n  return true if n % 10000000000000000 == 1000000000000000\n  return false if n % 100000000000000000 != 10000000000000000\n  return true if n % 1000000000000000000 == 100000000000000000\n  return false if n % 10000000000000000000 != 1000000000000000000\n  return true if n % 100000000000000000000 == 10000000000000000000\n  return false if n % 1000000000000000000000 != 100000000000000000000\n  return true if n % 10000000000000000000000 == 1000000000000000000000\n  return false if n % 100000000000000000000000 != 10000000000000000000000\n  return true if n % 1000000000000000000000000 == 100000000000000000000000\n  return false if n % 10000000000000000000000000 != 1000000000000000000000000\n  return true if n % 100000000000000000000000000 == 10000000000000000000000000\n  return false if n % 1000000000000000000000000000 != 100000000000000000000000000\n  return true if n % 10000000000000000000000000000 == 1000000000000000000000000000\n  return false if n % 100000000000000000000000000000 != 10000000000000000000000000000\n  return true if n % 1000000000000000000000000000000 == 100000000000000000000000000000\n  return false if n % 10000000000000000000000000000000 != 1000000000000000000000000000000\n  return true if n % 100000000000000000000000000000000 == 10000000000000000000000000000000\n  return false if n % 1000000000000000000000000000000000 != 100000000000000000000000000000000\n  return true if n % 10000000000000000000000000000000000 == 1000000000000000000000000000000000\n  return false if n % 100000000000000000000000000000000000 != 10000000000000000000000000000000000\n  return true if n % 1000000000000000000000000000000000000 ==",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  n = n.to_f\n  a = 3\n  b = -1\n  c = -2 * n\n  d = b**2 - 4 * a * c\n  if d < 0\n    return false\n  else\n    x1 = (-b + Math.sqrt(d)) / (2 * a)\n    x2 = (-b - Math.sqrt(d)) / (2 * a)\n    if x1 > 0 && x1 == x1.to_i\n      return true\n    elsif x2 > 0 && x2 == x2.to_i\n      return true\n    else\n      return false\n    end\n  end\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  nth_decagonal = n * (3 * n - 2)\n  return nth_decagonal\nend",
    "  n = n.to_f\n  return false if n < 0\n  return false if n % 1 != 0\n  return false if n == 0\n  return true if n == 1\n  return false if n == 2\n  return true if n == 3\n  return false if n == 4\n  return true if n == 5\n  return false if n == 6\n  return true if n == 7\n  return false if n == 8\n  return true if n == 9\n  return false if n == 10\n  return true if n == 11\n  return false if n == 12\n  return true if n == 13\n  return false if n == 14\n  return true if n == 15\n  return false if n == 16\n  return true if n == 17\n  return false if n == 18\n  return true if n == 19\n  return false if n == 20\n  return true if n == 21\n  return false if n == 22\n  return true if n == 23\n  return false if n == 24\n  return true if n == 25\n  return false if n == 26\n  return true if n == 27\n  return false if n == 28\n  return true if n == 29\n  return false if n == 30\n  return true if n == 31\n  return false if n == 32\n  return true if n == 33\n  return false if n == 34\n  return true if n == 35\n  return false if n == 36\n  return true if n == 37\n  return false if n == 38\n  return true if n == 39\n  return false if n == 40\n  return true if n == 41\n  return false if n == 42\n  return true if n == 43\n  return false if n == 44\n  return true if n == 45\n  return false if n == 46\n  return true if n == 47\n  return false if n == 48\n  return true if n == 49\n  return false if n == 50\n  return true if n == 51\n  return false if n == 52\n  return true if n == 53\n  return false if n == 54\n  return true if n == 55\n  return false if n == 56\n  return true if n == 57\n  return false if n == 58\n  return true if n == 59\n  return false if",
    "  nth_decagonal_number = (3 * n * n - n) / 2\n  nth_decagonal_number % 10 == 0\nend",
    "  x = (Math.sqrt(1 + 4 * 2 * n) - 1) / 2\n  x.to_i == x\nend",
    "  (Math.sqrt(4 * n + 1) + 1) % 4 == 0\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal % 1 == 0\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  # n = (3*n^2 - n)/2\n  # n^2 - 3n + 2n = 0\n  # n^2 - n = 0\n  # n(n-1) = 0\n  # n = 0 or n = 1\n  # n = 0 is not a decagonal number\n  # n = 1 is the first decagonal number\n  # n = 2 is the second decagonal number\n  # n = 3 is the third decagonal number\n  # n = 4 is the fourth decagonal number\n  # n = 5 is the fifth decagonal number\n  # n = 6 is the sixth decagonal number\n  # n = 7 is the seventh decagonal number\n  # n = 8 is the eighth decagonal number\n  # n = 9 is the ninth decagonal number\n  # n = 10 is the tenth decagonal number\n  # n = 11 is the eleventh decagonal number\n  # n = 12 is the twelfth decagonal number\n  # n = 13 is the thirteenth decagonal number\n  # n = 14 is the fourteenth decagonal number\n  # n = 15 is the fifteenth decagonal number\n  # n = 16 is the sixteenth decagonal number\n  # n = 17 is the seventeenth decagonal number\n  # n = 18 is the eighteenth decagonal number\n  # n = 19 is the nineteenth decagonal number\n  # n = 20 is the twentieth decagonal number\n  # n = 21 is the twenty-first decagonal number\n  # n = 22 is the twenty-second decagonal number\n  # n = 23 is the twenty-third decagonal number\n  # n = 24 is the twenty-fourth decagonal number\n  # n = 25 is the twenty-fifth decagonal number\n  # n = 26 is the twenty-sixth decagonal number\n  # n = 27 is the twenty-seventh decagonal number\n  # n = 28 is the twenty-eighth decagonal number\n  # n = 29 is the twenty-ninth decagonal number\n  # n = 30 is the thirtieth decagonal number\n  # n = 31 is the thirty-first decagonal number\n  # n = 32 is the thirty-second decagonal number\n  # n = 33 is the thirty-third decagonal number\n  # n = 34",
    "  return false if n < 1\n  return true if n == 1\n  return true if n == 6\n  return false if n % 5 == 0\n  return false if n % 6 == 0\n  return false if n % 10 == 0\n  return false if n % 15 == 0\n  return false if n % 30 == 0\n  return false if n % 35 == 0\n  return false if n % 45 == 0\n  return false if n % 55 == 0\n  return false if n % 65 == 0\n  return false if n % 70 == 0\n  return false if n % 75 == 0\n  return false if n % 85 == 0\n  return false if n % 90 == 0\n  return false if n % 95 == 0\n  return false if n % 105 == 0\n  return false if n % 115 == 0\n  return false if n % 120 == 0\n  return false if n % 125 == 0\n  return false if n % 135 == 0\n  return false if n % 140 == 0\n  return false if n % 145 == 0\n  return false if n % 155 == 0\n  return false if n % 160 == 0\n  return false if n % 165 == 0\n  return false if n % 175 == 0\n  return false if n % 180 == 0\n  return false if n % 185 == 0\n  return false if n % 195 == 0\n  return false if n % 200 == 0\n  return false if n % 205 == 0\n  return false if n % 215 == 0\n  return false if n % 220 == 0\n  return false if n % 225 == 0\n  return false if n % 235 == 0\n  return false if n % 240 == 0\n  return false if n % 245 == 0\n  return false if n % 255 == 0\n  return false if n % 260 == 0\n  return false if n % 265 == 0\n  return false if n % 275 == 0\n  return false if n % 280 == 0\n  return false if n % 285 == 0\n  return false if n % 295 == 0\n  return false if n % 300 == 0\n  return false if n % 305 == 0\n  return false if n % 315 == 0\n  return false if n % 320 == 0\n  return false if n % 325 == 0\n  return false if n % 335",
    "  # n = (3*x^2 - x)/2\n  # n = (3*x^2 - x - 2*n)/2\n  # 3*x^2 - x - 2*n = 0\n  # x = (1 + sqrt(1 + 24*n))/6\n  # x = (1 - sqrt(1 + 24*n))/6\n  # x = (1 + sqrt(1 + 24*n))/6\n  # x = (1 - sqrt(1 + 24*n))/6\n  # x = (1 + sqrt(1 + 24*n))/6\n  # x = (1 - sqrt(1 + 24*n))/6\n  # x = (1 + sqrt(1 + 24*n))/6\n  # x = (1 - sqrt(1 + 24*n))/6\n  # x = (1 + sqrt(1 + 24*n))/6\n  # x = (1 - sqrt(1 + 24*n))/6\n  # x = (1 + sqrt(1 + 24*n))/6\n  # x = (1 - sqrt(1 + 24*n))/6\n  # x = (1 + sqrt(1 + 24*n))/6\n  # x = (1 - sqrt(1 + 24*n))/6\n  # x = (1 + sqrt(1 + 24*n))/6\n  # x = (1 - sqrt(1 + 24*n))/6\n  # x = (1 + sqrt(1 + 24*n))/6\n  # x = (1 - sqrt(1 + 24*n))/6\n  # x = (1 + sqrt(1 + 24*n))/6\n  # x = (1 - sqrt(1 + 24*n))/6\n  # x = (1 + sqrt(1 + 24*n))/6\n  # x = (1 - sqrt(1 + 24*n))/6\n  # x = (1 + sqrt(1 + 24*n))/6\n  # x = (1 - sqrt(1 + 24*n))/6\n  # x = (",
    "  nth_decagonal_number = (3 * n * n - n) / 2\n  nth_decagonal_number == n\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal == n\nend",
    "  return false if n < 0\n  return true if n == 0\n  num = 1\n  while n > 0\n    n -= num\n    num += 4\n  end\n  n == 0\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  # n = (3 * n^2 - n) / 2\n  # n^2 - n - 2n/3 = 0\n  # n^2 - n - 2n/3 = 0\n  # n^2 - 5n/3 = 0\n  # n(n - 5/3) = 0\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n = 5/3\n  # n = 0 or n",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return false if n % 100 == 0\n  return true if n % 100 == 10\n  return false if n % 1000 == 0\n  return true if n % 1000 == 100\n  return false if n % 10000 == 0\n  return true if n % 10000 == 1000\n  return false if n % 100000 == 0\n  return true if n % 100000 == 10000\n  return false if n % 1000000 == 0\n  return true if n % 1000000 == 100000\n  return false if n % 10000000 == 0\n  return true if n % 10000000 == 1000000\n  return false if n % 100000000 == 0\n  return true if n % 100000000 == 10000000\n  return false if n % 1000000000 == 0\n  return true if n % 1000000000 == 100000000\n  return false if n % 10000000000 == 0\n  return true if n % 10000000000 == 1000000000\n  return false if n % 100000000000 == 0\n  return true if n % 100000000000 == 10000000000\n  return false if n % 1000000000000 == 0\n  return true if n % 1000000000000 == 100000000000\n  return false if n % 10000000000000 == 0\n  return true if n % 10000000000000 == 1000000000000\n  return false if n % 100000000000000 == 0\n  return true if n % 100000000000000 == 10000000000000\n  return false if n % 1000000000000000 == 0\n  return true if n % 1000000000000000 == 100000000000000\n  return false if n % 10000000000000000 == 0\n  return true if n % 10000000000000000 == 1000000000000000\n  return false if n % 100000000000000000 == 0\n  return true if n % 100000000000000000 == 10000000000000000\n  return false if n % 1000000000000000000 == 0\n  return true if n % 1000000000000000000 == 100000000000000000\n  return false if n % 10000000000000000000 == 0\n  return true if n % 10000000000000000000 == 1000000000000000000\n  return false if n % 100000000000000000000 == 0\n  return true if n % 100000000000000000000 == 10000000000000000000\n  return false if n % 1000000000000000000000 == 0\n  return true if n % 1000000000000000000000 == 100000000000000000000\n  return false",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  nth_decagonal = (3 * n * n - n) / 2\n  return nth_decagonal\nend",
    "  nth_decagonal_number(n) == n\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal == n\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal.to_s.length == n.to_s.length\nend",
    "  decagonal_number = n * (3 * n - 2)\n  if decagonal_number.to_s.length == 6\n    return true\n  else\n    return false\n  end\nend",
    "  return false if n < 1\n  nth_decagonal = (3 * n * n - n) / 2\n  return true if nth_decagonal == n\n  false\nend",
    "  nth_decagonal = 0\n  i = 1\n  while nth_decagonal < n\n    nth_decagonal = i * (3 * i - 1) / 2\n    i += 1\n  end\n  nth_decagonal == n\nend",
    "  nth_decagonal_number(n) == n\nend",
    "  nth_decagonal = (Math.sqrt(4*n**2 + 4*n + 1) + 1) / 2\n  nth_decagonal.to_i == nth_decagonal\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal % 1 == 0\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal.to_s.length == n.to_s.length\nend",
    "  return false if n < 1\n  nth_decagonal = (3 * n * n - n) / 2\n  nth_decagonal == n\nend",
    "  # n = (3*n^2 - n)/2\n  # 3*n^2 - n - 2*n = 0\n  # 3*n^2 - 3*n - 2*n = 0\n  # 3*n(n-1) - 2*n = 0\n  # n(3*n - 2) = 0\n  # n = 0 or n = 2/3\n  # n = 0 is not a solution\n  # n = 2/3 is not an integer\n  # n is not a decagonal number\n  return false\nend",
    "  nth_decagonal = n * (3 * n - 2)\n  return nth_decagonal\nend",
    "  nth_decagonal = n * (3 * n - 2)\n  nth_decagonal\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal % 1 == 0\nend",
    "  # n = (3x^2 - x) / 2\n  # 3x^2 - x - 2n = 0\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x must be an integer\n  x = (1 + Math.sqrt(1 + 24 * n)) / 6\n  x == x.to_i\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  nth_decagonal = (3 * n * n - n) / 2\n  return nth_decagonal\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal == n\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal.to_s == n.to_s\nend",
    "  return false if n < 0\n  root = (Math.sqrt(1 + 4 * 2 * n) - 1) / 2\n  return root.to_i == root\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal.to_s.chars.map(&:to_i).inject(:+) == 45\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 10 == 0\nend",
    "  nth_decagonal_number(n) == n\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  # n = (3 * n^2 - n) / 2\n  # n^2 - 3n + 2n - 2 = 0\n  # n^2 - n - 2 = 0\n  # n = (1 +- sqrt(1 + 8)) / 2\n  # n = (1 +- 3) / 2\n  # n = 1 or -2\n  # n = 1\n  # n = (3 * 1^2 - 1) / 2\n  # n = (3 * 1 - 1) / 2\n  # n = 1\n  # n = -2\n  # n = (3 * (-2)^2 - (-2)) / 2\n  # n = (3 * 4 + 2) / 2\n  # n = 14 / 2\n  # n = 7\n  # n = (3 * 7^2 - 7) / 2\n  # n = (3 * 49 - 7) / 2\n  # n = 142 / 2\n  # n = 71\n  # n = (3 * 71^2 - 71) / 2\n  # n = (3 * 5041 - 71) / 2\n  # n = 15123 / 2\n  # n = 7561\n  # n = (3 * 7561^2 - 7561) / 2\n  # n = (3 * 57152961 - 7561) / 2\n  # n = 171458883 / 2\n  # n = 85729411\n  # n = (3 * 85729411^2 - 85729411) / 2\n  # n = (3 * 7345595788321 - 85729411) / 2\n  # n = 22036787364963 / 2\n  # n = 11018393682481\n  # n = (3 * 11018393682481^2 - 11018393682481) / 2\n  # n = (3 * 12126500479526654481 - 11018393682481) / 2\n  # n = 36379551438579964443 / 2\n  # n = 18189775719289982221\n  # n = (3 * 18189775719289982221^2 - 18189775719289982221) / 2",
    "  nth_decagonal = (3 * n * n - n) / 2\n  nth_decagonal\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal % 1 == 0 ? true : false\nend",
    "  return false if n < 0\n  root = (Math.sqrt(4 * n + 1) + 1) / 2\n  root == root.to_i\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal % 1 == 0\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  nth_decagonal = (3*n**2 - n)/2\n  nth_decagonal.to_s.length == n.to_s.length\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal % 1 == 0\nend",
    "  (Math.sqrt(1 + 4 * 2 * n) + 1) % 4 == 0\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  if nth_decagonal == n\n    return true\n  else\n    return false\n  end\nend",
    "  return false if n <= 0\n  return true if n == 1\n  return false if n % 10 != 0\n  return true if n % 100 == 10\n  return false if n % 1000 != 0\n  return true if n % 10000 == 100\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 1000\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 10000\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 100000\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 1000000\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 10000000\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 100000000\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 1000000000\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 10000000000\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 100000000000\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 1000000000000\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 10000000000000\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 100000000000000\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 1000000000000000\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 10000000000000000\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 100000000000000000\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 1000000000000000000\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 10000000000000000000\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if",
    "  return false if n < 1\n  sqrt = Math.sqrt(4 * n + 1)\n  return false if sqrt % 1 != 0\n  sqrt % 4 == 3\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal.to_s.split('').map(&:to_i).inject(:+) == n\nend",
    "  root = (Math.sqrt(4 * n + 1) + 1) / 2\n  root.to_i == root\nend",
    "  # n = (3*n^2 - n)/2\n  # 3*n^2 - n - 2*n = 0\n  # 3*n^2 - 3*n - 2*n = 0\n  # 3*n(n-1) - 2*n = 0\n  # n(3*n-2) = 0\n  # n = 0 or n = 2/3\n  # n is not 0, so n = 2/3\n  # n = 2/3\n  # n = 2/3 * 3/2\n  # n = 1\n  # n is an integer\n  # n is a decagonal number\n  return true\nend",
    "  n = n.to_f\n  ((Math.sqrt(1 + 4 * 2 * n) + 1) / 2) % 1 == 0\nend",
    "  root = (Math.sqrt(4 * n + 1) + 1) / 2\n  root.to_i == root\nend",
    "  nth_decagonal = n * (3 * n - 2)\n  nth_decagonal\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0",
    "  # n = (3*n^2 - n)/2\n  # 3*n^2 - n - 2n = 0\n  # n^2 - (1/3)n - (2/3) = 0\n  # n = (1/3) +- sqrt((1/9) + (4/3)*(2/3))\n  # n = (1/3) +- sqrt(1 + (8/3))\n  # n = (1/3) +- sqrt(11/3)\n  # n = (1/3) +- (sqrt(11)/3)\n  # n = (1/3) + (sqrt(11)/3)\n  # n = (1/3) + (sqrt(11)/3)\n  # n = (1/3) + (sqrt(11)/3)\n  # n = (1/3) + (sqrt(11)/3)\n  # n = (1/3) + (sqrt(11)/3)\n  # n = (1/3) + (sqrt(11)/3)\n  # n = (1/3) + (sqrt(11)/3)\n  # n = (1/3) + (sqrt(11)/3)\n  # n = (1/3) + (sqrt(11)/3)\n  # n = (1/3) + (sqrt(11)/3)\n  # n = (1/3) + (sqrt(11)/3)\n  # n = (1/3) + (sqrt(11)/3)\n  # n = (1/3) + (sqrt(11)/3)\n  # n = (1/3) + (sqrt(11)/3)\n  # n = (1/3) + (sqrt(11)/3)\n  # n = (1/3) + (sqrt(11)/3)\n  # n = (1/3) + (sqrt(11)/3)\n  # n = (1/3) + (sqrt(11)/3)\n  # n = (1/3) + (sqrt(11)/3)\n  # n = (1/3",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  # n = (3*n^2 - n)/2\n  # n^2 - 3n + 2n = 0\n  # n(n - 3 + 2) = 0\n  # n = 0 or n = 3 - 2\n  # n = 0 or n = 1\n  # n = 1 is the first decagonal number\n  # n = 0 is not a decagonal number\n  # n = 1 is a decagonal number\n  # n = 2 is not a decagonal number\n  # n = 3 is a decagonal number\n  # n = 4 is not a decagonal number\n  # n = 5 is a decagonal number\n  # n = 6 is not a decagonal number\n  # n = 7 is a decagonal number\n  # n = 8 is not a decagonal number\n  # n = 9 is a decagonal number\n  # n = 10 is not a decagonal number\n  # n = 11 is a decagonal number\n  # n = 12 is not a decagonal number\n  # n = 13 is a decagonal number\n  # n = 14 is not a decagonal number\n  # n = 15 is a decagonal number\n  # n = 16 is not a decagonal number\n  # n = 17 is a decagonal number\n  # n = 18 is not a decagonal number\n  # n = 19 is a decagonal number\n  # n = 20 is not a decagonal number\n  # n = 21 is a decagonal number\n  # n = 22 is not a decagonal number\n  # n = 23 is a decagonal number\n  # n = 24 is not a decagonal number\n  # n = 25 is a decagonal number\n  # n = 26 is not a decagonal number\n  # n = 27 is a decagonal number\n  # n = 28 is not a decagonal number\n  # n = 29 is a decagonal number\n  # n = 30 is not a decagonal number\n  # n = 31 is a decagonal number\n  # n = 32 is not a decagonal number\n  # n = 33 is a decagonal number\n  # n = 34 is not a decagonal number\n  # n = 35 is a decagonal number\n  # n = 36 is not a decagonal number\n  # n = 37 is a decagonal",
    "  return false if n <= 0\n  return true if n == 1\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  # n = (3 * n^2 - n) / 2\n  # n^2 - 3n + 2n - n = 0\n  # n(n - 3 + 2) = 0\n  # n(n - 1) = 0\n  # n = 0 or n = 1\n  # n = 0 is not a decagonal number\n  # n = 1 is the first decagonal number\n  # n = 1 is the only decagonal number that is also a triangular number\n  # n = 1 is the only decagonal number that is also a pentagonal number\n  # n = 1 is the only decagonal number that is also a hexagonal number\n  # n = 1 is the only decagonal number that is also a heptagonal number\n  # n = 1 is the only decagonal number that is also an octagonal number\n  # n = 1 is the only decagonal number that is also a nonagonal number\n  # n = 1 is the only decagonal number that is also a decagonal number\n  # n = 1 is the only decagonal number that is also a hendecagonal number\n  # n = 1 is the only decagonal number that is also a dodecagonal number\n  # n = 1 is the only decagonal number that is also a tridecagonal number\n  # n = 1 is the only decagonal number that is also a tetradecagonal number\n  # n = 1 is the only decagonal number that is also a pentadecagonal number\n  # n = 1 is the only decagonal number that is also a hexadecagonal number\n  # n = 1 is the only decagonal number that is also a heptadecagonal number\n  # n = 1 is the only decagonal number that is also an octadecagonal number\n  # n = 1 is the only decagonal number that is also a nonadecagonal number\n  # n = 1 is the only decagonal number that is also an icosagonal number\n  # n = 1 is the only decagonal number that is also a henicosagonal number\n  # n = 1 is the only decagonal number that is also a docosagonal number\n  # n = 1 is the only decagonal number that is also a tricosagonal number\n  # n = 1 is the only decagonal number that is also a tet",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal == n\nend",
    "  nth_decagonal = (3 * n * n - n) / 2\n  nth_decagonal == n\nend",
    "  return false if n < 1\n  num = (Math.sqrt(4 * n + 1) + 1) / 2\n  num == num.to_i\nend",
    "  return false if n < 1\n  root = (Math.sqrt(4 * n + 1) + 1) / 2\n  root.to_i == root\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 == 0\n  return true if n % 10000 == 0\n  return false if n % 100000 == 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 == 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 == 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 == 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 == 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 == 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 == 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 == 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 == 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 == 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 == 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 == 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 == 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 == 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 == 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 == 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 == 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 == 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 == 0\n  return",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  (Math.sqrt(1 + 4 * 2 * n) + 1) % 4 == 0\nend",
    "  nth_decagonal = (3 * n * n - n) / 2\n  nth_decagonal\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal % 1 == 0\nend",
    "  nth_decagonal_number(n) == n\nend"
  ]
}