{
  "name": "mbpp_237_check_occurences",
  "language": "rb",
  "prompt": "# Write a function that takes in an array of arrays and returns a hash mapping each unique array to the number of times it occurs in the array.\ndef check_occurences(test_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_occurences\n    candidate = method(:check_occurences)\n    assert_equal({[1, 3] => 2, [2, 5] => 2, [3, 6] => 1}, candidate.call([[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]]))\n    assert_equal({[2, 4] => 2, [3, 6] => 2, [4, 7] => 1}, candidate.call([[4, 2], [2, 4], [3, 6], [6, 3], [7, 4]]))\n    assert_equal({[2, 13] => 1, [11, 23] => 1, [12, 25] => 2, [16, 23] => 1}, candidate.call([[13, 2], [11, 23], [12, 25], [25, 12], [16, 23]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  test_list.each do |sub_array|\n    puts sub_array.to_s + \" \" + test_list.count(sub_array).to_s\n  end\nend",
    "  test_list.each do |item|\n    if test_list.count(item) > 1\n      return true\n    end\n  end\n  return false\nend",
    "  occurences = Hash.new(0)\n  test_list.each { |sub_list| occurences[sub_list] += 1 }\n  occurences\nend",
    "  occurences = Hash.new(0)\n  test_list.each do |item|\n    occurences[item] += 1\n  end\n  occurences\nend",
    "  test_list.each do |sub_array|\n    if test_list.count(sub_array) > 1\n      return true\n    end\n  end\n  false\nend",
    "  test_list.each do |array|\n    puts array.to_s + \" \" + test_list.count(array).to_s\n  end\nend",
    "  # Write your code here\n  test_list.each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\nend",
    "  test_list.each do |element|\n    if test_list.count(element) > 1\n      return true\n    end\n  end\n  false\nend",
    "  # create a hash to store the results\n  results = Hash.new(0)\n  # iterate through the list\n  test_list.each do |sub_list|\n    # add the sub_list to the hash as a key and increment the value by 1\n    results[sub_list] += 1\n  end\n  # return the hash\n  results\nend",
    "  test_list.each_with_object(Hash.new(0)) { |item, hash| hash[item] += 1 }\nend",
    "  test_list.each do |sub_list|\n    if test_list.count(sub_list) > 1\n      return false\n    end\n  end\n  true\nend",
    "  test_list.each do |test_array|\n    if test_array.length == 1\n      puts \"There is only one of #{test_array[0]}\"\n    else\n      puts \"There are #{test_array.length} of #{test_array[0]}\"\n    end\n  end\nend",
    "  occurences = Hash.new(0)\n  test_list.each do |element|\n    occurences[element] += 1\n  end\n  occurences\nend",
    "  occurences = Hash.new(0)\n  test_list.each do |sub_array|\n    occurences[sub_array] += 1\n  end\n  occurences\nend",
    "  result = Hash.new(0)\n  test_list.each do |element|\n    result[element] += 1\n  end\n  result\nend",
    "  test_list.each do |arr|\n    if arr.is_a?(Array)\n      puts \"true\"\n    else\n      puts \"false\"\n    end\n  end\nend",
    "  test_list.each do |sub_array|\n    if test_list.count(sub_array) > 1\n      return true\n    end\n  end\n  return false\nend",
    "  test_list.each do |sub_array|\n    if test_list.count(sub_array) > 1\n      return true\n    end\n  end\n  return false\nend",
    "  test_list.each_with_object(Hash.new(0)) { |array, hash| hash[array] += 1 }\nend",
    "  test_list.each do |sub_array|\n    if test_list.count(sub_array) > 1\n      return true\n    end\n  end\n  false\nend"
  ]
}