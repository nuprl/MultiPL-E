{
  "name": "mbpp_408_k_smallest_pairs",
  "language": "rb",
  "prompt": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  nums1.sort!\n  nums2.sort!\n  result = []\n  i = 0\n  j = 0\n  while i < nums1.length && j < nums2.length && k > 0\n    if nums1[i] < nums2[j]\n      result << [nums1[i], nums2[j]]\n      i += 1\n    else\n      result << [nums1[i], nums2[j]]\n      j += 1\n    end\n    k -= 1\n  end\n  result\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair[0] + pair[1] }\n  result[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      res << [num1, num2]\n    end\n  end\n  res.sort_by! { |pair| pair.sum }\n  res.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  nums1.product(nums2).sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.reduce(:+) }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.first + pair.last }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  k = [k, nums1.size * nums2.size].min\n  nums1.sort!\n  nums2.sort!\n  result = []\n  i = 0\n  j = 0\n  while result.size < k\n    if nums1[i] + nums2[j] < nums1[i] + nums2[j + 1]\n      result << [nums1[i], nums2[j]]\n      j += 1\n    else\n      result << [nums1[i], nums2[j + 1]]\n      i += 1\n    end\n  end\n  result\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.first + pair.last }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      res << [num1, num2]\n    end\n  end\n  res.sort_by! { |pair| pair[0] + pair[1] }\n  res[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  queue = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      queue << [num1, num2]\n      queue.sort_by! { |pair| pair[0] + pair[1] }\n      queue.pop if queue.size > k\n    end\n  end\n  queue\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.sum }\n  result[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.sum }\n  result[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }[0...k]\nend",
    "  # nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\n  nums1.product(nums2).sort_by { |a, b| a + b }[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.inject(:+) }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      res << [n1, n2]\n    end\n  end\n  res.sort_by! { |a, b| a + b }\n  res[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair[0] + pair[1] }\n  result[0...k]\nend",
    "  # return [] if nums1.empty? || nums2.empty?\n  # return nums1.map { |n| [n, nums2[0]] } if nums2.size == 1\n  # return nums2.map { |n| [nums1[0], n] } if nums1.size == 1",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      res << [num1, num2]\n    end\n  end\n  res.sort_by! { |pair| pair[0] + pair[1] }\n  res[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.sum }\n  result[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.sum }\n  result[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.sum }\n  result[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.inject(:+) }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair[0] + pair[1] }\n  result[0...k]\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.reduce(:+) }.take(k)\nend",
    "  # return [] if nums1.empty? || nums2.empty?\n  #\n  # pairs = []\n  # nums1.each do |num1|\n  #   nums2.each do |num2|\n  #     pairs << [num1, num2]\n  #   end\n  # end\n  #\n  # pairs.sort_by { |pair| pair.sum }.take(k)",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair[0] + pair[1] }\n  result[0...k]\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.first + pair.last }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.reduce(:+) }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      result << [n1, n2]\n    end\n  end\n  result.sort_by! { |pair| pair[0] + pair[1] }\n  result.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  nums1.sort!\n  nums2.sort!\n  result = []\n  i = 0\n  j = 0\n  while i < nums1.length && j < nums2.length && k > 0\n    if nums1[i] + nums2[j] < nums1[i+1] + nums2[j]\n      result << [nums1[i], nums2[j]]\n      j += 1\n    else\n      result << [nums1[i], nums2[j]]\n      i += 1\n    end\n    k -= 1\n  end\n  result\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.first + pair.last }.take(k)\nend",
    "  nums1.product(nums2).sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair[0] + pair[1] }\n  result[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.first + pair.last }\n  result.take(k)\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.first + pair.last }\n  result[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  arr = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      arr << [n1, n2]\n    end\n  end\n  arr.sort_by { |pair| pair.sum }[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair[0] + pair[1] }\n  result[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "    return [] if nums1.empty? || nums2.empty?\n    res = []\n    nums1.each do |n1|\n        nums2.each do |n2|\n            res << [n1, n2]\n        end\n    end\n    res.sort_by! { |pair| pair.sum }\n    res[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      res << [n1, n2]\n    end\n  end\n  res.sort_by! { |pair| pair[0] + pair[1] }\n  res[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.sum }\n  result[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair[0] + pair[1] }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      result << [n1, n2]\n    end\n  end\n  result.sort_by! { |pair| pair.first + pair.last }\n  result.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  nums1.product(nums2).sort_by { |pair| pair.sum }.take(k)\nend",
    "  nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.reduce(:+) }[0...k]\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  nums1.product(nums2).sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair[0] + pair[1] }.take(k)\nend",
    "  pairs = []\n  nums1.each do |x|\n    nums2.each do |y|\n      pairs << [x, y]\n    end\n  end\n  pairs.sort_by! { |pair| pair.first + pair.last }\n  pairs.take(k)\nend",
    "  # nums1.product(nums2).sort_by { |x, y| x + y }.take(k)\n  nums1.product(nums2).sort_by(&:sum).take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      result << [n1, n2]\n    end\n  end\n  result.sort_by { |pair| pair[0] + pair[1] }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\nend",
    "  nums1.product(nums2).sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  k = nums1.size * nums2.size if k > nums1.size * nums2.size\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.reduce(:+) }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  nums1.product(nums2).sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.first + pair.last }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.reduce(:+) }\n  pairs[0...k]\nend",
    "  nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\nend",
    "  nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      res << [n1, n2]\n    end\n  end\n  res.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  nums1.product(nums2).sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  k = nums1.length * nums2.length if k > nums1.length * nums2.length\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.reduce(:+) }\n  pairs[0...k]\nend",
    "  # sort the arrays\n  nums1.sort!\n  nums2.sort!",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }[0...k]\nend",
    "  nums1.product(nums2).sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.sum }\n  result[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair[0] + pair[1] }.take(k)\nend",
    "  nums1.product(nums2).map { |pair| pair.sum }.sort.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      res << [num1, num2]\n    end\n  end\n  res.sort_by! { |pair| pair.sum }\n  res[0...k]\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      res << [n1, n2]\n    end\n  end\n  res.sort_by! { |pair| pair.sum }\n  res[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.sum }\n  result[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  nums1.product(nums2).sort_by { |pair| pair.reduce(:+) }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.inject(:+) }\n  result[0...k]\nend",
    "  # nums1 = [1,7,11]\n  # nums2 = [2,4,6]\n  # k = 3\n  # output = [[1,2],[1,4],[1,6]]\n  #\n  # nums1 = [1,1,2]\n  # nums2 = [1,2,3]\n  # k = 2\n  # output = [[1,1],[1,1]]\n  #\n  # nums1 = [1,2]\n  # nums2 = [3]\n  # k = 3\n  # output = [[1,3],[2,3]]\n  #\n  # nums1 = [1,1,2]\n  # nums2 = [1,2,3]\n  # k = 10\n  # output = [[1,1],[1,1],[2,1],[1,2],[1,2],[2,2],[1,3],[1,3],[2,3]]",
    "  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      res << [n1, n2]\n    end\n  end\n  res.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      res << [num1, num2]\n    end\n  end\n  res.sort_by! { |pair| pair.sum }\n  res[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      res << [n1, n2]\n    end\n  end\n  res.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair[0] + pair[1] }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  nums1.product(nums2).sort_by { |pair| pair.sum }.take(k)\nend",
    "  nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\nend",
    "  nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\nend",
    "  nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\nend",
    "  # return [] if nums1.empty? || nums2.empty?\n  #\n  # pairs = []\n  # nums1.each do |n1|\n  #   nums2.each do |n2|\n  #     pairs << [n1, n2]\n  #   end\n  # end\n  #\n  # pairs.sort_by { |pair| pair.sum }.first(k)",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend",
    "  nums1.product(nums2).sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.sum }\n  result.take(k)\nend",
    "  # return [] if nums1.empty? || nums2.empty?\n  #\n  # pairs = []\n  # nums1.each do |num1|\n  #   nums2.each do |num2|\n  #     pairs << [num1, num2]\n  #   end\n  # end\n  #\n  # pairs.sort_by { |pair| pair.sum }.take(k)",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  nums1.product(nums2).sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.first + pair.last }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.reduce(:+) }\n  pairs[0...k]\nend",
    "  nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\nend"
  ]
}