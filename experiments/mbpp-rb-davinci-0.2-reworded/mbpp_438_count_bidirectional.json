{
  "name": "mbpp_438_count_bidirectional",
  "language": "rb",
  "prompt": "# Write a function to count bidirectional array pairs.\ndef count_bidirectional(test_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_bidirectional\n    candidate = method(:count_bidirectional)\n    assert_equal(3, candidate.call([[5, 6], [1, 2], [6, 5], [9, 1], [6, 5], [2, 1]]))\n    assert_equal(2, candidate.call([[5, 6], [1, 3], [6, 5], [9, 1], [6, 5], [2, 1]]))\n    assert_equal(4, candidate.call([[5, 6], [1, 2], [6, 5], [9, 2], [6, 5], [2, 1]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  count = 0\n  test_list.each_with_index do |num, index|\n    test_list.each_with_index do |num2, index2|\n      if num + num2 == 0 && index != index2\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  test_list.each_with_index do |num, idx|\n    test_list.each_with_index do |num2, idx2|\n      if idx2 > idx && num + num2 == 0\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  # Write your code here\nend",
    "  count = 0\n  test_list.each_with_index do |item, index|\n    if test_list[index + 1] == item.reverse\n      count += 1\n    end\n  end\n  count\nend",
    "  # Your code here\nend",
    "  count = 0\n  test_list.each_with_index do |item, index|\n    if test_list.include?(item.reverse) && test_list.index(item.reverse) != index\n      count += 1\n    end\n  end\n  count\nend",
    "  # Your code here\nend",
    "  # Your code here\nend",
    "  count = 0\n  test_list.each_with_index do |value, index|\n    test_list.each_with_index do |value2, index2|\n      if index2 > index && value == value2.reverse\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  test_list.each do |x|\n    test_list.each do |y|\n      if x + y == 0\n        count += 1\n      end\n    end\n  end\n  count / 2\nend",
    "  count = 0\n  test_list.each do |i|\n    test_list.each do |j|\n      if i == j.reverse\n        count += 1\n      end\n    end\n  end\n  count / 2\nend",
    "  count = 0\n  test_list.each do |num|\n    if test_list.include?(num * -1)\n      count += 1\n    end\n  end\n  count / 2\nend",
    "  # Write your code here\n  count = 0\n  test_list.each_with_index do |item, index|\n    if test_list.include?(-item) && index != test_list.index(-item)\n      count += 1\n    end\n  end\n  count\nend",
    "  count = 0\n  test_list.each_with_index do |num, index|\n    if test_list[index + 1] == num\n      count += 1\n    end\n  end\n  count\nend",
    "  count = 0\n  test_list.each do |x|\n    test_list.each do |y|\n      if x == y\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  test_list.each_with_index do |num, index|\n    test_list.each_with_index do |num2, index2|\n      if num == test_list[index2] && index != index2\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  test_list.each_with_index do |num, index|\n    test_list.each_with_index do |num2, index2|\n      if index2 > index\n        if num + num2 == 0\n          count += 1\n        end\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  test_list.each do |x|\n    test_list.each do |y|\n      if x == y.reverse\n        count += 1\n      end\n    end\n  end\n  count / 2\nend",
    "  test_list.count { |x| test_list.include?(x.reverse) }\nend",
    "  count = 0\n  test_list.each_with_index do |item, index|\n    if index < test_list.length - 1\n      if item == test_list[index + 1]\n        count += 1\n      end\n    end\n  end\n  count\nend"
  ]
}