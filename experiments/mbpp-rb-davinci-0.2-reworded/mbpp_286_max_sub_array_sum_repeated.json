{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "rb",
  "prompt": "# Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sub_array_sum_repeated\n    candidate = method(:max_sub_array_sum_repeated)\n    assert_equal(30, candidate.call([10, 20, -30, -1], 4, 3))\n    assert_equal(59, candidate.call([-1, 10, 20], 3, 2))\n    assert_equal(-1, candidate.call([-1, -2, -3], 3, 3))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  max_sum = 0\n  for i in 0..n-1\n    sum = 0\n    for j in 0..n-1\n      sum += a[j]\n      max_sum = [max_sum, sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n      curr_sum = [curr_sum, 0].max\n    end\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  curr_sum = 0",
    "  max_sum = 0\n  for i in 0...n\n    curr_sum = 0\n    for j in 0...n\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = -Float::INFINITY\n  for i in 0..k-1\n    current_sum = 0\n    for j in 0..n-1\n      current_sum += a[j]\n      max_sum = [max_sum, current_sum].max\n      current_sum = [current_sum, 0].max\n    end\n  end\n  max_sum\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  for i in 0...n\n    curr_sum = 0\n    for j in 0...n\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n      curr_sum = [curr_sum, 0].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0...n\n    sum = 0\n    for j in 0...n\n      sum += a[j]\n      max_sum = [max_sum, sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = -Float::INFINITY\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n    if i == n-1\n      i = -1\n      k -= 1\n      if k == 0\n        break\n      end\n    end\n    max_sum = [max_sum, curr_sum].max\n    curr_sum = [curr_sum, 0].max\n  end\n  max_sum\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  max_ending_here = 0\n  for i in 0..n-1\n    max_ending_here += a[i]\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n    if max_sum < max_ending_here\n      max_sum = max_ending_here\n    end\n  end\n  max_sum *= k\n  return max_sum\nend",
    "  max_so_far = -Float::INFINITY\n  max_ending_here = 0\n  for i in 0...n\n    max_ending_here = max_ending_here + a[i]\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n  end\n  max_sub_array_sum = max_so_far\n  max_wrap = 0\n  for i in 0...n\n    max_wrap += a[i]\n    a[i] = -a[i]\n  end\n  max_so_far = -Float::INFINITY\n  max_ending_here = 0\n  for i in 0...n\n    max_ending_here = max_ending_here + a[i]\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n  end\n  max_wrap = max_wrap + max_so_far\n  if k == 1\n    return max_sub_array_sum\n  else\n    return [max_sub_array_sum, max_wrap].max\n  end\nend",
    "  max_sum = -Float::INFINITY\n  current_sum = 0\n  for i in 0...n\n    current_sum += a[i]\n    max_sum = [max_sum, current_sum].max\n    current_sum = 0 if current_sum < 0\n  end\n  max_sum_prefix = max_sum\n  max_sum_suffix = max_sum\n  current_sum = 0\n  for i in 0...n\n    current_sum += a[i]\n    max_sum_prefix = [max_sum_prefix, current_sum].max\n  end\n  current_sum = 0\n  for i in (n - 1).downto(0)\n    current_sum += a[i]\n    max_sum_suffix = [max_sum_suffix, current_sum].max\n  end\n  total_sum = a.sum\n  max_sum_middle = total_sum * (k - 2)\n  max_sum_middle += max_sum_prefix + max_sum_suffix\n  [max_sum, max_sum_middle].max\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n      curr_sum = [curr_sum, 0].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0...n\n    sum = 0\n    for j in 0...k\n      sum += a[(i + j) % n]\n    end\n    max_sum = [max_sum, sum].max\n  end\n  max_sum\nend",
    "  max_so_far = a[0]\n  max_ending_here = a[0]\n  for i in 1...n\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < a[i]\n      max_ending_here = a[i]\n    end\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n  end\n  max_wrap = 0\n  for i in 0...n\n    max_wrap += a[i]\n    a[i] = -a[i]\n  end\n  max_wrap = max_wrap + max_sub_array_sum(a, n)\n  max_wrap = k * max_wrap\n  return [max_so_far, max_wrap].max\nend",
    "  max_sum = -Float::INFINITY\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n    if curr_sum > max_sum\n      max_sum = curr_sum\n    end\n    if curr_sum < 0\n      curr_sum = 0\n    end\n  end",
    "  # kadane's algorithm\n  max_so_far = 0\n  max_ending_here = 0\n  for i in 0...n\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n  end",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n      curr_sum = [curr_sum, 0].max\n    end\n  end\n  max_sum * k\nend"
  ]
}