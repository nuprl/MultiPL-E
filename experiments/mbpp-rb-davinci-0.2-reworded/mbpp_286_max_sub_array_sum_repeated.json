{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "rb",
  "prompt": "# Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sub_array_sum_repeated\n    candidate = method(:max_sub_array_sum_repeated)\n    assert_equal(30, candidate.call([10, 20, -30, -1], 4, 3))\n    assert_equal(59, candidate.call([-1, 10, 20], 3, 2))\n    assert_equal(-1, candidate.call([-1, -2, -3], 3, 3))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  max_sum = 0\n  for i in 0..n-1\n    sum = 0\n    for j in 0..n-1\n      sum += a[j]\n      max_sum = [max_sum, sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n      curr_sum = [curr_sum, 0].max\n    end\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  curr_sum = 0",
    "  max_sum = 0\n  for i in 0...n\n    curr_sum = 0\n    for j in 0...n\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = -Float::INFINITY\n  for i in 0..k-1\n    current_sum = 0\n    for j in 0..n-1\n      current_sum += a[j]\n      max_sum = [max_sum, current_sum].max\n      current_sum = [current_sum, 0].max\n    end\n  end\n  max_sum\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  for i in 0...n\n    curr_sum = 0\n    for j in 0...n\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n      curr_sum = [curr_sum, 0].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0...n\n    sum = 0\n    for j in 0...n\n      sum += a[j]\n      max_sum = [max_sum, sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = -Float::INFINITY\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n    if i == n-1\n      i = -1\n      k -= 1\n      if k == 0\n        break\n      end\n    end\n    max_sum = [max_sum, curr_sum].max\n    curr_sum = [curr_sum, 0].max\n  end\n  max_sum\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  max_ending_here = 0\n  for i in 0..n-1\n    max_ending_here += a[i]\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n    if max_sum < max_ending_here\n      max_sum = max_ending_here\n    end\n  end\n  max_sum *= k\n  return max_sum\nend",
    "  max_so_far = -Float::INFINITY\n  max_ending_here = 0\n  for i in 0...n\n    max_ending_here = max_ending_here + a[i]\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n  end\n  max_sub_array_sum = max_so_far\n  max_wrap = 0\n  for i in 0...n\n    max_wrap += a[i]\n    a[i] = -a[i]\n  end\n  max_so_far = -Float::INFINITY\n  max_ending_here = 0\n  for i in 0...n\n    max_ending_here = max_ending_here + a[i]\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n  end\n  max_wrap = max_wrap + max_so_far\n  if k == 1\n    return max_sub_array_sum\n  else\n    return [max_sub_array_sum, max_wrap].max\n  end\nend",
    "  max_sum = -Float::INFINITY\n  current_sum = 0\n  for i in 0...n\n    current_sum += a[i]\n    max_sum = [max_sum, current_sum].max\n    current_sum = 0 if current_sum < 0\n  end\n  max_sum_prefix = max_sum\n  max_sum_suffix = max_sum\n  current_sum = 0\n  for i in 0...n\n    current_sum += a[i]\n    max_sum_prefix = [max_sum_prefix, current_sum].max\n  end\n  current_sum = 0\n  for i in (n - 1).downto(0)\n    current_sum += a[i]\n    max_sum_suffix = [max_sum_suffix, current_sum].max\n  end\n  total_sum = a.sum\n  max_sum_middle = total_sum * (k - 2)\n  max_sum_middle += max_sum_prefix + max_sum_suffix\n  [max_sum, max_sum_middle].max\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n      curr_sum = [curr_sum, 0].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0...n\n    sum = 0\n    for j in 0...k\n      sum += a[(i + j) % n]\n    end\n    max_sum = [max_sum, sum].max\n  end\n  max_sum\nend",
    "  max_so_far = a[0]\n  max_ending_here = a[0]\n  for i in 1...n\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < a[i]\n      max_ending_here = a[i]\n    end\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n  end\n  max_wrap = 0\n  for i in 0...n\n    max_wrap += a[i]\n    a[i] = -a[i]\n  end\n  max_wrap = max_wrap + max_sub_array_sum(a, n)\n  max_wrap = k * max_wrap\n  return [max_so_far, max_wrap].max\nend",
    "  max_sum = -Float::INFINITY\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n    if curr_sum > max_sum\n      max_sum = curr_sum\n    end\n    if curr_sum < 0\n      curr_sum = 0\n    end\n  end",
    "  # kadane's algorithm\n  max_so_far = 0\n  max_ending_here = 0\n  for i in 0...n\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n  end",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n      curr_sum = [curr_sum, 0].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0...n\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  for i in 0...n\n    curr_sum += (k - 1) * a[i]\n    max_sum = [max_sum, curr_sum].max\n  end\n  max_sum\nend",
    "  max_sum = 0\n  for i in 0...k\n    max_sum += a.max\n  end\n  puts max_sum\nend",
    "  max_sum = -Float::INFINITY\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n    if i == n-1\n      k -= 1\n      curr_sum = curr_sum * k\n    end\n    max_sum = [max_sum, curr_sum].max\n    curr_sum = [curr_sum, 0].max\n  end\n  max_sum\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..k-1\n      curr_sum += a[i]\n    end\n    max_sum = [max_sum, curr_sum].max\n  end\n  max_sum\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  max_ending_here = 0\n  for i in 0..k-1\n    max_ending_here = 0\n    for j in 0..n-1\n      max_ending_here += a[j]\n      max_ending_here = [max_ending_here, 0].max\n      max_sum = [max_sum, max_ending_here].max\n    end\n  end\n  return max_sum\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  for i in 0..n-2\n    curr_sum = curr_sum - a[i] + a[i] * k\n    max_sum = [max_sum, curr_sum].max\n  end\n  max_sum\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n      curr_sum = [curr_sum, 0].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  max_so_far = 0\n  max_ending_here = 0\n  for i in 0..n-1\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n  end\n  max_sum = max_so_far * k\n  max_wrap = 0\n  for i in 0..n-1\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  max_ending_here = 0\n  for i in 0..n-1\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n  end\n  max_wrap = max_wrap + max_so_far\n  if max_wrap > max_sum\n    max_sum = max_wrap\n  end\n  return max_sum\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..k-1\n      curr_sum += a[i]\n    end\n    max_sum = [max_sum, curr_sum].max\n  end\n  max_sum\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n      curr_sum = 0 if curr_sum < 0\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = -Float::INFINITY\n  current_sum = 0\n  for i in 0..n-1\n    current_sum += a[i]\n    max_sum = [max_sum, current_sum].max\n    current_sum = 0 if current_sum < 0\n  end",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = -Float::INFINITY\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum = curr_sum + a[i]\n    if curr_sum > max_sum\n      max_sum = curr_sum\n    end\n    if curr_sum < 0\n      curr_sum = 0\n    end\n  end",
    "  max_so_far = 0\n  max_ending_here = 0\n  for i in 0...k\n    for j in 0...n\n      max_ending_here = max_ending_here + a[j]\n      if max_so_far < max_ending_here\n        max_so_far = max_ending_here\n      end\n      if max_ending_here < 0\n        max_ending_here = 0\n      end\n    end\n  end\n  return max_so_far\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0...n\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  max_val = curr_sum\n  min_val = curr_sum\n  for i in 0...n\n    max_val = [max_val, curr_sum].max\n    min_val = [min_val, curr_sum].min\n    curr_sum -= a[i]\n  end\n  max_sum = [max_sum, (curr_sum - min_val)].max\n  curr_sum = max_val\n  for i in 0...n\n    curr_sum += a[i]\n    max_sum = [max_sum, curr_sum].max\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  max_sum_so_far = 0\n  for i in 0..k-1\n    max_sum_so_far = 0\n    for j in 0..n-1\n      max_sum_so_far += a[j]\n      max_sum_so_far = [max_sum_so_far, a[j]].max\n      max_sum = [max_sum, max_sum_so_far].max\n    end\n  end\n  max_sum\nend",
    "  max_sum = 0\n  for i in 0...n\n    curr_sum = 0\n    for j in 0...n\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  max_so_far = 0\n  max_element = a.max\n  sum_of_all_elements = a.reduce(:+)",
    "  max_sum = 0\n  max_sum_so_far = 0\n  max_element = a.max\n  return max_element if max_element < 0\n  for i in 0..n-1\n    max_sum_so_far = max_sum_so_far + a[i]\n    max_sum_so_far = 0 if max_sum_so_far < 0\n    max_sum = max_sum_so_far if max_sum_so_far > max_sum\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  for i in 0..n-2\n    curr_sum = curr_sum + (k-1)*a[i]\n    max_sum = [max_sum, curr_sum].max\n  end\n  return max_sum\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0...n\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  for i in 0...n\n    curr_sum = curr_sum - a[i] + a[i]\n    max_sum = [max_sum, curr_sum].max\n  end\n  return max_sum * k\nend",
    "  max_sum = -Float::INFINITY\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n    max_sum = [max_sum, curr_sum].max\n    curr_sum = 0 if curr_sum < 0\n  end\n  max_sum_all = curr_sum\n  for i in 0..n-1\n    curr_sum += a[i]\n    max_sum = [max_sum, curr_sum].max\n    curr_sum = 0 if curr_sum < 0\n  end\n  max_sum_all = curr_sum if curr_sum > max_sum_all\n  max_sum_all = 0 if max_sum_all < 0\n  max_sum_all *= k\n  max_sum_all = max_sum if max_sum > max_sum_all\n  max_sum_all\nend",
    "  max_so_far = 0\n  max_ending_here = 0\n  for i in 0...k\n    max_ending_here = 0\n    for j in 0...n\n      max_ending_here += a[j]\n      if max_so_far < max_ending_here\n        max_so_far = max_ending_here\n      end\n      if max_ending_here < 0\n        max_ending_here = 0\n      end\n    end\n  end\n  return max_so_far\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  for i in 0..n-2\n    curr_sum = curr_sum - a[i] + a[i+n]\n    max_sum = [max_sum, curr_sum].max\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n      curr_sum = [curr_sum, 0].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n      curr_sum = [curr_sum, 0].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0...k\n    curr_sum = 0\n    for j in 0...n\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n      curr_sum = [curr_sum, 0].max\n    end\n  end\n  max_sum\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  return max_sum * k\nend",
    "  return 0 if n == 0\n  max_so_far = 0\n  max_ending_here = 0\n  for i in 0...n\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0\n    return max_so_far\n  end\n  max_so_far = max_so_far * k\n  max_wrap = 0\n  for i in 0...n\n    max_wrap += a[i]\n    a[i] = -a[i]\n  end\n  max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1)\n  return [max_so_far, max_wrap].max\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  current_sum = 0\n  for i in 0...n\n    current_sum += a[i]\n  end\n  max_sum = current_sum\n  for i in 0...n\n    current_sum = current_sum + (k - 1) * a[i]\n    max_sum = [max_sum, current_sum].max\n  end\n  max_sum\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  for i in 0..n-2\n    curr_sum = curr_sum - a[i] + a[i+n]\n    max_sum = [max_sum, curr_sum].max\n  end\n  max_sum *= k\n  return max_sum\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    sum = 0\n    for j in 0..n-1\n      sum += a[j]\n      if sum > max_sum\n        max_sum = sum\n      end\n    end\n  end\n  return max_sum * k\nend",
    "  max_so_far = -Float::INFINITY\n  max_ending_here = 0\n  for i in 0..n-1\n    max_ending_here = max_ending_here + a[i]\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n  end\n  max_subarray_sum = max_so_far\n  max_wrap = 0\n  for i in 0..n-1\n    max_wrap += a[i]\n    a[i] = -a[i]\n  end\n  max_so_far = -Float::INFINITY\n  max_ending_here = 0\n  for i in 0..n-1\n    max_ending_here = max_ending_here + a[i]\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n  end\n  max_wrap = max_wrap + max_so_far\n  if k == 1\n    return max_subarray_sum\n  elsif max_wrap > max_subarray_sum\n    return max_wrap\n  else\n    return max_subarray_sum\n  end\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    max_sum += a[i]\n  end\n  max_sum *= k\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n  end\n  max_sum = [max_sum, curr_sum].max\n  prev_sum = curr_sum\n  for i in 0..n-2\n    curr_sum = prev_sum - a[i] + a[(i+n)%n]\n    max_sum = [max_sum, curr_sum].max\n    prev_sum = curr_sum\n  end\n  max_sum\nend",
    "  max_sum = -Float::INFINITY\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum if curr_sum > max_sum\n  for i in 0..n-2\n    curr_sum = curr_sum - a[i] + a[i]*k\n    max_sum = curr_sum if curr_sum > max_sum\n  end\n  max_sum\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n      curr_sum = [curr_sum, 0].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  for i in 0..n-2\n    curr_sum = curr_sum - a[i] + a[i+n]\n    max_sum = [max_sum, curr_sum].max\n  end\n  max_sum *= k\nend",
    "  max_so_far = 0\n  max_ending_here = 0\n  for i in 0...n\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n  end\n  max_wrap = 0\n  for i in 0...n\n    max_wrap += a[i]\n    a[i] = -a[i]\n  end\n  max_wrap = max_wrap + max_sub_array_sum(a, n)\n  if max_wrap > max_so_far\n    return max_wrap\n  else\n    return max_so_far\n  end\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    current_sum = 0\n    for j in 0..n-1\n      current_sum += a[j]\n      max_sum = [max_sum, current_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0...n\n    max_sum += a[i]\n  end",
    "  max_so_far = -Float::INFINITY\n  max_ending_here = 0\n  (0...n*k).each do |i|\n    max_ending_here = max_ending_here + a[i % n]\n    max_so_far = [max_so_far, max_ending_here].max\n    max_ending_here = [max_ending_here, 0].max\n  end\n  max_so_far\nend",
    "  max_sum = 0\n  for i in 0...n\n    sum = 0\n    for j in 0...n\n      sum += a[j]\n      if sum > max_sum\n        max_sum = sum\n      end\n    end\n  end\n  return max_sum * k\nend",
    "  max_so_far = -Float::INFINITY\n  max_ending_here = 0\n  for i in 0...n\n    max_ending_here = max_ending_here + a[i]\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n  end\n  max_sub_array_sum = max_so_far\n  for i in 0...n\n    max_so_far = max_so_far + a[i]\n    if max_so_far > max_sub_array_sum\n      max_sub_array_sum = max_so_far\n    end\n  end\n  max_sub_array_sum * k\nend",
    "  max_sum = 0\n  max_sum_so_far = 0\n  for i in 0..k-1\n    max_sum_so_far = 0\n    for j in 0..n-1\n      max_sum_so_far += a[j]\n      max_sum_so_far = max_sum_so_far < 0 ? 0 : max_sum_so_far\n      max_sum = max_sum_so_far if max_sum_so_far > max_sum\n    end\n  end\n  max_sum\nend",
    "  max_sum = -Float::INFINITY\n  current_sum = 0\n  for i in 0..(n*k-1)\n    current_sum += a[i%n]\n    max_sum = [max_sum, current_sum].max\n    current_sum = 0 if current_sum < 0\n  end\n  max_sum\nend",
    "  max_sum = 0\n  for i in 0...n\n    curr_sum = 0\n    for j in 0...n\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  max_ending_here = 0\n  for i in 0..n-1\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n    if max_sum < max_ending_here\n      max_sum = max_ending_here\n    end\n  end\n  max_sum = max_sum * k\n  max_wrap = 0\n  for i in 0..n-1\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1)\n  return [max_sum, max_wrap].max\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n      curr_sum = [curr_sum, 0].max\n    end\n  end\n  return max_sum * k\nend",
    "  return 0 if n == 0\n  max_so_far = a[0]\n  max_ending_here = a[0]\n  for i in 1...n\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < a[i]\n      max_ending_here = a[i]\n    end\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n  end\n  max_wrap = 0\n  for i in 0...n\n    max_wrap += a[i]\n    a[i] = -a[i]\n  end\n  max_wrap = max_wrap + max_sub_array_sum(a, n)\n  max_wrap = 0 if max_wrap == 0\n  max_kadane = max_so_far\n  max_so_far = max_so_far * k\n  max_so_far = [max_so_far, max_wrap].max\n  max_so_far = [max_so_far, max_kadane].max\n  max_so_far\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n      curr_sum = [curr_sum, 0].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = -Float::INFINITY\n  for i in 0...n\n    sum = 0\n    for j in 0...n\n      sum += a[(i + j) % n]\n    end\n    max_sum = [max_sum, sum].max\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0...n\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  max_val = curr_sum\n  min_val = curr_sum\n  for i in 0...n\n    curr_sum = curr_sum - a[i] + a[i]\n    max_val = [max_val, curr_sum].max\n    min_val = [min_val, curr_sum].min\n    max_sum = [max_sum, (k - 2) * min_val + max_val].max\n  end\n  return max_sum\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0..k-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n      curr_sum = [curr_sum, 0].max\n    end\n  end\n  return max_sum\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  for i in 0...n\n    curr_sum = 0\n    for j in 0...n\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0...n\n    curr_sum = 0\n    for j in 0...n\n      curr_sum += a[j]\n      curr_sum = curr_sum % k\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum\nend",
    "  max_sum = -Float::INFINITY\n  for i in 0...n\n    curr_sum = 0\n    for j in 0...n\n      curr_sum += a[(i + j) % n]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n      curr_sum = [curr_sum, 0].max\n    end\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  max_so_far = 0\n  for i in 0..k-1\n    max_so_far = 0\n    for j in 0..n-1\n      max_so_far += a[j]\n      max_sum = [max_sum, max_so_far].max\n    end\n  end\n  max_sum\nend",
    "  max_so_far = 0\n  max_ending_here = 0\n  max_element = a.max\n  return max_element if max_element <= 0\n  for i in 0..n-1\n    max_ending_here = max_ending_here + a[i]\n    max_ending_here = 0 if max_ending_here < 0\n    max_so_far = [max_so_far, max_ending_here].max\n  end\n  return (max_so_far * k)\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    sum = 0\n    for j in 0..n-1\n      sum += a[j]\n      if sum > max_sum\n        max_sum = sum\n      end\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  sum = 0\n  for i in 0..n-1\n    sum += a[i]\n  end\n  max_sum = sum\n  for i in 0..n-2\n    sum = sum - a[i] + a[i+n]\n    max_sum = [max_sum, sum].max\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  for i in 0...n\n    sum = 0\n    for j in 0...n\n      sum += a[(i+j)%n]\n    end\n    max_sum = [max_sum, sum].max\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = -Float::INFINITY\n  for i in 0..n-1\n    sum = 0\n    for j in 0..k-1\n      sum += a[(i+j)%n]\n    end\n    max_sum = [max_sum, sum].max\n  end\n  max_sum\nend",
    "  max_sum = 0\n  max_ending_here = 0\n  for i in 0..n-1\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n    if max_sum < max_ending_here\n      max_sum = max_ending_here\n    end\n  end\n  max_sum *= k\n  return max_sum\nend",
    "  max_sum = 0\n  sum = 0\n  for i in 0..n-1\n    sum += a[i]\n  end\n  max_sum = sum\n  for i in 0..n-2\n    sum = sum - a[i] + a[i+1]\n    max_sum = sum if sum > max_sum\n  end\n  max_sum *= k\n  return max_sum\nend",
    "  max_sum = 0\n  for i in 0...n\n    curr_sum = 0\n    for j in 0...n\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_so_far = -Float::INFINITY\n  max_ending_here = 0\n  for i in 0..n-1\n    max_ending_here = max_ending_here + a[i]\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n  end\n  max_sub_array_sum_k_times(a, n, k) * k - (max_so_far * (k-1))\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0...n\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  max_val = curr_sum\n  min_val = curr_sum\n  for i in 0...n\n    max_val = [max_val, curr_sum].max\n    min_val = [min_val, curr_sum].min\n    curr_sum -= a[i]\n  end\n  max_sum = [max_sum, (curr_sum - min_val) * k].max\n  curr_sum = 0\n  for i in 0...n\n    curr_sum += a[i]\n    max_sum = [max_sum, curr_sum - min_val].max\n  end\n  max_sum\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  for i in 0..n-2\n    curr_sum = curr_sum + (k-1)*a[i]\n    max_sum = [max_sum, curr_sum].max\n  end\n  return max_sum\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  # find the max sum of the sub array\n  max_sub_array_sum(a, n) * k\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  for i in 0..n-2\n    curr_sum = curr_sum - a[i] + a[i+n]\n    max_sum = [max_sum, curr_sum].max\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    max_sum += a[i]\n  end\n  max_sum *= k\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n  end\n  max_sum = [max_sum, curr_sum].max\n  curr_val = curr_sum\n  for i in 0..n-2\n    curr_val = curr_val - a[i] + a[i+n]\n    curr_sum = [curr_sum, curr_val].max\n    max_sum = [max_sum, curr_sum].max\n  end\n  return max_sum\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    sum = 0\n    for j in 0..k-1\n      sum += a[i]\n    end\n    max_sum = sum if sum > max_sum\n  end\n  max_sum\nend",
    "  max_so_far = a[0]\n  curr_max = a[0]\n  for i in 1...n\n    curr_max = [a[i], curr_max + a[i]].max\n    max_so_far = [max_so_far, curr_max].max\n  end\n  max_ending_here = 0\n  min_ending_here = 0\n  for i in 0...n\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n    min_ending_here = min_ending_here + a[i]\n    if min_ending_here > 0\n      min_ending_here = 0\n    end\n    if min_ending_here < 0\n      max_so_far = [max_so_far, min_ending_here].max\n    end\n  end\n  return [max_so_far, (max_so_far * k - sum(a, n))].max\nend",
    "  max_sum = -Float::INFINITY\n  current_sum = 0\n  for i in 0..n-1\n    current_sum += a[i]\n    if i == n-1\n      current_sum = current_sum * k\n    end\n    max_sum = [max_sum, current_sum].max\n    current_sum = [current_sum, 0].max\n  end\n  max_sum\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  max_so_far = 0\n  max_element = a.max\n  sum_of_all_elements = a.sum\n  if max_element < 0\n    max_sum = max_element\n  else\n    max_sum = sum_of_all_elements * k\n    max_so_far = max_sum\n    for i in 0..n-1\n      max_so_far = max_so_far + sum_of_all_elements - (n * a[i])\n      max_sum = [max_sum, max_so_far].max\n    end\n  end\n  max_sum\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  for i in 0..n-2\n    curr_sum = curr_sum - a[i] + a[i+n]\n    max_sum = [max_sum, curr_sum].max\n  end\n  return max_sum * k\nend",
    "  max_sum = -Float::INFINITY\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0...n\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  for i in 0...n\n    curr_sum += (k - 1) * a[i]\n    max_sum = curr_sum if curr_sum > max_sum\n  end\n  max_sum\nend",
    "  max_sum = 0\n  sum = 0\n  for i in 0..n-1\n    sum += a[i]\n  end\n  max_sum = sum\n  for i in 0..n-2\n    sum = sum - a[i] + a[i+1]\n    max_sum = sum if sum > max_sum\n  end\n  max_sum *= k\n  return max_sum\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    max_sum += a[i]\n  end\n  max_sum *= k\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n  end\n  max_sum = [max_sum, curr_sum].max\n  prev_sum = curr_sum\n  for i in 0..n-2\n    curr_sum = prev_sum - a[i] + a[i - n]\n    max_sum = [max_sum, curr_sum].max\n    prev_sum = curr_sum\n  end\n  max_sum\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      if curr_sum < 0\n        curr_sum = 0\n      end\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n      curr_sum = [curr_sum, 0].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0...n\n    max_sum += a[i]\n  end\n  max_sum *= k\n  curr_sum = 0\n  for i in 0...n\n    curr_sum += a[i]\n  end\n  max_sum = [max_sum, curr_sum].max\n  curr_val = curr_sum\n  for i in 0...n\n    curr_val = curr_val - a[i] + a[(i + n) % n]\n    curr_sum = [curr_sum, curr_val].max\n    max_sum = [max_sum, curr_sum].max\n  end\n  max_sum\nend",
    "  max_sum = 0\n  for i in 0...n\n    curr_sum = 0\n    for j in 0...n\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n      curr_sum = 0 if curr_sum < 0\n    end\n  end\n  max_sum * k\nend",
    "  # kadane's algorithm\n  max_so_far = -Float::INFINITY\n  max_ending_here = 0\n  for i in 0..n-1\n    max_ending_here = max_ending_here + a[i]\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n  end\n  max_wrap = 0\n  for i in 0..n-1\n    max_wrap += a[i]\n    a[i] = -a[i]\n  end\n  max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1)\n  return [max_so_far, max_wrap].max\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    max_sum += a[i]\n  end\n  max_sum *= k\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n  end\n  max_sum = [max_sum, curr_sum].max\n  prev_sum = curr_sum\n  for i in 0..n-2\n    curr_sum = prev_sum - a[i] + a[(i+n)%n]\n    max_sum = [max_sum, curr_sum].max\n    prev_sum = curr_sum\n  end\n  max_sum\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  for i in 0..n-2\n    curr_sum = curr_sum - a[i] + a[i+n]\n    max_sum = [max_sum, curr_sum].max\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0...n\n    curr_sum = 0\n    for j in 0...n\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n      curr_sum = 0 if curr_sum < 0\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  for i in 0..n-2\n    curr_sum = curr_sum - a[i] + a[i+n]\n    max_sum = [max_sum, curr_sum].max\n  end\n  return max_sum * k\nend",
    "  max_so_far = 0\n  max_ending_here = 0\n  for i in 0...n\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n  end\n  max_so_far * k\nend",
    "  max_sum = 0\n  for i in 0...n\n    max_sum += a[i]\n  end\n  max_sum *= k\n  curr_sum = 0\n  for i in 0...n\n    curr_sum += a[i]\n  end\n  max_sum = [max_sum, curr_sum].max\n  prev_sum = curr_sum\n  for i in 0...n\n    curr_sum = prev_sum - a[i - 1] + a[(i + n - 1) % n]\n    max_sum = [max_sum, curr_sum].max\n    prev_sum = curr_sum\n  end\n  max_sum\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0...n\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  for i in 0...n\n    curr_sum = curr_sum - a[i] + a[i] * k\n    max_sum = [max_sum, curr_sum].max\n  end\n  max_sum\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    max_sum += a[i]\n  end\n  max_sum *= k\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n  end\n  max_sum = [max_sum, curr_sum].max\n  prev_sum = curr_sum\n  for i in 0..n-2\n    curr_sum = prev_sum - a[i] + a[(i+n)%n]\n    max_sum = [max_sum, curr_sum].max\n    prev_sum = curr_sum\n  end\n  max_sum\nend",
    "  max_sum = 0\n  for i in 0..k-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n      curr_sum = [curr_sum, 0].max\n    end\n  end\n  max_sum\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  for i in 0..n-2\n    curr_sum = curr_sum - a[i] + a[i+n]\n    max_sum = curr_sum if curr_sum > max_sum\n  end\n  return max_sum * k\nend",
    "  max_so_far = 0\n  max_ending_here = 0\n  for i in 0..n-1\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n  end\n  max_sub_array_sum = max_so_far\n  max_wrap = 0\n  for i in 0..n-1\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  max_so_far = 0\n  max_ending_here = 0\n  for i in 0..n-1\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n  end\n  max_wrap = max_wrap + max_so_far\n  if k == 1\n    return max_sub_array_sum\n  end\n  if max_wrap > max_sub_array_sum and max_wrap > 0\n    return max_wrap\n  else\n    return max_sub_array_sum\n  end\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  for i in 0..n-2\n    curr_sum = curr_sum - a[i] + a[i+n]\n    max_sum = [max_sum, curr_sum].max\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  return max_sum * k\nend",
    "  max_sum = -Float::INFINITY\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = -Float::INFINITY\n  curr_sum = 0\n  (0..n-1).each do |i|\n    curr_sum += a[i]\n    max_sum = [max_sum, curr_sum].max\n    curr_sum = 0 if curr_sum < 0\n  end",
    "  max_sum = -Float::INFINITY\n  for i in 0...n\n    curr_sum = 0\n    for j in 0...n\n      curr_sum += a[(i + j) % n]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    max_sum += a[i]\n  end\n  max_sum *= k\n  max_ending_here = 0\n  max_so_far = 0\n  for i in 0..n-1\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n  end\n  max_sum = [max_sum, max_so_far * k, max_so_far].max\n  return max_sum\nend",
    "  max_sum = 0\n  for i in 0...n\n    curr_sum = 0\n    for j in 0...n\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  return max_sum * k\nend",
    "  max_sum = -Float::INFINITY\n  curr_sum = 0\n  for i in 0...n\n    curr_sum += a[i]\n    max_sum = [max_sum, curr_sum].max\n    curr_sum = 0 if curr_sum < 0\n  end\n  max_sum *= k\n  curr_sum = 0\n  for i in 0...n\n    curr_sum += a[i]\n    curr_sum = 0 if curr_sum < 0\n  end\n  max_sum = [max_sum, curr_sum * (k - 2)].max if k > 2\n  max_sum\nend",
    "  max_sum = -Float::INFINITY\n  for i in 0..k-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n      curr_sum = [curr_sum, 0].max\n    end\n  end\n  max_sum\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    max_sum += a[i]\n  end\n  max_sum *= k\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n  end\n  max_sum = [max_sum, curr_sum].max\n  prev_sum = curr_sum\n  for i in 0..n-2\n    curr_sum = prev_sum - a[i] + a[(i+n)%n]\n    max_sum = [max_sum, curr_sum].max\n    prev_sum = curr_sum\n  end\n  max_sum\nend",
    "  max_sum = 0\n  for i in 0..k-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n      curr_sum = [curr_sum, 0].max\n    end\n  end\n  max_sum\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      if curr_sum < 0\n        curr_sum = 0\n      end\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    max_sum += a[i]\n  end\n  max_sum *= k\n  curr_max = 0\n  for i in 0..n-1\n    curr_max += a[i]\n  end\n  max_sum = [max_sum, curr_max].max\n  prev_val = curr_max\n  for i in 0..n-2\n    curr_max = prev_val - a[i] + a[(i+n)%n]\n    max_sum = [max_sum, curr_max].max\n    prev_val = curr_max\n  end\n  max_sum\nend",
    "  max_sum = -Float::INFINITY\n  max_ending_here = 0\n  for i in 0..n-1\n    max_ending_here = max_ending_here + a[i]\n    if max_sum < max_ending_here\n      max_sum = max_ending_here\n    end\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n  end\n  max_sum = max_sum * k\n  max_ending_here = 0\n  for i in 0..n-1\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n  end\n  max_wrap = max_ending_here\n  for i in 0..n-1\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here > max_wrap\n      max_wrap = max_ending_here\n    end\n  end\n  max_wrap = max_wrap * (k-2)\n  max_wrap = max_wrap + max_sum\n  return max_wrap\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n      curr_sum = [0, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  return max_sum * k\nend",
    "  max_so_far = -Float::INFINITY\n  max_ending_here = 0\n  for i in 0..n-1\n    max_ending_here = max_ending_here + a[i]\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n  end\n  max_sub_array_sum_k_times(a, n, k) - (k-1) * max_sub_array_sum_k_times(a, n, 1)\nend",
    "  max_so_far = -Float::INFINITY\n  max_ending_here = 0\n  for i in 0...n\n    max_ending_here = max_ending_here + a[i]\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n  end\n  max_sub_array_sum = max_so_far\n  for i in 0...n\n    max_so_far = max_so_far - a[i]\n  end\n  max_so_far = max_so_far * (k - 2)\n  max_so_far = max_so_far + max_sub_array_sum\n  return max_so_far\nend",
    "  max_sum = -Float::INFINITY\n  current_sum = 0\n  for i in 0..n-1\n    current_sum += a[i]\n    if i == n-1\n      k -= 1\n      current_sum = current_sum * k\n    end\n    max_sum = [max_sum, current_sum].max\n    current_sum = [0, current_sum].max\n  end\n  max_sum\nend",
    "  max_sum = 0\n  max_sum_so_far = 0\n  max_ending_here = 0\n  for i in 0..n-1\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n    if max_sum_so_far < max_ending_here\n      max_sum_so_far = max_ending_here\n    end\n  end\n  max_sum = max_sum_so_far * k\n  max_sum_so_far = 0\n  for i in 0..n-1\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n    if max_sum_so_far < max_ending_here\n      max_sum_so_far = max_ending_here\n    end\n  end\n  max_sum_so_far = max_sum_so_far * (k-2)\n  max_ending_here = 0\n  for i in 0..n-1\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n    if max_sum_so_far < max_ending_here\n      max_sum_so_far = max_ending_here\n    end\n  end\n  max_sum_so_far = max_sum_so_far * (k-2)\n  max_sum = max_sum + max_sum_so_far\n  return max_sum\nend",
    "  max_so_far = 0\n  max_ending_here = 0\n  (0...n).each do |i|\n    max_ending_here = max_ending_here + a[i]\n    max_ending_here = 0 if max_ending_here < 0\n    max_so_far = max_ending_here if max_so_far < max_ending_here\n  end",
    "  max_so_far = 0\n  max_ending_here = 0\n  for i in 0...n\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0\n    return max_so_far\n  end\n  max_so_far = max_so_far * k\n  max_wrap = 0\n  for i in 0...n\n    max_wrap = max_wrap + a[i]\n  end\n  max_wrap = max_wrap * (k - 1)\n  for i in 0...n\n    max_wrap = max_wrap + a[i]\n    if max_wrap < 0\n      max_wrap = 0\n    end\n    if max_so_far < max_wrap\n      max_so_far = max_wrap\n    end\n  end\n  return max_so_far\nend",
    "  max_so_far = 0\n  max_ending_here = 0\n  for i in 0...n\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n  end\n  max_sub_array_sum = max_so_far\n  max_wrap = 0\n  for i in 0...n\n    max_wrap += a[i]\n    a[i] = -a[i]\n  end\n  max_so_far = 0\n  max_ending_here = 0\n  for i in 0...n\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n  end\n  max_wrap += max_so_far\n  if max_wrap > max_sub_array_sum\n    max_sub_array_sum = max_wrap\n  end\n  return max_sub_array_sum\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  return max_sum * k\nend",
    "  return 0 if n == 0\n  max_sum = 0\n  max_ending_here = 0\n  for i in 0...n\n    max_ending_here = max_ending_here + a[i]\n    max_ending_here = 0 if max_ending_here < 0\n    max_sum = max_ending_here if max_sum < max_ending_here\n  end\n  max_sum *= k\n  max_sum_wrap = 0\n  for i in 0...n\n    max_sum_wrap += a[i]\n    a[i] = -a[i]\n  end\n  max_ending_here = 0\n  for i in 0...n\n    max_ending_here = max_ending_here + a[i]\n    max_ending_here = 0 if max_ending_here < 0\n    max_sum_wrap = max_ending_here if max_sum_wrap < max_ending_here\n  end\n  max_sum_wrap = max_sum_wrap + max_sum_wrap\n  max_sum_wrap = max_sum if max_sum_wrap < max_sum\n  max_sum_wrap\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0...n\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  for i in 0...n\n    curr_sum = curr_sum - a[i] + a[i]\n    max_sum = [max_sum, curr_sum].max\n  end\n  max_sum * k\nend",
    "  # kadane's algorithm\n  max_so_far = 0\n  max_ending_here = 0\n  (0...n).each do |i|\n    max_ending_here = max_ending_here + a[i]\n    max_ending_here = 0 if max_ending_here < 0\n    max_so_far = [max_so_far, max_ending_here].max\n  end",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  for i in 0..n-2\n    curr_sum = curr_sum - a[i] + a[i+n]\n    max_sum = [max_sum, curr_sum].max\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  for i in 0...n\n    curr_sum = 0\n    for j in 0...n\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_so_far = a[0]\n  max_ending_here = a[0]\n  for i in 1..n-1\n    max_ending_here = max_ending_here + a[i]\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n  end\n  max_so_far = max_so_far * k\n  return max_so_far\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  for i in 0..n-2\n    curr_sum = curr_sum - a[i] + a[i+n]\n    max_sum = [max_sum, curr_sum].max\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  for i in 0..n-2\n    curr_sum = curr_sum + (k-1)*a[i]\n    max_sum = [max_sum, curr_sum].max\n  end\n  return max_sum\nend",
    "  max_sum = -Float::INFINITY\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n    max_sum = [max_sum, curr_sum].max\n    curr_sum = 0 if curr_sum < 0\n  end\n  max_sum *= k\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n    a[i] = -a[i]\n  end\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n    max_sum = [max_sum, curr_sum].max\n    curr_sum = 0 if curr_sum < 0\n  end\n  max_sum\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n      curr_sum = 0 if curr_sum < 0\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n      curr_sum = [curr_sum, 0].max\n    end\n  end\n  return max_sum * k\nend",
    "  return 0 if n == 0\n  max_so_far = 0\n  max_ending_here = 0\n  for i in 0...n\n    max_ending_here = max_ending_here + a[i]\n    max_ending_here = 0 if max_ending_here < 0\n    max_so_far = [max_so_far, max_ending_here].max\n  end\n  max_so_far * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n      curr_sum = 0 if curr_sum < 0\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    max_sum += a[i]\n  end\n  max_sum = max_sum * k\n  curr_max = 0\n  for i in 0..n-1\n    curr_max += a[i]\n  end\n  max_sum = [max_sum, curr_max].max\n  prev_val = curr_max\n  for i in 0..n-2\n    curr_max = prev_val - a[i] + a[(i+n)%n]\n    max_sum = [max_sum, curr_max].max\n    prev_val = curr_max\n  end\n  max_sum\nend",
    "  max_sum = 0\n  for i in 0..k-1\n    current_sum = 0\n    for j in 0..n-1\n      current_sum += a[j]\n      max_sum = [max_sum, current_sum].max\n      current_sum = [current_sum, 0].max\n    end\n  end\n  return max_sum\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0...n\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  for i in 0...n\n    curr_sum += (k - 1) * a[i]\n    max_sum = curr_sum if curr_sum > max_sum\n  end\n  max_sum\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_so_far = -Float::INFINITY\n  max_ending_here = 0\n  for i in 0...n\n    max_ending_here = max_ending_here + a[i]\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n  end\n  max_wrap = 0\n  for i in 0...n\n    max_wrap += a[i]\n    a[i] = -a[i]\n  end\n  max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1)\n  return [max_so_far, max_wrap].max\nend",
    "  max_sum = 0\n  for i in 0...n\n    curr_sum = 0\n    for j in 0...n\n      curr_sum += a[j]\n      max_sum = curr_sum if curr_sum > max_sum\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0...n\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  max_val = curr_sum\n  min_val = curr_sum\n  for i in 0...n\n    curr_sum = curr_sum - a[i] + a[i]\n    max_val = [max_val, curr_sum].max\n    min_val = [min_val, curr_sum].min\n    max_sum = [max_sum, (k - 2) * min_val + max_val].max\n  end\n  max_sum\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  for i in 0...n\n    curr_sum = 0\n    for j in 0...n\n      curr_sum += a[(i + j) % n]\n    end\n    max_sum = [max_sum, curr_sum].max\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  sum = 0\n  for i in 0..n-1\n    sum += a[i]\n  end\n  max_sum = sum\n  for i in 0..n-2\n    sum = sum - a[i] + a[i+n]\n    max_sum = sum if sum > max_sum\n  end\n  return max_sum * k\nend",
    "  max_so_far = a[0]\n  max_ending_here = a[0]\n  for i in 1...n\n    max_ending_here = max_ending_here + a[i]\n    max_ending_here = a[i] if max_ending_here < a[i]\n    max_so_far = max_ending_here if max_so_far < max_ending_here\n  end\n  max_so_far = max_so_far * k\n  max_so_far = max_so_far - (a.inject(:+) - max_so_far) if max_so_far > a.inject(:+)\n  max_so_far\nend",
    "  max_sum = 0\n  max_sum_so_far = 0\n  for i in 0...n\n    max_sum_so_far += a[i]\n    max_sum_so_far = [max_sum_so_far, a[i]].max\n    max_sum = [max_sum, max_sum_so_far].max\n  end\n  max_sum * k - (a.inject(:+) - max_sum)\nend",
    "  # max_sum = 0\n  # for i in 0..n-1\n  #   curr_sum = 0\n  #   for j in i..n-1\n  #     curr_sum += a[j]\n  #     max_sum = [max_sum, curr_sum].max\n  #   end\n  # end\n  # return max_sum * k",
    "  max_so_far = -Float::INFINITY\n  max_ending_here = 0\n  for i in 0...n\n    max_ending_here = max_ending_here + a[i]\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n  end\n  max_sub_array_sum = max_so_far\n  max_wrap = 0\n  for i in 0...n\n    max_wrap += a[i]\n    a[i] = -a[i]\n  end\n  max_so_far = -Float::INFINITY\n  max_ending_here = 0\n  for i in 0...n\n    max_ending_here = max_ending_here + a[i]\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n  end\n  max_wrap = max_wrap + max_so_far\n  if k == 1\n    return max_sub_array_sum\n  end\n  if max_wrap > max_sub_array_sum\n    return max_wrap\n  else\n    return max_sub_array_sum\n  end\nend",
    "  max_sum = -Float::INFINITY\n  sum = 0\n  for i in 0..n-1\n    sum += a[i]\n  end\n  max_sum = sum if sum > max_sum\n  for i in 1..k-1\n    for j in 0..n-1\n      sum += a[j]\n      max_sum = sum if sum > max_sum\n    end\n  end\n  max_sum\nend",
    "  max_so_far = 0\n  max_ending_here = 0\n  for i in 0...k\n    for j in 0...n\n      max_ending_here = max_ending_here + a[j]\n      if max_so_far < max_ending_here\n        max_so_far = max_ending_here\n      end\n      if max_ending_here < 0\n        max_ending_here = 0\n      end\n    end\n  end\n  return max_so_far\nend",
    "  max_sum = 0\n  max_sum_so_far = 0\n  max_element = a.max\n  sum_of_all_elements = a.reduce(:+)\n  if max_element <= 0\n    return max_element * k\n  end\n  for i in 0..n-1\n    max_sum_so_far = max_sum_so_far + a[i]\n    if max_sum_so_far < 0\n      max_sum_so_far = 0\n    end\n    if max_sum < max_sum_so_far\n      max_sum = max_sum_so_far\n    end\n  end\n  return [max_sum + (k-2)*sum_of_all_elements, max_sum].max\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0...n\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  for i in 0...n\n    curr_sum += (k-1)*a[i]\n    max_sum = [max_sum, curr_sum].max\n  end\n  return max_sum\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  for i in 0..n-2\n    curr_sum = curr_sum - a[i] + a[i+n]\n    max_sum = [max_sum, curr_sum].max\n  end\n  return max_sum * k\nend",
    "  max_so_far = 0\n  max_ending_here = 0\n  for i in 0..k-1\n    for j in 0..n-1\n      max_ending_here = max_ending_here + a[j]\n      if max_so_far < max_ending_here\n        max_so_far = max_ending_here\n      end\n      if max_ending_here < 0\n        max_ending_here = 0\n      end\n    end\n  end\n  return max_so_far\nend"
  ]
}