{
  "name": "mbpp_130_max_occurrences",
  "language": "rb",
  "prompt": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend",
    "  nums.group_by { |num| num }.values.max_by(&:size).first\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend",
    "  max_count = 0\n  max_item = nil\n  counts = Hash.new(0)",
    "  counts = Hash.new(0)\n  nums.each do |num|\n    counts[num] += 1\n  end\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, v| v }.first\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }[0]\nend",
    "  count = Hash.new(0)\n  nums.each { |num| count[num] += 1 }\n  max_count = count.values.max\n  count.select { |num, c| c == max_count }.keys\nend",
    "  # Write your code here\n  max_count = 0\n  max_num = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_num = num\n    end\n  end\n  max_num\nend",
    "  # create a hash to store the frequency of each item\n  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  # find the max frequency\n  max_freq = freq.values.max\n  # find the items with the max frequency\n  max_freq_items = freq.select { |_, v| v == max_freq }.keys\n  # return the max frequency items\n  max_freq_items\nend",
    "  # Write your code here\n  hash = Hash.new(0)\n  nums.each do |num|\n    hash[num] += 1\n  end\n  hash.max_by { |k, v| v }[0]\nend",
    "  nums.each_with_object(Hash.new(0)) { |num, hash| hash[num] += 1 }.max_by { |k, v| v }.first\nend",
    "  nums.group_by(&:itself).values.max_by(&:size).first\nend",
    "  # Write your code here\n  hash = Hash.new(0)\n  nums.each do |num|\n    hash[num] += 1\n  end\n  max = hash.values.max\n  hash.select { |k, v| v == max }.keys\nend",
    "  return nil if nums.empty?",
    "  nums.group_by { |num| num }.values.max_by(&:size).first\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend",
    "  nums.group_by(&:itself).values.max_by(&:size).first\nend",
    "  nums.max_by { |num| nums.count(num) }\nend",
    "  hash = Hash.new(0)\n  nums.each do |num|\n    hash[num] += 1\n  end\n  hash.max_by { |k, v| v }[0]\nend"
  ]
}