{
  "name": "mbpp_247_lps",
  "language": "rb",
  "prompt": "# Write a function to find the length of the longest palindromic subsequence in the given string.\ndef lps(str)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_lps\n    candidate = method(:lps)\n    assert_equal(5, candidate.call(\"TENS FOR TENS\"))\n    assert_equal(7, candidate.call(\"CARDIO FOR CARDS\"))\n    assert_equal(9, candidate.call(\"PART OF THE JOURNEY IS PART\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str[0] == str[1] && str.length == 2\n  return 2 if str[0] == str[-1] && str.length == 2\n  return 3 if str[0] == str[-1] && str[1] == str[-2] && str.length == 3\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return lps(str[1..-2]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2])\nend",
    "  return str.length if str == str.reverse\n  return 1 if str.length == 1",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max + 1\nend",
    "  return 0 if str.empty?\n  return 1 if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 2 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]",
    "  return str.length if str.length <= 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str.length <= 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]",
    "  return 0 if str.empty?\n  return 1 if str.length == 1",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\n  return [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return 0 if str.empty?\n  return 1 if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 2 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str[0] == str[1] && str.length == 2\n  return 2 if str[0] == str[-1] && str.length == 2\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return lps(str[1..-2]) + 2 if str[0] == str[-1]\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\nend",
    "  return str.length if str == str.reverse\n  return 1 if str.length == 1\n  return lps(str[1..-1]) if str[0] == str[-1]\n  return [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return 0 if str.empty?\n  return 1 if str.length == 1",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\nend",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]",
    "  return 0 if str.nil? || str.empty?\n  return 1 if str.length == 1",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0",
    "  return str.length if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2])\nend",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return 0 if str.empty?\n  return 1 if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]",
    "  return str.length if str.length <= 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\nend",
    "  return 0 if str.empty?\n  return 1 if str.length == 1",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str[0] == str[1] && str.length == 2",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str[0] == str[1] && str.length == 2",
    "  return 0 if str.empty?\n  return 1 if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 2 if str.length == 2 && str[0] != str[1]\n  return str.length if is_palindrome?(str)\n  return lps(str[0..-2]) if str[0] == str[-1]\n  return [lps(str[0..-2]), lps(str[1..-1])].max\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str[0] == str[1] && str.length == 2",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\nend",
    "  return str.length if str.length <= 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str[0] == str[1] && str.length == 2\n  return 2 if str[0] == str[-1] && str.length == 2\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return lps(str[1..-2]) + 2 if str[0] == str[-1]\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str[0] == str[1]",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2])\nend",
    "  return 0 if str.nil? || str.empty?\n  return 1 if str.length == 1",
    "  return str.length if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]\n  return 2 if str[0] == str[-1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return lps(str[1..-2]) if str[0] != str[-1]\n  return [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\n  [lps(str[0..-2]), lps(str[1..-1])].max\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str.length <= 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\n  return [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1] && str.length == 2\n  return 2 if str[0] == str[-1]",
    "  return 0 if str.nil? || str.length == 0\n  return 1 if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 2 if str.length == 2 && str[0] != str[1]\n  return 3 if str.length == 3 && str[0] == str[2]\n  return 2 if str.length == 3 && str[0] != str[2]\n  return 4 if str.length == 4 && str[0] == str[3]\n  return 3 if str.length == 4 && str[0] != str[3]\n  return 3 if str.length == 4 && str[0] == str[1] && str[2] == str[3]\n  return 2 if str.length == 4 && str[0] == str[1] && str[2] != str[3]\n  return 2 if str.length == 4 && str[0] != str[1] && str[2] == str[3]\n  return 2 if str.length == 4 && str[0] != str[1] && str[2] != str[3]\n  return 5 if str.length == 5 && str[0] == str[4]\n  return 4 if str.length == 5 && str[0] != str[4]\n  return 4 if str.length == 5 && str[0] == str[1] && str[3] == str[4]\n  return 3 if str.length == 5 && str[0] == str[1] && str[3] != str[4]\n  return 3 if str.length == 5 && str[0] != str[1] && str[3] == str[4]\n  return 3 if str.length == 5 && str[0] != str[1] && str[3] != str[4]\n  return 4 if str.length == 5 && str[0] == str[4] && str[1] == str[2]\n  return 3 if str.length == 5 && str[0] == str[4] && str[1] != str[2]\n  return 3 if str.length == 5 && str[0] != str[4] && str[1] == str",
    "  return str.length if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]\n  return 2 if str[0] == str[-1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return lps(str[1..-2]) if str[0] != str[-1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return lps(str[1..-2]) if str[0] != str[-1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return lps(str[1..-2]) if str[0] != str[-1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return lps(str[1..-2]) if str[0] != str[-1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return lps(str[1..-2]) if str[0] != str[-1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return lps(str[1..-2]) if str[0] != str[-1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return lps(str[1..-2]) if str[0] != str[-1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return lps(str[1..-2]) if str[0] != str[-1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return lps(str[1..-2]) if str[0] != str[-1]\n  return lps(str[1..-1])",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\nend",
    "  return 0 if str.empty?\n  return 1 if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 2 if str.length == 2 && str[0] != str[1]",
    "  return 0 if str.empty?\n  return 1 if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 2 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str[0] == str[1] && str.length == 2\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]",
    "  return str.length if str == str.reverse\n  return 1 if str.length == 1",
    "  return str.length if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]\n  return 2 if str[0] == str[-1]\n  return [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\nend",
    "  return str.length if str.length <= 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0",
    "  return str.length if str.length == 1\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\nend",
    "  return 0 if str.nil? || str.length == 0\n  return 1 if str.length == 1",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\nend",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  2 + lps(str[1..-2])\nend",
    "  return str.length if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]\n  return 2 if str[0] == str[-1]\n  return [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length <= 1",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]",
    "  return str.length if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]\n  return 2 if str[0] == str[-1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length <= 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str == str.reverse\n  return 1 if str.length == 1\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return 0 if str.nil? || str.length == 0\n  return 1 if str.length == 1\n  n = str.length\n  dp = Array.new(n) { Array.new(n) }\n  (0..n-1).each do |i|\n    dp[i][i] = 1\n  end\n  (2..n).each do |l|\n    (0..n-l).each do |i|\n      j = i + l - 1\n      if str[i] == str[j] && l == 2\n        dp[i][j] = 2\n      elsif str[i] == str[j]\n        dp[i][j] = dp[i+1][j-1] + 2\n      else\n        dp[i][j] = [dp[i+1][j], dp[i][j-1]].max\n      end\n    end\n  end\n  dp[0][n-1]\nend",
    "  return 0 if str.empty?\n  return 1 if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 2 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str == str.reverse\n  return 1 if str.length == 1\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return 0 if str.nil? || str.empty?\n  return 1 if str.length == 1",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str[0] == str[1] && str.length == 2\n  return 2 if str[0] == str[-1] && str.length == 2",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\nend",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\nend",
    "  return str.length if str.length <= 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\nend",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1] && str.length == 2\n  return 1 if str[0] != str[1] && str.length == 2",
    "  return 0 if str.nil? || str.empty?\n  return 1 if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 2 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str == str.reverse\n  return 1 if str.length == 1\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  n = str.length\n  l = Array.new(n) { Array.new(n, 0) }\n  (0..n-1).each do |i|\n    l[i][i] = 1\n  end\n  (2..n).each do |cl|\n    (0..n-cl).each do |i|\n      j = i + cl - 1\n      if str[i] == str[j] && cl == 2\n        l[i][j] = 2\n      elsif str[i] == str[j]\n        l[i][j] = l[i+1][j-1] + 2\n      else\n        l[i][j] = [l[i][j-1], l[i+1][j]].max\n      end\n    end\n  end\n  l[0][n-1]\nend",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str.length <= 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0",
    "  return str.length if str == str.reverse\n  return 1 if str.length == 1",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0",
    "  return 0 if str.empty?\n  return 1 if str.length == 1\n  return 2 if str[0] == str[1]",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0",
    "  return 0 if str.nil? || str.empty?\n  return 1 if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 2 if str.length == 2 && str[0] != str[1]\n  return 3 if str.length == 3 && str[0] == str[2]\n  return 2 if str.length == 3 && str[0] != str[2]",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]",
    "  n = str.length\n  l = Array.new(n) { Array.new(n) }\n  (0..n-1).each do |i|\n    l[i][i] = 1\n  end\n  (2..n).each do |cl|\n    (0..n-cl).each do |i|\n      j = i + cl - 1\n      if str[i] == str[j] && cl == 2\n        l[i][j] = 2\n      elsif str[i] == str[j]\n        l[i][j] = l[i+1][j-1] + 2\n      else\n        l[i][j] = [l[i][j-1], l[i+1][j]].max\n      end\n    end\n  end\n  l[0][n-1]\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str[0] == str[1] && str.length == 2",
    "  return str.length if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]\n  return 2 if str[0] == str[-1] && str.length == 3\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return lps(str[1..-2]) if str[0] == str[-1] && str[1] != str[-2]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1] && str[1] == str[-2]\nend",
    "  return str.length if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]\n  return 2 if str[0] == str[-1]\n  return [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]",
    "  return str.length if str.length <= 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\nend",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2])\nend",
    "  return str.length if str.length <= 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]\n  if str[0] == str[-1]\n    return 2 + lps(str[1..-2])\n  else\n    return [lps(str[1..-1]), lps(str[0..-2])].max\n  end\nend",
    "  return str.length if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]\n  return 2 if str[0] == str[-1]\n  return [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\nend",
    "  return 0 if str.nil? || str.empty?\n  return 1 if str.length == 1",
    "  return 0 if str.empty?\n  return 1 if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 2 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\nend",
    "  return str.length if str == str.reverse\n  return 1 if str.length == 1\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0",
    "  return 0 if str.nil? || str.empty?\n  return 1 if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str[0] == str[1] && str.length == 2",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]\n  return 3 if str.length == 3 && str[0] == str[2]\n  return 2 if str.length == 3 && str[0] != str[2]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2])\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str[0] == str[1] && str.length == 2\n  return 2 if str[0] == str[-1] && str.length == 2\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\nend",
    "  return str.length if str == str.reverse\n  return 1 if str.length == 1",
    "  return str.length if str.length <= 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str[0] == str[1]\n  2 + lps(str[1..-2])\nend",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1] && str.length == 2\n  return 2 if str[0] == str[-1] && str.length == 2\n  return 1 if str[0] != str[-1] && str.length == 2\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return lps(str[1..-2]) + 2 if str[0] == str[-1]\nend",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\nend",
    "  return str.length if str.length <= 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]",
    "  return 0 if str.empty?\n  return 1 if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 2 if str.length == 2 && str[0] != str[1]",
    "  return 0 if str.nil? || str.empty?\n  return 1 if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 2 if str.length == 2 && str[0] != str[1]\n  return 3 if str.length == 3 && str[0] == str[2]\n  return 2 if str.length == 3 && str[0] != str[2]\n  return str.length if str == str.reverse",
    "  return str.length if str == str.reverse\n  return 1 if str.length == 1\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\nend",
    "  return 0 if str.empty?\n  return 1 if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  n = str.length\n  l = Array.new(n) { Array.new(n) }\n  (0...n).each do |i|\n    l[i][i] = 1\n  end\n  (2..n).each do |cl|\n    (0..n-cl).each do |i|\n      j = i + cl - 1\n      if str[i] == str[j] && cl == 2\n        l[i][j] = 2\n      elsif str[i] == str[j]\n        l[i][j] = l[i+1][j-1] + 2\n      else\n        l[i][j] = [l[i][j-1], l[i+1][j]].max\n      end\n    end\n  end\n  l[0][n-1]\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str[0] == str[1] && str.length == 2\n  return 2 if str[0] == str[-1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return lps(str[1..-2]) if str[0] != str[-1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return lps(str[0..-2]) if str[0] != str[-1]\n  2 + lps(str[1..-2])\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  2 + lps(str[1..-2])\nend",
    "  return 0 if str.empty?\n  return 1 if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str[0] == str[1] && str.length == 2",
    "  return 0 if str.empty?\n  return 1 if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 2 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1] && str.length == 2",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1] && str.length == 2\n  return 1 if str[0] != str[1] && str.length == 2",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  2 + lps(str[1..-2])\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\nend",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\nend",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  2 + lps(str[1..-2])\nend",
    "  return str.length if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str.length <= 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str[0] == str[1] && str.length == 2",
    "  return str.length if str.length <= 1\n  return 2 if str[0] == str[1]",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend",
    "  return 0 if str.empty?\n  return 1 if str.length == 1\n  return 2 if str.length == 2 && str[0] == str[1]",
    "  return str.length if str.length <= 1\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str[0] == str[1]\n  return 1 if str[0] != str[1]\n  return lps(str[1..-1]) if str[0] != str[-1]\n  return 2 + lps(str[1..-2]) if str[0] == str[-1]\nend",
    "  return str.length if str.length == 1\n  return 0 if str.length == 0\n  return 2 if str.length == 2 && str[0] == str[1]\n  return 1 if str.length == 2 && str[0] != str[1]\n  if str[0] == str[-1]\n    return 2 + lps(str[1..-2])\n  else\n    return [lps(str[0..-2]), lps(str[1..-1])].max\n  end\nend",
    "  return str.length if str == str.reverse\n  return lps(str[1..-1]) if str[0] == str[-1]\n  [lps(str[1..-1]), lps(str[0..-2])].max\nend"
  ]
}