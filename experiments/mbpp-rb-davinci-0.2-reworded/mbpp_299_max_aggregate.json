{
  "name": "mbpp_299_max_aggregate",
  "language": "rb",
  "prompt": "# Write a function to calculate the maximum aggregate from the array of arrays.\ndef max_aggregate(stdata)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_aggregate\n    candidate = method(:max_aggregate)\n    assert_equal([\"Juan Whelan\", 212], candidate.call([[\"Juan Whelan\", 90], [\"Sabah Colley\", 88], [\"Peter Nichols\", 7], [\"Juan Whelan\", 122], [\"Sabah Colley\", 84]]))\n    assert_equal([\"Juan Whelan\", 72], candidate.call([[\"Juan Whelan\", 50], [\"Sabah Colley\", 48], [\"Peter Nichols\", 37], [\"Juan Whelan\", 22], [\"Sabah Colley\", 14]]))\n    assert_equal([\"Sabah Colley\", 70], candidate.call([[\"Juan Whelan\", 10], [\"Sabah Colley\", 20], [\"Peter Nichols\", 30], [\"Juan Whelan\", 40], [\"Sabah Colley\", 50]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  # YOUR CODE HERE\nend",
    "  # your code here\n  sum = 0\n  stdata.each do |x|\n    sum += x.inject(:+)\n  end\n  return sum\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # YOUR CODE HERE\n  max = 0\n  stdata.each do |st|\n    max = st.max if st.max > max\n  end\n  max\nend",
    "  stdata.map { |x| x.reduce(:+) }.max\nend",
    "  stdata.map { |x| x.reduce(:+) }.max\nend",
    "  stdata.map { |x| x.reduce(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # YOUR CODE HERE\nend",
    "  # YOUR CODE HERE\nend",
    "  max_aggregate = 0\n  stdata.each do |sub_array|\n    aggregate = sub_array.inject(0) { |sum, x| sum + x }\n    max_aggregate = aggregate if aggregate > max_aggregate\n  end\n  max_aggregate\nend",
    "  stdata.map { |data| data.inject(0) { |sum, x| sum + x } }.max\nend",
    "  stdata.map {|x| x.inject(:+)}.max\nend",
    "  # YOUR CODE HERE\n  max = 0\n  stdata.each do |arr|\n    sum = 0\n    arr.each do |num|\n      sum += num\n    end\n    if sum > max\n      max = sum\n    end\n  end\n  max\nend",
    "  stdata.map { |st| st.inject(:+) }.max\nend",
    "  stdata.map { |x| x.reduce(:+) }.max\nend",
    "  # YOUR CODE HERE\nend",
    "  stdata.map {|x| x.inject(:+)}.max\nend",
    "  # YOUR CODE HERE\n  max = 0\n  stdata.each do |x|\n    sum = 0\n    x.each do |y|\n      sum += y\n    end\n    if sum > max\n      max = sum\n    end\n  end\n  return max\nend",
    "  stdata.map{|x| x.inject(:+)}.max\nend",
    "  # YOUR CODE HERE\nend",
    "  # YOUR CODE HERE\nend",
    "  stdata.map{|x| x.inject(:+)}.max\nend",
    "  # YOUR CODE HERE\n  max = 0\n  stdata.each do |x|\n    sum = 0\n    x.each do |y|\n      sum += y\n    end\n    if sum > max\n      max = sum\n    end\n  end\n  return max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # your code here\nend",
    "  # TODO: implement me\n  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # your code here\n  max = 0\n  stdata.each do |data|\n    if data.inject(:+) > max\n      max = data.inject(:+)\n    end\n  end\n  max\nend",
    "  # TODO: implement me\n  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # YOUR CODE HERE\n  max = 0\n  stdata.each do |student|\n    sum = 0\n    student.each do |subject|\n      sum += subject\n    end\n    max = sum if sum > max\n  end\n  max\nend",
    "  # YOUR CODE HERE\nend",
    "  stdata.map { |st| st.inject(:+) }.max\nend",
    "  max = 0\n  stdata.each do |st|\n    if st.inject(:+) > max\n      max = st.inject(:+)\n    end\n  end\n  max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  max = 0\n  stdata.each do |student|\n    sum = 0\n    student.each do |subject|\n      sum += subject\n    end\n    max = sum if sum > max\n  end\n  max\nend",
    "  # YOUR CODE HERE\n  max = 0\n  stdata.each do |array|\n    sum = 0\n    array.each do |num|\n      sum += num\n    end\n    if sum > max\n      max = sum\n    end\n  end\n  max\nend",
    "  stdata.map{|x| x.inject(:+)}.max\nend",
    "  # TODO: implement me\n  max = 0\n  stdata.each do |data|\n    sum = 0\n    data.each do |num|\n      sum += num\n    end\n    if sum > max\n      max = sum\n    end\n  end\n  max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # YOUR CODE HERE\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.reduce(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  max_aggregate = 0\n  stdata.each do |st|\n    aggregate = st.inject(0) { |sum, x| sum + x }\n    max_aggregate = aggregate if aggregate > max_aggregate\n  end\n  max_aggregate\nend",
    "  # YOUR CODE HERE\nend",
    "  # TODO: implement this function\n  stdata.map { |x| x.inject(:+) }.max\nend",
    "  max = 0\n  stdata.each do |student|\n    sum = 0\n    student.each do |subject|\n      sum += subject\n    end\n    if sum > max\n      max = sum\n    end\n  end\n  max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  max = 0\n  stdata.each do |student|\n    sum = 0\n    student.each do |subject|\n      sum += subject\n    end\n    if sum > max\n      max = sum\n    end\n  end\n  return max\nend",
    "  # YOUR CODE HERE\nend",
    "  # YOUR CODE HERE\n  max = 0\n  stdata.each do |x|\n    sum = 0\n    x.each do |y|\n      sum += y\n    end\n    if sum > max\n      max = sum\n    end\n  end\n  return max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # YOUR CODE HERE\nend",
    "  stdata.map{|x| x.inject(:+)}.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map{|x| x.inject(:+)}.max\nend",
    "  # TODO: implement this method\n  stdata.map { |x| x.inject(:+) }.max\nend",
    "  max = 0\n  stdata.each do |st|\n    st.each do |num|\n      max = num if num > max\n    end\n  end\n  max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map {|x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  max = 0\n  stdata.each do |student|\n    sum = 0\n    student.each do |subject|\n      sum += subject\n    end\n    max = sum if sum > max\n  end\n  max\nend",
    "  # TODO: implement me\n  stdata.map { |x| x.reduce(:+) }.max\nend",
    "  # YOUR CODE HERE\nend",
    "  # YOUR CODE HERE\nend",
    "  # YOUR CODE HERE\n  stdata.map {|x| x.inject(:+)}.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # YOUR CODE HERE\n  max_aggregate = 0\n  stdata.each do |student|\n    aggregate = student[:english] + student[:maths] + student[:science]\n    if aggregate > max_aggregate\n      max_aggregate = aggregate\n    end\n  end\n  return max_aggregate\nend",
    "  max = 0\n  stdata.each do |x|\n    sum = 0\n    x.each do |y|\n      sum += y\n    end\n    if sum > max\n      max = sum\n    end\n  end\n  max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # YOUR CODE HERE\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # your code here\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  max = 0\n  stdata.each do |student|\n    sum = 0\n    student.each do |subject|\n      sum += subject\n    end\n    max = sum if sum > max\n  end\n  max\nend",
    "  # TODO: implement me\n  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # TODO: implement me\n  max = 0\n  stdata.each do |sub_array|\n    sum = 0\n    sub_array.each do |num|\n      sum += num\n    end\n    if sum > max\n      max = sum\n    end\n  end\n  max\nend",
    "  # YOUR CODE HERE\nend",
    "  # YOUR CODE HERE\n  max = 0\n  stdata.each do |st|\n    if st.inject(:+) > max\n      max = st.inject(:+)\n    end\n  end\n  max\nend",
    "  # YOUR CODE HERE\n  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # YOUR CODE HERE\nend",
    "  max = 0\n  stdata.each do |student|\n    sum = 0\n    student.each do |subject|\n      sum += subject\n    end\n    max = sum if sum > max\n  end\n  max\nend",
    "  # YOUR CODE HERE\n  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # YOUR CODE HERE\n  max = 0\n  stdata.each do |student|\n    sum = 0\n    student.each do |subject|\n      sum += subject\n    end\n    if sum > max\n      max = sum\n    end\n  end\n  max\nend",
    "  stdata.map { |subarray| subarray.inject(:+) }.max\nend",
    "  max = 0\n  stdata.each do |student|\n    sum = 0\n    student.each do |subject|\n      sum += subject\n    end\n    max = sum if sum > max\n  end\n  max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # TODO\n  max = 0\n  stdata.each do |x|\n    sum = x.inject(0){|sum,x| sum + x }\n    if sum > max\n      max = sum\n    end\n  end\n  max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  max = 0\n  stdata.each do |a|\n    sum = 0\n    a.each do |i|\n      sum += i\n    end\n    max = sum if sum > max\n  end\n  max\nend",
    "  # your code here\nend",
    "  max_aggregate = 0\n  stdata.each do |student|\n    aggregate = student[:physics] + student[:chemistry] + student[:biology]\n    if aggregate > max_aggregate\n      max_aggregate = aggregate\n    end\n  end\n  max_aggregate\nend",
    "  # TODO: implement me\n  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # Your code here\nend",
    "  # YOUR CODE HERE\nend",
    "  stdata.map {|x| x.inject(:+)}.max\nend",
    "  # your code here\n  max = 0\n  stdata.each do |x|\n    sum = 0\n    x.each do |y|\n      sum += y\n    end\n    if sum > max\n      max = sum\n    end\n  end\n  max\nend",
    "  # YOUR CODE HERE\n  max = 0\n  stdata.each do |student|\n    sum = 0\n    student.each do |sub|\n      sum += sub\n    end\n    if sum > max\n      max = sum\n    end\n  end\n  max\nend",
    "  stdata.map { |st| st.reduce(:+) }.max\nend",
    "  # YOUR CODE HERE\nend",
    "  max_aggregate = 0\n  stdata.each do |st|\n    aggregate = 0\n    st.each do |subject|\n      aggregate += subject\n    end\n    max_aggregate = aggregate if aggregate > max_aggregate\n  end\n  max_aggregate\nend",
    "  max = 0\n  stdata.each do |x|\n    sum = 0\n    x.each do |y|\n      sum += y\n    end\n    if sum > max\n      max = sum\n    end\n  end\n  max\nend",
    "  stdata.map{|x| x.inject(:+)}.max\nend",
    "  # TODO: implement me\n  stdata.map{|x| x.inject(:+)}.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # YOUR CODE HERE\n  max = 0\n  stdata.each do |x|\n    sum = 0\n    x.each do |y|\n      sum += y\n    end\n    if sum > max\n      max = sum\n    end\n  end\n  return max\nend",
    "  # YOUR CODE HERE\n  max = 0\n  stdata.each do |arr|\n    sum = 0\n    arr.each do |num|\n      sum += num\n    end\n    if sum > max\n      max = sum\n    end\n  end\n  max\nend",
    "  # YOUR CODE HERE\nend",
    "  max = 0\n  stdata.each do |st|\n    max = st.sum if st.sum > max\n  end\n  max\nend",
    "  # TODO: implement me\n  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # YOUR CODE HERE\nend",
    "  # YOUR CODE HERE\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map{|x| x.inject(:+)}.max\nend",
    "  max = 0\n  stdata.each do |st|\n    sum = 0\n    st.each do |sub|\n      sum += sub\n    end\n    max = sum if sum > max\n  end\n  max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  max = 0\n  stdata.each do |st|\n    sum = 0\n    st.each do |sub|\n      sum += sub\n    end\n    if sum > max\n      max = sum\n    end\n  end\n  max\nend",
    "  # YOUR CODE HERE\nend",
    "  stdata.map {|x| x.inject(:+)}.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # your code here\nend",
    "  # YOUR CODE HERE\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # your code here\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # TODO: implement me\n  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # TODO: implement me\n  max = 0\n  stdata.each do |x|\n    sum = 0\n    x.each do |y|\n      sum += y\n    end\n    max = sum if sum > max\n  end\n  max\nend",
    "  max_aggregate = 0\n  stdata.each do |st|\n    aggregate = st.inject(0) { |sum, n| sum + n }\n    max_aggregate = aggregate if aggregate > max_aggregate\n  end\n  max_aggregate\nend",
    "  # YOUR CODE HERE\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |a| a.inject(:+) }.max\nend",
    "  # YOUR CODE HERE\n  stdata.map { |x| x.inject(:+) }.max\nend",
    "  max_aggregate = 0\n  stdata.each do |st|\n    aggregate = 0\n    st.each do |subject|\n      aggregate += subject\n    end\n    if aggregate > max_aggregate\n      max_aggregate = aggregate\n    end\n  end\n  max_aggregate\nend",
    "  max_aggregate = 0\n  stdata.each do |data|\n    max_aggregate = data.inject(:+) if data.inject(:+) > max_aggregate\n  end\n  max_aggregate\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # YOUR CODE HERE\nend",
    "  # YOUR CODE HERE\n  max_aggregate = 0\n  stdata.each do |student|\n    aggregate = student.inject(0) { |sum, x| sum + x }\n    if aggregate > max_aggregate\n      max_aggregate = aggregate\n    end\n  end\n  max_aggregate\nend",
    "  # TODO: implement me\n  max = 0\n  stdata.each do |st|\n    sum = 0\n    st.each do |grade|\n      sum += grade\n    end\n    if sum > max\n      max = sum\n    end\n  end\n  max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # YOUR CODE HERE\nend",
    "  # YOUR CODE HERE\n  max = 0\n  stdata.each do |arr|\n    sum = 0\n    arr.each do |num|\n      sum += num\n    end\n    if sum > max\n      max = sum\n    end\n  end\n  max\nend",
    "  max_aggregate = 0\n  stdata.each do |data|\n    aggregate = 0\n    data.each do |mark|\n      aggregate += mark\n    end\n    max_aggregate = aggregate if aggregate > max_aggregate\n  end\n  max_aggregate\nend",
    "  # TODO: implement this method\n  #stdata.map { |x| x.inject(:+) }.max\n  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |arr| arr.inject(:+) }.max\nend",
    "  # YOUR CODE HERE\n  max = 0\n  stdata.each do |student|\n    sum = 0\n    student.each do |subject|\n      sum += subject\n    end\n    if sum > max\n      max = sum\n    end\n  end\n  max\nend",
    "  # YOUR CODE HERE\nend",
    "  # Your code here\n  max = 0\n  stdata.each do |x|\n    if x.sum > max\n      max = x.sum\n    end\n  end\n  return max\nend",
    "  stdata.map{|x| x.inject(:+)}.max\nend",
    "  # YOUR CODE HERE\n  max = 0\n  stdata.each do |x|\n    if x.inject(:+) > max\n      max = x.inject(:+)\n    end\n  end\n  return max\nend",
    "  # Your code here\nend",
    "  # YOUR CODE HERE\nend",
    "  # your code here\n  max = 0\n  stdata.each do |data|\n    sum = 0\n    data.each do |num|\n      sum += num\n    end\n    if sum > max\n      max = sum\n    end\n  end\n  max\nend",
    "  max_aggregate = 0\n  stdata.each do |array|\n    aggregate = array.inject(:+)\n    if aggregate > max_aggregate\n      max_aggregate = aggregate\n    end\n  end\n  max_aggregate\nend",
    "  # TODO: implement me\n  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # YOUR CODE HERE\n  max = 0\n  stdata.each do |x|\n    if x.inject(:+) > max\n      max = x.inject(:+)\n    end\n  end\n  max\nend",
    "  # TODO: implement\n  return 0\nend",
    "  # YOUR CODE HERE\n  max = 0\n  stdata.each do |student|\n    sum = 0\n    student.each do |subject|\n      sum += subject\n    end\n    max = sum if sum > max\n  end\n  max\nend",
    "  # YOUR CODE HERE\n  max = 0\n  stdata.each do |student|\n    sum = 0\n    student.each do |subject|\n      sum += subject\n    end\n    if sum > max\n      max = sum\n    end\n  end\n  max\nend",
    "  # Your code here\nend",
    "  max = 0\n  stdata.each do |student|\n    sum = 0\n    student.each do |subject|\n      sum += subject\n    end\n    max = sum if sum > max\n  end\n  max\nend",
    "  # YOUR CODE HERE\n  max = 0\n  stdata.each do |x|\n    if x.inject(:+) > max\n      max = x.inject(:+)\n    end\n  end\n  max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.inject { |sum, n| sum + n } }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # YOUR CODE HERE\nend",
    "  # TODO: implement me\n  max = 0\n  stdata.each do |student|\n    sum = 0\n    student.each do |subject|\n      sum += subject\n    end\n    if sum > max\n      max = sum\n    end\n  end\n  max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # YOUR CODE HERE\n  stdata.map { |x| x.inject(:+) }.max\nend",
    "  max = 0\n  stdata.each do |student|\n    sum = 0\n    student.each do |subject|\n      sum += subject\n    end\n    max = sum if sum > max\n  end\n  max\nend",
    "  # YOUR CODE HERE\n  max = 0\n  stdata.each do |st|\n    sum = st.inject(0) {|sum, x| sum + x}\n    if sum > max\n      max = sum\n    end\n  end\n  return max\nend",
    "  # YOUR CODE HERE\n  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # Your code here\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  max = 0\n  stdata.each do |subarr|\n    max = subarr.inject(:+) if subarr.inject(:+) > max\n  end\n  max\nend",
    "  stdata.map { |st| st.inject(:+) }.max\nend",
    "  stdata.map{|x| x.inject(:+)}.max\nend",
    "  # TODO: implement me\n  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend"
  ]
}