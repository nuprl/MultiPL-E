{
  "name": "mbpp_299_max_aggregate",
  "language": "rb",
  "prompt": "# Write a function to calculate the maximum aggregate from the array of arrays.\ndef max_aggregate(stdata)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_aggregate\n    candidate = method(:max_aggregate)\n    assert_equal([\"Juan Whelan\", 212], candidate.call([[\"Juan Whelan\", 90], [\"Sabah Colley\", 88], [\"Peter Nichols\", 7], [\"Juan Whelan\", 122], [\"Sabah Colley\", 84]]))\n    assert_equal([\"Juan Whelan\", 72], candidate.call([[\"Juan Whelan\", 50], [\"Sabah Colley\", 48], [\"Peter Nichols\", 37], [\"Juan Whelan\", 22], [\"Sabah Colley\", 14]]))\n    assert_equal([\"Sabah Colley\", 70], candidate.call([[\"Juan Whelan\", 10], [\"Sabah Colley\", 20], [\"Peter Nichols\", 30], [\"Juan Whelan\", 40], [\"Sabah Colley\", 50]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  # YOUR CODE HERE\nend",
    "  # your code here\n  sum = 0\n  stdata.each do |x|\n    sum += x.inject(:+)\n  end\n  return sum\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # YOUR CODE HERE\n  max = 0\n  stdata.each do |st|\n    max = st.max if st.max > max\n  end\n  max\nend",
    "  stdata.map { |x| x.reduce(:+) }.max\nend",
    "  stdata.map { |x| x.reduce(:+) }.max\nend",
    "  stdata.map { |x| x.reduce(:+) }.max\nend",
    "  stdata.map { |x| x.inject(:+) }.max\nend",
    "  # YOUR CODE HERE\nend",
    "  # YOUR CODE HERE\nend",
    "  max_aggregate = 0\n  stdata.each do |sub_array|\n    aggregate = sub_array.inject(0) { |sum, x| sum + x }\n    max_aggregate = aggregate if aggregate > max_aggregate\n  end\n  max_aggregate\nend",
    "  stdata.map { |data| data.inject(0) { |sum, x| sum + x } }.max\nend",
    "  stdata.map {|x| x.inject(:+)}.max\nend",
    "  # YOUR CODE HERE\n  max = 0\n  stdata.each do |arr|\n    sum = 0\n    arr.each do |num|\n      sum += num\n    end\n    if sum > max\n      max = sum\n    end\n  end\n  max\nend",
    "  stdata.map { |st| st.inject(:+) }.max\nend",
    "  stdata.map { |x| x.reduce(:+) }.max\nend",
    "  # YOUR CODE HERE\nend"
  ]
}