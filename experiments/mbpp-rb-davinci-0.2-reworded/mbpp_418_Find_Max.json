{
  "name": "mbpp_418_Find_Max",
  "language": "rb",
  "prompt": "# Write a rbthon function to find the element of an array having maximum length.\ndef Find_Max(lst)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_418_Find_Max.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Find_Max\n    candidate = method(:Find_Max)\n    assert_equal([\"A\", \"B\", \"C\"], candidate.call([[\"A\"], [\"A\", \"B\"], [\"A\", \"B\", \"C\"]]))\n    assert_equal([1, 2, 3], candidate.call([[1], [1, 2], [1, 2, 3]]))\n    assert_equal([1, 5, 6, 1], candidate.call([[1, 1], [1, 2, 3], [1, 5, 6, 1]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  max = lst[0]\n  lst.each do |i|\n    if i.length > max.length\n      max = i\n    end\n  end\n  return max\nend",
    "  max = lst[0]\n  lst.each do |i|\n    if i.length > max.length\n      max = i\n    end\n  end\n  return max\nend",
    "  max = lst[0]\n  lst.each do |i|\n    if i.length > max.length\n      max = i\n    end\n  end\n  return max\nend",
    "  max = lst[0]\n  lst.each do |i|\n    if i.length > max.length\n      max = i\n    end\n  end\n  return max\nend",
    "  max = lst[0]\n  lst.each do |i|\n    if i.length > max.length\n      max = i\n    end\n  end\n  return max\nend",
    "  max = lst[0]\n  lst.each do |i|\n    if i.length > max.length\n      max = i\n    end\n  end\n  return max\nend",
    "  max = lst[0]\n  lst.each do |i|\n    if i.length > max.length\n      max = i\n    end\n  end\n  return max\nend",
    "  max = lst[0]\n  lst.each do |i|\n    if i.length > max.length\n      max = i\n    end\n  end\n  return max\nend",
    "  max = lst[0]\n  lst.each do |x|\n    if x.length > max.length\n      max = x\n    end\n  end\n  max\nend",
    "  max = lst[0]\n  lst.each do |i|\n    if i.length > max.length\n      max = i\n    end\n  end\n  max\nend",
    "  max = lst[0]\n  for i in 0..lst.length-1\n    if lst[i].length > max.length\n      max = lst[i]\n    end\n  end\n  return max\nend",
    "  max = lst.max_by(&:length)\n  puts \"The element of an array having maximum length is #{max}\"\nend",
    "  max = lst[0]\n  lst.each do |x|\n    if x.length > max.length\n      max = x\n    end\n  end\n  return max\nend",
    "  max = lst[0]\n  lst.each do |i|\n    if i.length > max.length\n      max = i\n    end\n  end\n  return max\nend",
    "  max = lst[0]\n  lst.each do |i|\n    if i.length > max.length\n      max = i\n    end\n  end\n  return max\nend",
    "  max = lst[0]\n  lst.each do |i|\n    if i.length > max.length\n      max = i\n    end\n  end\n  return max\nend",
    "  max = lst[0]\n  lst.each do |i|\n    if i.length > max.length\n      max = i\n    end\n  end\n  return max\nend",
    "  lst.max_by(&:length)\nend",
    "  max = lst[0]\n  lst.each do |i|\n    if i.length > max.length\n      max = i\n    end\n  end\n  return max\nend",
    "  max = lst[0]\n  for i in lst\n    if i.length > max.length\n      max = i\n    end\n  end\n  return max\nend"
  ]
}