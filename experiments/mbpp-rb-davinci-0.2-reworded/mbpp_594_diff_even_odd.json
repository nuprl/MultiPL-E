{
  "name": "mbpp_594_diff_even_odd",
  "language": "rb",
  "prompt": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_594_diff_even_odd.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  even = list1.select {|x| x.even?}\n  odd = list1.select {|x| x.odd?}\n  even.first - odd.first\nend",
    "  even_list = list1.select {|x| x % 2 == 0}\n  odd_list = list1.select {|x| x % 2 != 0}\n  even_list[0] - odd_list[0]\nend",
    "  even_list = list1.select{|x| x.even?}\n  odd_list = list1.select{|x| x.odd?}\n  even_list[0] - odd_list[0]\nend",
    "  even_list = []\n  odd_list = []\n  list1.each do |i|\n    if i % 2 == 0\n      even_list.push(i)\n    else\n      odd_list.push(i)\n    end\n  end\n  puts \"The difference of first even and first odd number is #{even_list.first - odd_list.first}\"\nend",
    "  even = list1.select { |num| num.even? }\n  odd = list1.select { |num| num.odd? }\n  even.first - odd.first\nend",
    "  even_num = list1.find {|x| x.even?}\n  odd_num = list1.find {|x| x.odd?}\n  return even_num - odd_num\nend",
    "  even_list = []\n  odd_list = []\n  list1.each do |num|\n    if num % 2 == 0\n      even_list << num\n    else\n      odd_list << num\n    end\n  end\n  return even_list.first - odd_list.first\nend",
    "  even = list1.select{|x| x.even?}\n  odd = list1.select{|x| x.odd?}\n  even[0] - odd[0]\nend",
    "  even = list1.select {|num| num.even?}\n  odd = list1.select {|num| num.odd?}\n  even.first - odd.first\nend",
    "  even = list1.find {|x| x.even?}\n  odd = list1.find {|x| x.odd?}\n  return even - odd\nend",
    "  even_list = list1.select {|x| x.even?}\n  odd_list = list1.select {|x| x.odd?}\n  even_list[0] - odd_list[0]\nend",
    "  even_arr = []\n  odd_arr = []\n  list1.each do |num|\n    if num % 2 == 0\n      even_arr << num\n    else\n      odd_arr << num\n    end\n  end\n  even_arr.first - odd_arr.first\nend",
    "  even = list1.select {|x| x.even?}\n  odd = list1.select {|x| x.odd?}\n  even[0] - odd[0]\nend",
    "  even_list = []\n  odd_list = []\n  list1.each do |i|\n    if i % 2 == 0\n      even_list << i\n    else\n      odd_list << i\n    end\n  end\n  even_list.first - odd_list.first\nend",
    "  even = list1.find {|x| x.even?}\n  odd = list1.find {|x| x.odd?}\n  return even - odd\nend",
    "  even_num = list1.select { |num| num.even? }\n  odd_num = list1.select { |num| num.odd? }\n  even_num.first - odd_num.first\nend",
    "  even = list1.select { |num| num.even? }\n  odd = list1.select { |num| num.odd? }\n  even.first - odd.first\nend",
    "  even_list = []\n  odd_list = []\n  list1.each do |num|\n    if num % 2 == 0\n      even_list << num\n    else\n      odd_list << num\n    end\n  end\n  even_list.first - odd_list.first\nend",
    "  even = list1.select { |x| x.even? }\n  odd = list1.select { |x| x.odd? }\n  even.first - odd.first\nend",
    "  even = list1.find { |x| x.even? }\n  odd = list1.find { |x| x.odd? }\n  even - odd\nend"
  ]
}