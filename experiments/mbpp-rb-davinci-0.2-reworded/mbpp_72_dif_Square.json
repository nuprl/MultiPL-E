{
  "name": "mbpp_72_dif_Square",
  "language": "rb",
  "prompt": "# Write a rbthon function to check whether the given number can be represented as the difference of two squares or not.\ndef dif_Square(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_72_dif_Square.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_dif_Square\n    candidate = method(:dif_Square)\n    assert_equal(true, candidate.call(5))\n    assert_equal(false, candidate.call(10))\n    assert_equal(true, candidate.call(15))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  if n < 0\n    return false\n  end\n  while n % 4 == 0\n    n = n / 4\n  end\n  if n % 8 == 7\n    return true\n  end\n  return false\nend\nputs dif_Square(4)\nputs dif_Square(5)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(24)\nputs dif_Square(25)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(48)\nputs dif_Square(49)\nputs dif_Square(56)\nputs dif_Square(57)\nputs dif_Square(64)\nputs dif_Square(65)\nputs dif_Square(72)\nputs dif_Square(73)\nputs dif_Square(80)\nputs dif_Square(81)\nputs dif_Square(88)\nputs dif_Square(89)\nputs dif_Square(96)\nputs dif_Square(97)\nputs dif_Square(104)\nputs dif_Square(105)\nputs dif_Square(112)\nputs dif_Square(113)\nputs dif_Square(120)\nputs dif_Square(121)\nputs dif_Square(128)\nputs dif_Square(129)\nputs dif_Square(136)\nputs dif_Square(137)\nputs dif_Square(144)\nputs dif_Square(145)\nputs dif_Square(152)\nputs dif_Square(153)\nputs dif_Square(160)\nputs dif_Square(161)\nputs dif_Square(168)\nputs dif_Square(169)\nputs dif_Square(176)\nputs dif_Square(177)",
    "  if n < 0\n    return false\n  end\n  if (Math.sqrt(n).to_i) ** 2 == n\n    return true\n  else\n    return false\n  end\nend\nputs dif_Square(25)\nputs dif_Square(24)\nputs dif_Square(26)",
    "  if n < 0\n    return false\n  end\n  if n == 0\n    return true\n  end\n  i = 1\n  while i * i <= n\n    j = 1\n    while j * j <= n\n      if (i * i - j * j) == n\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend",
    "  if n%4 == 0\n    puts \"The number can be represented as the difference of two squares\"\n  else\n    puts \"The number cannot be represented as the difference of two squares\"\n  end\nend",
    "  if n%4==0\n    puts \"#{n} can be represented as the difference of two squares\"\n  else\n    puts \"#{n} cannot be represented as the difference of two squares\"\n  end\nend",
    "  if n % 4 == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  if n % 4 == 0\n    puts \"#{n} can be represented as the difference of two squares\"\n  else\n    puts \"#{n} can not be represented as the difference of two squares\"\n  end\nend\ndif_Square(16)\ndif_Square(17)",
    "  if n < 0\n    return false\n  end\n  sqrt = Math.sqrt(n).to_i\n  for i in 1..sqrt\n    if i * i == n\n      return true\n    end\n  end\n  return false\nend\nputs dif_Square(25)\nputs dif_Square(10)",
    "  if n % 4 == 0\n    puts \"The number can be represented as the difference of two squares\"\n  else\n    puts \"The number cannot be represented as the difference of two squares\"\n  end\nend",
    "  if n < 0\n    puts \"Not possible\"\n  else\n    sqrt = Math.sqrt(n)\n    if sqrt == sqrt.to_i\n      puts \"Possible\"\n    else\n      puts \"Not possible\"\n    end\n  end\nend",
    "  if n > 0\n    sqrt = Math.sqrt(n).to_i\n    for i in 1..sqrt\n      if i*i == n\n        return true\n      end\n    end\n  end\n  return false\nend\nputs dif_Square(25)\nputs dif_Square(24)\nputs dif_Square(0)\nputs dif_Square(-25)\nputs dif_Square(100)\nputs dif_Square(64)\nputs dif_Square(36)\nputs dif_Square(49)",
    "  sqrt = Math.sqrt(n).to_i\n  for i in 1..sqrt\n    j = Math.sqrt(n + i*i).to_i\n    if (i*i + j*j == n)\n      return true\n    end\n  end\n  return false\nend\nputs dif_Square(5)\nputs dif_Square(10)\nputs dif_Square(25)\nputs dif_Square(3)\nputs dif_Square(0)\nputs dif_Square(1)\nputs dif_Square(2)\nputs dif_Square(4)\nputs dif_Square(6)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(11)\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(14)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)\nputs dif_Square(43)\nputs dif_Square(44)",
    "  if n % 4 == 0\n    puts \"#{n} can be represented as the difference of two squares\"\n  else\n    puts \"#{n} cannot be represented as the difference of two squares\"\n  end\nend",
    "  sqrt = Math.sqrt(n).to_i\n  for i in 1..sqrt\n    j = Math.sqrt(n + i*i).to_i\n    if j*j == n + i*i\n      return true\n    end\n  end\n  return false\nend\nputs dif_Square(5)\nputs dif_Square(10)\nputs dif_Square(25)\nputs dif_Square(3)\nputs dif_Square(0)\nputs dif_Square(1)\nputs dif_Square(2)\nputs dif_Square(4)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)\nputs dif_Square(43)\nputs dif_Square(44)\nputs dif_Square(45)\nputs dif_Square(46)\nputs dif_Square(47)\nputs dif_Square(48)\nputs dif_Square(49)\nputs dif_Square(50)\nput",
    "  if n<0\n    return false\n  end\n  if n==0\n    return true\n  end\n  i=1\n  while i*i<n\n    j=1\n    while j*j<n\n      if (i*i-j*j)==n\n        return true\n      end\n      j+=1\n    end\n    i+=1\n  end\n  return false\nend\nputs dif_Square(5)\nputs dif_Square(6)\nputs dif_Square(16)\nputs dif_Square(25)\nputs dif_Square(24)\nputs dif_Square(26)\nputs dif_Square(0)\nputs dif_Square(-1)\nputs dif_Square(-4)\nputs dif_Square(-9)",
    "  if n%4==0\n    puts \"yes\"\n  else\n    puts \"no\"\n  end\nend\ndif_Square(5)",
    "  if n == 0\n    return true\n  elsif n < 0\n    return false\n  else\n    return dif_Square(n-1)\n  end\nend",
    "  if n < 0\n    return false\n  end\n  while n % 4 == 0\n    n = n / 4\n  end\n  if n % 8 == 7\n    return true\n  end\n  return false\nend\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(25)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)\nputs dif_Square(43)\nputs dif_Square(44)\nputs dif_Square(45)\nputs dif_Square(46)\nputs dif_Square(47)\nputs dif_Square(48)\nputs dif_Square(49)\nputs dif_Square(50)\nputs dif_Square(51)\nputs dif_Square(52)\nputs dif_Square(53)\nputs dif_Square(54)\nputs dif_Square(55)\nputs dif_Square(56)\nputs dif_Square(57)\nputs dif_Square(58)\nputs dif_Square(59)\nputs dif_Square(60)\nputs dif_Square(61)\nputs dif_Square(62)\nputs dif_Square(63)\nputs dif_Square(64)\nputs dif_Square(65)\nputs dif_Square(66)",
    "  if n % 4 == 0\n    return true\n  else\n    return false\n  end\nend\nputs dif_Square(4)\nputs dif_Square(5)",
    "  if n < 0\n    puts \"Not possible\"\n  else\n    sqrt = Math.sqrt(n)\n    if sqrt == sqrt.to_i\n      puts \"Yes\"\n    else\n      puts \"No\"\n    end\n  end\nend",
    "  sqrt = Math.sqrt(n).to_i\n  for i in 1..sqrt\n    for j in i..sqrt\n      if i*i - j*j == n\n        return true\n      end\n    end\n  end\n  return false\nend",
    "  sqrt = Math.sqrt(n).to_i\n  for i in 1..sqrt\n    j = Math.sqrt(n + i*i).to_i\n    if i*i + j*j == n\n      return true\n    end\n  end\n  return false\nend",
    "  if n%4 == 0\n    puts \"#{n} can be represented as the difference of two squares\"\n  else\n    puts \"#{n} cannot be represented as the difference of two squares\"\n  end\nend",
    "  if n < 0\n    puts \"false\"\n  else\n    puts \"true\"\n  end\nend",
    "  if n < 0\n    return false\n  end\n  sqrt = Math.sqrt(n).to_i\n  for i in 0..sqrt\n    j = Math.sqrt(n - i * i).to_i\n    if i * i + j * j == n\n      return true\n    end\n  end\n  return false\nend\nputs dif_Square(5)\nputs dif_Square(10)\nputs dif_Square(25)\nputs dif_Square(3)\nputs dif_Square(0)\nputs dif_Square(-1)",
    "  if n < 0\n    return false\n  end\n  while n % 4 == 0\n    n = n / 4\n  end\n  if n % 8 == 7\n    return true\n  end\n  return false\nend",
    "  if n % 4 == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend\ndif_Square(10)",
    "  if n % 4 == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  if n < 0\n    return false\n  end\n  if n == 0\n    return true\n  end\n  i = 1\n  while i * i < n\n    j = 1\n    while j * j < n\n      if (i * i - j * j) == n\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend",
    "  if n == 0\n    return true\n  end\n  if n < 0\n    n = -n\n  end\n  while n % 2 == 0\n    n = n / 2\n  end\n  return true if n == 1\n  return false\nend\nputs dif_Square(0)\nputs dif_Square(1)\nputs dif_Square(2)\nputs dif_Square(3)\nputs dif_Square(4)\nputs dif_Square(5)\nputs dif_Square(6)\nputs dif_Square(7)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(10)\nputs dif_Square(11)\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(14)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(25)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)\nputs dif_Square(43)\nputs dif_Square(44)\nput",
    "  if n % 4 == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  if n % 4 == 0\n    puts \"The number can be represented as the difference of two squares\"\n  else\n    puts \"The number cannot be represented as the difference of two squares\"\n  end\nend",
    "  sqrt = Math.sqrt(n).to_i\n  for i in 1..sqrt\n    j = Math.sqrt(n + i*i).to_i\n    if i*i + j*j == n\n      return true\n    end\n  end\n  return false\nend\nputs dif_Square(5)\nputs dif_Square(10)\nputs dif_Square(25)\nputs dif_Square(3)\nputs dif_Square(0)\nputs dif_Square(1)\nputs dif_Square(2)\nputs dif_Square(4)\nputs dif_Square(6)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(11)\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(14)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)\nputs dif_Square(43)\nputs dif_Square(44)\nput",
    "  for i in 1..n\n    for j in 1..n\n      if (i*i - j*j) == n\n        return true\n      end\n    end\n  end\n  return false\nend\nputs dif_Square(5)\nputs dif_Square(10)\nputs dif_Square(25)\nputs dif_Square(3)\nputs dif_Square(20)\nputs dif_Square(9)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)\nputs dif_Square(43)\nputs dif_Square(44)\nputs dif_Square(45)\nputs dif_Square(46)\nputs dif_Square(47)\nputs dif_Square(48)\nputs dif_Square(49)\nputs dif_Square(50)\nputs dif_Square(51)\nputs dif_Square(52)\nputs dif_Square(53)\nputs dif_Square(54)\nputs dif_Square(55)\nputs dif_Square(56)\nputs dif_Square(57)\nputs",
    "  if n % 4 == 0\n    puts \"The number can be represented as the difference of two squares\"\n  else\n    puts \"The number cannot be represented as the difference of two squares\"\n  end\nend",
    "  if n%4 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  if n==0\n    return true\n  end\n  if n<0\n    n=-n\n  end\n  while n%2==0\n    n=n/2\n  end\n  if n%2==1\n    return false\n  end\n  return true\nend\nputs dif_Square(0)\nputs dif_Square(1)\nputs dif_Square(2)\nputs dif_Square(3)\nputs dif_Square(4)\nputs dif_Square(5)\nputs dif_Square(6)\nputs dif_Square(7)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(10)\nputs dif_Square(11)\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(14)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(25)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)\nputs dif_Square(43)\nputs dif_",
    "  if n == 0\n    return true\n  end\n  i = 1\n  while i * i < n\n    j = 1\n    while j * j < n\n      if (i * i - j * j) == n\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend\nputs dif_Square(0)\nputs dif_Square(1)\nputs dif_Square(2)\nputs dif_Square(3)\nputs dif_Square(4)\nputs dif_Square(5)\nputs dif_Square(6)\nputs dif_Square(7)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(10)\nputs dif_Square(11)\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(14)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(25)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)",
    "  if n % 4 == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend\ndif_Square(4)\ndif_Square(5)",
    "  if n < 0\n    return false\n  end\n  if n == 0\n    return true\n  end\n  i = 1\n  while i * i <= n\n    j = 1\n    while j * j <= n\n      if i * i - j * j == n\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend",
    "  if n % 4 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  if n < 0\n    return false\n  end\n  while n % 4 == 0\n    n = n / 4\n  end\n  if n % 8 == 7\n    return true\n  end\n  return false\nend\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(25)\nputs dif_Square(26)",
    "  if n % 4 == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend\ndif_Square(16)",
    "  if n < 0\n    return false\n  end\n  while n % 4 == 0\n    n = n / 4\n  end\n  if n % 8 == 7\n    return true\n  end\n  return false\nend\nputs dif_Square(4)\nputs dif_Square(5)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(24)\nputs dif_Square(25)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)\nputs dif_Square(43)\nputs dif_Square(44)\nputs dif_Square(45)\nputs dif_Square(46)\nputs dif_Square(47)\nputs dif_Square(48)\nputs dif_Square(49)\nputs dif_Square(50)\nputs dif_Square(51)\nputs dif_Square(52)\nputs dif_Square(53)\nputs dif_Square(54)\nputs dif_Square(55)\nputs dif_Square(56)\nputs dif_Square(57)\nputs dif_Square(58)\nputs dif_Square(59)\nputs dif_Square(60)\nputs dif_Square(61)\nputs dif_Square(62)\nputs dif_Square(63)\nputs dif_Square(64)\nputs dif_Square(65)\nputs dif_Square(66)",
    "  if n < 0\n    return false\n  end\n  sqrt = Math.sqrt(n).to_i\n  for i in 1..sqrt\n    if i * i == n\n      return true\n    end\n  end\n  return false\nend",
    "  if n < 0\n    return false\n  end\n  while n % 4 == 0\n    n = n / 4\n  end\n  if n % 8 == 7\n    return true\n  end\n  return false\nend",
    "  if n%4==0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend\ndif_Square(5)",
    "  sqrt = Math.sqrt(n).to_i\n  for i in 1..sqrt\n    j = Math.sqrt(n + i*i).to_i\n    if (i*i + j*j == n)\n      return true\n    end\n  end\n  return false\nend\nputs dif_Square(5)\nputs dif_Square(10)\nputs dif_Square(25)\nputs dif_Square(3)\nputs dif_Square(0)\nputs dif_Square(1)\nputs dif_Square(2)\nputs dif_Square(4)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(15)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(20)\nputs dif_Square(24)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)\nputs dif_Square(43)\nputs dif_Square(44)\nputs dif_Square(45)\nputs dif_Square(46)\nputs dif_Square(47)\nputs dif_Square(48)\nputs dif_Square(49)\nputs dif_Square(50)\nputs dif_Square(51)\nputs dif_Square(52)\nputs dif_Square(53)\nputs dif_Square(54)\nputs dif_Square(55)\nputs dif_Square(56)",
    "  if n < 0\n    return false\n  end\n  while n % 4 == 0\n    n = n / 4\n  end\n  if n % 8 == 7\n    return true\n  end\n  return false\nend\nputs dif_Square(16)\nputs dif_Square(25)\nputs dif_Square(9)\nputs dif_Square(24)\nputs dif_Square(15)\nputs dif_Square(17)",
    "  if n%4==0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend\ndif_Square(4)",
    "  if n < 0\n    return false\n  end\n  while n % 4 == 0\n    n = n / 4\n  end\n  if n % 8 == 7\n    return true\n  end\n  return false\nend\nputs dif_Square(16)\nputs dif_Square(25)\nputs dif_Square(64)\nputs dif_Square(78)\nputs dif_Square(49)",
    "  if n < 0\n    return false\n  end\n  i = 1\n  while i * i <= n\n    j = 1\n    while j * j <= n\n      if (i * i - j * j) == n\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend\nputs dif_Square(10)\nputs dif_Square(25)\nputs dif_Square(3)\nputs dif_Square(0)\nputs dif_Square(-1)\nputs dif_Square(26)",
    "  if n % 4 == 0\n    puts \"The given number can be represented as the difference of two squares\"\n  else\n    puts \"The given number cannot be represented as the difference of two squares\"\n  end\nend",
    "  i = 1\n  while i < n\n    j = 1\n    while j < n\n      if (i * i) - (j * j) == n\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend\nputs dif_Square(9)\nputs dif_Square(10)\nputs dif_Square(25)\nputs dif_Square(26)",
    "  if n < 0\n    puts \"No\"\n  else\n    puts \"Yes\"\n  end\nend\ndif_Square(10)\ndif_Square(-10)",
    "  if n == 0\n    return true\n  end\n  if n < 0\n    n = -n\n  end\n  while n % 2 == 0\n    n = n / 2\n  end\n  if n % 2 == 1\n    return false\n  end\n  return true\nend\nputs dif_Square(0)\nputs dif_Square(1)\nputs dif_Square(2)\nputs dif_Square(3)\nputs dif_Square(4)\nputs dif_Square(5)\nputs dif_Square(6)\nputs dif_Square(7)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(10)\nputs dif_Square(11)\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(14)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(25)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)\nputs dif_Square(43)\nputs dif",
    "  if n%4==0\n    puts \"Number can be represented as the difference of two squares\"\n  else\n    puts \"Number cannot be represented as the difference of two squares\"\n  end\nend\nputs \"Enter the number\"\nn=gets.chomp.to_i\ndif_Square(n)",
    "  if n % 4 == 0\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  if n < 0\n    return false\n  end\n  sqrt = Math.sqrt(n).to_i\n  for i in 0..sqrt\n    if i * i == n\n      return true\n    end\n  end\n  return false\nend",
    "  sqrt = Math.sqrt(n).to_i\n  for i in 1..sqrt\n    j = Math.sqrt(n + i*i).to_i\n    if j*j == n + i*i\n      return true\n    end\n  end\n  return false\nend\nputs dif_Square(5)\nputs dif_Square(10)\nputs dif_Square(25)\nputs dif_Square(3)\nputs dif_Square(2)\nputs dif_Square(26)",
    "  if n%4==0\n    puts \"The given number can be represented as the difference of two squares\"\n  else\n    puts \"The given number cannot be represented as the difference of two squares\"\n  end\nend\ndif_Square(16)\ndif_Square(17)",
    "  if n<0\n    return false\n  end\n  sqrt = Math.sqrt(n).floor\n  for i in 0..sqrt\n    j = Math.sqrt(n - i*i).floor\n    if i*i + j*j == n\n      return true\n    end\n  end\n  return false\nend",
    "  if n<0\n    return false\n  end\n  if n==0\n    return true\n  end\n  i=1\n  while i*i<n\n    j=1\n    while j*j<=n\n      if i*i-j*j==n\n        return true\n      end\n      j+=1\n    end\n    i+=1\n  end\n  return false\nend\nputs dif_Square(4)\nputs dif_Square(9)\nputs dif_Square(16)\nputs dif_Square(25)\nputs dif_Square(36)\nputs dif_Square(49)\nputs dif_Square(64)\nputs dif_Square(81)\nputs dif_Square(100)\nputs dif_Square(121)\nputs dif_Square(144)\nputs dif_Square(169)\nputs dif_Square(196)\nputs dif_Square(225)\nputs dif_Square(256)\nputs dif_Square(289)\nputs dif_Square(324)\nputs dif_Square(361)\nputs dif_Square(400)\nputs dif_Square(441)\nputs dif_Square(484)\nputs dif_Square(529)\nputs dif_Square(576)\nputs dif_Square(625)\nputs dif_Square(676)\nputs dif_Square(729)\nputs dif_Square(784)\nputs dif_Square(841)\nputs dif_Square(900)\nputs dif_Square(961)\nputs dif_Square(1024)\nputs dif_Square(1089)\nputs dif_Square(1156)\nputs dif_Square(1225)\nputs dif_Square(1296)\nputs dif_Square(1369)\nputs dif_Square(1444)\nputs dif_Square(1521)\nputs dif_Square(1600)\nputs dif_Square(1681)\nputs dif_Square(",
    "  sqrt = Math.sqrt(n).to_i\n  for i in 1..sqrt\n    j = Math.sqrt(n + (i * i)).to_i\n    if (i * i) + (j * j) == n\n      return true\n    end\n  end\n  return false\nend\nputs dif_Square(5)\nputs dif_Square(10)\nputs dif_Square(25)\nputs dif_Square(3)\nputs dif_Square(0)\nputs dif_Square(1)\nputs dif_Square(2)\nputs dif_Square(4)\nputs dif_Square(6)\nputs dif_Square(7)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(11)\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(14)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)\nputs dif_Square",
    "  if (n.to_i > 0)\n    a = Math.sqrt(n.to_i).to_i\n    b = a*a\n    if (b == n.to_i)\n      return true\n    else\n      return false\n    end\n  else\n    return false\n  end\nend",
    "  if n%4==0\n    puts \"The given number can be represented as the difference of two squares\"\n  else\n    puts \"The given number cannot be represented as the difference of two squares\"\n  end\nend\ndif_Square(16)",
    "  sqrt = Math.sqrt(n).to_i\n  for i in 1..sqrt\n    j = Math.sqrt(n + i*i).to_i\n    if (i*i + j*j == n)\n      return true\n    end\n  end\n  return false\nend",
    "  if n == 0\n    return true\n  end\n  if n < 0\n    n = -n\n  end\n  i = 1\n  while i * i < n\n    j = 1\n    while j * j < n\n      if i * i - j * j == n\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend\nputs dif_Square(25)\nputs dif_Square(0)\nputs dif_Square(1)\nputs dif_Square(2)\nputs dif_Square(3)\nputs dif_Square(4)\nputs dif_Square(5)\nputs dif_Square(6)\nputs dif_Square(7)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(10)\nputs dif_Square(11)\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(14)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(25)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square",
    "  if n == 0\n    return true\n  end\n  if n < 0\n    n = -n\n  end\n  i = 1\n  while i * i < n\n    j = 1\n    while j * j < n\n      if (i * i - j * j) == n\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend",
    "  if n % 4 == 0\n    puts \"The given number can be represented as the difference of two squares\"\n  else\n    puts \"The given number cannot be represented as the difference of two squares\"\n  end\nend\ndif_Square(16)\ndif_Square(25)",
    "  if n%4==0\n    return true\n  else\n    return false\n  end\nend\nputs dif_Square(4)\nputs dif_Square(5)\nputs dif_Square(6)\nputs dif_Square(7)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(10)\nputs dif_Square(11)\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(14)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(25)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)\nputs dif_Square(43)\nputs dif_Square(44)\nputs dif_Square(45)\nputs dif_Square(46)\nputs dif_Square(47)\nputs dif_Square(48)\nputs dif_Square(49)\nputs dif_Square(50)\nputs dif_Square(51)\nputs dif_Square(",
    "  if n % 4 == 0\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  if n%4==0\n    puts \"The given number can be represented as the difference of two squares\"\n  else\n    puts \"The given number cannot be represented as the difference of two squares\"\n  end\nend",
    "  if n%4==0\n    return true\n  else\n    return false\n  end\nend\nputs dif_Square(10)\nputs dif_Square(9)\nputs dif_Square(16)\nputs dif_Square(25)",
    "  if n % 4 == 0\n    return true\n  else\n    return false\n  end\nend\nputs dif_Square(4)\nputs dif_Square(5)",
    "  if n < 0\n    return false\n  end\n  while n % 2 == 0\n    n = n / 2\n  end\n  if n % 2 == 1\n    return true\n  else\n    return false\n  end\nend\nputs dif_Square(4)\nputs dif_Square(5)\nputs dif_Square(6)\nputs dif_Square(7)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(10)\nputs dif_Square(11)\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(14)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(25)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)\nputs dif_Square(43)\nputs dif_Square(44)\nputs dif_Square(45)\nputs dif_Square(46)\nputs dif_Square(47)\nputs dif_Square(48)\nputs dif_Square",
    "  if n % 4 == 1\n    return true\n  else\n    return false\n  end\nend",
    "  if n % 4 == 0\n    puts \"The given number can be represented as the difference of two squares\"\n  else\n    puts \"The given number cannot be represented as the difference of two squares\"\n  end\nend",
    "  if n < 0\n    return false\n  end\n  if n == 0\n    return true\n  end\n  i = 1\n  while i * i < n\n    j = 1\n    while j * j < n\n      if i * i - j * j == n\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend",
    "  if n < 0\n    return false\n  end\n  while n % 4 == 0\n    n = n / 4\n  end\n  if n % 8 == 7\n    return true\n  end\n  return false\nend\nputs dif_Square(5)\nputs dif_Square(12)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(25)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)\nputs dif_Square(43)\nputs dif_Square(44)\nputs dif_Square(45)\nputs dif_Square(46)\nputs dif_Square(47)\nputs dif_Square(48)\nputs dif_Square(49)\nputs dif_Square(50)\nputs dif_Square(51)\nputs dif_Square(52)\nputs dif_Square(53)\nputs dif_Square(54)\nputs dif_Square(55)\nputs dif_Square(56)\nputs dif_Square(57)\nputs dif_Square(58)\nputs dif_Square(59)\nputs dif_Square(60)\nputs dif_Square(61)\nputs dif_Square(62)\nputs dif_Square(63)\nputs dif_Square(64)\nputs dif_Square(65)",
    "  sqrt = Math.sqrt(n).to_i\n  for i in 1..sqrt\n    j = Math.sqrt(n + i*i).to_i\n    if i*i + j*j == n\n      return true\n    end\n  end\n  return false\nend",
    "  if n % 4 == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  if n%4==0\n    puts \"The number can be represented as the difference of two squares\"\n  else\n    puts \"The number cannot be represented as the difference of two squares\"\n  end\nend",
    "  if n % 4 == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  sqrt = Math.sqrt(n).to_i\n  for i in 1..sqrt\n    j = Math.sqrt(n + i*i).to_i\n    if j*j == n + i*i\n      return true\n    end\n  end\n  return false\nend",
    "  if n < 0\n    return false\n  end\n  if n == 0\n    return true\n  end\n  i = 1\n  while i * i < n\n    j = 1\n    while j * j < n\n      if i * i - j * j == n\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend",
    "  if n < 0\n    return false\n  end\n  while n % 4 == 0\n    n = n / 4\n  end\n  if n % 8 == 7\n    return true\n  end\n  return false\nend",
    "  if n < 0\n    return false\n  end\n  while n % 4 == 0\n    n = n / 4\n  end\n  if n % 8 == 7\n    return true\n  end\n  return false\nend\nputs dif_Square(13)\nputs dif_Square(25)\nputs dif_Square(24)\nputs dif_Square(49)\nputs dif_Square(50)\nputs dif_Square(51)\nputs dif_Square(52)\nputs dif_Square(53)\nputs dif_Square(54)\nputs dif_Square(55)\nputs dif_Square(56)\nputs dif_Square(57)\nputs dif_Square(58)\nputs dif_Square(59)\nputs dif_Square(60)\nputs dif_Square(61)\nputs dif_Square(62)\nputs dif_Square(63)\nputs dif_Square(64)\nputs dif_Square(65)\nputs dif_Square(66)\nputs dif_Square(67)\nputs dif_Square(68)\nputs dif_Square(69)\nputs dif_Square(70)\nputs dif_Square(71)\nputs dif_Square(72)\nputs dif_Square(73)\nputs dif_Square(74)\nputs dif_Square(75)\nputs dif_Square(76)\nputs dif_Square(77)\nputs dif_Square(78)\nputs dif_Square(79)\nputs dif_Square(80)\nputs dif_Square(81)\nputs dif_Square(82)\nputs dif_Square(83)\nputs dif_Square(84)\nputs dif_Square(85)\nputs dif_Square(86)\nputs dif_Square(87)\nputs dif_Square(88)\nputs dif_Square(89)\nputs dif_Square(90)\nputs dif_Square(91)",
    "  if n%4==0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  if n == 0\n    return true\n  end\n  i = 1\n  while i * i < n\n    j = 1\n    while j * j < n\n      if (i * i - j * j) == n\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend\nputs dif_Square(5)\nputs dif_Square(0)\nputs dif_Square(1)\nputs dif_Square(2)\nputs dif_Square(3)\nputs dif_Square(4)\nputs dif_Square(5)\nputs dif_Square(6)\nputs dif_Square(7)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(10)\nputs dif_Square(11)\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(14)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(25)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)",
    "  if n % 4 == 0\n    puts \"The given number #{n} can be represented as the difference of two squares\"\n  else\n    puts \"The given number #{n} cannot be represented as the difference of two squares\"\n  end\nend",
    "  sqrt = Math.sqrt(n).to_i\n  for i in 1..sqrt\n    j = Math.sqrt(n + i*i).to_i\n    if j*j == n + i*i\n      return true\n    end\n  end\n  return false\nend",
    "  if n < 0\n    puts \"The number is negative\"\n  else\n    puts \"The number is positive\"\n  end\nend",
    "  if n<0\n    return false\n  end\n  i=1\n  while i*i<=n\n    j=1\n    while j*j<=n\n      if i*i-j*j==n\n        return true\n      end\n      j+=1\n    end\n    i+=1\n  end\n  return false\nend\nputs dif_Square(5)\nputs dif_Square(10)\nputs dif_Square(25)\nputs dif_Square(3)\nputs dif_Square(0)\nputs dif_Square(-1)\nputs dif_Square(-5)\nputs dif_Square(-10)\nputs dif_Square(-25)\nputs dif_Square(-3)",
    "  if n % 4 == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend\ndif_Square(100)",
    "  if n < 0\n    return false\n  end\n  while n % 4 == 0\n    n = n / 4\n  end\n  if n % 8 == 7\n    return true\n  end\n  return false\nend",
    "  if n.to_s.include?('.')\n    puts \"Please enter an integer\"\n  else\n    a = Math.sqrt(n).to_i\n    for i in 1..a\n      j = Math.sqrt(n + i*i).to_i\n      if i*i + j*j == n\n        return true\n      end\n    end\n    return false\n  end\nend",
    "  if n % 4 == 0\n    puts \"The number can be represented as the difference of two squares\"\n  else\n    puts \"The number cannot be represented as the difference of two squares\"\n  end\nend",
    "  if n%4==0\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend\ndif_Square(4)\ndif_Square(5)",
    "  if n < 0\n    return false\n  end\n  sqrt = Math.sqrt(n).to_i\n  for i in 1..sqrt\n    if (i * i) == n\n      return true\n    end\n  end\n  return false\nend",
    "  if n%4==0\n    return true\n  else\n    return false\n  end\nend\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(25)\nputs dif_Square(26)",
    "  if n<0\n    return false\n  elsif n==0\n    return true\n  else\n    for i in 1..n\n      if i*i>n\n        return false\n      elsif i*i==n\n        return true\n      end\n    end\n  end\nend\nputs dif_Square(10)\nputs dif_Square(25)\nputs dif_Square(3)\nputs dif_Square(0)\nputs dif_Square(-1)\nputs dif_Square(26)\nputs dif_Square(100)\nputs dif_Square(64)\nputs dif_Square(63)\nputs dif_Square(65)",
    "  if n % 4 == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  if n % 4 == 0\n    puts \"#{n} can be represented as the difference of two squares\"\n  else\n    puts \"#{n} cannot be represented as the difference of two squares\"\n  end\nend",
    "  if n%4==0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  if n % 4 == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  if n == 0\n    return true\n  end\n  if n < 0\n    n = -n\n  end\n  while n % 2 == 0\n    n = n / 2\n  end\n  i = 3\n  while i <= Math.sqrt(n)\n    while n % i == 0\n      n = n / i\n      if i % 4 == 3\n        return false\n      end\n    end\n    i += 2\n  end\n  return true\nend",
    "  if n < 0\n    return false\n  end\n  while n % 2 == 0\n    n = n / 2\n  end\n  if n % 2 == 1\n    return true\n  else\n    return false\n  end\nend\nputs dif_Square(10)\nputs dif_Square(25)\nputs dif_Square(13)\nputs dif_Square(24)\nputs dif_Square(9)\nputs dif_Square(17)\nputs dif_Square(1)\nputs dif_Square(16)\nputs dif_Square(2)\nputs dif_Square(3)\nputs dif_Square(19)\nputs dif_Square(100)\nputs dif_Square(10201)\nputs dif_Square(67867967)\nputs dif_Square(0)\nputs dif_Square(1)\nputs dif_Square(2)\nputs dif_Square(3)\nputs dif_Square(4)\nputs dif_Square(5)\nputs dif_Square(6)\nputs dif_Square(7)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(10)\nputs dif_Square(11)\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(14)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(25)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs d",
    "  sqrt = Math.sqrt(n).to_i\n  for i in 1..sqrt\n    j = Math.sqrt(n + i*i).to_i\n    if (i*i + j*j == n)\n      return true\n    end\n  end\n  return false\nend",
    "  if n < 0\n    return false\n  end\n  i = 1\n  while i * i < n\n    j = 1\n    while j * j < n\n      if (i * i - j * j) == n\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend\nputs dif_Square(10)\nputs dif_Square(25)\nputs dif_Square(3)\nputs dif_Square(0)\nputs dif_Square(-1)\nputs dif_Square(26)",
    "  if n%4==0\n    return true\n  else\n    return false\n  end\nend\nputs dif_Square(4)\nputs dif_Square(5)\nputs dif_Square(6)\nputs dif_Square(7)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(10)\nputs dif_Square(11)\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(14)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(25)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)\nputs dif_Square(43)\nputs dif_Square(44)\nputs dif_Square(45)\nputs dif_Square(46)\nputs dif_Square(47)\nputs dif_Square(48)\nputs dif_Square(49)\nputs dif_Square(50)\nputs dif_Square(51)\nputs dif_Square(",
    "  if n < 0\n    return false\n  end\n  if n == 0\n    return true\n  end\n  i = 1\n  while i * i < n\n    j = 1\n    while j * j < n\n      if (i * i - j * j) == n\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend",
    "  if n < 0\n    return false\n  end\n  if n == 0\n    return true\n  end\n  i = 1\n  while i * i <= n\n    j = 1\n    while j * j <= n\n      if i * i - j * j == n\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend",
    "  if n < 0\n    return false\n  end\n  sqrt = Math.sqrt(n).to_i\n  for i in 0..sqrt\n    for j in 0..sqrt\n      if i*i - j*j == n\n        return true\n      end\n    end\n  end\n  return false\nend",
    "  if n == 0\n    return true\n  end\n  i = 1\n  while i * i < n\n    j = 1\n    while j * j < n\n      if i * i - j * j == n\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend",
    "  sqrt = Math.sqrt(n).to_i\n  for i in 1..sqrt\n    j = Math.sqrt(n + i*i).to_i\n    if (i*i + j*j == n)\n      return true\n    end\n  end\n  return false\nend\nputs dif_Square(10)\nputs dif_Square(25)\nputs dif_Square(3)\nputs dif_Square(20)",
    "  if n%4==0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  if (n < 0)\n    n = -n\n  end\n  if (n == 0)\n    return true\n  end\n  i = 1\n  while (i * i < n)\n    j = 1\n    while (j * j < n)\n      if ((i * i - j * j) == n)\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend\nputs dif_Square(9)\nputs dif_Square(8)\nputs dif_Square(0)\nputs dif_Square(-9)\nputs dif_Square(-8)\nputs dif_Square(-1)",
    "  if n < 0\n    puts \"Not possible\"\n  else\n    sqrt = Math.sqrt(n).to_i\n    for i in 1..sqrt\n      j = Math.sqrt(n - i*i).to_i\n      if (i*i + j*j == n)\n        puts \"Yes\"\n        return\n      end\n    end\n    puts \"No\"\n  end\nend",
    "  if n < 0\n    return false\n  end\n  while n % 4 == 0\n    n = n / 4\n  end\n  if n % 8 == 7\n    return true\n  end\n  return false\nend\nputs dif_Square(10)\nputs dif_Square(25)\nputs dif_Square(3)\nputs dif_Square(0)\nputs dif_Square(1)\nputs dif_Square(2)\nputs dif_Square(4)\nputs dif_Square(5)\nputs dif_Square(6)\nputs dif_Square(7)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(11)\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(14)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)\nputs dif_Square(43)\nputs dif_Square(44)\nputs dif_Square(45)",
    "  if n % 4 == 0\n    return true\n  else\n    return false\n  end\nend\nputs dif_Square(4)\nputs dif_Square(5)\nputs dif_Square(6)\nputs dif_Square(7)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(10)\nputs dif_Square(11)\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(14)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(25)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)\nputs dif_Square(43)\nputs dif_Square(44)\nputs dif_Square(45)\nputs dif_Square(46)\nputs dif_Square(47)\nputs dif_Square(48)\nputs dif_Square(49)\nputs dif_Square(50)\nputs dif_Square(51)\nputs dif_Square(",
    "  if n%4 == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  if n<0\n    return false\n  end\n  while n%2==0\n    n=n/2\n  end\n  if n%2==1\n    return true\n  else\n    return false\n  end\nend\nputs dif_Square(4)\nputs dif_Square(5)\nputs dif_Square(6)\nputs dif_Square(7)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(10)\nputs dif_Square(11)\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(14)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(25)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)\nputs dif_Square(43)\nputs dif_Square(44)\nputs dif_Square(45)\nputs dif_Square(46)\nputs dif_Square(47)\nputs dif_Square(48)\nputs dif_Square",
    "  sqrt = Math.sqrt(n).to_i\n  for i in 1..sqrt\n    for j in i..sqrt\n      if i*i - j*j == n\n        return true\n      end\n    end\n  end\n  return false\nend\nputs dif_Square(5)\nputs dif_Square(10)\nputs dif_Square(25)\nputs dif_Square(3)\nputs dif_Square(2)\nputs dif_Square(1)\nputs dif_Square(0)\nputs dif_Square(-1)\nputs dif_Square(-2)\nputs dif_Square(-3)\nputs dif_Square(-4)\nputs dif_Square(-5)\nputs dif_Square(-6)\nputs dif_Square(-7)\nputs dif_Square(-8)\nputs dif_Square(-9)\nputs dif_Square(-10)\nputs dif_Square(-11)\nputs dif_Square(-12)\nputs dif_Square(-13)\nputs dif_Square(-14)\nputs dif_Square(-15)\nputs dif_Square(-16)\nputs dif_Square(-17)\nputs dif_Square(-18)\nputs dif_Square(-19)\nputs dif_Square(-20)\nputs dif_Square(-21)\nputs dif_Square(-22)\nputs dif_Square(-23)\nputs dif_Square(-24)\nputs dif_Square(-25)\nputs dif_Square(-26)\nputs dif_Square(-27)\nputs dif_Square(-28)\nputs dif_Square(-29)\nputs dif_Square(-30)\nputs dif_Square(-31)\nputs dif_Square(-32)\nputs dif_Square(-33)\nputs dif_Square(-34)\nputs dif_Square(-35)\nputs dif_Square(-36)\nputs dif_Square(-37)\nputs dif_Square(-",
    "  if n%4==0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend\ndif_Square(8)",
    "  sqrt = Math.sqrt(n).to_i\n  for i in 1..sqrt\n    j = Math.sqrt(n + (i * i)).to_i\n    if (j * j) == (n + (i * i))\n      return true\n    end\n  end\n  return false\nend\nputs dif_Square(5)\nputs dif_Square(10)\nputs dif_Square(25)\nputs dif_Square(3)",
    "  if n < 0\n    return false\n  end\n  while n % 4 == 0\n    n = n / 4\n  end\n  if n % 8 == 7\n    return true\n  end\n  return false\nend\nputs dif_Square(4)\nputs dif_Square(5)\nputs dif_Square(6)\nputs dif_Square(7)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(10)\nputs dif_Square(11)\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(14)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(25)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)\nputs dif_Square(43)\nputs dif_Square(44)\nputs dif_Square(45)\nputs dif_Square(46)\nputs dif_Square(47)\nputs dif_Square(48)\nputs dif_Square(49)",
    "  if n%4==0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend\nputs \"Enter the number\"\nn=gets.chomp.to_i\ndif_Square(n)",
    "  if n%4==0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend\ndif_Square(4)",
    "  sqrt = Math.sqrt(n).to_i\n  for i in 1..sqrt\n    j = Math.sqrt(n + i*i).to_i\n    if (i*i + j*j == n)\n      return true\n    end\n  end\n  return false\nend",
    "  if n == 0\n    puts \"0 can be represented as the difference of two squares\"\n  elsif n > 0\n    puts \"#{n} can be represented as the difference of two squares\"\n  else\n    puts \"#{n} can not be represented as the difference of two squares\"\n  end\nend",
    "  if n < 0\n    return false\n  end\n  i = 1\n  while i * i < n\n    j = 1\n    while j * j < n\n      if (i * i - j * j) == n\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend\nputs dif_Square(5)\nputs dif_Square(10)\nputs dif_Square(25)\nputs dif_Square(3)\nputs dif_Square(4)\nputs dif_Square(9)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(20)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)\nputs dif_Square(43)\nputs dif_Square(44)\nputs dif_Square(45)\nputs dif_Square(46)\nputs dif_Square(47)\nputs dif_Square(48)\nputs dif_Square(49)\nputs dif_Square(50)\nputs dif_Square(51)\nputs dif_Square(52)\nputs dif_Square(53)\nputs dif_Square(54)\nputs dif_Square(55)",
    "  sqrt = Math.sqrt(n).to_i\n  for i in 1..sqrt\n    j = Math.sqrt(n + i*i).to_i\n    if i*i + j*j == n\n      return true\n    end\n  end\n  return false\nend\nputs dif_Square(5)\nputs dif_Square(10)\nputs dif_Square(25)\nputs dif_Square(3)\nputs dif_Square(0)\nputs dif_Square(1)\nputs dif_Square(2)\nputs dif_Square(4)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(12)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(20)\nputs dif_Square(24)\nputs dif_Square(27)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)\nputs dif_Square(43)\nputs dif_Square(44)\nputs dif_Square(45)\nputs dif_Square(46)\nputs dif_Square(47)\nputs dif_Square(48)\nputs dif_Square(49)\nputs dif_Square(50)\nputs dif_Square(51)\nputs dif_Square(52)\nputs dif_Square(53)\nputs dif_Square(54)\nputs dif_Square(55)\nputs dif_Square(56)\nput",
    "  if n < 0\n    return false\n  end\n  if n == 0\n    return true\n  end\n  i = 1\n  while i * i <= n\n    j = Math.sqrt(n - (i * i)).to_i\n    if (i * i + j * j) == n\n      return true\n    end\n    i += 1\n  end\n  return false\nend",
    "  if n == 0\n    return true\n  end\n  if n < 0\n    n = -n\n  end\n  i = 1\n  while i * i < n\n    j = 1\n    while j * j <= n\n      if i * i - j * j == n\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend\nputs dif_Square(0)\nputs dif_Square(1)\nputs dif_Square(2)\nputs dif_Square(3)\nputs dif_Square(4)\nputs dif_Square(5)\nputs dif_Square(6)\nputs dif_Square(7)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(10)\nputs dif_Square(11)\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(14)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(25)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square",
    "  if n < 0\n    return false\n  end\n  sqrt = Math.sqrt(n).to_i\n  for i in 0..sqrt\n    for j in 0..sqrt\n      if i*i - j*j == n\n        return true\n      end\n    end\n  end\n  return false\nend",
    "  if n < 0\n    return false\n  end\n  while n % 4 == 0\n    n = n / 4\n  end\n  if n % 8 == 7\n    return true\n  end\n  return false\nend\nputs dif_Square(16)\nputs dif_Square(25)\nputs dif_Square(24)\nputs dif_Square(17)",
    "  if n%4==0\n    puts \"The given number can be represented as the difference of two squares\"\n  else\n    puts \"The given number cannot be represented as the difference of two squares\"\n  end\nend\ndif_Square(4)\ndif_Square(5)",
    "  if n < 0\n    return false\n  end\n  if n == 0\n    return true\n  end\n  i = 1\n  while i * i < n\n    j = 1\n    while j * j < n\n      if (i * i - j * j) == n\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend",
    "  if n < 0\n    return false\n  end\n  if n == 0\n    return true\n  end\n  i = 1\n  while i * i < n\n    j = 1\n    while j * j < n\n      if (i * i - j * j) == n\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend\nprint dif_Square(5)\nprint dif_Square(10)\nprint dif_Square(25)\nprint dif_Square(3)\nprint dif_Square(0)\nprint dif_Square(-1)\nprint dif_Square(1)\nprint dif_Square(2)\nprint dif_Square(4)\nprint dif_Square(9)\nprint dif_Square(16)\nprint dif_Square(25)\nprint dif_Square(36)\nprint dif_Square(49)\nprint dif_Square(64)\nprint dif_Square(81)\nprint dif_Square(100)\nprint dif_Square(121)\nprint dif_Square(144)\nprint dif_Square(169)\nprint dif_Square(196)\nprint dif_Square(225)\nprint dif_Square(256)\nprint dif_Square(289)\nprint dif_Square(324)\nprint dif_Square(361)\nprint dif_Square(400)\nprint dif_Square(441)\nprint dif_Square(484)\nprint dif_Square(529)\nprint dif_Square(576)\nprint dif_Square(625)\nprint dif_Square(676)\nprint dif_Square(729)\nprint dif_Square(784)\nprint dif_Square(841)\nprint dif_Square(900)\nprint dif_Square(961)\nprint dif_Square(1024)\nprint dif_Square(1089)\nprint dif_Square(1156)\nprint dif_Square(1225)\nprint dif_Square(1296)\nprint dif_Square(1369)\nprint dif_Square(1444)\nprint dif",
    "  if n == 0\n    return true\n  end\n  if n < 0\n    return false\n  end\n  while n % 4 == 0\n    n = n / 4\n  end\n  if n % 8 == 7\n    return true\n  else\n    return false\n  end\nend",
    "  if n < 0\n    puts \"No\"\n  else\n    sqrt = Math.sqrt(n).to_i\n    for i in 1..sqrt\n      j = Math.sqrt(n - i*i).to_i\n      if (i*i + j*j == n)\n        puts \"Yes\"\n        return\n      end\n    end\n    puts \"No\"\n  end\nend",
    "  if n < 0\n    return false\n  end\n  i = 1\n  while i * i < n\n    j = 1\n    while j * j < n\n      if (i * i - j * j) == n\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend",
    "  if n < 0\n    return false\n  end\n  i = 1\n  while i * i <= n\n    j = 1\n    while j * j <= n\n      if (i * i - j * j) == n\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend\nputs dif_Square(5)\nputs dif_Square(10)\nputs dif_Square(25)\nputs dif_Square(3)\nputs dif_Square(0)\nputs dif_Square(-1)\nputs dif_Square(-4)\nputs dif_Square(-9)\nputs dif_Square(-16)\nputs dif_Square(-25)",
    "  if n < 0\n    puts \"No\"\n  else\n    puts \"Yes\"\n  end\nend\ndif_Square(5)\ndif_Square(-6)",
    "  if n < 0\n    return false\n  end\n  if n == 0\n    return true\n  end\n  i = 1\n  while i * i <= n\n    j = 1\n    while j * j <= n\n      if (i * i - j * j) == n\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend",
    "  if n % 4 == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  if n % 4 == 0\n    return true\n  else\n    return false\n  end\nend\nputs dif_Square(4)\nputs dif_Square(5)\nputs dif_Square(6)\nputs dif_Square(7)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(10)\nputs dif_Square(11)\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(14)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(25)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)\nputs dif_Square(43)\nputs dif_Square(44)\nputs dif_Square(45)\nputs dif_Square(46)\nputs dif_Square(47)\nputs dif_Square(48)\nputs dif_Square(49)\nputs dif_Square(50)\nputs dif_Square(51)\nputs dif_Square(",
    "  a = Math.sqrt(n).to_i\n  if a * a == n\n    return true\n  else\n    return false\n  end\nend\nputs dif_Square(9)\nputs dif_Square(8)",
    "  if n < 0\n    return false\n  end\n  while n % 4 == 0\n    n = n / 4\n  end\n  if n % 8 == 7\n    return true\n  end\n  return false\nend",
    "  if n % 4 == 0\n    puts \"#{n} can be represented as the difference of two squares\"\n  else\n    puts \"#{n} cannot be represented as the difference of two squares\"\n  end\nend",
    "  if n<0\n    return false\n  end\n  while n%2==0\n    n=n/2\n  end\n  if n%2==1\n    return true\n  end\n  return false\nend\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(10)\nputs dif_Square(11)\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(14)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(25)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)\nputs dif_Square(43)\nputs dif_Square(44)\nputs dif_Square(45)\nputs dif_Square(46)\nputs dif_Square(47)\nputs dif_Square(48)\nputs dif_Square(49)\nputs dif_Square(50)\nputs dif_Square(51)\nputs dif_Square(52)\nputs dif_Square(53)",
    "  sqrt = Math.sqrt(n).to_i\n  for i in 1..sqrt\n    for j in i..sqrt\n      if i*i - j*j == n\n        return true\n      end\n    end\n  end\n  return false\nend",
    "  if n < 0\n    return false\n  end\n  if n == 0\n    return true\n  end\n  i = 1\n  while i * i < n\n    j = 1\n    while j * j <= n\n      if (i * i - j * j) == n\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend",
    "  if n%4==0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend\ndif_Square(9)",
    "  if n < 0\n    return false\n  end\n  if n == 0\n    return true\n  end\n  i = 1\n  while i * i < n\n    j = 1\n    while j * j <= n\n      if (i * i - j * j) == n\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend",
    "  if n % 4 == 0\n    puts \"The given number can be represented as the difference of two squares\"\n  else\n    puts \"The given number cannot be represented as the difference of two squares\"\n  end\nend\ndif_Square(4)\ndif_Square(5)",
    "  if n % 4 == 0\n    puts \"#{n} can be represented as the difference of two squares\"\n  else\n    puts \"#{n} can not be represented as the difference of two squares\"\n  end\nend",
    "  if n % 4 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  if n%4==0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend\ndif_Square(4)\ndif_Square(5)",
    "  if n % 4 == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend\ndif_Square(5)",
    "  if n > 0\n    sqrt = Math.sqrt(n)\n    if sqrt == sqrt.to_i\n      puts \"Yes, #{n} can be represented as the difference of two squares.\"\n    else\n      puts \"No, #{n} can not be represented as the difference of two squares.\"\n    end\n  else\n    puts \"Please enter a positive number.\"\n  end\nend",
    "  if n<0\n    return false\n  else\n    return true\n  end\nend\nputs dif_Square(5)\nputs dif_Square(-5)",
    "  if n < 0\n    return false\n  else\n    sqrt = Math.sqrt(n).to_i\n    for i in 1..sqrt\n      if i*i == n\n        return true\n      end\n    end\n    return false\n  end\nend",
    "  if n == 0\n    return true\n  end\n  if n < 0\n    n = -n\n  end\n  i = 1\n  while i * i < n\n    j = 1\n    while j * j < n\n      if i * i - j * j == n\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend\nputs dif_Square(0)\nputs dif_Square(1)\nputs dif_Square(2)\nputs dif_Square(3)\nputs dif_Square(4)\nputs dif_Square(5)\nputs dif_Square(6)\nputs dif_Square(7)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(10)\nputs dif_Square(11)\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(14)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(25)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square",
    "  if n % 4 == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend\ndif_Square(4)\ndif_Square(5)",
    "  sqrt = Math.sqrt(n).to_i\n  for i in 1..sqrt\n    j = Math.sqrt(n + i*i).to_i\n    if i*i + j*j == n\n      return true\n    end\n  end\n  return false\nend",
    "  if n<0\n    return false\n  else\n    return true\n  end\nend\nputs dif_Square(5)\nputs dif_Square(-5)",
    "  return true if n == 0\n  return false if n < 0\n  while n % 4 == 0\n    n = n / 4\n  end\n  return n % 8 == 7\nend\nputs dif_Square(0)\nputs dif_Square(1)\nputs dif_Square(2)\nputs dif_Square(3)\nputs dif_Square(4)\nputs dif_Square(5)\nputs dif_Square(6)\nputs dif_Square(7)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(10)\nputs dif_Square(11)\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(14)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(25)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)\nputs dif_Square(43)\nputs dif_Square(44)\nputs dif_Square(45)\nputs dif_Square(",
    "  if n < 0\n    return false\n  end\n  if n == 0\n    return true\n  end\n  i = 1\n  while i * i < n\n    j = 1\n    while j * j < n\n      if (i * i - j * j) == n\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend\nputs dif_Square(10)\nputs dif_Square(25)\nputs dif_Square(3)\nputs dif_Square(0)\nputs dif_Square(1)\nputs dif_Square(2)\nputs dif_Square(4)\nputs dif_Square(5)\nputs dif_Square(6)\nputs dif_Square(7)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(11)\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(14)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square",
    "  if n == 0\n    return true\n  end\n  if n < 0\n    n = -n\n  end\n  while n % 2 == 0\n    n = n / 2\n  end\n  return n == 1\nend\nputs dif_Square(0)\nputs dif_Square(1)\nputs dif_Square(2)\nputs dif_Square(3)\nputs dif_Square(4)\nputs dif_Square(5)\nputs dif_Square(6)\nputs dif_Square(7)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(10)\nputs dif_Square(11)\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(14)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(25)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)\nputs dif_Square(43)\nputs dif_Square(44)\nputs dif_Square(",
    "  sqrt = Math.sqrt(n).to_i\n  for i in 1..sqrt\n    j = Math.sqrt(n + i*i).to_i\n    if j*j == n + i*i\n      return true\n    end\n  end\n  return false\nend",
    "  if n % 4 == 0\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend\ndif_Square(16)",
    "  return true if Math.sqrt(n) % 1 == 0\n  return false\nend",
    "  if n < 0\n    return false\n  end\n  while n % 4 == 0\n    n = n / 4\n  end\n  if n % 8 == 7\n    return true\n  end\n  return false\nend\nputs dif_Square(10)\nputs dif_Square(25)\nputs dif_Square(3)\nputs dif_Square(0)\nputs dif_Square(1)\nputs dif_Square(2)\nputs dif_Square(3)\nputs dif_Square(4)\nputs dif_Square(5)\nputs dif_Square(6)\nputs dif_Square(7)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(10)\nputs dif_Square(11)\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(14)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(25)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)",
    "  if n % 4 == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  if n%4 == 0\n    puts \"The number is difference of two squares\"\n  else\n    puts \"The number is not difference of two squares\"\n  end\nend",
    "  if n < 0\n    return false\n  end\n  sqrt_n = Math.sqrt(n).to_i\n  for i in 0..sqrt_n\n    j = Math.sqrt(n - i*i).to_i\n    if i*i + j*j == n\n      return true\n    end\n  end\n  return false\nend\nputs dif_Square(25)\nputs dif_Square(3)\nputs dif_Square(10)\nputs dif_Square(26)",
    "  if n < 0\n    return false\n  end\n  if n == 0\n    return true\n  end\n  i = 1\n  while i * i < n\n    j = 1\n    while j * j < n\n      if (i * i - j * j) == n\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend\nputs dif_Square(0)\nputs dif_Square(1)\nputs dif_Square(2)\nputs dif_Square(3)\nputs dif_Square(4)\nputs dif_Square(5)\nputs dif_Square(6)\nputs dif_Square(7)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(10)\nputs dif_Square(11)\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(14)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(25)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square",
    "  sqrt = Math.sqrt(n).to_i\n  for i in 1..sqrt\n    for j in i..sqrt\n      if (i*i - j*j) == n\n        return true\n      end\n    end\n  end\n  return false\nend\nputs dif_Square(25)\nputs dif_Square(26)",
    "  if n % 4 == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  if n < 0\n    return false\n  else\n    return true\n  end\nend",
    "  sqrt = Math.sqrt(n).floor\n  for i in 1..sqrt\n    j = Math.sqrt(n + i*i).floor\n    if i*i + j*j == n\n      return true\n    end\n  end\n  return false\nend\nputs dif_Square(5)\nputs dif_Square(10)\nputs dif_Square(25)\nputs dif_Square(3)\nputs dif_Square(0)\nputs dif_Square(1)\nputs dif_Square(2)\nputs dif_Square(4)\nputs dif_Square(6)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(11)\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(14)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)\nputs dif_Square(43)\nputs dif_Square(44)\nputs dif_",
    "  sqr = Math.sqrt(n).to_i\n  if sqr * sqr == n\n    return true\n  else\n    return false\n  end\nend\nputs dif_Square(25)\nputs dif_Square(24)",
    "  if n % 4 == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend\ndif_Square(10)",
    "  if n == 0\n    return true\n  end\n  if n < 0\n    n = -n\n  end\n  while n % 2 == 0\n    n = n / 2\n  end\n  while n % 3 == 0\n    n = n / 3\n  end\n  while n % 5 == 0\n    n = n / 5\n  end\n  if n == 1\n    return true\n  else\n    return false\n  end\nend\nputs dif_Square(25)\nputs dif_Square(0)\nputs dif_Square(1)\nputs dif_Square(2)\nputs dif_Square(3)\nputs dif_Square(4)\nputs dif_Square(5)\nputs dif_Square(6)\nputs dif_Square(7)\nputs dif_Square(8)\nputs dif_Square(9)\nputs dif_Square(10)\nputs dif_Square(11)\nputs dif_Square(12)\nputs dif_Square(13)\nputs dif_Square(14)\nputs dif_Square(15)\nputs dif_Square(16)\nputs dif_Square(17)\nputs dif_Square(18)\nputs dif_Square(19)\nputs dif_Square(20)\nputs dif_Square(21)\nputs dif_Square(22)\nputs dif_Square(23)\nputs dif_Square(24)\nputs dif_Square(25)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(",
    "  if n % 4 == 0\n    puts \"#{n} can be represented as the difference of two squares\"\n  else\n    puts \"#{n} cannot be represented as the difference of two squares\"\n  end\nend",
    "  if n % 4 == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend\ndif_Square(4)\ndif_Square(5)",
    "  if n % 4 == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  sqrt = Math.sqrt(n).to_i\n  for i in 1..sqrt\n    for j in i..sqrt\n      if i*i - j*j == n\n        return true\n      end\n    end\n  end\n  return false\nend\nputs dif_Square(25)\nputs dif_Square(26)\nputs dif_Square(27)\nputs dif_Square(28)\nputs dif_Square(29)\nputs dif_Square(30)\nputs dif_Square(31)\nputs dif_Square(32)\nputs dif_Square(33)\nputs dif_Square(34)\nputs dif_Square(35)\nputs dif_Square(36)\nputs dif_Square(37)\nputs dif_Square(38)\nputs dif_Square(39)\nputs dif_Square(40)\nputs dif_Square(41)\nputs dif_Square(42)\nputs dif_Square(43)\nputs dif_Square(44)\nputs dif_Square(45)\nputs dif_Square(46)\nputs dif_Square(47)\nputs dif_Square(48)\nputs dif_Square(49)\nputs dif_Square(50)\nputs dif_Square(51)\nputs dif_Square(52)\nputs dif_Square(53)\nputs dif_Square(54)\nputs dif_Square(55)\nputs dif_Square(56)\nputs dif_Square(57)\nputs dif_Square(58)\nputs dif_Square(59)\nputs dif_Square(60)\nputs dif_Square(61)\nputs dif_Square(62)\nputs dif_Square(63)\nputs dif_Square(64)\nputs dif_Square(65)\nputs dif_Square(66)\nputs dif_Square(67)\nputs dif_Square(68)\nputs dif_Square(",
    "  if n % 4 == 0\n    puts \"YES\"\n  else\n    puts \"NO\"\n  end\nend",
    "  if n < 0\n    return false\n  end\n  while n % 4 == 0\n    n = n / 4\n  end\n  if n % 8 == 7\n    return true\n  end\n  return false\nend",
    "  if n < 0\n    return false\n  end\n  while n % 4 == 0\n    n = n / 4\n  end\n  if n % 8 == 7\n    return true\n  end\n  return false\nend\nputs dif_Square(4)\nputs dif_Square(5)\nputs dif_Square(9)\nputs dif_Square(16)\nputs dif_Square(25)\nputs dif_Square(36)\nputs dif_Square(49)\nputs dif_Square(64)\nputs dif_Square(81)\nputs dif_Square(100)\nputs dif_Square(121)\nputs dif_Square(144)\nputs dif_Square(169)\nputs dif_Square(196)\nputs dif_Square(225)\nputs dif_Square(256)\nputs dif_Square(289)\nputs dif_Square(324)\nputs dif_Square(361)\nputs dif_Square(400)\nputs dif_Square(441)\nputs dif_Square(484)\nputs dif_Square(529)\nputs dif_Square(576)\nputs dif_Square(625)\nputs dif_Square(676)\nputs dif_Square(729)\nputs dif_Square(784)\nputs dif_Square(841)\nputs dif_Square(900)\nputs dif_Square(961)\nputs dif_Square(1024)\nputs dif_Square(1089)\nputs dif_Square(1156)\nputs dif_Square(1225)\nputs dif_Square(1296)\nputs dif_Square(1369)\nputs dif_Square(1444)\nputs dif_Square(1521)\nputs dif_Square(1600)\nputs dif_Square(1681)\nputs dif_Square(1764)\nputs dif_Square(1849)\nputs dif_Square(1936)\nputs dif_Square",
    "  if n%4==0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend\ndif_Square(4)\ndif_Square(3)",
    "  if n < 0\n    return false\n  end\n  while n % 4 == 0\n    n = n / 4\n  end\n  if n % 8 == 7\n    return true\n  end\n  return false\nend",
    "  if n%4==0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend\ndif_Square(8)",
    "  sqrt = Math.sqrt(n).to_i\n  for i in 1..sqrt\n    j = Math.sqrt(n + i*i).to_i\n    if i*i + j*j == n\n      return true\n    end\n  end\n  return false\nend",
    "  if n < 0\n    return false\n  end\n  if n == 0\n    return true\n  end\n  i = 1\n  while i * i < n\n    j = 1\n    while j * j < n\n      if i * i - j * j == n\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return false\nend",
    "  if n % 4 == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  if n%2 == 0\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend"
  ]
}