{
  "name": "mbpp_160_find_solution",
  "language": "rb",
  "prompt": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  return nil if a > n || b > n\n  return [n/a, 0] if a * (n/a) == n\n  return [0, n/b] if b * (n/b) == n\n  x, y = find_solution(b, a % b, n)\n  [y, x - y * (a / b)]\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= y\n    if a * x + b * y == n\n      return [x, y]\n    end\n    x += 1\n    y = (n - a * x) / b\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - (a * x)) / b\n    return [x, y] if (a * x) + (b * y) == n\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend"
  ]
}