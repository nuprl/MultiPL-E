{
  "name": "mbpp_615_average_tuple",
  "language": "rb",
  "prompt": "# Write a function which takes an array of arrays and returns the average value for each array as an array.\ndef average_tuple(nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_average_tuple\n    candidate = method(:average_tuple)\n    assert_equal([30.5, 34.25, 27.0, 23.25], candidate.call([[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]))\n    assert_equal([25.5, -18.0, 3.75], candidate.call([[1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]]))\n    assert_equal([305.0, 342.5, 270.0, 232.5], candidate.call([[100, 100, 100, 120], [300, 450, 560, 450], [810, 800, 390, 320], [10, 20, 30, 40]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  nums.map { |sub_arr| sub_arr.sum / sub_arr.length.to_f }\nend",
    "  nums.map do |array|\n    array.reduce(:+) / array.length\n  end\nend",
    "  nums.map { |n| n.reduce(:+) / n.length.to_f }\nend",
    "  nums.map { |arr| arr.reduce(:+) / arr.length.to_f }\nend",
    "  nums.map { |arr| arr.reduce(:+) / arr.length.to_f }\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length\n  end\nend",
    "  nums.map { |arr| arr.sum / arr.length.to_f }\nend",
    "  nums.map { |num| num.sum / num.length.to_f }\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length.to_f\n  end\nend",
    "  nums.map do |array|\n    array.reduce(:+).to_f / array.length\n  end\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length\n  end\nend",
    "  nums.map do |arr|\n    arr.reduce(:+) / arr.length.to_f\n  end\nend",
    "  nums.map do |sub_arr|\n    sub_arr.sum / sub_arr.length.to_f\n  end\nend",
    "  nums.map do |sub_array|\n    sub_array.reduce(:+) / sub_array.length.to_f\n  end\nend",
    "  nums.map do |num|\n    num.reduce(:+) / num.length\n  end\nend",
    "  nums.map { |arr| arr.reduce(:+) / arr.length.to_f }\nend",
    "  nums.map { |arr| arr.reduce(:+) / arr.length.to_f }\nend",
    "  nums.map { |arr| arr.reduce(:+) / arr.length.to_f }\nend",
    "  nums.map { |num| num.reduce(:+) / num.length.to_f }\nend",
    "  nums.map { |sub_arr| sub_arr.reduce(:+) / sub_arr.length.to_f }\nend",
    "  nums.map do |sub_array|\n    sub_array.reduce(:+) / sub_array.length\n  end\nend",
    "  nums.map { |num| num.reduce(:+) / num.length.to_f }\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length\n  end\nend",
    "  nums.map { |arr| arr.reduce(:+) / arr.length.to_f }\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length.to_f\n  end\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length\n  end\nend",
    "  nums.map { |n| n.reduce(:+).to_f / n.length }\nend",
    "  nums.map { |sub_arr| sub_arr.sum / sub_arr.length.to_f }\nend",
    "  nums.map do |num|\n    num.reduce(:+).to_f / num.length\n  end\nend",
    "  nums.map do |sub_array|\n    sub_array.reduce(:+) / sub_array.length\n  end\nend",
    "  nums.map { |num| num.reduce(:+) / num.length.to_f }\nend",
    "  nums.map { |sub_arr| sub_arr.reduce(:+) / sub_arr.length.to_f }\nend",
    "  nums.map { |n| n.reduce(:+) / n.length.to_f }\nend",
    "  nums.map { |arr| arr.sum / arr.length.to_f }\nend",
    "  nums.map { |num| num.reduce(:+) / num.length.to_f }\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length\n  end\nend",
    "  nums.map { |sub_arr| sub_arr.sum / sub_arr.length.to_f }\nend",
    "  nums.map { |num| num.reduce(:+).to_f / num.length }\nend",
    "  nums.map { |arr| arr.sum / arr.length.to_f }\nend",
    "  nums.map do |sub_array|\n    sub_array.reduce(:+) / sub_array.length\n  end\nend",
    "  nums.map { |num| num.reduce(:+) / num.length.to_f }\nend",
    "  nums.map do |sub_array|\n    sub_array.reduce(:+) / sub_array.length\n  end\nend",
    "  nums.map do |tuple|\n    tuple.reduce(:+) / tuple.length.to_f\n  end\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length.to_f\n  end\nend",
    "  nums.map do |sub_array|\n    sub_array.reduce(:+) / sub_array.length\n  end\nend",
    "  nums.map do |sub_array|\n    sub_array.reduce(:+) / sub_array.length\n  end\nend",
    "  nums.map do |sub_array|\n    sub_array.reduce(:+) / sub_array.length\n  end\nend",
    "  nums.map { |num| num.reduce(:+) / num.length.to_f }\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length.to_f\n  end\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length\n  end\nend",
    "  nums.map { |sub_arr| sub_arr.reduce(:+) / sub_arr.length.to_f }\nend",
    "  nums.map { |arr| arr.reduce(:+) / arr.length.to_f }\nend",
    "  nums.map { |arr| arr.reduce(:+) / arr.length.to_f }\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length.to_f\n  end\nend",
    "  nums.map do |sub_array|\n    sub_array.reduce(:+) / sub_array.length.to_f\n  end\nend",
    "  nums.map { |arr| arr.reduce(:+) / arr.length.to_f }\nend",
    "  nums.map do |arr|\n    arr.reduce(:+) / arr.length\n  end\nend",
    "  nums.map { |arr| arr.reduce(:+) / arr.length.to_f }\nend",
    "  nums.map { |num| num.sum / num.length.to_f }\nend",
    "  nums.map { |num| num.reduce(:+) / num.length.to_f }\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length.to_f\n  end\nend",
    "  nums.map do |arr|\n    arr.sum / arr.length.to_f\n  end\nend",
    "  nums.map { |num| num.reduce(:+) / num.length.to_f }\nend",
    "  nums.map { |num| num.sum / num.length.to_f }\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length.to_f\n  end\nend",
    "  nums.map { |n| n.reduce(:+) / n.length.to_f }\nend",
    "  nums.map { |arr| arr.reduce(:+).to_f / arr.length }\nend",
    "  nums.map do |n|\n    n.reduce(:+).to_f / n.length\n  end\nend",
    "  nums.map { |n| n.reduce(:+).to_f / n.length }\nend",
    "  nums.map do |num|\n    num.reduce(:+) / num.length\n  end\nend",
    "  nums.map { |n| n.reduce(:+) / n.length.to_f }\nend",
    "  nums.map { |num| num.reduce(:+) / num.length.to_f }\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length.to_f\n  end\nend",
    "  nums.map do |arr|\n    arr.reduce(:+) / arr.length.to_f\n  end\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length.to_f\n  end\nend",
    "  nums.map { |arr| arr.reduce(:+) / arr.length.to_f }\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+).to_f / sub_arr.length\n  end\nend",
    "  nums.map do |array|\n    array.reduce(:+) / array.length.to_f\n  end\nend",
    "  nums.map do |sub_array|\n    sub_array.reduce(:+) / sub_array.length.to_f\n  end\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length.to_f\n  end\nend",
    "  nums.map { |n| n.reduce(:+) / n.length.to_f }\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length.to_f\n  end\nend",
    "  nums.map { |arr| arr.reduce(:+).to_f / arr.length }\nend",
    "  nums.map do |num|\n    num.reduce(:+) / num.length.to_f\n  end\nend",
    "  nums.map { |arr| arr.reduce(:+) / arr.length.to_f }\nend",
    "  nums.map { |arr| arr.sum / arr.length.to_f }\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length\n  end\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length\n  end\nend",
    "  nums.map { |num| num.reduce(:+) / num.size.to_f }\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length.to_f\n  end\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length.to_f\n  end\nend",
    "  nums.map { |n| n.reduce(:+) / n.length.to_f }\nend",
    "  nums.map { |n| n.reduce(:+) / n.length.to_f }\nend",
    "  nums.map { |num| num.reduce(:+) / num.length.to_f }\nend",
    "  nums.map do |sub_arr|\n    sub_arr.sum / sub_arr.length.to_f\n  end\nend",
    "  nums.map do |sub_arr|\n    sub_arr.sum / sub_arr.length.to_f\n  end\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length\n  end\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length.to_f\n  end\nend",
    "  nums.map { |n| n.sum / n.length.to_f }\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length.to_f\n  end\nend",
    "  nums.map do |sub_array|\n    sub_array.reduce(:+) / sub_array.length\n  end\nend",
    "  nums.map do |sub_array|\n    sub_array.reduce(:+) / sub_array.length.to_f\n  end\nend",
    "  nums.map do |sub_array|\n    sub_array.reduce(:+) / sub_array.length\n  end\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length.to_f\n  end\nend",
    "  nums.map { |arr| arr.reduce(:+) / arr.length.to_f }\nend",
    "  nums.map { |n| n.reduce(:+) / n.length.to_f }\nend",
    "  nums.map { |arr| arr.reduce(:+) / arr.size.to_f }\nend",
    "  nums.map { |sub_arr| sub_arr.reduce(:+) / sub_arr.length.to_f }\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length.to_f\n  end\nend",
    "  nums.map { |n| n.reduce(:+) / n.length.to_f }\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+).to_f / sub_arr.length\n  end\nend",
    "  nums.map do |array|\n    array.sum / array.length.to_f\n  end\nend",
    "  nums.map do |sub_array|\n    sub_array.reduce(:+) / sub_array.length\n  end\nend",
    "  nums.map do |n|\n    n.reduce(:+) / n.length.to_f\n  end\nend",
    "  nums.map do |arr|\n    arr.reduce(:+).to_f / arr.length\n  end\nend",
    "  nums.map do |arr|\n    arr.reduce(:+) / arr.length.to_f\n  end\nend",
    "  nums.map do |sub_array|\n    sub_array.reduce(:+) / sub_array.length\n  end\nend",
    "  nums.map do |sub_array|\n    sub_array.reduce(:+) / sub_array.length\n  end\nend",
    "  nums.map {|arr| arr.reduce(:+) / arr.length.to_f}\nend",
    "  nums.map { |num| num.sum / num.length.to_f }\nend",
    "  nums.map { |n| n.reduce(:+) / n.length.to_f }\nend",
    "  nums.map { |sub_array| sub_array.reduce(:+) / sub_array.length.to_f }\nend",
    "  nums.map do |sub_array|\n    sub_array.reduce(:+) / sub_array.length.to_f\n  end\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length.to_f\n  end\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length\n  end\nend",
    "  nums.map { |n| n.reduce(:+) / n.length.to_f }\nend",
    "  nums.map { |num| num.reduce(:+) / num.size.to_f }\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length.to_f\n  end\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length.to_f\n  end\nend",
    "  nums.map do |num|\n    num.reduce(:+).to_f / num.length\n  end\nend",
    "  nums.map { |n| n.reduce(:+) / n.length.to_f }\nend",
    "  nums.map { |arr| arr.reduce(:+) / arr.length.to_f }\nend",
    "  nums.map { |num| num.reduce(:+) / num.length.to_f }\nend",
    "  nums.map { |num| num.reduce(:+) / num.length.to_f }\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length.to_f\n  end\nend",
    "  nums.map { |sub_arr| sub_arr.sum / sub_arr.length.to_f }\nend",
    "  nums.map { |sub_arr| sub_arr.sum / sub_arr.length.to_f }\nend",
    "  nums.map { |arr| arr.sum / arr.length.to_f }\nend",
    "  nums.map { |num| num.reduce(:+).to_f / num.size }\nend",
    "  nums.map { |arr| arr.reduce(:+) / arr.length.to_f }\nend",
    "  nums.map { |num| num.reduce(:+) / num.length.to_f }\nend",
    "  nums.map { |num| num.reduce(:+) / num.length.to_f }\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length\n  end\nend",
    "  nums.map { |arr| arr.sum / arr.size.to_f }\nend",
    "  nums.map {|sub_array| sub_array.reduce(:+).to_f / sub_array.length}\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length\n  end\nend",
    "  nums.map do |arr|\n    arr.reduce(:+) / arr.length\n  end\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length\n  end\nend",
    "  nums.map do |sub_array|\n    sub_array.reduce(:+) / sub_array.length\n  end\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length.to_f\n  end\nend",
    "  nums.map do |sub_arr|\n    sub_arr.sum / sub_arr.length.to_f\n  end\nend",
    "  nums.map { |arr| arr.reduce(:+).to_f / arr.length }\nend",
    "  nums.map do |tuple|\n    tuple.reduce(:+) / tuple.length.to_f\n  end\nend",
    "  nums.map { |num| num.reduce(:+) / num.length.to_f }\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length.to_f\n  end\nend",
    "  nums.map { |sub_arr| sub_arr.sum / sub_arr.length.to_f }\nend",
    "  nums.map { |arr| arr.sum / arr.length.to_f }\nend",
    "  nums.map do |arr|\n    arr.sum / arr.length.to_f\n  end\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length\n  end\nend",
    "  nums.map { |arr| arr.reduce(:+) / arr.length.to_f }\nend",
    "  nums.map { |num| num.reduce(:+).to_f / num.length }\nend",
    "  nums.map { |n| n.reduce(:+).to_f / n.length }\nend",
    "    nums.map { |sub_arr| sub_arr.sum / sub_arr.length.to_f }\nend",
    "  nums.map { |tuple| tuple.reduce(:+) / tuple.length.to_f }\nend",
    "  nums.map { |arr| arr.sum / arr.length.to_f }\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+).to_f / sub_arr.length\n  end\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length.to_f\n  end\nend",
    "  nums.map { |arr| arr.sum / arr.length.to_f }\nend",
    "  nums.map { |n| n.reduce(:+).to_f / n.length }\nend",
    "  nums.map { |num| num.sum / num.length.to_f }\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length.to_f\n  end\nend",
    "  nums.map { |n| n.reduce(:+) / n.length.to_f }\nend",
    "  nums.map do |n|\n    n.reduce(:+) / n.length.to_f\n  end\nend",
    "  nums.map do |arr|\n    arr.reduce(:+).to_f / arr.length\n  end\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length\n  end\nend",
    "  nums.map do |sub_array|\n    sub_array.sum / sub_array.length.to_f\n  end\nend",
    "  nums.map { |n| n.reduce(:+) / n.length.to_f }\nend",
    "  nums.map { |num| num.reduce(:+) / num.length.to_f }\nend",
    "  nums.map do |sub_arr|\n    sub_arr.sum / sub_arr.length.to_f\n  end\nend",
    "  nums.map do |n|\n    n.reduce(:+) / n.length.to_f\n  end\nend",
    "  nums.map do |arr|\n    arr.reduce(:+) / arr.length\n  end\nend",
    "  nums.map { |num| num.sum / num.length.to_f }\nend",
    "  nums.map do |array|\n    array.sum / array.length.to_f\n  end\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+).to_f / sub_arr.length\n  end\nend",
    "  nums.map { |num| num.reduce(:+).to_f / num.length }\nend",
    "  nums.map { |num| num.sum / num.length.to_f }\nend",
    "  nums.map { |num| num.reduce(:+).to_f / num.length }\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length\n  end\nend",
    "  nums.map { |num| num.reduce(:+) / num.length.to_f }\nend",
    "  nums.map do |sub_array|\n    sub_array.reduce(:+) / sub_array.length\n  end\nend",
    "  nums.map { |arr| arr.reduce(:+).to_f / arr.length }\nend",
    "  nums.map do |arr|\n    arr.reduce(:+) / arr.length.to_f\n  end\nend",
    "  nums.map do |arr|\n    arr.reduce(:+) / arr.length.to_f\n  end\nend",
    "  nums.map { |num| num.sum / num.length.to_f }\nend",
    "  nums.map { |num| num.reduce(:+) / num.length.to_f }\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length.to_f\n  end\nend",
    "  nums.map { |arr| arr.sum / arr.length.to_f }\nend",
    "  nums.map do |array|\n    array.reduce(:+) / array.length\n  end\nend",
    "  nums.map do |sub_arr|\n    sub_arr.reduce(:+) / sub_arr.length.to_f\n  end\nend",
    "  nums.map { |n| n.reduce(:+) / n.length.to_f }\nend"
  ]
}