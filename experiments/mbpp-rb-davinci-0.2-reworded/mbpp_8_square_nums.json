{
  "name": "mbpp_8_square_nums",
  "language": "rb",
  "prompt": "# Write a function to find squares of individual elements in an array.\ndef square_nums(nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_square_nums\n    candidate = method(:square_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal([100, 400, 900], candidate.call([10, 20, 30]))\n    assert_equal([144, 225], candidate.call([12, 15]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  nums.map { |num| num ** 2 }\nend",
    "  nums.map { |num| num ** 2 }\nend",
    "  nums.map { |num| num ** 2 }\nend",
    "  nums.map {|num| num ** 2}\nend",
    "  nums.map {|num| num ** 2}\nend",
    "  nums.map { |num| num ** 2 }\nend",
    "  nums.map {|num| num ** 2}\nend",
    "  nums.map { |num| num ** 2 }\nend",
    "  nums.map { |num| num ** 2 }\nend",
    "  nums.map { |num| num ** 2 }\nend",
    "  nums.map { |num| num ** 2 }\nend",
    "  nums.map { |num| num ** 2 }\nend",
    "  nums.map { |num| num ** 2 }\nend",
    "  nums.map { |num| num ** 2 }\nend",
    "  nums.map { |num| num ** 2 }\nend",
    "  nums.map { |num| num ** 2 }\nend",
    "  nums.map { |num| num ** 2 }\nend",
    "  nums.map { |num| num ** 2 }\nend",
    "  nums.map { |num| num * num }\nend",
    "  nums.map { |num| num * num }\nend"
  ]
}