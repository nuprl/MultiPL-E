{
  "name": "mbpp_775_odd_position",
  "language": "rb",
  "prompt": "# Write a rbthon function to check whether every odd index contains odd numbers of a given array.\ndef odd_position(nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_odd_position\n    candidate = method(:odd_position)\n    assert_equal(true, candidate.call([2, 1, 4, 3, 6, 7, 6, 3]))\n    assert_equal(true, candidate.call([4, 1, 2]))\n    assert_equal(false, candidate.call([1, 2, 3]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  nums.each_with_index do |num, index|\n    if index.odd? && num.odd?\n      puts \"#{num} is in odd position\"\n    end\n  end\nend",
    "  nums.each_with_index {|num, i| return false if i.odd? && num.even?}\n  true\nend",
    "  nums.each_with_index do |num, index|\n    if index.odd? && num.odd?\n      puts \"True\"\n    else\n      puts \"False\"\n    end\n  end\nend",
    "  nums.each_with_index do |num, index|\n    if index.odd? && num.odd?\n      puts \"odd number at odd position\"\n    else\n      puts \"odd number at even position\"\n    end\n  end\nend",
    "  nums.each_with_index do |num, index|\n    if index.odd? && num.odd?\n      puts \"The number #{num} is at odd position #{index}.\"\n    end\n  end\nend",
    "  nums.each_with_index do |num, index|\n    if index.odd? && num.odd?\n      puts \"The number #{num} is at index #{index} which is odd.\"\n    end\n  end\nend",
    "  nums.each_with_index do |num, index|\n    if index.odd? && num.odd?\n      puts \"True\"\n    else\n      puts \"False\"\n    end\n  end\nend",
    "  for i in 0..nums.length\n    if i % 2 == 1\n      if nums[i] % 2 == 1\n        puts \"odd number at odd position\"\n      else\n        puts \"even number at odd position\"\n      end\n    end\n  end\nend",
    "  nums.each_with_index do |num, index|\n    if index.odd? && num.odd?\n      puts \"odd number at odd position\"\n    else\n      puts \"odd number at even position\"\n    end\n  end\nend",
    "  nums.each_with_index do |num, index|\n    if index.odd? && num.odd?\n      return true\n    else\n      return false\n    end\n  end\nend",
    "  nums.each_with_index do |num, index|\n    if index.odd? && num.odd?\n      return true\n    else\n      return false\n    end\n  end\nend",
    "  nums.each_with_index do |num, index|\n    if index.odd?\n      if num.odd?\n        puts \"#{num} is at odd position\"\n      else\n        puts \"#{num} is not at odd position\"\n      end\n    end\n  end\nend",
    "  nums.each_with_index do |num, index|\n    if index.odd? && num.odd?\n      puts \"odd number at odd position\"\n    else\n      puts \"odd number at even position\"\n    end\n  end\nend",
    "  nums.each_with_index do |num, index|\n    if index.odd? && num.odd?\n      puts \"odd number at odd position\"\n    else\n      puts \"not odd number at odd position\"\n    end\n  end\nend",
    "  nums.each_with_index do |num, i|\n    if i.odd? && num.odd?\n      puts \"True\"\n    else\n      puts \"False\"\n    end\n  end\nend",
    "  nums.each_with_index do |num, index|\n    if index.odd? && num.odd?\n      return true\n    else\n      return false\n    end\n  end\nend",
    "  nums.each_with_index do |num, index|\n    if index.odd? && num.odd?\n      puts \"#{num} is in odd position\"\n    end\n  end\nend",
    "  for i in 0..nums.length-1\n    if i % 2 == 0\n      if nums[i] % 2 == 0\n        return false\n      end\n    end\n  end\n  return true\nend",
    "  nums.each_with_index do |num, index|\n    if index.odd?\n      if num.odd?\n        puts \"#{num} is at odd position\"\n      else\n        puts \"#{num} is not at odd position\"\n      end\n    end\n  end\nend",
    "  nums.each_with_index { |num, index| return false if index.odd? && num.odd? }\n  true\nend"
  ]
}