{
  "name": "mbpp_639_sample_nam",
  "language": "rb",
  "prompt": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppbow7jfw\nStarted\n.\nFinished in 0.000422155 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.80 tests/s, 7106.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi4z_vq_f\nStarted\n.\nFinished in 0.000430082 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2325.14 tests/s, 6975.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp18f7vjsb\nStarted\n.\nFinished in 0.000423112 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2363.44 tests/s, 7090.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map { |name| name.length }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa4mtb8yf\nStarted\n.\nFinished in 0.000414362 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2413.35 tests/s, 7240.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject {|name| name[0] =~ /[a-z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8kphmxnu\nStarted\n.\nFinished in 0.000392272 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2549.25 tests/s, 7647.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map { |name| name.length }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa4mtb8yf\nStarted\n.\nFinished in 0.000414362 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2413.35 tests/s, 7240.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0] =~ /[A-Z]/}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsffiivug\nStarted\n.\nFinished in 0.000392995 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2544.56 tests/s, 7633.68 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0] =~ /[A-Z]/}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsffiivug\nStarted\n.\nFinished in 0.000392995 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2544.56 tests/s, 7633.68 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] == name[0].upcase}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpizehkqjs\nStarted\n.\nFinished in 0.00041928 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2385.04 tests/s, 7155.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0] =~ /[A-Z]/}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsffiivug\nStarted\n.\nFinished in 0.000392995 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2544.56 tests/s, 7633.68 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name =~ /^[a-z]/}\n  sample_names.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb464ed6l\nStarted\n.\nFinished in 0.00039958 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2502.63 tests/s, 7507.88 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps7km0miu\nStarted\n.\nFinished in 0.000409255 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2443.46 tests/s, 7330.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name =~ /[A-Z]/ }.map(&:length).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf_acqme6\nStarted\n.\nFinished in 0.000389759 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2565.69 tests/s, 7697.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppbow7jfw\nStarted\n.\nFinished in 0.000422155 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.80 tests/s, 7106.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name =~ /^[a-z]/}\n  sample_names.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb464ed6l\nStarted\n.\nFinished in 0.00039958 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2502.63 tests/s, 7507.88 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps7km0miu\nStarted\n.\nFinished in 0.000409255 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2443.46 tests/s, 7330.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp18f7vjsb\nStarted\n.\nFinished in 0.000423112 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2363.44 tests/s, 7090.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi4z_vq_f\nStarted\n.\nFinished in 0.000430082 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2325.14 tests/s, 6975.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject {|name| name[0].downcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp12wa5mue\nStarted\n.\nFinished in 0.0004573 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2186.75 tests/s, 6560.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi4z_vq_f\nStarted\n.\nFinished in 0.000430082 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2325.14 tests/s, 6975.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0] =~ /[A-Z]/}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsffiivug\nStarted\n.\nFinished in 0.000392995 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2544.56 tests/s, 7633.68 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name =~ /[A-Z]/ }.map(&:length).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf_acqme6\nStarted\n.\nFinished in 0.000389759 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2565.69 tests/s, 7697.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxujroset\nStarted\n.\nFinished in 0.000431862 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2315.55 tests/s, 6946.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6ds9xoc5\nStarted\n.\nFinished in 0.000437762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2284.35 tests/s, 6853.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps7km0miu\nStarted\n.\nFinished in 0.000409255 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2443.46 tests/s, 7330.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9ridit6d\nStarted\n.\nFinished in 0.000432835 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2310.35 tests/s, 6931.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxujroset\nStarted\n.\nFinished in 0.000431862 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2315.55 tests/s, 6946.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name =~ /^[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjv3zp4fg\nStarted\n.\nFinished in 0.00044077 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2268.76 tests/s, 6806.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sum = 0\n  sample_names.each do |name|\n    if name[0] =~ /[A-Z]/\n      sum += name.length\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuw8frag3\nStarted\n.\nFinished in 0.000419434 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2384.17 tests/s, 7152.50 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9ridit6d\nStarted\n.\nFinished in 0.000432835 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2310.35 tests/s, 6931.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject {|name| name =~ /^[a-z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5n_cps77\nStarted\n.\nFinished in 0.000405567 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2465.68 tests/s, 7397.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sum = 0\n  sample_names.each do |name|\n    if name.start_with?(\"A\")\n      sum += name.length\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "Loaded suite /tmp/tmpgrd6fhn4\nStarted\nF\n===============================================================================\nFailure: test_sample_nam(TestHumanEval)\n/tmp/tmpgrd6fhn4.rb:15:in `test_sample_nam'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_sample_nam\n     14:     candidate = method(:sample_nam)\n  => 15:     assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n     16:     assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n     17:     assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n     18:   end\n<16> expected but was\n<0>\n===============================================================================\n\nFinished in 0.008640664 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.73 tests/s, 115.73 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name =~ /[A-Z]/}.map {|name| name.length}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpovz12a3c\nStarted\n.\nFinished in 0.00042106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2374.96 tests/s, 7124.88 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map { |name| name.length }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3ani46lf\nStarted\n.\nFinished in 0.000434735 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2300.25 tests/s, 6900.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject {|name| name[0].downcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp12wa5mue\nStarted\n.\nFinished in 0.0004573 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2186.75 tests/s, 6560.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps7km0miu\nStarted\n.\nFinished in 0.000409255 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2443.46 tests/s, 7330.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppbow7jfw\nStarted\n.\nFinished in 0.000422155 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.80 tests/s, 7106.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject { |name| name[0].downcase == name[0] }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjgb4n0xs\nStarted\n.\nFinished in 0.000431394 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2318.07 tests/s, 6954.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppbow7jfw\nStarted\n.\nFinished in 0.000422155 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.80 tests/s, 7106.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppbow7jfw\nStarted\n.\nFinished in 0.000422155 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.80 tests/s, 7106.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject { |name| name =~ /^[a-z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpg25vr58l\nStarted\n.\nFinished in 0.000425898 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2347.98 tests/s, 7043.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.each do |name|\n    name.delete!(name) if name[0] == name[0].downcase\n  end\n  sample_names.map(&:length).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprgbmdw0g\nStarted\n.\nFinished in 0.000434177 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2303.21 tests/s, 6909.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if { |name| name[0] =~ /[a-z]/ }\n  sample_names.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8afwzrp_\nStarted\n.\nFinished in 0.000446189 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2241.20 tests/s, 6723.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |sample_name| sample_name[0].upcase == sample_name[0] }.map { |sample_name| sample_name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdtimnewu\nStarted\n.\nFinished in 0.000514474 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1943.73 tests/s, 5831.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9ridit6d\nStarted\n.\nFinished in 0.000432835 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2310.35 tests/s, 6931.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map { |name| name.length }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3ani46lf\nStarted\n.\nFinished in 0.000434735 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2300.25 tests/s, 6900.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] == name[0].upcase}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpizehkqjs\nStarted\n.\nFinished in 0.00041928 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2385.04 tests/s, 7155.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi4z_vq_f\nStarted\n.\nFinished in 0.000430082 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2325.14 tests/s, 6975.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name[0] =~ /[a-z]/}\n  sample_names.inject(0) {|sum, name| sum + name.length}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgdz64qo5\nStarted\n.\nFinished in 0.00042003 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2380.78 tests/s, 7142.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name[0] == name[0].downcase}\n  sample_names.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8ovzq5rn\nStarted\n.\nFinished in 0.000454346 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2200.97 tests/s, 6602.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpt8zkeisx\nStarted\n.\nFinished in 0.000449387 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2225.25 tests/s, 6675.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppbow7jfw\nStarted\n.\nFinished in 0.000422155 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.80 tests/s, 7106.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sum = 0\n  sample_names.each do |name|\n    if name[0] =~ /[A-Z]/\n      sum += name.length\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1lh0xgrw\nStarted\n.\nFinished in 0.000467385 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2139.56 tests/s, 6418.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps7km0miu\nStarted\n.\nFinished in 0.000409255 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2443.46 tests/s, 7330.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpt8zkeisx\nStarted\n.\nFinished in 0.000449387 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2225.25 tests/s, 6675.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps7km0miu\nStarted\n.\nFinished in 0.000409255 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2443.46 tests/s, 7330.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sum = 0\n  sample_names.each do |name|\n    sum += name.length if name[0] =~ /[A-Z]/\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdsfid8kl\nStarted\n.\nFinished in 0.00043396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2304.36 tests/s, 6913.08 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps7km0miu\nStarted\n.\nFinished in 0.000409255 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2443.46 tests/s, 7330.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppbow7jfw\nStarted\n.\nFinished in 0.000422155 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.80 tests/s, 7106.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map { |name| name.length }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa4mtb8yf\nStarted\n.\nFinished in 0.000414362 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2413.35 tests/s, 7240.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name =~ /^[a-z]/}\n  sample_names.map! {|name| name.length}\n  sample_names.inject(0) {|sum, n| sum + n}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbfqekbud\nStarted\n.\nFinished in 0.000476263 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2099.68 tests/s, 6299.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0] =~ /[A-Z]/}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsffiivug\nStarted\n.\nFinished in 0.000392995 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2544.56 tests/s, 7633.68 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name =~ /^[a-z]/}\n  sample_names.map! {|name| name.length}\n  sample_names.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptlcxcw_b\nStarted\n.\nFinished in 0.00042645 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2344.94 tests/s, 7034.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi4z_vq_f\nStarted\n.\nFinished in 0.000430082 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2325.14 tests/s, 6975.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sum = 0\n  sample_names.each do |name|\n    if name[0] =~ /[A-Z]/\n      sum += name.length\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1lh0xgrw\nStarted\n.\nFinished in 0.000467385 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2139.56 tests/s, 6418.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject{|name| name =~ /\\A[a-z]/}.map{|name| name.length}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_p9_g1kc\nStarted\n.\nFinished in 0.00043677 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2289.53 tests/s, 6868.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppbow7jfw\nStarted\n.\nFinished in 0.000422155 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.80 tests/s, 7106.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps7km0miu\nStarted\n.\nFinished in 0.000409255 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2443.46 tests/s, 7330.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sum = 0\n  sample_names.each do |name|\n    if name[0] =~ /[A-Z]/\n      sum += name.length\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1lh0xgrw\nStarted\n.\nFinished in 0.000467385 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2139.56 tests/s, 6418.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp5zrphv1\nStarted\n.\nFinished in 0.000414683 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2411.48 tests/s, 7234.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject {|name| name[0] =~ /[a-z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8kphmxnu\nStarted\n.\nFinished in 0.000392272 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2549.25 tests/s, 7647.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name =~ /[A-Z]/ }.map(&:length).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf_acqme6\nStarted\n.\nFinished in 0.000389759 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2565.69 tests/s, 7697.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map(&:length).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe95j0eof\nStarted\n.\nFinished in 0.000403591 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2477.76 tests/s, 7433.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0] =~ /[A-Z]/}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsffiivug\nStarted\n.\nFinished in 0.000392995 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2544.56 tests/s, 7633.68 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppbow7jfw\nStarted\n.\nFinished in 0.000422155 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.80 tests/s, 7106.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name[0] =~ /[a-z]/}\n  sample_names.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw6x6k5mw\nStarted\n.\nFinished in 0.000385078 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2596.88 tests/s, 7790.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name[0].downcase == name[0]}\n  sample_names.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb79rnnkh\nStarted\n.\nFinished in 0.000421846 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2370.53 tests/s, 7111.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] == name[0].upcase}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpizehkqjs\nStarted\n.\nFinished in 0.00041928 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2385.04 tests/s, 7155.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9ridit6d\nStarted\n.\nFinished in 0.000432835 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2310.35 tests/s, 6931.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name[0].downcase == name[0]}\n  sample_names.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb79rnnkh\nStarted\n.\nFinished in 0.000421846 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2370.53 tests/s, 7111.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9ridit6d\nStarted\n.\nFinished in 0.000432835 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2310.35 tests/s, 6931.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sum = 0\n  sample_names.each do |name|\n    if name[0] =~ /[A-Z]/\n      sum += name.length\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1lh0xgrw\nStarted\n.\nFinished in 0.000467385 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2139.56 tests/s, 6418.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppbow7jfw\nStarted\n.\nFinished in 0.000422155 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.80 tests/s, 7106.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9ridit6d\nStarted\n.\nFinished in 0.000432835 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2310.35 tests/s, 6931.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps7km0miu\nStarted\n.\nFinished in 0.000409255 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2443.46 tests/s, 7330.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6ds9xoc5\nStarted\n.\nFinished in 0.000437762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2284.35 tests/s, 6853.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi4z_vq_f\nStarted\n.\nFinished in 0.000430082 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2325.14 tests/s, 6975.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject { |name| name =~ /^[a-z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpg25vr58l\nStarted\n.\nFinished in 0.000425898 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2347.98 tests/s, 7043.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxujroset\nStarted\n.\nFinished in 0.000431862 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2315.55 tests/s, 6946.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi4z_vq_f\nStarted\n.\nFinished in 0.000430082 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2325.14 tests/s, 6975.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppbow7jfw\nStarted\n.\nFinished in 0.000422155 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.80 tests/s, 7106.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps7km0miu\nStarted\n.\nFinished in 0.000409255 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2443.46 tests/s, 7330.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sum = 0\n  sample_names.each do |name|\n    if name[0] =~ /[A-Z]/\n      sum += name.length\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuw8frag3\nStarted\n.\nFinished in 0.000419434 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2384.17 tests/s, 7152.50 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject { |name| name =~ /^[a-z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpg25vr58l\nStarted\n.\nFinished in 0.000425898 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2347.98 tests/s, 7043.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi4z_vq_f\nStarted\n.\nFinished in 0.000430082 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2325.14 tests/s, 6975.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppbow7jfw\nStarted\n.\nFinished in 0.000422155 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.80 tests/s, 7106.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject { |name| name[0].downcase == name[0] }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl37zlyft\nStarted\n.\nFinished in 0.000413163 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2420.35 tests/s, 7261.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sum = 0\n  sample_names.each do |name|\n    if name[0] =~ /[A-Z]/\n      sum += name.length\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuw8frag3\nStarted\n.\nFinished in 0.000419434 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2384.17 tests/s, 7152.50 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp18f7vjsb\nStarted\n.\nFinished in 0.000423112 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2363.44 tests/s, 7090.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map(&:length).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwktuqhsg\nStarted\n.\nFinished in 0.000403179 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2480.29 tests/s, 7440.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9ridit6d\nStarted\n.\nFinished in 0.000432835 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2310.35 tests/s, 6931.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps7km0miu\nStarted\n.\nFinished in 0.000409255 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2443.46 tests/s, 7330.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map { |name| name.length }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3ani46lf\nStarted\n.\nFinished in 0.000434735 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2300.25 tests/s, 6900.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sum = 0\n  sample_names.each do |name|\n    if name[0] =~ /[A-Z]/\n      sum += name.length\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1lh0xgrw\nStarted\n.\nFinished in 0.000467385 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2139.56 tests/s, 6418.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppbow7jfw\nStarted\n.\nFinished in 0.000422155 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.80 tests/s, 7106.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi4z_vq_f\nStarted\n.\nFinished in 0.000430082 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2325.14 tests/s, 6975.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.map{|x| x.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122863,
      "stdout": "Loaded suite /tmp/tmpjhkmk_m5\nStarted\nF\n===============================================================================\nFailure: test_sample_nam(TestHumanEval)\n/tmp/tmpjhkmk_m5.rb:9:in `test_sample_nam'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sample_nam\n      8:     candidate = method(:sample_nam)\n  =>  9:     assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n     10:     assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n     11:     assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n     12:   end\n<16> expected but was\n<33>\n===============================================================================\n\nFinished in 0.006431149 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n155.49 tests/s, 155.49 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sum = 0\n  sample_names.each do |name|\n    if name[0] =~ /[A-Z]/\n      sum += name.length\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1lh0xgrw\nStarted\n.\nFinished in 0.000467385 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2139.56 tests/s, 6418.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject { |name| name =~ /^[a-z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpg25vr58l\nStarted\n.\nFinished in 0.000425898 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2347.98 tests/s, 7043.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] == name[0].upcase}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpizehkqjs\nStarted\n.\nFinished in 0.00041928 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2385.04 tests/s, 7155.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi4z_vq_f\nStarted\n.\nFinished in 0.000430082 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2325.14 tests/s, 6975.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject { |name| name[0].downcase == name[0] }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjgb4n0xs\nStarted\n.\nFinished in 0.000431394 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2318.07 tests/s, 6954.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name[0].downcase == name[0]}\n  sample_names.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb79rnnkh\nStarted\n.\nFinished in 0.000421846 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2370.53 tests/s, 7111.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|sample_name| sample_name[0] =~ /[a-z]/}\n  sample_names.map {|sample_name| sample_name.length}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6sd7riyd\nStarted\n.\nFinished in 0.000423871 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2359.21 tests/s, 7077.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name =~ /^[a-z]/}\n  sample_names.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb464ed6l\nStarted\n.\nFinished in 0.00039958 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2502.63 tests/s, 7507.88 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps7km0miu\nStarted\n.\nFinished in 0.000409255 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2443.46 tests/s, 7330.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name[0] =~ /[a-z]/}\n  sample_names.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6_78jfhv\nStarted\n.\nFinished in 0.00042546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2350.40 tests/s, 7051.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject { |name| name =~ /^[a-z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpg25vr58l\nStarted\n.\nFinished in 0.000425898 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2347.98 tests/s, 7043.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppbow7jfw\nStarted\n.\nFinished in 0.000422155 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.80 tests/s, 7106.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppbow7jfw\nStarted\n.\nFinished in 0.000422155 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.80 tests/s, 7106.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi4z_vq_f\nStarted\n.\nFinished in 0.000430082 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2325.14 tests/s, 6975.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps7km0miu\nStarted\n.\nFinished in 0.000409255 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2443.46 tests/s, 7330.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9ridit6d\nStarted\n.\nFinished in 0.000432835 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2310.35 tests/s, 6931.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name[0] =~ /[a-z]/}\n  sample_names.map {|name| name.length}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzwx6x2et\nStarted\n.\nFinished in 0.000536922 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1862.47 tests/s, 5587.40 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject{|name| name[0].downcase == name[0]}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp04ceo36g\nStarted\n.\nFinished in 0.00040544 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2466.46 tests/s, 7399.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpt8zkeisx\nStarted\n.\nFinished in 0.000449387 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2225.25 tests/s, 6675.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name[0] =~ /[a-z]/}\n  sample_names.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw6x6k5mw\nStarted\n.\nFinished in 0.000385078 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2596.88 tests/s, 7790.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps7km0miu\nStarted\n.\nFinished in 0.000409255 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2443.46 tests/s, 7330.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name[0].downcase == name[0]}\n  sample_names.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb79rnnkh\nStarted\n.\nFinished in 0.000421846 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2370.53 tests/s, 7111.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if { |name| name[0].match(/[a-z]/) }\n  sample_names.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwyp6vlgr\nStarted\n.\nFinished in 0.000433086 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2309.01 tests/s, 6927.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppbow7jfw\nStarted\n.\nFinished in 0.000422155 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.80 tests/s, 7106.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps7km0miu\nStarted\n.\nFinished in 0.000409255 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2443.46 tests/s, 7330.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject { |name| name =~ /^[a-z]/ }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcc2kozc7\nStarted\n.\nFinished in 0.00041313 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2420.55 tests/s, 7261.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject {|name| name =~ /^[a-z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5n_cps77\nStarted\n.\nFinished in 0.000405567 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2465.68 tests/s, 7397.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sum = 0\n  sample_names.each do |name|\n    if name[0] =~ /[A-Z]/\n      sum += name.length\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1lh0xgrw\nStarted\n.\nFinished in 0.000467385 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2139.56 tests/s, 6418.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpt8zkeisx\nStarted\n.\nFinished in 0.000449387 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2225.25 tests/s, 6675.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppbow7jfw\nStarted\n.\nFinished in 0.000422155 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.80 tests/s, 7106.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name[0] =~ /[a-z]/}\n  sample_names.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw6x6k5mw\nStarted\n.\nFinished in 0.000385078 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2596.88 tests/s, 7790.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name[0] =~ /[a-z]/}\n  sample_names.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw6x6k5mw\nStarted\n.\nFinished in 0.000385078 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2596.88 tests/s, 7790.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name =~ /^[A-Z]/}.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpiguwyp4k\nStarted\n.\nFinished in 0.000421567 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2372.10 tests/s, 7116.31 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sum = 0\n  sample_names.each do |name|\n    if name[0].upcase == name[0]\n      sum += name.length\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzp3rxns2\nStarted\n.\nFinished in 0.000417531 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2395.03 tests/s, 7185.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0].upcase == name[0]}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4mfdded2\nStarted\n.\nFinished in 0.000408274 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2449.34 tests/s, 7348.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpt8zkeisx\nStarted\n.\nFinished in 0.000449387 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2225.25 tests/s, 6675.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name =~ /^[a-z]/}\n  sample_names.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb464ed6l\nStarted\n.\nFinished in 0.00039958 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2502.63 tests/s, 7507.88 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name[0] =~ /[a-z]/}\n  sample_names.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw6x6k5mw\nStarted\n.\nFinished in 0.000385078 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2596.88 tests/s, 7790.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi4z_vq_f\nStarted\n.\nFinished in 0.000430082 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2325.14 tests/s, 6975.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name =~ /[A-Z]/}.map {|name| name.length}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpovz12a3c\nStarted\n.\nFinished in 0.00042106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2374.96 tests/s, 7124.88 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject { |name| name =~ /^[a-z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpg25vr58l\nStarted\n.\nFinished in 0.000425898 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2347.98 tests/s, 7043.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl57jkcmt\nStarted\n.\nFinished in 0.000392561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.37 tests/s, 7642.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi4z_vq_f\nStarted\n.\nFinished in 0.000430082 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2325.14 tests/s, 6975.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sum = 0\n  sample_names.each do |name|\n    if name[0] =~ /[A-Z]/\n      sum += name.length\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuw8frag3\nStarted\n.\nFinished in 0.000419434 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2384.17 tests/s, 7152.50 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}