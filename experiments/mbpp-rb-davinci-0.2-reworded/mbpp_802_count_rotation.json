{
  "name": "mbpp_802_count_rotation",
  "language": "rb",
  "prompt": "# Write a rbthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\ndef count_rotation(arr)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_rotation\n    candidate = method(:count_rotation)\n    assert_equal(1, candidate.call([3, 2, 1]))\n    assert_equal(2, candidate.call([4, 5, 1, 2, 3]))\n    assert_equal(3, candidate.call([7, 8, 9, 1, 2, 3]))\n    assert_equal(0, candidate.call([1, 2, 3]))\n    assert_equal(2, candidate.call([1, 3, 2]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = low + (high - low) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  return 0 if arr.size == 1\n  return 1 if arr[0] > arr[1]\n  return arr.size - 1 if arr[0] < arr[-1]\n  mid = arr.size / 2\n  if arr[mid] > arr[0]\n    count_rotation(arr[mid..-1]) + mid\n  else\n    count_rotation(arr[0..mid])\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  count = 0\n  for i in 0..arr.length-1\n    if arr[i] > arr[i+1]\n      count = i+1\n      break\n    end\n  end\n  count\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  count = 0\n  arr.each_with_index do |ele, index|\n    if index > 0\n      if arr[index] < arr[index - 1]\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n-1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high)/2\n    next_ = (mid + 1)%n\n    prev = (mid + n - 1)%n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = low + (high - low) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  count = 0\n  for i in 0..arr.length-1\n    if arr[i] > arr[i+1]\n      count += 1\n    end\n  end\n  return count\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  count = 0\n  for i in 0..(arr.length - 1)\n    if arr[i] > arr[i + 1]\n      count = i + 1\n      break\n    end\n  end\n  count\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.size\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  return 0 if arr.length <= 1\n  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  min = arr.min\n  index = arr.index(min)\n  return index\nend",
    "  min_index = arr.index(arr.min)\n  min_index == 0 ? 0 : arr.length - min_index\nend",
    "  min_index = arr.index(arr.min)\n  if min_index == 0\n    return 0\n  else\n    return arr.length - min_index\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ele = (mid + 1) % arr.length\n    prev_ele = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_ele] && arr[mid] <= arr[prev_ele]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low < high\n    mid = (low + high) / 2\n    if arr[mid] > arr[mid + 1]\n      return mid + 1\n    elsif arr[mid] < arr[mid - 1]\n      return mid\n    elsif arr[mid] > arr[high]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return 0\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  arr.each_with_index do |ele, index|\n    if index != 0 && ele < arr[index - 1]\n      return index\n    end\n  end\n  return 0\nend",
    "  n = arr.length\n  low = 0\n  high = n-1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high)/2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low < high\n    mid = (low + high) / 2\n    if arr[mid] > arr[high]\n      low = mid + 1\n    else\n      high = mid\n    end\n  end\n  low\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.size\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  return 0 if arr.size == 1\n  min_index = arr.index(arr.min)\n  return min_index if min_index == 0\n  return arr.size - min_index if min_index == arr.size - 1\n  return arr.size - min_index - 1 if arr[min_index - 1] > arr[min_index + 1]\n  return arr.size - min_index\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.size\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = low + (high - low) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  return 0 if arr.size == 1\n  low = 0\n  high = arr.size - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.size\n    prev = (mid + arr.size - 1) % arr.size\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  min = arr[0]\n  arr.each_with_index do |item, index|\n    if item < min\n      min = item\n      return index\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid - 1 + n) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = low + (high - low) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  min = arr.min\n  min_index = arr.index(min)\n  min_index\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  count = 0\n  for i in 0..arr.length-1\n    if arr[i] > arr[i+1]\n      count = i+1\n      break\n    end\n  end\n  return count\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.size\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  count = 0\n  for i in 0..arr.length-1\n    if arr[i] > arr[i+1]\n      count = i+1\n      break\n    end\n  end\n  return count\nend",
    "  arr.each_with_index do |a,i|\n    if a > arr[i+1]\n      return i+1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = low + (high - low) / 2\n    next_low = (mid + 1) % arr.length\n    prev_high = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_low] && arr[mid] <= arr[prev_high]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  return 0 if arr[0] < arr[n-1]\n  low = 0\n  high = n-1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  count = 0\n  arr.each_with_index do |ele, index|\n    if index < arr.length - 1\n      if arr[index] > arr[index + 1]\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..arr.length-1\n    if arr[i] > arr[i+1]\n      count = i+1\n      break\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..arr.length-1\n    if arr[i] > arr[i+1]\n      count = i+1\n      break\n    end\n  end\n  count\nend",
    "  n = arr.length\n  return 0 if n == 1\n  for i in 0..n-1\n    if arr[i] > arr[i+1]\n      return i+1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = low + (high - low) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  return 0 if arr.size == 1\n  low = 0\n  high = arr.size - 1\n  while low <= high\n    return low if arr[low] <= arr[high]\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.size\n    prev = (mid + arr.size - 1) % arr.size\n    return mid if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n    if arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  count = 0\n  for i in 0..arr.length-1\n    if arr[i] > arr[i+1]\n      count = i+1\n      break\n    end\n  end\n  return count\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  i = 0\n  while i < arr.length - 1\n    if arr[i] > arr[i + 1]\n      return i + 1\n    end\n    i += 1\n  end\n  return 0\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  count = 0\n  arr.each_with_index do |e, i|\n    if arr[i] > arr[i + 1]\n      count += 1\n    end\n  end\n  count\nend",
    "  n = arr.length\n  count = 0\n  for i in 0...n-1\n    if arr[i] > arr[i+1]\n      count = i+1\n      break\n    end\n  end\n  return count\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  min_index = 0\n  for i in 0...n\n    if arr[i] < arr[min_index]\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  count = 0\n  for i in 0..arr.length-1\n    if arr[i] > arr[i+1]\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..arr.length-1\n    if arr[i] > arr[i+1]\n      count = i+1\n      break\n    end\n  end\n  count\nend",
    "  return 0 if arr.size == 1\n  return 0 if arr.size == 2 && arr[0] < arr[1]\n  return 1 if arr.size == 2 && arr[0] > arr[1]\n  mid = arr.size / 2\n  if arr[mid] > arr[mid - 1] && arr[mid] > arr[mid + 1]\n    return mid\n  elsif arr[mid] < arr[mid - 1] && arr[mid] < arr[mid + 1]\n    return mid + 1\n  elsif arr[mid] < arr[mid - 1] && arr[mid] > arr[mid + 1]\n    return count_rotation(arr[0..mid - 1])\n  else\n    return count_rotation(arr[mid + 1..-1])\n  end\nend",
    "  count = 0\n  for i in 0..arr.length-1\n    if arr[i] > arr[i+1]\n      count = i+1\n      break\n    end\n  end\n  return count\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  count = 0\n  arr.each_with_index do |num, index|\n    if index != 0 && num < arr[index - 1]\n      count += 1\n    end\n  end\n  count\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  # Write your code here\n  return 0 if arr.length == 1\n  return arr.length - arr.index(arr.min)\nend",
    "  # find the pivot\n  pivot = arr.index(arr.min)\n  # return the number of rotations\n  pivot\nend",
    "  min = arr[0]\n  min_index = 0\n  arr.each_with_index do |ele, index|\n    if ele < min\n      min = ele\n      min_index = index\n    end\n  end\n  min_index\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = low + (high - low) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = low + (high - low) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = low + (high - low) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  count = 0\n  for i in 0..arr.length-1\n    if arr[i] > arr[i+1]\n      count += 1\n    end\n  end\n  return count\nend",
    "  return 0 if arr.size <= 1\n  low = 0\n  high = arr.size - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = low + (high - low) / 2\n    next_ = (mid + 1) % arr.size\n    prev = (mid + arr.size - 1) % arr.size\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  count = 0\n  arr.each_with_index do |e, i|\n    if arr[i+1] && e > arr[i+1]\n      count += 1\n    end\n  end\n  count\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_low = (mid + 1) % n\n    prev_high = (mid + n - 1) % n\n    if arr[mid] <= arr[next_low] && arr[mid] <= arr[prev_high]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = low + (high - low) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\n  -1\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if arr[mid] > arr[mid + 1]\n      return mid + 1\n    elsif arr[mid] < arr[mid - 1]\n      return mid\n    elsif arr[mid] < arr[high]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  # find the minimum element\n  min_index = arr.index(arr.min)\n  # return the number of rotations\n  arr.length - min_index\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  count = 0\n  for i in 0..arr.length-1\n    if arr[i] > arr[i+1]\n      count = i+1\n      break\n    end\n  end\n  count\nend",
    "  arr.each_with_index do |num, index|\n    if num > arr[index + 1]\n      return index + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = low + (high - low) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n-1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high)/2\n    next_low = (mid + 1) % n\n    prev_high = (mid + n - 1) % n\n    if arr[mid] <= arr[next_low] && arr[mid] <= arr[prev_high]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  return 0 if arr.size == 1\n  return 1 if arr[0] > arr[1]\n  return arr.size - 1 if arr[0] < arr[-1]\n  mid = arr.size / 2\n  if arr[mid] > arr[0]\n    count_rotation(arr[mid..-1]) + mid\n  else\n    count_rotation(arr[0..mid])\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_low = (mid + 1) % arr.length\n    prev_high = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_low] && arr[mid] <= arr[prev_high]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  # find the pivot\n  # pivot is the smallest element in the array\n  # pivot is the point where the array is sorted\n  # if the array is sorted, then the pivot is the first element\n  # if the array is not sorted, then the pivot is the first element where the next element is smaller than the current element\n  # if the array is not sorted, then the pivot is the first element where the next element is smaller than the current element\n  # if the array is not sorted, then the pivot is the first element where the next element is smaller than the current element\n  # if the array is not sorted, then the pivot is the first element where the next element is smaller than the current element\n  # if the array is not sorted, then the pivot is the first element where the next element is smaller than the current element\n  # if the array is not sorted, then the pivot is the first element where the next element is smaller than the current element\n  # if the array is not sorted, then the pivot is the first element where the next element is smaller than the current element\n  # if the array is not sorted, then the pivot is the first element where the next element is smaller than the current element\n  # if the array is not sorted, then the pivot is the first element where the next element is smaller than the current element\n  # if the array is not sorted, then the pivot is the first element where the next element is smaller than the current element\n  # if the array is not sorted, then the pivot is the first element where the next element is smaller than the current element\n  # if the array is not sorted, then the pivot is the first element where the next element is smaller than the current element\n  # if the array is not sorted, then the pivot is the first element where the next element is smaller than the current element\n  # if the array is not sorted, then the pivot is the first element where the next element is smaller than the current element\n  # if the array is not sorted, then the pivot is the first element where the next element is smaller than the current element\n  # if the array is not sorted, then the pivot is the first element where the next element is smaller than the current element\n  # if the array is not sorted, then the pivot is the first element where the next element is smaller than the current element\n  # if the array is not",
    "  min = arr[0]\n  count = 0\n  for i in 0...arr.length\n    if arr[i] < min\n      min = arr[i]\n      count = i\n    end\n  end\n  return count\nend",
    "  n = arr.length\n  count = 0\n  for i in 0...n\n    if arr[i] > arr[i+1]\n      count = i + 1\n      break\n    end\n  end\n  return count\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  min = arr[0]\n  count = 0\n  for i in 0..arr.length-1\n    if arr[i] < min\n      min = arr[i]\n      count = i\n    end\n  end\n  count\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = low + (high - low) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  i = 0\n  while i < arr.length\n    if arr[i] > arr[i+1]\n      return i+1\n    end\n    i += 1\n  end\nend",
    "  n = arr.length\n  start = 0\n  end_ = n - 1\n  while start <= end_\n    if arr[start] <= arr[end_]\n      return start\n    end\n    mid = (start + end_) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[end_]\n      end_ = mid - 1\n    elsif arr[mid] >= arr[start]\n      start = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  arr.each_with_index do |x, i|\n    if x > arr[i+1]\n      return i+1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  min = arr[0]\n  min_index = 0\n  for i in 0..n-1\n    if arr[i] < min\n      min = arr[i]\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  # Write your code here\n  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  count = 0\n  for i in 0..arr.length-1\n    if arr[i] > arr[i+1]\n      count += 1\n    end\n  end\n  return count\nend",
    "  min = arr[0]\n  min_index = 0\n  arr.each_with_index do |e, i|\n    if e < min\n      min = e\n      min_index = i\n    end\n  end\n  min_index\nend",
    "  return 0 if arr.size == 1\n  return 1 if arr[0] > arr[1]\n  return arr.size - 1 if arr[0] < arr[-1]\n  mid = arr.size / 2\n  if arr[mid] > arr[0]\n    count_rotation(arr[mid..-1]) + mid\n  else\n    count_rotation(arr[0...mid])\n  end\nend",
    "  min = arr[0]\n  count = 0\n  for i in 0..arr.length-1\n    if min > arr[i]\n      min = arr[i]\n      count = i\n    end\n  end\n  return count\nend",
    "  arr.each_with_index do |item, index|\n    if index < arr.length - 1 && item > arr[index + 1]\n      return index + 1\n    end\n  end\n  return 0\nend",
    "  n = arr.length\n  min = arr[0]\n  min_index = 0\n  for i in 1..n-1\n    if arr[i] < min\n      min = arr[i]\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "  count = 0\n  for i in 0...arr.length\n    if arr[i] > arr[i+1]\n      count = i+1\n      break\n    end\n  end\n  return count\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  count = 0\n  for i in 0..arr.length-1\n    if arr[i] > arr[i+1]\n      count += 1\n    end\n  end\n  return count\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = low + (high - low) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  return 0 if arr.size == 1\n  return 1 if arr.size == 2\n  low = 0\n  high = arr.size - 1\n  while low <= high\n    return low if arr[low] <= arr[high]\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.size\n    prev = (mid + arr.size - 1) % arr.size\n    return mid if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n    if arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n-1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low+high)/2\n    next_ = (mid+1)%n\n    prev = (mid+n-1)%n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid-1\n    elsif arr[mid] >= arr[low]\n      low = mid+1\n    end\n  end\nend",
    "  arr.each_with_index do |item, index|\n    if item > arr[index + 1]\n      return index + 1\n    end\n  end\nend",
    "  arr.each_with_index do |num, index|\n    if num > arr[index + 1]\n      return index + 1\n    end\n  end\nend",
    "  # find the minimum element\n  min = arr[0]\n  min_index = 0\n  arr.each_with_index do |ele, index|\n    if ele < min\n      min = ele\n      min_index = index\n    end\n  end\n  min_index\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_low = (mid + 1) % arr.length\n    prev_high = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_low] && arr[mid] <= arr[prev_high]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  count = 0\n  for i in 0..arr.length-1\n    if arr[i] > arr[i+1]\n      count += 1\n    end\n  end\n  return count\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  min = arr.min\n  min_index = arr.index(min)\n  min_index\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  return 0 if arr.size == 1\n  low = 0\n  high = arr.size - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.size\n    prev = (mid + arr.size - 1) % arr.size\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = low + (high - low) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend"
  ]
}