{
  "name": "mbpp_554_Split",
  "language": "rb",
  "prompt": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select {|x| x % 2 != 0}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poqh3kb\nStarted\n.\nFinished in 0.000393629 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2540.46 tests/s, 7621.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |num| num.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphjh4qgj0\nStarted\n.\nFinished in 0.000397995 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.59 tests/s, 7537.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |x|\n    if x % 2 != 0\n      odd.push(x)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdyuv7684\nStarted\n.\nFinished in 0.000381393 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2621.97 tests/s, 7865.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select {|x| x % 2 != 0}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poqh3kb\nStarted\n.\nFinished in 0.000393629 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2540.46 tests/s, 7621.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fi3bvy2\nStarted\n.\nFinished in 0.000366917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2725.41 tests/s, 8176.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x % 2 != 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp13x1vjjk\nStarted\n.\nFinished in 0.000517718 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1931.55 tests/s, 5794.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fi3bvy2\nStarted\n.\nFinished in 0.000366917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2725.41 tests/s, 8176.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |num|\n    if num % 2 != 0\n      odd_list.push(num)\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9ze76iok\nStarted\n.\nFinished in 0.00036656 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2728.07 tests/s, 8184.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |number|\n    if number % 2 != 0\n      odd_list.push(number)\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpssmlj8xw\nStarted\n.\nFinished in 0.000373271 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2679.02 tests/s, 8037.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select {|x| x % 2 != 0}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poqh3kb\nStarted\n.\nFinished in 0.000393629 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2540.46 tests/s, 7621.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 == 1\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn08vaput\nStarted\n.\nFinished in 0.000369897 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2703.46 tests/s, 8110.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |num| num.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphjh4qgj0\nStarted\n.\nFinished in 0.000397995 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.59 tests/s, 7537.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |x|\n    if x % 2 != 0\n      odd.push(x)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdyuv7684\nStarted\n.\nFinished in 0.000381393 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2621.97 tests/s, 7865.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |i|\n    if i % 2 != 0\n      odd_list << i\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpps7g4mqd\nStarted\n.\nFinished in 0.000403413 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2478.85 tests/s, 7436.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  even = []\n  list.each do |num|\n    if num % 2 == 0\n      even << num\n    else\n      odd << num\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl3ka1bya\nStarted\n.\nFinished in 0.000384772 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2598.94 tests/s, 7796.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 == 1\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn08vaput\nStarted\n.\nFinished in 0.000369897 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2703.46 tests/s, 8110.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |i|\n    if i % 2 != 0\n      odd_list << i\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpps7g4mqd\nStarted\n.\nFinished in 0.000403413 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2478.85 tests/s, 7436.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fi3bvy2\nStarted\n.\nFinished in 0.000366917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2725.41 tests/s, 8176.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |x|\n    if x % 2 == 1\n      odd_list.push(x)\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpum4w3e4o\nStarted\n.\nFinished in 0.000410286 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2437.32 tests/s, 7311.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |i| i.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuggf61sj\nStarted\n.\nFinished in 0.000412335 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.21 tests/s, 7275.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |num| num.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphjh4qgj0\nStarted\n.\nFinished in 0.000397995 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.59 tests/s, 7537.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |x|\n    if x % 2 == 1\n      odd.push(x)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp57inbyup\nStarted\n.\nFinished in 0.000394794 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2532.97 tests/s, 7598.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |i|\n    if i % 2 != 0\n      odd_list.push(i)\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0go0_2ym\nStarted\n.\nFinished in 0.000463912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2155.58 tests/s, 6466.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |x|\n    if x % 2 != 0\n      odd.push(x)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdyuv7684\nStarted\n.\nFinished in 0.000381393 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2621.97 tests/s, 7865.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |x|\n    if x % 2 == 1\n      odd.push(x)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp57inbyup\nStarted\n.\nFinished in 0.000394794 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2532.97 tests/s, 7598.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  even = []\n  list.each do |x|\n    if x % 2 == 0\n      even.push(x)\n    else\n      odd.push(x)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptid_wq6m\nStarted\n.\nFinished in 0.000399893 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2500.67 tests/s, 7502.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fi3bvy2\nStarted\n.\nFinished in 0.000366917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2725.41 tests/s, 8176.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |i|\n    if i % 2 != 0\n      odd_list << i\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpps7g4mqd\nStarted\n.\nFinished in 0.000403413 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2478.85 tests/s, 7436.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x % 2 != 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp13x1vjjk\nStarted\n.\nFinished in 0.000517718 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1931.55 tests/s, 5794.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |num| num.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphjh4qgj0\nStarted\n.\nFinished in 0.000397995 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.59 tests/s, 7537.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.partition {|x| x.odd?}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "Loaded suite /tmp/tmpm9z8ugeh\nStarted\nF\n===============================================================================\nFailure: test_Split(TestHumanEval)\n/tmp/tmpm9z8ugeh.rb:9:in `test_Split'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_Split\n      8:     candidate = method(:Split)\n  =>  9:     assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n     10:     assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n     11:     assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n     12:   end\n<[1, 3, 5]> expected but was\n<[[1, 3, 5], [2, 4, 6]]>\n\ndiff:\n? [[1, 3, 5], [2, 4, 6]]\n===============================================================================\n\nFinished in 0.007946647 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n125.84 tests/s, 125.84 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |x|\n    if x % 2 != 0\n      odd_list.push(x)\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqmut8j5m\nStarted\n.\nFinished in 0.000449476 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2224.81 tests/s, 6674.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |x|\n    if x % 2 != 0\n      odd.push(x)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdyuv7684\nStarted\n.\nFinished in 0.000381393 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2621.97 tests/s, 7865.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select {|x| x % 2 != 0}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poqh3kb\nStarted\n.\nFinished in 0.000393629 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2540.46 tests/s, 7621.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x % 2 != 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp13x1vjjk\nStarted\n.\nFinished in 0.000517718 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1931.55 tests/s, 5794.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x % 2 != 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp13x1vjjk\nStarted\n.\nFinished in 0.000517718 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1931.55 tests/s, 5794.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |num|\n    if num % 2 == 1\n      odd_list << num\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzvuyg3_s\nStarted\n.\nFinished in 0.000411684 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2429.05 tests/s, 7287.14 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |i|\n    if i % 2 != 0\n      odd_list.push(i)\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0go0_2ym\nStarted\n.\nFinished in 0.000463912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2155.58 tests/s, 6466.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |num|\n    if num % 2 != 0\n      odd_list << num\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyiv7fwuv\nStarted\n.\nFinished in 0.000406791 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2458.26 tests/s, 7374.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |i| i % 2 != 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpo9w84opc\nStarted\n.\nFinished in 0.000610928 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1636.85 tests/s, 4910.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |num|\n    if num % 2 != 0\n      odd.push(num)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkx57lqx_\nStarted\n.\nFinished in 0.000434913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2299.31 tests/s, 6897.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |i|\n    if i % 2 != 0\n      odd_list.push(i)\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0go0_2ym\nStarted\n.\nFinished in 0.000463912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2155.58 tests/s, 6466.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |num|\n    if num % 2 == 1\n      odd_list.push(num)\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2sli2pad\nStarted\n.\nFinished in 0.000400202 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2498.74 tests/s, 7496.21 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fi3bvy2\nStarted\n.\nFinished in 0.000366917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2725.41 tests/s, 8176.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select {|x| x.odd?}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7mcl906r\nStarted\n.\nFinished in 0.000478512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2089.81 tests/s, 6269.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.partition { |x| x.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "Loaded suite /tmp/tmp9jvwfl02\nStarted\nF\n===============================================================================\nFailure: test_Split(TestHumanEval)\n/tmp/tmp9jvwfl02.rb:9:in `test_Split'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_Split\n      8:     candidate = method(:Split)\n  =>  9:     assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n     10:     assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n     11:     assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n     12:   end\n<[1, 3, 5]> expected but was\n<[[1, 3, 5], [2, 4, 6]]>\n\ndiff:\n? [[1, 3, 5], [2, 4, 6]]\n===============================================================================\n\nFinished in 0.013828349 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n72.32 tests/s, 72.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |i|\n    if i % 2 != 0\n      odd_list << i\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpps7g4mqd\nStarted\n.\nFinished in 0.000403413 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2478.85 tests/s, 7436.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |num|\n    if num % 2 != 0\n      odd_list << num\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyiv7fwuv\nStarted\n.\nFinished in 0.000406791 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2458.26 tests/s, 7374.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select {|x| x.odd?}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7mcl906r\nStarted\n.\nFinished in 0.000478512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2089.81 tests/s, 6269.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |number|\n    if number % 2 != 0\n      odd_list.push(number)\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpssmlj8xw\nStarted\n.\nFinished in 0.000373271 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2679.02 tests/s, 8037.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select {|x| x.odd?}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7mcl906r\nStarted\n.\nFinished in 0.000478512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2089.81 tests/s, 6269.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |num| num.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphjh4qgj0\nStarted\n.\nFinished in 0.000397995 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.59 tests/s, 7537.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.partition {|x| x.odd?}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "Loaded suite /tmp/tmpm9z8ugeh\nStarted\nF\n===============================================================================\nFailure: test_Split(TestHumanEval)\n/tmp/tmpm9z8ugeh.rb:9:in `test_Split'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_Split\n      8:     candidate = method(:Split)\n  =>  9:     assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n     10:     assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n     11:     assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n     12:   end\n<[1, 3, 5]> expected but was\n<[[1, 3, 5], [2, 4, 6]]>\n\ndiff:\n? [[1, 3, 5], [2, 4, 6]]\n===============================================================================\n\nFinished in 0.007946647 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n125.84 tests/s, 125.84 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select {|x| x.odd?}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7mcl906r\nStarted\n.\nFinished in 0.000478512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2089.81 tests/s, 6269.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |x|\n    if x % 2 != 0\n      odd.push(x)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdyuv7684\nStarted\n.\nFinished in 0.000381393 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2621.97 tests/s, 7865.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fi3bvy2\nStarted\n.\nFinished in 0.000366917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2725.41 tests/s, 8176.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |num|\n    if num % 2 != 0\n      odd.push(num)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkx57lqx_\nStarted\n.\nFinished in 0.000434913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2299.31 tests/s, 6897.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x % 2 != 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp13x1vjjk\nStarted\n.\nFinished in 0.000517718 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1931.55 tests/s, 5794.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |i|\n    if i % 2 != 0\n      odd_list.push(i)\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0go0_2ym\nStarted\n.\nFinished in 0.000463912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2155.58 tests/s, 6466.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select {|x| x % 2 != 0}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poqh3kb\nStarted\n.\nFinished in 0.000393629 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2540.46 tests/s, 7621.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |i|\n    if i % 2 != 0\n      odd_list.push(i)\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0go0_2ym\nStarted\n.\nFinished in 0.000463912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2155.58 tests/s, 6466.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |x|\n    if x % 2 != 0\n      odd.push(x)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdyuv7684\nStarted\n.\nFinished in 0.000381393 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2621.97 tests/s, 7865.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 == 1\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn08vaput\nStarted\n.\nFinished in 0.000369897 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2703.46 tests/s, 8110.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_array = []\n  list.each do |i|\n    if i % 2 != 0\n      odd_array << i\n    end\n  end\n  return odd_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqi5p46i9\nStarted\n.\nFinished in 0.000412492 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2424.29 tests/s, 7272.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |x|\n    if x % 2 != 0\n      odd.push(x)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdyuv7684\nStarted\n.\nFinished in 0.000381393 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2621.97 tests/s, 7865.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |x|\n    if x % 2 == 1\n      odd.push(x)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp57inbyup\nStarted\n.\nFinished in 0.000394794 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2532.97 tests/s, 7598.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |i|\n    if i % 2 != 0\n      odd_list.push(i)\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0go0_2ym\nStarted\n.\nFinished in 0.000463912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2155.58 tests/s, 6466.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |i| i % 2 != 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpo9w84opc\nStarted\n.\nFinished in 0.000610928 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1636.85 tests/s, 4910.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |number|\n    if number % 2 != 0\n      odd_list.push(number)\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpssmlj8xw\nStarted\n.\nFinished in 0.000373271 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2679.02 tests/s, 8037.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x % 2 != 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp13x1vjjk\nStarted\n.\nFinished in 0.000517718 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1931.55 tests/s, 5794.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n    list.select { |x| x % 2 != 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_mk2rzli\nStarted\n.\nFinished in 0.000425258 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2351.51 tests/s, 7054.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |i|\n    if i % 2 != 0\n      odd_list.push(i)\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0go0_2ym\nStarted\n.\nFinished in 0.000463912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2155.58 tests/s, 6466.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |x|\n    if x % 2 != 0\n      odd.push(x)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdyuv7684\nStarted\n.\nFinished in 0.000381393 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2621.97 tests/s, 7865.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |num| num.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphjh4qgj0\nStarted\n.\nFinished in 0.000397995 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.59 tests/s, 7537.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select {|x| x % 2 != 0}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poqh3kb\nStarted\n.\nFinished in 0.000393629 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2540.46 tests/s, 7621.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fi3bvy2\nStarted\n.\nFinished in 0.000366917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2725.41 tests/s, 8176.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x % 2 != 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp13x1vjjk\nStarted\n.\nFinished in 0.000517718 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1931.55 tests/s, 5794.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select {|x| x % 2 != 0}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poqh3kb\nStarted\n.\nFinished in 0.000393629 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2540.46 tests/s, 7621.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.partition {|x| x.odd?}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "Loaded suite /tmp/tmpm9z8ugeh\nStarted\nF\n===============================================================================\nFailure: test_Split(TestHumanEval)\n/tmp/tmpm9z8ugeh.rb:9:in `test_Split'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_Split\n      8:     candidate = method(:Split)\n  =>  9:     assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n     10:     assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n     11:     assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n     12:   end\n<[1, 3, 5]> expected but was\n<[[1, 3, 5], [2, 4, 6]]>\n\ndiff:\n? [[1, 3, 5], [2, 4, 6]]\n===============================================================================\n\nFinished in 0.007946647 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n125.84 tests/s, 125.84 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |num|\n    if num % 2 == 1\n      odd_list << num\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzvuyg3_s\nStarted\n.\nFinished in 0.000411684 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2429.05 tests/s, 7287.14 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fi3bvy2\nStarted\n.\nFinished in 0.000366917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2725.41 tests/s, 8176.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fi3bvy2\nStarted\n.\nFinished in 0.000366917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2725.41 tests/s, 8176.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select {|x| x % 2 != 0}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poqh3kb\nStarted\n.\nFinished in 0.000393629 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2540.46 tests/s, 7621.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  even = []\n  list.each do |i|\n    if i % 2 == 0\n      even.push(i)\n    else\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmn443xa_\nStarted\n.\nFinished in 0.000433214 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2308.33 tests/s, 6924.98 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |i|\n    if i % 2 != 0\n      odd_list.push(i)\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0go0_2ym\nStarted\n.\nFinished in 0.000463912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2155.58 tests/s, 6466.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x % 2 != 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp13x1vjjk\nStarted\n.\nFinished in 0.000517718 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1931.55 tests/s, 5794.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.partition { |x| x.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "Loaded suite /tmp/tmp9jvwfl02\nStarted\nF\n===============================================================================\nFailure: test_Split(TestHumanEval)\n/tmp/tmp9jvwfl02.rb:9:in `test_Split'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_Split\n      8:     candidate = method(:Split)\n  =>  9:     assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n     10:     assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n     11:     assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n     12:   end\n<[1, 3, 5]> expected but was\n<[[1, 3, 5], [2, 4, 6]]>\n\ndiff:\n? [[1, 3, 5], [2, 4, 6]]\n===============================================================================\n\nFinished in 0.013828349 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n72.32 tests/s, 72.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fi3bvy2\nStarted\n.\nFinished in 0.000366917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2725.41 tests/s, 8176.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  even = []\n  list.each do |item|\n    if item % 2 == 0\n      even.push(item)\n    else\n      odd.push(item)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsll4ckja\nStarted\n.\nFinished in 0.000496309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2014.87 tests/s, 6044.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x % 2 != 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp13x1vjjk\nStarted\n.\nFinished in 0.000517718 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1931.55 tests/s, 5794.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd << i\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi1cj689b\nStarted\n.\nFinished in 0.000404399 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2472.81 tests/s, 7418.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x % 2 != 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp13x1vjjk\nStarted\n.\nFinished in 0.000517718 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1931.55 tests/s, 5794.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select {|x| x.odd?}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7mcl906r\nStarted\n.\nFinished in 0.000478512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2089.81 tests/s, 6269.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd << i\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi1cj689b\nStarted\n.\nFinished in 0.000404399 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2472.81 tests/s, 7418.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select {|x| x.odd?}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7mcl906r\nStarted\n.\nFinished in 0.000478512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2089.81 tests/s, 6269.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fi3bvy2\nStarted\n.\nFinished in 0.000366917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2725.41 tests/s, 8176.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |x|\n    if x % 2 != 0\n      odd.push(x)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdyuv7684\nStarted\n.\nFinished in 0.000381393 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2621.97 tests/s, 7865.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x % 2 != 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp13x1vjjk\nStarted\n.\nFinished in 0.000517718 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1931.55 tests/s, 5794.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select {|x| x.odd?}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7mcl906r\nStarted\n.\nFinished in 0.000478512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2089.81 tests/s, 6269.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.partition { |x| x.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "Loaded suite /tmp/tmp9jvwfl02\nStarted\nF\n===============================================================================\nFailure: test_Split(TestHumanEval)\n/tmp/tmp9jvwfl02.rb:9:in `test_Split'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_Split\n      8:     candidate = method(:Split)\n  =>  9:     assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n     10:     assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n     11:     assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n     12:   end\n<[1, 3, 5]> expected but was\n<[[1, 3, 5], [2, 4, 6]]>\n\ndiff:\n? [[1, 3, 5], [2, 4, 6]]\n===============================================================================\n\nFinished in 0.013828349 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n72.32 tests/s, 72.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd << i\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi1cj689b\nStarted\n.\nFinished in 0.000404399 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2472.81 tests/s, 7418.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.partition { |x| x.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "Loaded suite /tmp/tmp9jvwfl02\nStarted\nF\n===============================================================================\nFailure: test_Split(TestHumanEval)\n/tmp/tmp9jvwfl02.rb:9:in `test_Split'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_Split\n      8:     candidate = method(:Split)\n  =>  9:     assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n     10:     assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n     11:     assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n     12:   end\n<[1, 3, 5]> expected but was\n<[[1, 3, 5], [2, 4, 6]]>\n\ndiff:\n? [[1, 3, 5], [2, 4, 6]]\n===============================================================================\n\nFinished in 0.013828349 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n72.32 tests/s, 72.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fi3bvy2\nStarted\n.\nFinished in 0.000366917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2725.41 tests/s, 8176.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fi3bvy2\nStarted\n.\nFinished in 0.000366917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2725.41 tests/s, 8176.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 == 1\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn08vaput\nStarted\n.\nFinished in 0.000369897 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2703.46 tests/s, 8110.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  even = []\n  list.each do |num|\n    if num % 2 == 0\n      even.push(num)\n    else\n      odd.push(num)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy1yoff_g\nStarted\n.\nFinished in 0.000412215 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.92 tests/s, 7277.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |x|\n    if x % 2 != 0\n      odd.push(x)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdyuv7684\nStarted\n.\nFinished in 0.000381393 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2621.97 tests/s, 7865.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select {|x| x.odd?}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7mcl906r\nStarted\n.\nFinished in 0.000478512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2089.81 tests/s, 6269.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |x|\n    if x % 2 != 0\n      odd.push(x)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdyuv7684\nStarted\n.\nFinished in 0.000381393 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2621.97 tests/s, 7865.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x % 2 == 1 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp99ll2ppz\nStarted\n.\nFinished in 0.000555576 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1799.93 tests/s, 5399.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |x|\n    if x % 2 != 0\n      odd << x\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpadryei5j\nStarted\n.\nFinished in 0.000480893 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2079.46 tests/s, 6238.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x % 2 == 1 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp99ll2ppz\nStarted\n.\nFinished in 0.000555576 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1799.93 tests/s, 5399.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |i| i % 2 != 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpo9w84opc\nStarted\n.\nFinished in 0.000610928 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1636.85 tests/s, 4910.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |i|\n    if i % 2 != 0\n      odd_list.push(i)\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0go0_2ym\nStarted\n.\nFinished in 0.000463912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2155.58 tests/s, 6466.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fi3bvy2\nStarted\n.\nFinished in 0.000366917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2725.41 tests/s, 8176.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |x|\n    if x % 2 == 1\n      odd.push(x)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp57inbyup\nStarted\n.\nFinished in 0.000394794 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2532.97 tests/s, 7598.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.partition {|x| x.odd?}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "Loaded suite /tmp/tmpm9z8ugeh\nStarted\nF\n===============================================================================\nFailure: test_Split(TestHumanEval)\n/tmp/tmpm9z8ugeh.rb:9:in `test_Split'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_Split\n      8:     candidate = method(:Split)\n  =>  9:     assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n     10:     assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n     11:     assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n     12:   end\n<[1, 3, 5]> expected but was\n<[[1, 3, 5], [2, 4, 6]]>\n\ndiff:\n? [[1, 3, 5], [2, 4, 6]]\n===============================================================================\n\nFinished in 0.007946647 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n125.84 tests/s, 125.84 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fi3bvy2\nStarted\n.\nFinished in 0.000366917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2725.41 tests/s, 8176.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select {|x| x%2 != 0}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkdu2pj44\nStarted\n.\nFinished in 0.000401911 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2488.11 tests/s, 7464.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |x|\n    if x % 2 != 0\n      odd.push(x)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdyuv7684\nStarted\n.\nFinished in 0.000381393 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2621.97 tests/s, 7865.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_array = []\n  list.each do |i|\n    if i % 2 != 0\n      odd_array.push(i)\n    end\n  end\n  return odd_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpihhgq0e1\nStarted\n.\nFinished in 0.000390541 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2560.55 tests/s, 7681.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fi3bvy2\nStarted\n.\nFinished in 0.000366917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2725.41 tests/s, 8176.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  even = []\n  list.each do |x|\n    if x % 2 == 0\n      even << x\n    else\n      odd << x\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvxodsqmz\nStarted\n.\nFinished in 0.000379058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2638.12 tests/s, 7914.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fi3bvy2\nStarted\n.\nFinished in 0.000366917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2725.41 tests/s, 8176.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.partition { |x| x.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "Loaded suite /tmp/tmp9jvwfl02\nStarted\nF\n===============================================================================\nFailure: test_Split(TestHumanEval)\n/tmp/tmp9jvwfl02.rb:9:in `test_Split'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_Split\n      8:     candidate = method(:Split)\n  =>  9:     assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n     10:     assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n     11:     assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n     12:   end\n<[1, 3, 5]> expected but was\n<[[1, 3, 5], [2, 4, 6]]>\n\ndiff:\n? [[1, 3, 5], [2, 4, 6]]\n===============================================================================\n\nFinished in 0.013828349 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n72.32 tests/s, 72.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |number|\n    if number % 2 != 0\n      odd_list.push(number)\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpssmlj8xw\nStarted\n.\nFinished in 0.000373271 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2679.02 tests/s, 8037.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 == 1\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn08vaput\nStarted\n.\nFinished in 0.000369897 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2703.46 tests/s, 8110.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |x|\n    if x % 2 != 0\n      odd.push(x)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdyuv7684\nStarted\n.\nFinished in 0.000381393 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2621.97 tests/s, 7865.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |num| num.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphjh4qgj0\nStarted\n.\nFinished in 0.000397995 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.59 tests/s, 7537.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select {|x| x % 2 != 0}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poqh3kb\nStarted\n.\nFinished in 0.000393629 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2540.46 tests/s, 7621.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 == 1\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn08vaput\nStarted\n.\nFinished in 0.000369897 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2703.46 tests/s, 8110.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |num| num.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphjh4qgj0\nStarted\n.\nFinished in 0.000397995 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.59 tests/s, 7537.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select {|x| x % 2 == 1}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps6gxmmwo\nStarted\n.\nFinished in 0.000408081 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2450.49 tests/s, 7351.48 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |number|\n    if number.odd?\n      odd_list << number\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbbf57uul\nStarted\n.\nFinished in 0.000388211 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2575.92 tests/s, 7727.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n    odd = []\n    list.each do |x|\n        if x % 2 != 0\n            odd.push(x)\n        end\n    end\n    return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnw_xei3c\nStarted\n.\nFinished in 0.000399665 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2502.10 tests/s, 7506.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.partition { |x| x.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "Loaded suite /tmp/tmp9jvwfl02\nStarted\nF\n===============================================================================\nFailure: test_Split(TestHumanEval)\n/tmp/tmp9jvwfl02.rb:9:in `test_Split'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_Split\n      8:     candidate = method(:Split)\n  =>  9:     assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n     10:     assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n     11:     assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n     12:   end\n<[1, 3, 5]> expected but was\n<[[1, 3, 5], [2, 4, 6]]>\n\ndiff:\n? [[1, 3, 5], [2, 4, 6]]\n===============================================================================\n\nFinished in 0.013828349 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n72.32 tests/s, 72.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.partition { |x| x.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "Loaded suite /tmp/tmp9jvwfl02\nStarted\nF\n===============================================================================\nFailure: test_Split(TestHumanEval)\n/tmp/tmp9jvwfl02.rb:9:in `test_Split'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_Split\n      8:     candidate = method(:Split)\n  =>  9:     assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n     10:     assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n     11:     assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n     12:   end\n<[1, 3, 5]> expected but was\n<[[1, 3, 5], [2, 4, 6]]>\n\ndiff:\n? [[1, 3, 5], [2, 4, 6]]\n===============================================================================\n\nFinished in 0.013828349 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n72.32 tests/s, 72.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select {|x| x % 2 != 0}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poqh3kb\nStarted\n.\nFinished in 0.000393629 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2540.46 tests/s, 7621.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |number| number.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps4gem77n\nStarted\n.\nFinished in 0.00039401 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.01 tests/s, 7614.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select {|x| x % 2 != 0}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poqh3kb\nStarted\n.\nFinished in 0.000393629 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2540.46 tests/s, 7621.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.partition { |x| x.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "Loaded suite /tmp/tmp9jvwfl02\nStarted\nF\n===============================================================================\nFailure: test_Split(TestHumanEval)\n/tmp/tmp9jvwfl02.rb:9:in `test_Split'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_Split\n      8:     candidate = method(:Split)\n  =>  9:     assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n     10:     assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n     11:     assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n     12:   end\n<[1, 3, 5]> expected but was\n<[[1, 3, 5], [2, 4, 6]]>\n\ndiff:\n? [[1, 3, 5], [2, 4, 6]]\n===============================================================================\n\nFinished in 0.013828349 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n72.32 tests/s, 72.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |i|\n    if i % 2 != 0\n      odd_list << i\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpps7g4mqd\nStarted\n.\nFinished in 0.000403413 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2478.85 tests/s, 7436.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |i|\n    if i % 2 == 1\n      odd_list.push(i)\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv22tx89c\nStarted\n.\nFinished in 0.000392522 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.63 tests/s, 7642.88 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |num|\n    if num % 2 != 0\n      odd << num\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdy4hrnu2\nStarted\n.\nFinished in 0.000400811 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2494.94 tests/s, 7484.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |x|\n    if x % 2 == 1\n      odd.push(x)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp57inbyup\nStarted\n.\nFinished in 0.000394794 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2532.97 tests/s, 7598.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |x|\n    if x % 2 != 0\n      odd << x\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpadryei5j\nStarted\n.\nFinished in 0.000480893 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2079.46 tests/s, 6238.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |i|\n    if i % 2 != 0\n      odd_list << i\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpps7g4mqd\nStarted\n.\nFinished in 0.000403413 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2478.85 tests/s, 7436.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select {|x| x % 2 != 0}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poqh3kb\nStarted\n.\nFinished in 0.000393629 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2540.46 tests/s, 7621.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.partition { |i| i.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123064,
      "stdout": "Loaded suite /tmp/tmpf200fo9n\nStarted\nF\n===============================================================================\nFailure: test_Split(TestHumanEval)\n/tmp/tmpf200fo9n.rb:9:in `test_Split'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_Split\n      8:     candidate = method(:Split)\n  =>  9:     assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n     10:     assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n     11:     assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n     12:   end\n<[1, 3, 5]> expected but was\n<[[1, 3, 5], [2, 4, 6]]>\n\ndiff:\n? [[1, 3, 5], [2, 4, 6]]\n===============================================================================\n\nFinished in 0.014921404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n67.02 tests/s, 67.02 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |x|\n    if x % 2 == 1\n      odd << x\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplsab3g9j\nStarted\n.\nFinished in 0.000381956 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2618.10 tests/s, 7854.31 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n    list.select{|x| x.odd?}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn44hkne7\nStarted\n.\nFinished in 0.000397426 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2516.19 tests/s, 7548.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  even = []\n  list.each do |x|\n    if x % 2 == 0\n      even.push(x)\n    else\n      odd.push(x)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptid_wq6m\nStarted\n.\nFinished in 0.000399893 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2500.67 tests/s, 7502.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x % 2 != 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp13x1vjjk\nStarted\n.\nFinished in 0.000517718 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1931.55 tests/s, 5794.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select {|i| i % 2 != 0}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqby6x23l\nStarted\n.\nFinished in 0.000638498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1566.18 tests/s, 4698.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.partition { |x| x.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "Loaded suite /tmp/tmp9jvwfl02\nStarted\nF\n===============================================================================\nFailure: test_Split(TestHumanEval)\n/tmp/tmp9jvwfl02.rb:9:in `test_Split'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_Split\n      8:     candidate = method(:Split)\n  =>  9:     assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n     10:     assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n     11:     assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n     12:   end\n<[1, 3, 5]> expected but was\n<[[1, 3, 5], [2, 4, 6]]>\n\ndiff:\n? [[1, 3, 5], [2, 4, 6]]\n===============================================================================\n\nFinished in 0.013828349 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n72.32 tests/s, 72.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fi3bvy2\nStarted\n.\nFinished in 0.000366917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2725.41 tests/s, 8176.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |i|\n    if i % 2 != 0\n      odd_list << i\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpps7g4mqd\nStarted\n.\nFinished in 0.000403413 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2478.85 tests/s, 7436.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |num| num.odd? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphjh4qgj0\nStarted\n.\nFinished in 0.000397995 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.59 tests/s, 7537.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |x|\n    if x % 2 == 1\n      odd.push(x)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp57inbyup\nStarted\n.\nFinished in 0.000394794 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2532.97 tests/s, 7598.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x % 2 != 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp13x1vjjk\nStarted\n.\nFinished in 0.000517718 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1931.55 tests/s, 5794.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |i|\n    if i % 2 != 0\n      odd_list << i\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpps7g4mqd\nStarted\n.\nFinished in 0.000403413 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2478.85 tests/s, 7436.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |i|\n    if i % 2 != 0\n      odd_list << i\n    end\n  end\n  odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpt7h29x_z\nStarted\n.\nFinished in 0.000415507 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2406.70 tests/s, 7220.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |i|\n    if i % 2 != 0\n      odd_list.push(i)\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0go0_2ym\nStarted\n.\nFinished in 0.000463912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2155.58 tests/s, 6466.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_list = []\n  list.each do |i|\n    if i % 2 != 0\n      odd_list.push(i)\n    end\n  end\n  return odd_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0go0_2ym\nStarted\n.\nFinished in 0.000463912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2155.58 tests/s, 6466.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd_array = []\n  list.each do |x|\n    if x % 2 != 0\n      odd_array.push(x)\n    end\n  end\n  return odd_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xkc1hgl\nStarted\n.\nFinished in 0.000415278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2408.03 tests/s, 7224.08 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |x|\n    if x % 2 != 0\n      odd.push(x)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdyuv7684\nStarted\n.\nFinished in 0.000381393 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2621.97 tests/s, 7865.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select {|x| x % 2 != 0}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1poqh3kb\nStarted\n.\nFinished in 0.000393629 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2540.46 tests/s, 7621.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |x|\n    if x % 2 == 1\n      odd.push(x)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp57inbyup\nStarted\n.\nFinished in 0.000394794 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2532.97 tests/s, 7598.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x % 2 == 1 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp99ll2ppz\nStarted\n.\nFinished in 0.000555576 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1799.93 tests/s, 5399.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  list.each do |i|\n    if i % 2 != 0\n      odd.push(i)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxgo5dx0\nStarted\n.\nFinished in 0.000385058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.01 tests/s, 7791.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  list.select { |x| x % 2 != 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp13x1vjjk\nStarted\n.\nFinished in 0.000517718 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1931.55 tests/s, 5794.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n  odd = []\n  even = []\n  list.each do |x|\n    if x % 2 == 0\n      even.push(x)\n    else\n      odd.push(x)\n    end\n  end\n  return odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptid_wq6m\nStarted\n.\nFinished in 0.000399893 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2500.67 tests/s, 7502.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}