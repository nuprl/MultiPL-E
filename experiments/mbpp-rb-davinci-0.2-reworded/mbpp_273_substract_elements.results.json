{
  "name": "mbpp_273_substract_elements",
  "language": "rb",
  "prompt": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_273_substract_elements.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  # Write your code here\n  test_tup1.zip(test_tup2).map {|x, y| x - y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzisi_kht\nStarted\n.\nFinished in 0.000554695 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1802.79 tests/s, 5408.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |value, index|\n    result << value - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptcf_xqlx\nStarted\n.\nFinished in 0.000671611 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1488.96 tests/s, 4466.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  # Write your code here\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp68ewm5wo\nStarted\n.\nFinished in 0.000769433 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1299.66 tests/s, 3898.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdu7o6ipp\nStarted\n.\nFinished in 0.000604396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1654.54 tests/s, 4963.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdu7o6ipp\nStarted\n.\nFinished in 0.000604396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1654.54 tests/s, 4963.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  # Write your code here\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp68ewm5wo\nStarted\n.\nFinished in 0.000769433 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1299.66 tests/s, 3898.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdu7o6ipp\nStarted\n.\nFinished in 0.000604396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1654.54 tests/s, 4963.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  # Write your code here\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp68ewm5wo\nStarted\n.\nFinished in 0.000769433 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1299.66 tests/s, 3898.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |num, index|\n    result << num - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu8pi79ug\nStarted\n.\nFinished in 0.000392138 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2550.12 tests/s, 7650.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  # Write your code here\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp68ewm5wo\nStarted\n.\nFinished in 0.000769433 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1299.66 tests/s, 3898.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  new_array = []\n  test_tup1.each_with_index do |element, index|\n    new_array << element - test_tup2[index]\n  end\n  new_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpguazbi6m\nStarted\n.\nFinished in 0.000499518 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2001.93 tests/s, 6005.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdu7o6ipp\nStarted\n.\nFinished in 0.000604396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1654.54 tests/s, 4963.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |num, index|\n    result << num - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu8pi79ug\nStarted\n.\nFinished in 0.000392138 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2550.12 tests/s, 7650.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |a, b| a - b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2aisni9w\nStarted\n.\nFinished in 0.000392064 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2550.60 tests/s, 7651.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |value, index|\n    result << value - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptcf_xqlx\nStarted\n.\nFinished in 0.000671611 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1488.96 tests/s, 4466.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |num, index|\n    result << num - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu8pi79ug\nStarted\n.\nFinished in 0.000392138 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2550.12 tests/s, 7650.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map {|x, y| x - y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmproivx443\nStarted\n.\nFinished in 0.00040103 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2493.58 tests/s, 7480.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |num, index|\n    result << num - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu8pi79ug\nStarted\n.\nFinished in 0.000392138 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2550.12 tests/s, 7650.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |num, index|\n    result << num - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu8pi79ug\nStarted\n.\nFinished in 0.000392138 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2550.12 tests/s, 7650.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  # Write your code here\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp68ewm5wo\nStarted\n.\nFinished in 0.000769433 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1299.66 tests/s, 3898.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |a, b| a - b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2aisni9w\nStarted\n.\nFinished in 0.000392064 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2550.60 tests/s, 7651.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdu7o6ipp\nStarted\n.\nFinished in 0.000604396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1654.54 tests/s, 4963.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  # test_tup1.zip(test_tup2).map { |x, y| x - y }\n  test_tup1.zip(test_tup2).map { |x| x[0] - x[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2xxok7tf\nStarted\n.\nFinished in 0.000384783 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2598.87 tests/s, 7796.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |num, i|\n    result << num - test_tup2[i]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbbn8nso0\nStarted\n.\nFinished in 0.000395204 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2530.34 tests/s, 7591.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |num, index|\n    result << num - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu8pi79ug\nStarted\n.\nFinished in 0.000392138 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2550.12 tests/s, 7650.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdu7o6ipp\nStarted\n.\nFinished in 0.000604396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1654.54 tests/s, 4963.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdu7o6ipp\nStarted\n.\nFinished in 0.000604396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1654.54 tests/s, 4963.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  new_array = []\n  test_tup1.each_with_index do |value, index|\n    new_array << value - test_tup2[index]\n  end\n  new_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp754y5j_w\nStarted\n.\nFinished in 0.000461694 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2165.94 tests/s, 6497.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  # Your code here\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8r0ojhuo\nStarted\n.\nFinished in 0.000593786 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1684.11 tests/s, 5052.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map {|x, y| x - y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmproivx443\nStarted\n.\nFinished in 0.00040103 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2493.58 tests/s, 7480.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map {|x,y| x - y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpebbhhw7k\nStarted\n.\nFinished in 0.00040395 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2475.55 tests/s, 7426.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map {|x, y| x - y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmproivx443\nStarted\n.\nFinished in 0.00040103 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2493.58 tests/s, 7480.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  # Write your code here\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp68ewm5wo\nStarted\n.\nFinished in 0.000769433 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1299.66 tests/s, 3898.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map {|x, y| x - y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmproivx443\nStarted\n.\nFinished in 0.00040103 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2493.58 tests/s, 7480.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |value, index|\n    result << value - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptcf_xqlx\nStarted\n.\nFinished in 0.000671611 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1488.96 tests/s, 4466.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |value, index|\n    result << value - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptcf_xqlx\nStarted\n.\nFinished in 0.000671611 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1488.96 tests/s, 4466.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdu7o6ipp\nStarted\n.\nFinished in 0.000604396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1654.54 tests/s, 4963.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  # Write your code here\n  test_tup1.zip(test_tup2).map{|x, y| x - y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppnwqz9j_\nStarted\n.\nFinished in 0.000396576 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2521.58 tests/s, 7564.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdu7o6ipp\nStarted\n.\nFinished in 0.000604396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1654.54 tests/s, 4963.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdu7o6ipp\nStarted\n.\nFinished in 0.000604396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1654.54 tests/s, 4963.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map {|x, y| x - y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmproivx443\nStarted\n.\nFinished in 0.00040103 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2493.58 tests/s, 7480.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  new_array = []\n  test_tup1.each_with_index do |element, index|\n    new_array << element - test_tup2[index]\n  end\n  new_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpguazbi6m\nStarted\n.\nFinished in 0.000499518 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2001.93 tests/s, 6005.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |value, index|\n    result << value - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptcf_xqlx\nStarted\n.\nFinished in 0.000671611 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1488.96 tests/s, 4466.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |num, index|\n    result << num - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu8pi79ug\nStarted\n.\nFinished in 0.000392138 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2550.12 tests/s, 7650.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map{|x,y| x-y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0eb1_3ps\nStarted\n.\nFinished in 0.000405163 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2468.14 tests/s, 7404.43 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  # Write your code here\n  test_tup1.zip(test_tup2).map {|x, y| x - y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzisi_kht\nStarted\n.\nFinished in 0.000554695 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1802.79 tests/s, 5408.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  # Write your code here\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp68ewm5wo\nStarted\n.\nFinished in 0.000769433 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1299.66 tests/s, 3898.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  # your code here\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpja34oj3f\nStarted\n.\nFinished in 0.000402742 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2482.98 tests/s, 7448.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdu7o6ipp\nStarted\n.\nFinished in 0.000604396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1654.54 tests/s, 4963.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdu7o6ipp\nStarted\n.\nFinished in 0.000604396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1654.54 tests/s, 4963.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdu7o6ipp\nStarted\n.\nFinished in 0.000604396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1654.54 tests/s, 4963.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |x, i|\n    result << x - test_tup2[i]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpo18wq0is\nStarted\n.\nFinished in 0.000397999 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.57 tests/s, 7537.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdu7o6ipp\nStarted\n.\nFinished in 0.000604396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1654.54 tests/s, 4963.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdu7o6ipp\nStarted\n.\nFinished in 0.000604396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1654.54 tests/s, 4963.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  # Write your code here\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp68ewm5wo\nStarted\n.\nFinished in 0.000769433 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1299.66 tests/s, 3898.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map {|x, y| x - y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmproivx443\nStarted\n.\nFinished in 0.00040103 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2493.58 tests/s, 7480.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  # test_tup1.zip(test_tup2).map { |x, y| x - y }\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd8pnwq36\nStarted\n.\nFinished in 0.000392309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2549.01 tests/s, 7647.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdu7o6ipp\nStarted\n.\nFinished in 0.000604396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1654.54 tests/s, 4963.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map {|x, y| x - y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmproivx443\nStarted\n.\nFinished in 0.00040103 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2493.58 tests/s, 7480.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdu7o6ipp\nStarted\n.\nFinished in 0.000604396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1654.54 tests/s, 4963.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |num, index|\n    result << num - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu8pi79ug\nStarted\n.\nFinished in 0.000392138 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2550.12 tests/s, 7650.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |num, index|\n    result << num - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu8pi79ug\nStarted\n.\nFinished in 0.000392138 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2550.12 tests/s, 7650.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdu7o6ipp\nStarted\n.\nFinished in 0.000604396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1654.54 tests/s, 4963.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdu7o6ipp\nStarted\n.\nFinished in 0.000604396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1654.54 tests/s, 4963.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map {|x, y| x - y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmproivx443\nStarted\n.\nFinished in 0.00040103 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2493.58 tests/s, 7480.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdu7o6ipp\nStarted\n.\nFinished in 0.000604396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1654.54 tests/s, 4963.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map {|x,y| x - y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpebbhhw7k\nStarted\n.\nFinished in 0.00040395 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2475.55 tests/s, 7426.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  new_array = []\n  test_tup1.each_with_index do |num, index|\n    new_array << num - test_tup2[index]\n  end\n  new_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwbkl58qy\nStarted\n.\nFinished in 0.000415467 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2406.93 tests/s, 7220.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element - test_tup2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdu7o6ipp\nStarted\n.\nFinished in 0.000604396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1654.54 tests/s, 4963.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkd4lr8g\nStarted\n.\nFinished in 0.000696406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1435.94 tests/s, 4307.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}