{
  "name": "mbpp_799_left_rotate",
  "language": "rb",
  "prompt": "# Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\ndef left_rotate(n, d)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_rotate\n    candidate = method(:left_rotate)\n    assert_equal(64, candidate.call(16, 2))\n    assert_equal(40, candidate.call(10, 2))\n    assert_equal(792, candidate.call(99, 3))\n    assert_equal(792, candidate.call(99, 3))\n    assert_equal(8, candidate.call(1, 3))\n    assert_equal(40, candidate.call(5, 3))\n    assert_equal(232, candidate.call(29, 3))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  # n = n << d\n  # n = n | (n >> (32 - d))\n  # n = n & (2**32 - 1)\n  n = (n << d) | (n >> (32 - d))\nend",
    "  n = n.to_s(2)\n  d.times do\n    n = n[1..-1] + n[0]\n  end\n  n.to_i(2)\nend",
    "  return n if d == 0\n  return n << d | n >> (32 - d)\nend",
    "  # n = n.to_s(2)\n  # n = n.split('')\n  # n = n.rotate(d)\n  # n = n.join('')\n  # n = n.to_i(2)\n  # n = n.to_s(2)\n  # n = n.split('')\n  # n = n.rotate(d)\n  # n = n.join('')\n  # n = n.to_i(2)\n  # return n\n  return (n << d) | (n >> (32 - d))\nend",
    "  (n << d) | (n >> (32 - d))\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  d.times do\n    n.push(n.shift)\n  end\n  n.join.to_i(2)\nend",
    "  # n = n.to_s(2)\n  # n = n.split('')\n  # d.times do\n  #   n.push(n.shift)\n  # end\n  # n = n.join('')\n  # n.to_i(2)\n  (n << d) | (n >> (32 - d))\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  # n = n << d\n  # n = n | (n >> (32 - d))\n  # n = n & 0xFFFFFFFF\n  # n\n  ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\nend",
    "  n = n.to_s(2)\n  d = d.to_s(2)\n  n = n.split('')\n  d = d.split('')\n  n = n.rotate(d.length)\n  n = n.join('')\n  n = n.to_i(2)\n  puts n\nend",
    "  n = n.to_s(2)\n  d.times do\n    n = n[1..-1] + n[0]\n  end\n  n.to_i(2)\nend",
    "  n << d | n >> (32 - d)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  n\nend",
    "  (n << d) | (n >> (32 - d))\nend",
    "  n = n.to_s(2)\n  n = \"0\"*(32-n.length) + n\n  n = n[d..-1] + n[0...d]\n  n.to_i(2)\nend",
    "  n = n.to_s(2)\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  (n << d) | (n >> (32 - d))\nend",
    "  n << d | n >> (32 - d)\nend",
    "  # Get the number of bits in the number\n  num_bits = Math.log2(n).ceil + 1\n  # Get the leftmost d bits\n  left_bits = n >> (num_bits - d)\n  # Get the rightmost (num_bits - d) bits\n  right_bits = n & ((1 << (num_bits - d)) - 1)\n  # Put the leftmost d bits at the rightmost (num_bits - d) bits\n  left_bits << (num_bits - d) | right_bits\nend"
  ]
}