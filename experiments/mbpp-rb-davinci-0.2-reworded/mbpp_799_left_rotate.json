{
  "name": "mbpp_799_left_rotate",
  "language": "rb",
  "prompt": "# Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\ndef left_rotate(n, d)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_rotate\n    candidate = method(:left_rotate)\n    assert_equal(64, candidate.call(16, 2))\n    assert_equal(40, candidate.call(10, 2))\n    assert_equal(792, candidate.call(99, 3))\n    assert_equal(792, candidate.call(99, 3))\n    assert_equal(8, candidate.call(1, 3))\n    assert_equal(40, candidate.call(5, 3))\n    assert_equal(232, candidate.call(29, 3))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  # n = n << d\n  # n = n | (n >> (32 - d))\n  # n = n & (2**32 - 1)\n  n = (n << d) | (n >> (32 - d))\nend",
    "  n = n.to_s(2)\n  d.times do\n    n = n[1..-1] + n[0]\n  end\n  n.to_i(2)\nend",
    "  return n if d == 0\n  return n << d | n >> (32 - d)\nend",
    "  # n = n.to_s(2)\n  # n = n.split('')\n  # n = n.rotate(d)\n  # n = n.join('')\n  # n = n.to_i(2)\n  # n = n.to_s(2)\n  # n = n.split('')\n  # n = n.rotate(d)\n  # n = n.join('')\n  # n = n.to_i(2)\n  # return n\n  return (n << d) | (n >> (32 - d))\nend",
    "  (n << d) | (n >> (32 - d))\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  d.times do\n    n.push(n.shift)\n  end\n  n.join.to_i(2)\nend",
    "  # n = n.to_s(2)\n  # n = n.split('')\n  # d.times do\n  #   n.push(n.shift)\n  # end\n  # n = n.join('')\n  # n.to_i(2)\n  (n << d) | (n >> (32 - d))\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  # n = n << d\n  # n = n | (n >> (32 - d))\n  # n = n & 0xFFFFFFFF\n  # n\n  ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\nend",
    "  n = n.to_s(2)\n  d = d.to_s(2)\n  n = n.split('')\n  d = d.split('')\n  n = n.rotate(d.length)\n  n = n.join('')\n  n = n.to_i(2)\n  puts n\nend",
    "  n = n.to_s(2)\n  d.times do\n    n = n[1..-1] + n[0]\n  end\n  n.to_i(2)\nend",
    "  n << d | n >> (32 - d)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  n\nend",
    "  (n << d) | (n >> (32 - d))\nend",
    "  n = n.to_s(2)\n  n = \"0\"*(32-n.length) + n\n  n = n[d..-1] + n[0...d]\n  n.to_i(2)\nend",
    "  n = n.to_s(2)\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  (n << d) | (n >> (32 - d))\nend",
    "  n << d | n >> (32 - d)\nend",
    "  # Get the number of bits in the number\n  num_bits = Math.log2(n).ceil + 1\n  # Get the leftmost d bits\n  left_bits = n >> (num_bits - d)\n  # Get the rightmost (num_bits - d) bits\n  right_bits = n & ((1 << (num_bits - d)) - 1)\n  # Put the leftmost d bits at the rightmost (num_bits - d) bits\n  left_bits << (num_bits - d) | right_bits\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  # n = n.to_s(2)\n  # n = n.split('')\n  # n = n.rotate(d)\n  # n = n.join('')\n  # n = n.to_i(2)\n  # n\n  # n = n.to_s(2)\n  # n = n.split('')\n  # n = n.rotate(d)\n  # n = n.join('')\n  # n = n.to_i(2)\n  # n\n  n = n.to_s(2)\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  n\nend",
    "  (n << d) | (n >> (32 - d))\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2)\n  d.times do\n    n = n[1..-1] + n[0]\n  end\n  n.to_i(2)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  d.times do\n    n.push(n.shift)\n  end\n  n.join.to_i(2)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  d.times do\n    n.push(n.shift)\n  end\n  n.join.to_i(2)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  # n = n.to_s(2)\n  # n = n.split('')\n  # n = n.rotate(d)\n  # n = n.join('')\n  # n = n.to_i(2)\n  # return n\n  return ((n << d) | (n >> (32 - d)))\nend",
    "  (n << d) | (n >> (32 - d))\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  n\nend",
    "  return n if d == 0\n  return n >> d if d > 32\n  (n << d) | (n >> (32 - d))\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n[d..-1] + n[0...d]\n  n.to_i(2)\nend",
    "  return ((n << d) | (n >> (32 - d)))\nend",
    "  n << d | n >> (32 - d)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  return n if d == 0\n  (n << d) | (n >> (32 - d))\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  puts n\nend",
    "  # n = n << d\n  # n = n | (n >> (32 - d))\n  # n = n & 0xFFFFFFFF\n  # n\n  ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\nend",
    "  # n = n & 0xFFFFFFFF\n  # d = d & 0x1F\n  # n = (n << d) | (n >> (32 - d))\n  # n = n & 0xFFFFFFFF\n  # n\n  (n << d) | (n >> (32 - d))\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  # n = n.to_s(2)\n  # n = n.split('')\n  # n = n.rotate(d)\n  # n = n.join('')\n  # n = n.to_i(2)\n  # n\n  n = n.to_s(2)\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n.to_i(2)\nend",
    "  (n << d) | (n >> (32 - d))\nend",
    "  (n << d) | (n >> (32 - d))\nend",
    "  (n << d) | (n >> (32 - d))\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2)\n  n = \"0\" * (32 - n.length) + n\n  n = n[d..-1] + n[0...d]\n  n.to_i(2)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  # Get the leftmost d bits of the number\n  left_bits = n >> (32 - d)\n  # Get the rightmost 32 - d bits of the number\n  right_bits = n & ((1 << (32 - d)) - 1)\n  # Left rotate the number by d bits\n  (right_bits << d) | left_bits\nend",
    "  n = n.to_s(2)\n  d.times do\n    n = n[1..-1] + n[0]\n  end\n  n.to_i(2)\nend",
    "  n << d | n >> (32 - d)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n[d..-1] + n[0..d-1]\n  n.to_i(2)\nend",
    "  n << d | n >> (32 - d)\nend",
    "  return n if d == 0\n  return n << d | n >> (32 - d)\nend",
    "  n = n.to_s(2)\n  d = d.to_s(2)\n  n = n[d..-1] + n[0..d-1]\n  n.to_i(2)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n[d..-1] + n[0...d]\n  n.to_i(2)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n.to_i(2)\nend",
    "  # Extract the last d bits\n  last_d_bits = n & ((1 << d) - 1)\n  # Remove the last d bits\n  n = n >> d\n  # Put the last d bits at the start\n  n = n | (last_d_bits << (32 - d))\n  n\nend",
    "  n = n << d\n  n = n | (n >> 32)\n  n = n & 0xFFFFFFFF\n  n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  d.times do\n    n.push(n.shift)\n  end\n  n.join('').to_i(2)\nend",
    "  n = n << d\n  n = n | (n >> 32)\n  n = n & 0xffffffff\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "  # get the leftmost d bits\n  left = n >> (32 - d)\n  # get the rightmost 32 - d bits\n  right = n << d\n  # combine the left and right bits\n  left | right\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n.join('').to_i(2)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n << d | n >> (32 - d)\nend",
    "  (n << d) | (n >> (32 - d))\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  n\nend",
    "  n = n.to_s(2)\n  d.times do\n    n = n[1..-1] + n[0]\n  end\n  n.to_i(2)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  puts n\nend",
    "  # get the leftmost d bits\n  left_bits = n >> (32 - d)\n  # get the rightmost 32 - d bits\n  right_bits = n << d\n  # combine the left and right bits\n  left_bits | right_bits\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  d.times do\n    n.push(n.shift)\n  end\n  n.join('').to_i(2)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  d.times do\n    n.push(n.shift)\n  end\n  n.join('').to_i(2)\nend",
    "  n = n.to_s(2).rjust(32, '0').split('')\n  d.times do\n    n.push(n.shift)\n  end\n  n.join.to_i(2)\nend",
    "  n = n.to_s(2).rjust(32, '0')\n  n = n[d..-1] + n[0...d]\n  n.to_i(2)\nend",
    "  # n = n << d\n  # n = n | (n >> (32 - d))\n  # n = n & 0xFFFFFFFF\n  # n\n  ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n << d\n  n = n | (n >> 32)\n  n = n & 0xffffffff\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2)\n  d = d.to_s(2)\n  puts n.to_s(2)\n  puts d.to_s(2)\n  puts (n << d).to_s(2)\nend",
    "  (n << d) | (n >> (32 - d))\nend",
    "  (n << d) | (n >> (32 - d))\nend",
    "  return ((n << d) | (n >> (32 - d)))\nend",
    "  n = n.to_s(2)\n  d.times do\n    n = n[1..-1] + n[0]\n  end\n  n.to_i(2)\nend",
    "  n = n.to_s(2)\n  d = d.to_s(2)\n  n = n.split('')\n  d = d.split('')\n  n = n.rotate(d.length)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  d.times do\n    n = n[1..-1] + n[0]\n  end\n  n.to_i(2)\nend",
    "  n << d | n >> (32 - d)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  (n << d) | (n >> (32 - d))\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  # n << d | n >> (32 - d)\n  n << d | n >> (32 - d)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n.to_i(2)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  # n = n << d\n  # n = n | (n >> (32 - d))\n  # n = n & 0xFFFFFFFF\n  # n\n  ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  puts n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n[d..-1] + n[0...d]\n  n.to_i(2)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "  # n = n.to_s(2)\n  # n = n.split(\"\")\n  # n = n.rotate(d)\n  # n = n.join(\"\")\n  # n = n.to_i(2)\n  # n\n  n = n.to_s(2)\n  n = n.split(\"\")\n  n = n.rotate(d)\n  n = n.join(\"\")\n  n = n.to_i(2)\n  n\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n[d..-1] + n[0...d]\n  n.to_i(2)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n.to_i(2)\nend",
    "  n = n.to_s(2).rjust(32, '0')\n  n = n[d..-1] + n[0...d]\n  n.to_i(2)\nend",
    "  # n = n << d\n  # n = n | (n >> (32 - d))\n  # n = n & 0xFFFFFFFF\n  # n\n  ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join\n  n = n.to_i(2)\n  return n\nend",
    "  n << d | n >> (32 - d)\nend",
    "  n = n.to_s(2)\n  d.times do\n    n = n[1..-1] + n[0]\n  end\n  n.to_i(2)\nend",
    "  (n << d) | (n >> (32 - d))\nend",
    "  return n if d == 0\n  ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  puts n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  n\nend",
    "  return ((n << d) | (n >> (32 - d)))\nend",
    "  # n = 0b1101\n  # d = 2\n  # 0b1101 << 2 = 0b110100\n  # 0b110100 >> 2 = 0b1101\n  (n << d) | (n >> (32 - d))\nend",
    "  return n if d == 0\n  d = d % 32\n  n = n << d\n  n = n | (n >> 32)\n  n = n & 0xffffffff\n  n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n[d..-1] + n[0..d-1]\n  n.to_i(2)\nend",
    "  # We will use the modulo operator to make sure that d is always less than 32\n  d = d % 32\n  # We will use the bitwise left shift operator to shift the bits of the number to the left by d bits\n  # We will use the bitwise OR operator to combine the bits of the number shifted to the left by d bits with the bits of the number shifted to the right by 32 - d bits\n  # We will use the bitwise AND operator to make sure that the bits of the number shifted to the right by 32 - d bits are all 0s\n  # We will use the bitwise OR operator to combine the bits of the number shifted to the left by d bits with the bits of the number shifted to the right by 32 - d bits\n  # We will use the bitwise AND operator to make sure that the bits of the number shifted to the right by 32 - d bits are all 0s\n  # We will use the bitwise OR operator to combine the bits of the number shifted to the left by d bits with the bits of the number shifted to the right by 32 - d bits\n  # We will use the bitwise AND operator to make sure that the bits of the number shifted to the right by 32 - d bits are all 0s\n  # We will use the bitwise OR operator to combine the bits of the number shifted to the left by d bits with the bits of the number shifted to the right by 32 - d bits\n  # We will use the bitwise AND operator to make sure that the bits of the number shifted to the right by 32 - d bits are all 0s\n  # We will use the bitwise OR operator to combine the bits of the number shifted to the left by d bits with the bits of the number shifted to the right by 32 - d bits\n  # We will use the bitwise AND operator to make sure that the bits of the number shifted to the right by 32 - d bits are all 0s\n  # We will use the bitwise OR operator to combine the bits of the number shifted to the left by d bits with the bits of the number shifted to the right by 32 - d bits\n  # We will use the bitwise AND operator to make sure that the bits of the number shifted to the right by 32 - d bits are all 0s\n  # We will use the bitwise OR operator to combine the bits of the number shifted to the left",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2)\n  d.times do\n    n = n[1..-1] + n[0]\n  end\n  n.to_i(2)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  (n << d) | (n >> (32 - d))\nend",
    "  (n << d) | (n >> (32 - d))\nend",
    "  return ((n << d) | (n >> (32 - d)))\nend",
    "  n << d | n >> (32 - d)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  puts n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n[d..-1] + n[0...d]\n  n.to_i(2)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  puts n\nend",
    "  # n = n & 0xFFFFFFFF\n  # d = d & 0x1F\n  # n = (n << d) | (n >> (32 - d))\n  # n = n & 0xFFFFFFFF\n  # n\n  n = n & 0xFFFFFFFF\n  d = d & 0x1F\n  n = (n << d) | (n >> (32 - d))\n  n = n & 0xFFFFFFFF\n  n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n[d..-1] + n[0...d]\n  n.to_i(2)\nend",
    "  # n = n.to_s(2)\n  # d.times do\n  #   n = n[1..-1] + n[0]\n  # end\n  # n.to_i(2)\n  (n << d) | (n >> (32 - d))\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join\n  n = n.to_i(2)\n  puts n\nend",
    "  return n if d == 0\n  return n << d | n >> (32 - d)\nend",
    "  n = n.to_s(2).rjust(32, '0')\n  n = n[d..-1] + n[0...d]\n  n.to_i(2)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, \"0\")\n  n = n.split(\"\")\n  n = n.rotate(d)\n  n = n.join(\"\")\n  n = n.to_i(2)\n  return n\nend",
    "  # Left shift n by d bits\n  # Right shift n by 32 - d bits\n  # Bitwise OR both the results\n  ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\nend",
    "  # n = n & 0xFFFFFFFF\n  n = n << d\n  n = n & 0xFFFFFFFF\n  n = n >> (32 - d)\n  n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2)\n  d = d.to_s(2)\n  n = n.split('')\n  d = d.split('')\n  n = n.rotate(d.length)\n  n = n.join('')\n  n = n.to_i(2)\n  puts n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2).rjust(32, \"0\")\n  n = n[d..-1] + n[0...d]\n  n.to_i(2)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  (n << d) | (n >> (32 - d))\nend",
    "  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n  # We need to mask the bits that are going to be rotated out.\n ",
    "  # n = n & 0xffffffff\n  # d = d & 0x1f\n  # return ((n << d) | (n >> (32 - d))) & 0xffffffff\n  n = n & 0xffffffff\n  d = d & 0x1f\n  return ((n << d) | (n >> (32 - d))) & 0xffffffff\nend",
    "  # n = n & 0xFFFFFFFF\n  # d = d & 0x1F\n  # (n << d) | (n >> (32 - d))\n  n.to_s(2).rjust(32, '0').reverse.chars.rotate(d).join.reverse.to_i(2)\nend",
    "  # n = n.to_s(2)\n  # n = n.split(\"\")\n  # n = n.rotate(d)\n  # n = n.join(\"\")\n  # n = n.to_i(2)\n  # return n\n  return ((n << d) | (n >> (32 - d)))\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  d.times do\n    n.push(n.shift)\n  end\n  n = n.join('')\n  n = n.to_i(2)\nend",
    "  return n if d == 0\n  return n << d | n >> (32 - d)\nend",
    "  (n << d) | (n >> (32 - d))\nend",
    "  n = n << d\n  n = n | (n >> 32)\n  n = n & 0xffffffff\nend",
    "  n = n.to_s(2).rjust(32, '0')\n  n = n[d..-1] + n[0...d]\n  n.to_i(2)\nend",
    "  (n << d) | (n >> (32 - d))\nend",
    "  n = n.to_s(2).rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n.join('').to_i(2)\nend",
    "  # n = n << d\n  # n = n | (n >> (32 - d))\n  # n = n & 0xFFFFFFFF\n  # n\n  (n << d) | (n >> (32 - d))\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  puts n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  d.times do\n    n = n[1..-1] + n[0]\n  end\n  n.to_i(2)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2)\n  d.times do\n    n = n[1..-1] + n[0]\n  end\n  n.to_i(2)\nend",
    "  n = n.to_s(2)\n  d.times do\n    n = n[1..-1] + n[0]\n  end\n  n.to_i(2)\nend",
    "  # n = n.to_s(2)\n  # n = n.split(\"\")\n  # n = n.rotate(d)\n  # n = n.join(\"\")\n  # n = n.to_i(2)\n  # n\n  (n << d) | (n >> (32 - d))\nend",
    "  n = n.to_s(2)\n  d.times do\n    n = n.chars.rotate(-1).join\n  end\n  n.to_i(2)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2)\n  n = \"0\"*(32-n.length) + n\n  n = n[d..-1] + n[0...d]\n  n.to_i(2)\nend",
    "  # We will use the bitwise left shift operator << to shift the bits to the left.\n  # We will use the bitwise OR operator | to set the bits that are shifted out of the left side of the number back to the right side.\n  # We will use the bitwise AND operator & to clear the bits that are shifted out of the right side of the number.\n  # We will use the bitwise NOT operator ~ to invert all the bits of the number.\n  # We will use the bitwise XOR operator ^ to set the bits that are shifted out of the left side of the number back to the right side.\n  # We will use the bitwise right shift operator >> to shift the bits to the right.\n  # We will use the bitwise AND operator & to clear the bits that are shifted out of the left side of the number.\n  # We will use the bitwise OR operator | to set the bits that are shifted out of the right side of the number back to the left side.\n  # We will use the bitwise NOT operator ~ to invert all the bits of the number.\n  # We will use the bitwise XOR operator ^ to set the bits that are shifted out of the right side of the number back to the left side.\n  # We will use the bitwise AND operator & to clear the bits that are shifted out of the left side of the number.\n  # We will use the bitwise OR operator | to set the bits that are shifted out of the right side of the number back to the left side.\n  # We will use the bitwise NOT operator ~ to invert all the bits of the number.\n  # We will use the bitwise XOR operator ^ to set the bits that are shifted out of the right side of the number back to the left side.\n  # We will use the bitwise AND operator & to clear the bits that are shifted out of the left side of the number.\n  # We will use the bitwise OR operator | to set the bits that are shifted out of the right side of the number back to the left side.\n  # We will use the bitwise NOT operator ~ to invert all the bits of the number.\n  # We will use the bitwise XOR operator ^ to set the bits that are shifted out of the right side of the number back to the left side.\n ",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n.join.to_i(2)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2)\n  d = d.to_s(2)\n  n = n.split('')\n  d = d.split('')\n  n = n.rotate(d.length)\n  n = n.join('')\n  n = n.to_i(2)\n  puts n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  return n if d == 0\n  (n << d) | (n >> (32 - d))\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  d.times do\n    n = n[1..-1] + n[0]\n  end\n  n.to_i(2)\nend",
    "  n = n.to_s(2).rjust(32, '0')\n  d.times do\n    n = n[1..-1] + n[0]\n  end\n  n.to_i(2)\nend",
    "  n = n.to_s(2)\n  d.times do\n    n = n[1..-1] + n[0]\n  end\n  n.to_i(2)\nend",
    "  # We can use the bitwise operator << to shift bits to the left.\n  # We can use the bitwise operator | to combine bits.\n  # We can use the bitwise operator >> to shift bits to the right.\n  # We can use the bitwise operator & to get the bits we want.\n  # We can use the bitwise operator ~ to get the bits we don't want.\n  # We can use the bitwise operator ^ to get the bits we want to change.\n  # We can use the bitwise operator ~ to get the bits we don't want to change.\n  # We can use the bitwise operator << to shift bits to the left.\n  # We can use the bitwise operator | to combine bits.\n  # We can use the bitwise operator >> to shift bits to the right.\n  # We can use the bitwise operator & to get the bits we want.\n  # We can use the bitwise operator ~ to get the bits we don't want.\n  # We can use the bitwise operator ^ to get the bits we want to change.\n  # We can use the bitwise operator ~ to get the bits we don't want to change.\n  # We can use the bitwise operator << to shift bits to the left.\n  # We can use the bitwise operator | to combine bits.\n  # We can use the bitwise operator >> to shift bits to the right.\n  # We can use the bitwise operator & to get the bits we want.\n  # We can use the bitwise operator ~ to get the bits we don't want.\n  # We can use the bitwise operator ^ to get the bits we want to change.\n  # We can use the bitwise operator ~ to get the bits we don't want to change.\n  # We can use the bitwise operator << to shift bits to the left.\n  # We can use the bitwise operator | to combine bits.\n  # We can use the bitwise operator >> to shift bits to the right.\n  # We can use the bitwise operator & to get the bits we want.\n  # We can use the bitwise operator ~ to get the bits we don't want.\n  # We can use the bitwise operator ^ to get the bits we want to change.\n  # We can use the bitwise operator",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2).rjust(32, '0')\n  n = n[d..-1] + n[0...d]\n  n.to_i(2)\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join\n  n = n.to_i(2)\nend",
    "  # n = n.to_s(2)\n  # n = n.rjust(32, '0')\n  # n = n[d..-1] + n[0...d]\n  # n.to_i(2)\n  (n << d) | (n >> (32 - d))\nend",
    "  return ((n << d) | (n >> (32 - d)))\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2).rjust(32, '0')\n  d.times do\n    n = n[1..-1] + n[0]\n  end\n  n.to_i(2)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend"
  ]
}