{
  "name": "mbpp_747_lcs_of_three",
  "language": "rb",
  "prompt": "# Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\ndef lcs_of_three(x, y, z)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_lcs_of_three\n    candidate = method(:lcs_of_three)\n    assert_equal(2, candidate.call(\"AGGT12\", \"12TXAYB\", \"12XBA\"))\n    assert_equal(5, candidate.call(\"Reels\", \"Reelsfor\", \"ReelsforReels\"))\n    assert_equal(3, candidate.call(\"abcd1e2\", \"bc12ea\", \"bd1ea\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  m = x.length\n  n = y.length\n  o = z.length",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs_matrix = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs_matrix[i][j][k] = lcs_matrix[i-1][j-1][k-1] + 1\n        else\n          lcs_matrix[i][j][k] = [lcs_matrix[i-1][j][k], lcs_matrix[i][j-1][k], lcs_matrix[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs_matrix[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  (1..m).each do |i|\n    (1..n).each do |j|\n      (1..o).each do |k|\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1, 0) } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  lcs_of_two(x, lcs_of_two(y, z))\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  return lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }"
  ]
}