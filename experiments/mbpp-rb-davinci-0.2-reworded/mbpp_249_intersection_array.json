{
  "name": "mbpp_249_intersection_array",
  "language": "rb",
  "prompt": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1.select { |num| array_nums2.include?(num) }\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1.select { |num| array_nums2.include?(num) }\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend",
    "  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend",
    "  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend",
    "  array_nums1.select { |n| array_nums2.include?(n) }\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  # Write your code here\n  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  return intersection_array\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend",
    "  array_nums1 & array_nums2\nend",
    "  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  hash_nums1 = {}\n  array_nums1.each do |num|\n    hash_nums1[num] = true\n  end",
    "  array_nums1 & array_nums2\nend",
    "  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1.select { |num| array_nums2.include?(num) }\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1.select { |num| array_nums2.include?(num) }\nend",
    "  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  # Write your code here\n  intersection = []\n  array_nums1.each do |num1|\n    array_nums2.each do |num2|\n      if num1 == num2\n        intersection << num1\n      end\n    end\n  end\n  intersection\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1.select { |num| array_nums2.include?(num) }\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1.select { |num| array_nums2.include?(num) }\nend",
    "  array_nums1 & array_nums2\nend",
    "  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend",
    "  array_nums1 & array_nums2\nend",
    "  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend",
    "  array_nums1 & array_nums2\nend",
    "  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1.select { |num| array_nums2.include?(num) }\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1.select { |num| array_nums2.include?(num) }\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1.select { |num| array_nums2.include?(num) }\nend",
    "  array_nums1.select { |num| array_nums2.include?(num) }\nend",
    "  # Write your code here\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend",
    "  array_nums1 & array_nums2\nend",
    "  array_nums1 & array_nums2\nend",
    "  intersection = []\n  array_nums1.each do |num|\n    intersection << num if array_nums2.include?(num)\n  end\n  intersection\nend",
    "  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array.push(num)\n    end\n  end\n  intersection_array\nend",
    "  array_nums1 & array_nums2\nend"
  ]
}