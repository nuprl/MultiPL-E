{
  "name": "mbpp_808_check_K",
  "language": "rb",
  "prompt": "# Write a function to check if the given arrays contain the k or not.\ndef check_K(test_tup, k)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_808_check_K.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_K\n    candidate = method(:check_K)\n    assert_equal(true, candidate.call([10, 4, 5, 6, 8], 6))\n    assert_equal(false, candidate.call([1, 2, 3, 4, 5, 6], 7))\n    assert_equal(true, candidate.call([7, 8, 9, 44, 11, 12], 11))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  test_tup.each do |tup|\n    if tup[0] + tup[1] == k\n      return true\n    end\n  end\n  return false\nend",
    "  test_tup.each do |tup|\n    if tup[0] + tup[1] == k\n      return true\n    end\n  end\n  return false\nend",
    "    test_tup.each do |tup|\n        if tup[0] + tup[1] == k\n            return true\n        end\n    end\n    return false\nend",
    "    test_tup.each do |tup|\n        if tup[0] + tup[1] == k\n            return true\n        end\n    end\n    return false\nend",
    "  test_tup.each do |tup|\n    if tup.include?(k)\n      return true\n    end\n  end\n  return false\nend",
    "  test_tup.each do |tup|\n    if tup[0] + tup[1] == k\n      return true\n    end\n  end\n  return false\nend",
    "    if test_tup.include?(k)\n        puts \"True\"\n    else\n        puts \"False\"\n    end\nend",
    "  test_tup.each do |tup|\n    if tup[0] + tup[1] == k\n      return true\n    end\n  end\n  return false\nend",
    "  test_tup.each do |tup|\n    if tup[0] + tup[1] == k\n      return true\n    end\n  end\n  return false\nend",
    "    test_tup.each do |tup|\n        if tup[0] + tup[1] == k\n            return true\n        end\n    end\n    return false\nend",
    "  test_tup.each do |tup|\n    return true if tup.include?(k)\n  end\n  return false\nend",
    "  test_tup.each do |x|\n    if x.include?(k)\n      return true\n    end\n  end\n  return false\nend",
    "  test_tup.each do |tup|\n    if tup.include?(k)\n      return true\n    end\n  end\n  return false\nend",
    "  test_tup.each do |tup|\n    if tup[0] + tup[1] == k\n      return true\n    end\n  end\n  return false\nend",
    "    test_tup.each do |tup|\n        if tup.include?(k)\n            return true\n        end\n    end\n    return false\nend",
    "  test_tup.each do |tup|\n    if tup[0] + tup[1] == k\n      return true\n    end\n  end\n  return false\nend",
    "  test_tup.each do |tup|\n    if tup[0] + tup[1] == k\n      return true\n    end\n  end\n  return false\nend",
    "  test_tup.each do |tup|\n    if tup[0] + tup[1] == k\n      return true\n    end\n  end\n  return false\nend",
    "  test_tup.each do |tup|\n    if tup[0] + tup[1] == k\n      return true\n    end\n  end\n  return false\nend",
    "  test_tup.each do |tup|\n    if tup[0] + tup[1] == k\n      return true\n    end\n  end\n  return false\nend"
  ]
}