{
  "name": "mbpp_223_is_majority",
  "language": "rb",
  "prompt": "# Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\ndef is_majority(arr, n, x)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_majority\n    candidate = method(:is_majority)\n    assert_equal(true, candidate.call([1, 2, 3, 3, 3, 3, 10], 7, 3))\n    assert_equal(false, candidate.call([1, 1, 2, 4, 4, 4, 6, 6], 8, 4))\n    assert_equal(true, candidate.call([1, 1, 1, 2, 2], 5, 1))\n    assert_equal(false, candidate.call([1, 1, 2, 2], 5, 1))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  return false if arr.length < n\n  return true if arr.count(x) > (n / 2)\n  false\nend",
    "  return false if arr.empty?\n  return true if arr.count(x) > n / 2\n  false\nend",
    "  return false if n == 0\n  return true if arr[n/2] == x && arr[n/2 - 1] == x\n  return is_majority(arr[0...n/2], n/2, x) if arr[n/2] > x\n  return is_majority(arr[n/2 + 1..-1], n/2, x) if arr[n/2] < x\nend",
    "  return false if n == 0\n  return true if arr[n/2] == x && arr[n/2 - 1] == x\n  if arr[n/2] >= x\n    is_majority(arr[0...n/2], n/2, x)\n  else\n    is_majority(arr[n/2 + 1..-1], n/2, x)\n  end\nend",
    "  return true if arr.count(x) > n/2\n  false\nend",
    "  return false if n == 0\n  return true if arr[n/2] == x && arr[n/2 + 1] == x\n  if arr[n/2] < x\n    is_majority(arr[n/2..-1], n/2, x)\n  else\n    is_majority(arr[0...n/2], n/2, x)\n  end\nend",
    "  # Write your code here\n  count = 0\n  arr.each do |i|\n    if i == x\n      count += 1\n    end\n  end\n  if count > n/2\n    return true\n  else\n    return false\n  end\nend",
    "  return false if n == 0\n  return true if arr[n/2] == x && arr[n/2 - 1] == x\n  return true if arr[n/2] == x && arr[n/2 + 1] == x\n  if arr[n/2] > x\n    is_majority(arr[0...n/2], n/2, x)\n  else\n    is_majority(arr[n/2 + 1..-1], n/2, x)\n  end\nend",
    "  return false if n == 0\n  return true if arr[n/2] == x && arr[n/2 - 1] == x\n  return true if arr[n/2] == x && arr[n/2 + 1] == x\n  return is_majority(arr[0...n/2], n/2, x) if arr[n/2] > x\n  return is_majority(arr[n/2 + 1..-1], n/2, x) if arr[n/2] < x\nend",
    "  # Write your code here\n  count = 0\n  arr.each do |num|\n    if num == x\n      count += 1\n    end\n  end\n  if count > n/2\n    return true\n  else\n    return false\n  end\nend",
    "  return false if n == 0\n  return true if arr[n/2] == x && arr[n/2 - 1] == x\n  return true if arr[n/2] == x && arr[n/2 + 1] == x\n  return is_majority(arr[0...n/2], n/2, x) if arr[n/2] > x\n  return is_majority(arr[n/2 + 1..-1], n/2, x) if arr[n/2] < x\nend",
    "  # Write your code here\n  count = 0\n  arr.each do |num|\n    if num == x\n      count += 1\n    end\n  end\n  if count > n/2\n    return true\n  else\n    return false\n  end\nend",
    "  return false if n == 0\n  return true if arr[n/2] == x && arr[n/2 - 1] == x\n  return true if arr[n/2] == x && arr[n/2 + 1] == x\n  return is_majority(arr[0...n/2], n/2, x) if arr[n/2] > x\n  return is_majority(arr[n/2 + 1..-1], n/2, x) if arr[n/2] < x\nend",
    "  return false if arr.length == 0\n  return true if arr.length == 1 && arr[0] == x\n  return false if arr.length == 1 && arr[0] != x\n  mid = arr.length / 2\n  if arr[mid] == x\n    return true if arr[mid + 1] != x\n    return true if arr[mid - 1] != x\n    return is_majority(arr[0...mid], n, x) || is_majority(arr[mid + 1..-1], n, x)\n  elsif arr[mid] < x\n    return is_majority(arr[mid + 1..-1], n, x)\n  else\n    return is_majority(arr[0...mid], n, x)\n  end\nend",
    "  return false if n == 0\n  return true if arr[n/2] == x && (arr[n/2 - 1] != x || n == 1)\n  return true if arr[n/2] == x && arr[n/2 - 1] == x\n  return is_majority(arr[0...n/2], n/2, x) if arr[n/2] > x\n  return is_majority(arr[n/2 + 1..-1], n/2, x) if arr[n/2] < x\nend",
    "  return false if n == 0\n  mid = n/2\n  if arr[mid] == x\n    return true if (mid + n/2) < n && arr[mid + n/2] == x\n    return true if mid - n/2 >= 0 && arr[mid - n/2] == x\n  elsif arr[mid] > x\n    return is_majority(arr[0...mid], mid, x)\n  else\n    return is_majority(arr[mid+1..-1], n - mid - 1, x)\n  end\n  false\nend",
    "  return false if n == 0\n  return true if arr[n/2] == x && arr[n/2 - 1] != x\n  return true if arr[n/2] == x && arr[n/2 + 1] != x\n  return is_majority(arr[0...n/2], n/2, x) if arr[n/2] > x\n  return is_majority(arr[n/2 + 1..-1], n/2, x) if arr[n/2] < x\nend",
    "  return false if arr.empty?\n  return false if arr.length < n\n  return true if arr.count(x) > n/2\n  false\nend",
    "  return false if arr.length < n\n  return false if arr.length == 0\n  return false if n == 0\n  return true if arr.length == 1 && arr[0] == x\n  return true if arr.length == 2 && arr[0] == x && arr[1] == x\n  return false if arr.length == 2 && arr[0] != x && arr[1] != x\n  return false if arr.length == 2 && arr[0] == x && arr[1] != x\n  return false if arr.length == 2 && arr[0] != x && arr[1] == x",
    "  return false if arr.length < n\n  return false if arr.length == 1 && arr[0] != x"
  ]
}