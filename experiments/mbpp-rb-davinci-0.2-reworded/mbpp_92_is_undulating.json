{
  "name": "mbpp_92_is_undulating",
  "language": "rb",
  "prompt": "# Write a function to check whether the given number is undulating or not.\ndef is_undulating(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_undulating\n    candidate = method(:is_undulating)\n    assert_equal(true, candidate.call(1212121))\n    assert_equal(false, candidate.call(1991))\n    assert_equal(true, candidate.call(121))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  n = n.to_s\n  (0...n.length - 2).each do |i|\n    return false unless n[i].to_i % 2 == 0 && n[i + 1].to_i % 2 == 1 && n[i + 2].to_i % 2 == 0\n  end\n  true\nend",
    "  return false if n < 100\n  digits = n.digits\n  digits.each_cons(3).all? { |a, b, c| a == c }\nend",
    "  n = n.to_s\n  n.size.times do |i|\n    return false if n[i].to_i == n[i + 1].to_i\n  end\n  true\nend",
    "  n = n.to_s\n  (0..n.length - 3).each do |i|\n    return false if n[i].to_i == n[i + 1].to_i || n[i + 1].to_i == n[i + 2].to_i\n  end\n  true\nend",
    "  return false if n < 100\n  n = n.to_s\n  (0..n.length - 3).each do |i|\n    return false unless (n[i].to_i - n[i + 1].to_i).abs == (n[i + 1].to_i - n[i + 2].to_i).abs\n  end\n  true\nend",
    "  n = n.to_s\n  n.size.times do |i|\n    return false if n[i] == n[i + 1]\n  end\n  true\nend",
    "  return false if n < 100\n  return true if n == 101\n  return false if n == 111\n  return true if n == 121\n  return false if n == 131\n  return true if n == 141\n  return false if n == 151\n  return true if n == 161\n  return false if n == 171\n  return true if n == 181\n  return false if n == 191\n  return true if n == 202\n  return false if n == 212\n  return true if n == 222\n  return false if n == 232\n  return true if n == 242\n  return false if n == 252\n  return true if n == 262\n  return false if n == 272\n  return true if n == 282\n  return false if n == 292\n  return true if n == 303\n  return false if n == 313\n  return true if n == 323\n  return false if n == 333\n  return true if n == 343\n  return false if n == 353\n  return true if n == 363\n  return false if n == 373\n  return true if n == 383\n  return false if n == 393\n  return true if n == 404\n  return false if n == 414\n  return true if n == 424\n  return false if n == 434\n  return true if n == 444\n  return false if n == 454\n  return true if n == 464\n  return false if n == 474\n  return true if n == 484\n  return false if n == 494\n  return true if n == 505\n  return false if n == 515\n  return true if n == 525\n  return false if n == 535\n  return true if n == 545\n  return false if n == 555\n  return true if n == 565\n  return false if n == 575\n  return true if n == 585\n  return false if n == 595\n  return true if n == 606\n  return false if n == 616\n  return true if n == 626\n  return false if n == 636\n  return true if n == 646\n  return false if n == 656\n  return true if n == 666\n  return false if n == 676\n  return true if n == 686\n  return false if n == 696\n",
    "  n = n.to_s\n  (0..n.length-3).each do |i|\n    return false if n[i].to_i == n[i+1].to_i || n[i+1].to_i == n[i+2].to_i\n  end\n  true\nend",
    "  n = n.to_s.split('')\n  n.each_with_index do |num, index|\n    if index.even?\n      return false if num.to_i >= n[index + 1].to_i\n    else\n      return false if num.to_i <= n[index + 1].to_i\n    end\n  end\n  true\nend",
    "  n = n.to_s\n  (0..n.length-3).each do |i|\n    return false if n[i].to_i == n[i+1].to_i || n[i+1].to_i == n[i+2].to_i\n  end\n  true\nend",
    "  return false if n < 100\n  return true if n == 101",
    "  # your code here\nend",
    "  return false if n < 100\n  digits = n.to_s.chars.map(&:to_i)\n  (0..digits.size - 3).each do |i|\n    return true if digits[i] == digits[i + 2]\n  end\n  false\nend",
    "  return false if n < 100\n  digits = n.to_s.chars.map(&:to_i)\n  (0..digits.length - 3).each do |i|\n    return true if digits[i] == digits[i + 2]\n  end\n  false\nend",
    "  n = n.to_s\n  (0..n.length - 3).each do |i|\n    return false unless n[i].to_i - n[i + 1].to_i == n[i + 1].to_i - n[i + 2].to_i\n  end\n  true\nend",
    "  n = n.to_s\n  (0..n.length-3).each do |i|\n    return false if n[i].to_i == n[i+1].to_i\n  end\n  true\nend",
    "  n = n.to_s\n  (0..n.length-3).each do |i|\n    return false unless n[i].to_i == n[i+2].to_i\n  end\n  true\nend",
    "  return false if n < 100\n  return true if n == 101",
    "  return false if n < 100\n  return true if n == 101",
    "  return false if n < 100\n  return true if n == 101"
  ]
}