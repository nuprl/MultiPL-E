{
  "name": "mbpp_623_nth_nums",
  "language": "rb",
  "prompt": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num**n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd9tc6x6l\nStarted\n.\nFinished in 0.00047058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2125.04 tests/s, 6375.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n  nums.map { |num| num ** n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc3t7nwfu\nStarted\n.\nFinished in 0.000380294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2629.54 tests/s, 7888.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}