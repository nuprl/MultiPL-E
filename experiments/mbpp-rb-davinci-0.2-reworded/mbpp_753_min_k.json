{
  "name": "mbpp_753_min_k",
  "language": "rb",
  "prompt": "# Write a function to find minimum k records from array array. https://www.geeksforgeeks.org/rbthon-find-minimum-k-records-from-array-array/ - in this case a verbatim corb of test cases\ndef min_k(test_list, k)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_k\n    candidate = method(:min_k)\n    assert_equal([[\"Akash\", 2], [\"Akshat\", 4]], candidate.call([[\"Manjeet\", 10], [\"Akshat\", 4], [\"Akash\", 2], [\"Nikhil\", 8]], 2))\n    assert_equal([[\"Akash\", 3], [\"Angat\", 5], [\"Nepin\", 9]], candidate.call([[\"Sanjeev\", 11], [\"Angat\", 5], [\"Akash\", 3], [\"Nepin\", 9]], 3))\n    assert_equal([[\"Ayesha\", 9]], candidate.call([[\"tanmay\", 14], [\"Amer\", 11], [\"Ayesha\", 9], [\"SKD\", 16]], 1))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort!\n  test_list[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0...k]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  # sort the list\n  sorted_list = test_list.sort\n  # return the first k elements\n  sorted_list[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  min_k_list = []\n  test_list.each do |i|\n    if min_k_list.length < k\n      min_k_list << i\n    else\n      min_k_list.sort!\n      if i < min_k_list[-1]\n        min_k_list[-1] = i\n      end\n    end\n  end\n  min_k_list.sort!\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  if k > test_list.length\n    return \"k is larger than the length of the list\"\n  end\n  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort!\n  test_list[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0...k]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort!\n  test_list[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0...k]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort!\n  test_list[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0...k]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort!\n  test_list[0..k-1]\nend",
    "  test_list.sort[0...k]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  return test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0...k]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort!\n  test_list[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  return test_list.sort[0..k-1]\nend",
    "  return test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  return \"k is greater than the length of the list\" if k > test_list.length\n  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0...k]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  return test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort[0..k-1]\nend"
  ]
}