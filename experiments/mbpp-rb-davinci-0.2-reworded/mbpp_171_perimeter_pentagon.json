{
  "name": "mbpp_171_perimeter_pentagon",
  "language": "rb",
  "prompt": "# Write a function to find the perimeter of a regular pentagon from the length of its sides.\ndef perimeter_pentagon(a)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_171_perimeter_pentagon.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_perimeter_pentagon\n    candidate = method(:perimeter_pentagon)\n    assert_equal(25, candidate.call(5))\n    assert_equal(50, candidate.call(10))\n    assert_equal(75, candidate.call(15))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  a * 5\nend",
    "  5 * a\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  5 * a\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  5 * a\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  5 * a\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  5 * a\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  5 * a\nend",
    "  a * 5\nend",
    "  5 * a\nend",
    "  a * 5\nend",
    "  5 * a\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  5 * a\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  5 * a\nend",
    "  a * 5\nend",
    "  5 * a\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  return a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  5 * a\nend",
    "  a * 5\nend",
    "  5 * a\nend",
    "  a * 5\nend",
    "  5 * a\nend",
    "  5 * a\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  return a * 5\nend",
    "  5 * a\nend",
    "  a * 5\nend",
    "  5 * a\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a*5\nend",
    "  a * 5\nend",
    "  5 * a\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  5 * a\nend",
    "  5 * a\nend",
    "  5 * a\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  5 * a\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  5 * a\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  5 * a\nend",
    "  5 * a\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  5 * a\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  5 * a\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  a * 5\nend",
    "  5 * a\nend"
  ]
}