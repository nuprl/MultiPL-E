{
  "name": "mbpp_558_digit_distance_nums",
  "language": "rb",
  "prompt": "# Write a rbthon function to find the sum of the per-digit difference between two integers.\ndef digit_distance_nums(n1, n2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digit_distance_nums\n    candidate = method(:digit_distance_nums)\n    assert_equal(1, candidate.call(1, 2))\n    assert_equal(6, candidate.call(23, 56))\n    assert_equal(7, candidate.call(123, 256))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  sum = 0\n  n1 = n1.to_s.split('')\n  n2 = n2.to_s.split('')\n  n1.each_with_index do |num, index|\n    sum += (num.to_i - n2[index].to_i).abs\n  end\n  sum\nend",
    "  n1 = n1.to_s.split('').map(&:to_i)\n  n2 = n2.to_s.split('').map(&:to_i)\n  sum = 0\n  n1.each_with_index do |num, index|\n    sum += (num - n2[index]).abs\n  end\n  sum\nend",
    "  n1 = n1.to_s.split('').map(&:to_i)\n  n2 = n2.to_s.split('').map(&:to_i)\n  n1.zip(n2).map { |a, b| (a - b).abs }.reduce(:+)\nend",
    "  n1 = n1.to_s.split('').map(&:to_i)\n  n2 = n2.to_s.split('').map(&:to_i)\n  n1.zip(n2).map { |a, b| (a - b).abs }.reduce(:+)\nend",
    "  n1 = n1.to_s.split('').map(&:to_i)\n  n2 = n2.to_s.split('').map(&:to_i)\n  sum = 0\n  n1.each_with_index do |num, index|\n    sum += (num - n2[index]).abs\n  end\n  sum\nend",
    "  n1_arr = n1.to_s.split('')\n  n2_arr = n2.to_s.split('')\n  sum = 0\n  n1_arr.each_with_index do |num, i|\n    sum += (num.to_i - n2_arr[i].to_i).abs\n  end\n  sum\nend",
    "  n1 = n1.to_s.split('').map(&:to_i)\n  n2 = n2.to_s.split('').map(&:to_i)\n  n1.zip(n2).map { |x, y| (x - y).abs }.sum\nend",
    "  n1 = n1.to_s.split('').map(&:to_i)\n  n2 = n2.to_s.split('').map(&:to_i)\n  sum = 0\n  n1.each_with_index do |num, i|\n    sum += (num - n2[i]).abs\n  end\n  sum\nend",
    "  n1 = n1.to_s.split('').map(&:to_i)\n  n2 = n2.to_s.split('').map(&:to_i)\n  sum = 0\n  n1.each_with_index do |num, i|\n    sum += (num - n2[i]).abs\n  end\n  sum\nend",
    "  n1 = n1.to_s.split('')\n  n2 = n2.to_s.split('')\n  sum = 0\n  n1.each_with_index do |num, index|\n    sum += (num.to_i - n2[index].to_i).abs\n  end\n  sum\nend",
    "  n1 = n1.to_s.split('').map(&:to_i)\n  n2 = n2.to_s.split('').map(&:to_i)\n  sum = 0\n  n1.each_with_index do |num, i|\n    sum += (num - n2[i]).abs\n  end\n  sum\nend",
    "  n1 = n1.to_s.split('').map(&:to_i)\n  n2 = n2.to_s.split('').map(&:to_i)\n  n1.zip(n2).map { |x, y| (x - y).abs }.sum\nend",
    "  n1 = n1.to_s.split('').map(&:to_i)\n  n2 = n2.to_s.split('').map(&:to_i)\n  n1.zip(n2).map { |a, b| (a - b).abs }.sum\nend",
    "  n1 = n1.to_s.split('').map(&:to_i)\n  n2 = n2.to_s.split('').map(&:to_i)\n  sum = 0\n  n1.each_with_index do |n, i|\n    sum += (n - n2[i]).abs\n  end\n  sum\nend",
    "  # Convert the numbers to strings\n  n1 = n1.to_s\n  n2 = n2.to_s",
    "  n1 = n1.to_s.split('').map(&:to_i)\n  n2 = n2.to_s.split('').map(&:to_i)\n  sum = 0\n  n1.each_with_index do |num, index|\n    sum += (num - n2[index]).abs\n  end\n  sum\nend",
    "  n1 = n1.to_s.split('').map(&:to_i)\n  n2 = n2.to_s.split('').map(&:to_i)\n  sum = 0\n  n1.each_with_index do |num, i|\n    sum += (num - n2[i]).abs\n  end\n  sum\nend",
    "  n1 = n1.to_s.split('')\n  n2 = n2.to_s.split('')\n  sum = 0\n  n1.each_with_index do |num, i|\n    sum += (num.to_i - n2[i].to_i).abs\n  end\n  sum\nend",
    "  n1.to_s.split('').map(&:to_i).zip(n2.to_s.split('').map(&:to_i)).map { |x, y| (x - y).abs }.sum\nend",
    "  n1 = n1.to_s.split('').map(&:to_i)\n  n2 = n2.to_s.split('').map(&:to_i)\n  sum = 0\n  n1.each_with_index do |num, i|\n    sum += (num - n2[i]).abs\n  end\n  sum\nend"
  ]
}