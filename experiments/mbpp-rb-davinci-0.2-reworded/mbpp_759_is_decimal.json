{
  "name": "mbpp_759_is_decimal",
  "language": "rb",
  "prompt": "# Write a function to check whether a given string is a decimal number with a precision of 2.\ndef is_decimal(num)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_decimal\n    candidate = method(:is_decimal)\n    assert_equal(true, candidate.call(\"123.11\"))\n    assert_equal(false, candidate.call(\"e666.86\"))\n    assert_equal(false, candidate.call(\"3.124587\"))\n    assert_equal(true, candidate.call(\"1.11\"))\n    assert_equal(false, candidate.call(\"1.1.11\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num =~ /^\\d+\\.\\d{2}$/\nend",
    "  num =~ /^\\d+\\.\\d{2}$/\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  # if num.to_f.to_s == num\n  #   return true\n  # else\n  #   return false\n  # end\n  # or\n  num.to_f.to_s == num\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num =~ /^\\d+\\.\\d{2}$/\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num =~ /^\\d*\\.\\d{2}$/\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d+(\\.\\d{1,2})?$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+(\\.\\d{1,2})?$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num =~ /^\\d*\\.\\d{2}$/\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^[0-9]+\\.[0-9]{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  # num.to_f.to_s == num\n  num.match(/\\A\\d+(\\.\\d{1,2})?\\z/)\nend",
    "  num.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d+(\\.\\d{1,2})?$/) ? true : false\nend",
    "  num.to_f.to_s == num\nend",
    "  num.match(/^\\d+(\\.\\d{1,2})?$/) ? true : false\nend",
    "  num.match?(/^\\d+\\.\\d{2}$/)\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num =~ /^\\d+\\.\\d{2}$/\nend",
    "  num =~ /^\\d+(\\.\\d{1,2})?$/\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num =~ /^\\d+\\.\\d{2}$/\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num =~ /^\\d+\\.\\d{2}$/ ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_f.to_s == num\nend",
    "  num.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  if num.to_f.to_s == num\n    return true\n  else\n    return false\n  end\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_f.to_s == num\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  return num.match(/^\\d*\\.\\d{2}$/)\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_f.to_s == num\nend",
    "  num.to_s.match(/^[0-9]*\\.[0-9]{2}$/) ? true : false\nend",
    "  num.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/\\A\\d+\\.\\d{2}\\z/) ? true : false\nend",
    "  num.to_f.to_s == num\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+(\\.\\d{1,2})?$/) ? true : false\nend",
    "  num =~ /^\\d+\\.\\d{2}$/\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/\\A\\d+\\.\\d{2}\\z/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.?\\d{0,2}$/) ? true : false\nend",
    "  num.to_f.to_s == num\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d*\\.\\d{2}$/)\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num =~ /^\\d+\\.\\d{2}$/\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num =~ /^\\d+\\.\\d{2}$/\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num =~ /^\\d+\\.\\d{2}$/\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  # num.match(/^\\d+\\.\\d{2}$/)\n  num.match(/^\\d+\\.\\d{2}$/)\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*(\\.\\d{1,2})?$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  return true if num =~ /^\\d+\\.\\d{2}$/\n  false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num =~ /^\\d*\\.\\d{2}$/\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_i.to_s == num || num.to_f.to_s == num\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/)\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d+(\\.\\d{1,2})?$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  return num.match(/^\\d+\\.\\d{2}$/)\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_f.to_s == num\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  if num.match(/^\\d+\\.\\d{2}$/)\n    return true\n  else\n    return false\n  end\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num =~ /^\\d+\\.\\d{2}$/\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num =~ /^[0-9]+(\\.[0-9]{1,2})?$/\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_f.to_s == num\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num =~ /^\\d+\\.\\d{2}$/ ? true : false\nend",
    "  num.to_s.match(/\\A[+-]?\\d+\\.\\d{2}\\z/) ? true : false\nend",
    "  num =~ /^\\d+\\.\\d{2}$/\nend",
    "  return true if num.match(/^\\d+\\.\\d{2}$/)\n  false\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/)\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.to_s =~ /^\\d+\\.\\d{2}$/\nend",
    "  num.to_s.match(/^\\d*\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+(\\.\\d{1,2})?$/) ? true : false\nend",
    "  num.match?(/^\\d*\\.\\d{2}$/)\nend",
    "  num =~ /^\\d*\\.\\d{2}$/\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^\\d+\\.\\d{2}$/) ? true : false\nend",
    "  num.match(/^[0-9]*\\.[0-9]{2}$/) ? true : false\nend"
  ]
}