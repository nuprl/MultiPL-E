{
  "name": "mbpp_754_extract_index_list",
  "language": "rb",
  "prompt": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptn_tst2b\nStarted\n.\nFinished in 0.00040935 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.90 tests/s, 9771.59 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5pji5ohv\nStarted\n.\nFinished in 0.000416489 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2401.02 tests/s, 9604.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8qdwohr9\nStarted\n.\nFinished in 0.000404459 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2472.44 tests/s, 9889.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  # TODO: return an array of index where the elements are common\n  common_index = []\n  l1.each_with_index do |element, index|\n    if element == l2[index] && element == l3[index]\n      common_index << index\n    end\n  end\n  common_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmpq2k3gux1\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmpq2k3gux1.rb:16:in `test_extract_index_list'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_extract_index_list\n     15:     candidate = method(:extract_index_list)\n  => 16:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     17:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     18:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     19:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[1, 6]>\n\ndiff:\n? [1, 7]\n?     6 \n?     ? \n===============================================================================\n\nFinished in 0.009112913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n109.73 tests/s, 109.73 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8qdwohr9\nStarted\n.\nFinished in 0.000404459 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2472.44 tests/s, 9889.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.select { |e, i| l2[i] == e && l3[i] == e }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6zu39m3g\nStarted\n.\nFinished in 0.000606893 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1647.74 tests/s, 6590.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmp8o7z5y7m\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp8o7z5y7m.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007216512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.57 tests/s, 138.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmp8o7z5y7m\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp8o7z5y7m.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007216512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.57 tests/s, 138.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| x if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpubg6hh0u\nStarted\n.\nFinished in 0.000406677 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2458.95 tests/s, 9835.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y66wpwz\nStarted\n.\nFinished in 0.000396807 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2520.12 tests/s, 10080.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmp8o7z5y7m\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp8o7z5y7m.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007216512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.57 tests/s, 138.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| x if x == y && x == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpslp72l3k\nStarted\n.\nFinished in 0.000401072 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2493.32 tests/s, 9973.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x if x.uniq.length == 1 }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmphmf1im8s\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmphmf1im8s.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.009434034 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n106.00 tests/s, 106.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  # TODO: return an array of common elements\n  result = []\n  l1.each_with_index do |element, index|\n    if element == l2[index] && element == l3[index]\n      result << element\n    end\n  end\n  return result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpo0yevnyk\nStarted\n.\nFinished in 0.000400568 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.46 tests/s, 9985.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmp8o7z5y7m\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp8o7z5y7m.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007216512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.57 tests/s, 138.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |a, b, c| [a, b, c] if a == b && b == c }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmpxbr8lez6\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmpxbr8lez6.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.00929718 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.56 tests/s, 107.56 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  # TODO: return an array of all indexes where the elements are the same\n  result = []\n  l1.each_with_index do |element, index|\n    result << index if element == l2[index] && element == l3[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmpw2x8cyla\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmpw2x8cyla.rb:14:in `test_extract_index_list'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_extract_index_list\n     13:     candidate = method(:extract_index_list)\n  => 14:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     15:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     16:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     17:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[1, 6]>\n\ndiff:\n? [1, 7]\n?     6 \n?     ? \n===============================================================================\n\nFinished in 0.00862884 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.89 tests/s, 115.89 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmp8o7z5y7m\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp8o7z5y7m.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007216512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.57 tests/s, 138.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8qdwohr9\nStarted\n.\nFinished in 0.000404459 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2472.44 tests/s, 9889.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e if e.uniq.size == 1 }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmpn_9rcjx7\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmpn_9rcjx7.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.00926698 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.91 tests/s, 107.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |a, b, c| a if a == b && b == c }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkkqw8jua\nStarted\n.\nFinished in 0.000414986 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2409.72 tests/s, 9638.88 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.map { |e, i| [e, i] if l2[i] == e && l3[i] == e }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "Loaded suite /tmp/tmpkdme4ivt\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmpkdme4ivt.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1], [7, 6]]>\n\ndiff:\n? [[1, 1], [7, 6]]\n===============================================================================\n\nFinished in 0.015032979 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n66.52 tests/s, 66.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw9u2dka2\nStarted\n.\nFinished in 0.000509042 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1964.47 tests/s, 7857.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8qdwohr9\nStarted\n.\nFinished in 0.000404459 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2472.44 tests/s, 9889.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5pji5ohv\nStarted\n.\nFinished in 0.000416489 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2401.02 tests/s, 9604.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e.uniq[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu6yfxgxo\nStarted\n.\nFinished in 0.000447535 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2234.46 tests/s, 8937.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4k295hth\nStarted\n.\nFinished in 0.000442395 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2260.42 tests/s, 9041.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5pji5ohv\nStarted\n.\nFinished in 0.000416489 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2401.02 tests/s, 9604.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  common_elements = []\n  l1.each_with_index do |element, index|\n    if element == l2[index] && element == l3[index]\n      common_elements << element\n    end\n  end\n  common_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpctetpwum\nStarted\n.\nFinished in 0.000464284 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2153.85 tests/s, 8615.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x[0] if x[0] == x[1] && x[1] == x[2] }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0czo840f\nStarted\n.\nFinished in 0.00042089 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2375.92 tests/s, 9503.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x.uniq[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2xpd3vse\nStarted\n.\nFinished in 0.000412688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2423.14 tests/s, 9692.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmp8o7z5y7m\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp8o7z5y7m.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007216512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.57 tests/s, 138.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| x if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpubg6hh0u\nStarted\n.\nFinished in 0.000406677 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2458.95 tests/s, 9835.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  # Write your code here\n  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x.uniq[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkdez66oj\nStarted\n.\nFinished in 0.00042531 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2351.23 tests/s, 9404.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmp8o7z5y7m\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp8o7z5y7m.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007216512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.57 tests/s, 138.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y66wpwz\nStarted\n.\nFinished in 0.000396807 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2520.12 tests/s, 10080.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |a, b, c| [a, b, c] if a == b && b == c }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmpxbr8lez6\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmpxbr8lez6.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.00929718 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.56 tests/s, 107.56 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5pji5ohv\nStarted\n.\nFinished in 0.000416489 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2401.02 tests/s, 9604.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| x if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpubg6hh0u\nStarted\n.\nFinished in 0.000406677 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2458.95 tests/s, 9835.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map(&:uniq).select { |e| e.size == 1 }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpambqfys1\nStarted\n.\nFinished in 0.000424956 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2353.18 tests/s, 9412.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmp8o7z5y7m\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp8o7z5y7m.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007216512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.57 tests/s, 138.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5pji5ohv\nStarted\n.\nFinished in 0.000416489 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2401.02 tests/s, 9604.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5pji5ohv\nStarted\n.\nFinished in 0.000416489 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2401.02 tests/s, 9604.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.select { |x, i| l2[i] == x && l3[i] == x }.map { |x, i| i }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "Loaded suite /tmp/tmpzovv3ad8\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmpzovv3ad8.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[1, 6]>\n\ndiff:\n? [1, 7]\n?     6 \n?     ? \n===============================================================================\n\nFinished in 0.009478118 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n105.51 tests/s, 105.51 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.select { |e, i| l2[i] == e && l3[i] == e }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6zu39m3g\nStarted\n.\nFinished in 0.000606893 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1647.74 tests/s, 6590.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptn_tst2b\nStarted\n.\nFinished in 0.00040935 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.90 tests/s, 9771.59 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdkq8qzti\nStarted\n.\nFinished in 0.000448388 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2230.21 tests/s, 8920.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw9u2dka2\nStarted\n.\nFinished in 0.000509042 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1964.47 tests/s, 7857.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptn_tst2b\nStarted\n.\nFinished in 0.00040935 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.90 tests/s, 9771.59 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.select { |_, index| l2[index] == l3[index] }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "Loaded suite /tmp/tmphzr4zrli\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmphzr4zrli.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[1, 1, 3, 4, 5, 6, 7]>\n\ndiff:\n? [1, 1, 3, 4, 5, 6, 7]\n===============================================================================\n\nFinished in 0.009476128 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n105.53 tests/s, 105.53 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.select { |e, i| l2[i] == e && l3[i] == e }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6zu39m3g\nStarted\n.\nFinished in 0.000606893 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1647.74 tests/s, 6590.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  result = []\n  l1.each_with_index do |e, i|\n    result << i if l2[i] == e && l3[i] == e\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "Loaded suite /tmp/tmpkxvrgdld\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmpkxvrgdld.rb:13:in `test_extract_index_list'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_extract_index_list\n     12:     candidate = method(:extract_index_list)\n  => 13:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     14:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     15:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     16:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[1, 6]>\n\ndiff:\n? [1, 7]\n?     6 \n?     ? \n===============================================================================\n\nFinished in 0.008644681 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.68 tests/s, 115.68 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "Loaded suite /tmp/tmp83f29arv\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp83f29arv.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 0, 0], [1, 1, 1], [3, 2, 2], [4, 3, 3], [5, 4, 4], [6, 5, 5], [7, 7, 7]]>\n\ndiff:\n? [[1, 0, 0], [1, 1, 1], [3, 2, 2], [4, 3, 3], [5, 4, 4], [6, 5, 5], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.012642909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n79.10 tests/s, 79.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmp8o7z5y7m\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp8o7z5y7m.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007216512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.57 tests/s, 138.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |a, b, c| [a, b, c] if a == b && b == c }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmpxbr8lez6\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmpxbr8lez6.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.00929718 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.56 tests/s, 107.56 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.map do |item, index|\n    [item, l2[index], l3[index]]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "Loaded suite /tmp/tmp99wlm9lb\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp99wlm9lb.rb:11:in `test_extract_index_list'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_extract_index_list\n     10:     candidate = method(:extract_index_list)\n  => 11:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     13:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     14:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 0, 0], [1, 1, 1], [3, 2, 2], [4, 3, 3], [5, 4, 4], [6, 5, 5], [7, 7, 7]]>\n\ndiff:\n? [[1, 0, 0], [1, 1, 1], [3, 2, 2], [4, 3, 3], [5, 4, 4], [6, 5, 5], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.012899373 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n77.52 tests/s, 77.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.select { |e, i| l2[i] == e && l3[i] == e }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6zu39m3g\nStarted\n.\nFinished in 0.000606893 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1647.74 tests/s, 6590.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5pji5ohv\nStarted\n.\nFinished in 0.000416489 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2401.02 tests/s, 9604.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8qdwohr9\nStarted\n.\nFinished in 0.000404459 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2472.44 tests/s, 9889.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |a, b, c| [a, b, c] if a == b && b == c }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmpxbr8lez6\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmpxbr8lez6.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.00929718 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.56 tests/s, 107.56 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.select { |e, i| l2[i] == e && l3[i] == e }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6zu39m3g\nStarted\n.\nFinished in 0.000606893 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1647.74 tests/s, 6590.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmp8o7z5y7m\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp8o7z5y7m.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007216512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.57 tests/s, 138.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map{|x, y, z| [x, y, z] if x == y && y == z}.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "Loaded suite /tmp/tmp874p8yis\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp874p8yis.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.009476523 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n105.52 tests/s, 105.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e[0] if e[0] == e[1] && e[1] == e[2] }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6qprhf_\nStarted\n.\nFinished in 0.000424213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2357.31 tests/s, 9429.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| x if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpubg6hh0u\nStarted\n.\nFinished in 0.000406677 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2458.95 tests/s, 9835.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x.uniq[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2xpd3vse\nStarted\n.\nFinished in 0.000412688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2423.14 tests/s, 9692.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8qdwohr9\nStarted\n.\nFinished in 0.000404459 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2472.44 tests/s, 9889.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.select { |_, i| l1[i] == l2[i] && l1[i] == l3[i] }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvnf2d0_p\nStarted\n.\nFinished in 0.00043463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2300.81 tests/s, 9203.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmp8o7z5y7m\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp8o7z5y7m.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007216512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.57 tests/s, 138.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmp8o7z5y7m\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp8o7z5y7m.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007216512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.57 tests/s, 138.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y66wpwz\nStarted\n.\nFinished in 0.000396807 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2520.12 tests/s, 10080.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| x if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpubg6hh0u\nStarted\n.\nFinished in 0.000406677 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2458.95 tests/s, 9835.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e if e.uniq.length == 1 }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "Loaded suite /tmp/tmp4s8tblje\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp4s8tblje.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.00922519 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n108.40 tests/s, 108.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "Loaded suite /tmp/tmp83f29arv\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp83f29arv.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 0, 0], [1, 1, 1], [3, 2, 2], [4, 3, 3], [5, 4, 4], [6, 5, 5], [7, 7, 7]]>\n\ndiff:\n? [[1, 0, 0], [1, 1, 1], [3, 2, 2], [4, 3, 3], [5, 4, 4], [6, 5, 5], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.012642909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n79.10 tests/s, 79.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmp8o7z5y7m\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp8o7z5y7m.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007216512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.57 tests/s, 138.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptn_tst2b\nStarted\n.\nFinished in 0.00040935 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.90 tests/s, 9771.59 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e[0] if e[0] == e[1] && e[1] == e[2] }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6qprhf_\nStarted\n.\nFinished in 0.000424213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2357.31 tests/s, 9429.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8qdwohr9\nStarted\n.\nFinished in 0.000404459 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2472.44 tests/s, 9889.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwt8ozlna\nStarted\n.\nFinished in 0.000814781 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1227.32 tests/s, 4909.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmp8o7z5y7m\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp8o7z5y7m.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007216512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.57 tests/s, 138.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5pji5ohv\nStarted\n.\nFinished in 0.000416489 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2401.02 tests/s, 9604.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdkq8qzti\nStarted\n.\nFinished in 0.000448388 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2230.21 tests/s, 8920.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  # TODO: return an array of index where the elements are common\n  result = []\n  l1.each_with_index do |element, index|\n    if element == l2[index] && element == l3[index]\n      result << index\n    end\n  end\n  return result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "Loaded suite /tmp/tmpizglurms\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmpizglurms.rb:16:in `test_extract_index_list'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_extract_index_list\n     15:     candidate = method(:extract_index_list)\n  => 16:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     17:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     18:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     19:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[1, 6]>\n\ndiff:\n? [1, 7]\n?     6 \n?     ? \n===============================================================================\n\nFinished in 0.008660514 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.47 tests/s, 115.47 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw9u2dka2\nStarted\n.\nFinished in 0.000509042 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1964.47 tests/s, 7857.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.select { |e, i| l2[i] == e && l3[i] == e }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6zu39m3g\nStarted\n.\nFinished in 0.000606893 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1647.74 tests/s, 6590.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y66wpwz\nStarted\n.\nFinished in 0.000396807 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2520.12 tests/s, 10080.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && x == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "Loaded suite /tmp/tmpb7ttnyfp\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmpb7ttnyfp.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.008991318 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n111.22 tests/s, 111.22 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw9u2dka2\nStarted\n.\nFinished in 0.000509042 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1964.47 tests/s, 7857.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5pji5ohv\nStarted\n.\nFinished in 0.000416489 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2401.02 tests/s, 9604.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.select { |e, i| l2[i] == e && l3[i] == e }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6zu39m3g\nStarted\n.\nFinished in 0.000606893 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1647.74 tests/s, 6590.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |a, b, c| a == b && b == c ? a : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx1vac_mk\nStarted\n.\nFinished in 0.000709941 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1408.57 tests/s, 5634.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmp8o7z5y7m\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp8o7z5y7m.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007216512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.57 tests/s, 138.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5pji5ohv\nStarted\n.\nFinished in 0.000416489 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2401.02 tests/s, 9604.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8qdwohr9\nStarted\n.\nFinished in 0.000404459 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2472.44 tests/s, 9889.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.select { |e, i| e == l2[i] && e == l3[i] }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppan57ioi\nStarted\n.\nFinished in 0.00045237 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2210.58 tests/s, 8842.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.select { |e, i| l2[i] == e && l3[i] == e }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6zu39m3g\nStarted\n.\nFinished in 0.000606893 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1647.74 tests/s, 6590.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5pji5ohv\nStarted\n.\nFinished in 0.000416489 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2401.02 tests/s, 9604.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| x if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpubg6hh0u\nStarted\n.\nFinished in 0.000406677 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2458.95 tests/s, 9835.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.select { |e, i| l2[i] == e && l3[i] == e }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6zu39m3g\nStarted\n.\nFinished in 0.000606893 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1647.74 tests/s, 6590.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.select { |e, i| l2[i] == e && l3[i] == e }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6zu39m3g\nStarted\n.\nFinished in 0.000606893 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1647.74 tests/s, 6590.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.select { |e, i| l2[i] == e && l3[i] == e }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6zu39m3g\nStarted\n.\nFinished in 0.000606893 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1647.74 tests/s, 6590.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmp8o7z5y7m\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp8o7z5y7m.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007216512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.57 tests/s, 138.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmp8o7z5y7m\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp8o7z5y7m.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007216512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.57 tests/s, 138.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |a, b, c| [a, b, c] if a == b && b == c }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmpxbr8lez6\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmpxbr8lez6.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.00929718 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.56 tests/s, 107.56 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwt8ozlna\nStarted\n.\nFinished in 0.000814781 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1227.32 tests/s, 4909.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8qdwohr9\nStarted\n.\nFinished in 0.000404459 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2472.44 tests/s, 9889.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e if e.uniq.size == 1 }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmpn_9rcjx7\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmpn_9rcjx7.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.00926698 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.91 tests/s, 107.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x.uniq[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2xpd3vse\nStarted\n.\nFinished in 0.000412688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2423.14 tests/s, 9692.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptn_tst2b\nStarted\n.\nFinished in 0.00040935 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.90 tests/s, 9771.59 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmp8o7z5y7m\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp8o7z5y7m.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007216512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.57 tests/s, 138.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map.with_index { |x, i| x if x.uniq.length == 1 }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123097,
      "stdout": "Loaded suite /tmp/tmp1kg6bf4v\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp1kg6bf4v.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007502498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.29 tests/s, 133.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e if e.uniq.length == 1 }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "Loaded suite /tmp/tmp4s8tblje\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp4s8tblje.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.00922519 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n108.40 tests/s, 108.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw9u2dka2\nStarted\n.\nFinished in 0.000509042 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1964.47 tests/s, 7857.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  result = []\n  l1.each_with_index do |element, index|\n    result << index if element == l2[index] && element == l3[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123097,
      "stdout": "Loaded suite /tmp/tmpu52anpea\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmpu52anpea.rb:13:in `test_extract_index_list'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_extract_index_list\n     12:     candidate = method(:extract_index_list)\n  => 13:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     14:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     15:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     16:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[1, 6]>\n\ndiff:\n? [1, 7]\n?     6 \n?     ? \n===============================================================================\n\nFinished in 0.009984121 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n100.16 tests/s, 100.16 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmp8o7z5y7m\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp8o7z5y7m.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007216512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.57 tests/s, 138.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  common_elements = []\n  l1.each_with_index do |element, index|\n    common_elements << element if l2[index] == element && l3[index] == element\n  end\n  common_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcs0zxsiz\nStarted\n.\nFinished in 0.000463142 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2159.17 tests/s, 8636.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  result = []\n  l1.each_with_index do |elem, index|\n    result << index if l2[index] == elem && l3[index] == elem\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123097,
      "stdout": "Loaded suite /tmp/tmpq1_nj_ge\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmpq1_nj_ge.rb:13:in `test_extract_index_list'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_extract_index_list\n     12:     candidate = method(:extract_index_list)\n  => 13:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     14:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     15:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     16:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[1, 6]>\n\ndiff:\n? [1, 7]\n?     6 \n?     ? \n===============================================================================\n\nFinished in 0.007404284 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n135.06 tests/s, 135.06 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x.uniq[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2xpd3vse\nStarted\n.\nFinished in 0.000412688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2423.14 tests/s, 9692.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5pji5ohv\nStarted\n.\nFinished in 0.000416489 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2401.02 tests/s, 9604.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.select do |e, i|\n    e == l2[i] && e == l3[i]\n  end.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpaw31nwj9\nStarted\n.\nFinished in 0.000497031 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2011.95 tests/s, 8047.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |a, b, c| [a, b, c] if a == b && b == c }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmpxbr8lez6\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmpxbr8lez6.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.00929718 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.56 tests/s, 107.56 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x.uniq.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9w05up3c\nStarted\n.\nFinished in 0.000462469 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2162.31 tests/s, 8649.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4k295hth\nStarted\n.\nFinished in 0.000442395 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2260.42 tests/s, 9041.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.select { |e, i| e == l2[i] && e == l3[i] }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppan57ioi\nStarted\n.\nFinished in 0.00045237 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2210.58 tests/s, 8842.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5pji5ohv\nStarted\n.\nFinished in 0.000416489 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2401.02 tests/s, 9604.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.select { |e, i| e == l2[i] && e == l3[i] }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppan57ioi\nStarted\n.\nFinished in 0.00045237 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2210.58 tests/s, 8842.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| x if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpubg6hh0u\nStarted\n.\nFinished in 0.000406677 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2458.95 tests/s, 9835.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  result = []\n  l1.each_with_index do |item, index|\n    result << index if l2[index] == item && l3[index] == item\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123097,
      "stdout": "Loaded suite /tmp/tmp67cymdyk\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp67cymdyk.rb:13:in `test_extract_index_list'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_extract_index_list\n     12:     candidate = method(:extract_index_list)\n  => 13:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     14:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     15:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     16:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[1, 6]>\n\ndiff:\n? [1, 7]\n?     6 \n?     ? \n===============================================================================\n\nFinished in 0.007590503 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.74 tests/s, 131.74 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  result = []\n  l1.each_with_index do |item, index|\n    result << index if item == l2[index] && item == l3[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123097,
      "stdout": "Loaded suite /tmp/tmpimmiol3v\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmpimmiol3v.rb:13:in `test_extract_index_list'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_extract_index_list\n     12:     candidate = method(:extract_index_list)\n  => 13:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     14:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     15:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     16:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[1, 6]>\n\ndiff:\n? [1, 7]\n?     6 \n?     ? \n===============================================================================\n\nFinished in 0.008307277 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n120.38 tests/s, 120.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "Loaded suite /tmp/tmp83f29arv\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp83f29arv.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 0, 0], [1, 1, 1], [3, 2, 2], [4, 3, 3], [5, 4, 4], [6, 5, 5], [7, 7, 7]]>\n\ndiff:\n? [[1, 0, 0], [1, 1, 1], [3, 2, 2], [4, 3, 3], [5, 4, 4], [6, 5, 5], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.012642909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n79.10 tests/s, 79.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |a, b, c| a if a == b && b == c }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkkqw8jua\nStarted\n.\nFinished in 0.000414986 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2409.72 tests/s, 9638.88 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4k295hth\nStarted\n.\nFinished in 0.000442395 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2260.42 tests/s, 9041.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "Loaded suite /tmp/tmp83f29arv\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp83f29arv.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 0, 0], [1, 1, 1], [3, 2, 2], [4, 3, 3], [5, 4, 4], [6, 5, 5], [7, 7, 7]]>\n\ndiff:\n? [[1, 0, 0], [1, 1, 1], [3, 2, 2], [4, 3, 3], [5, 4, 4], [6, 5, 5], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.012642909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n79.10 tests/s, 79.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x.uniq[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2xpd3vse\nStarted\n.\nFinished in 0.000412688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2423.14 tests/s, 9692.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.select { |e, i| e == l2[i] && e == l3[i] }.map { |e, i| i }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123097,
      "stdout": "Loaded suite /tmp/tmpld0s9rlu\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmpld0s9rlu.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[1, 6]>\n\ndiff:\n? [1, 7]\n?     6 \n?     ? \n===============================================================================\n\nFinished in 0.007695418 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.95 tests/s, 129.95 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "Loaded suite /tmp/tmp83f29arv\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp83f29arv.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 0, 0], [1, 1, 1], [3, 2, 2], [4, 3, 3], [5, 4, 4], [6, 5, 5], [7, 7, 7]]>\n\ndiff:\n? [[1, 0, 0], [1, 1, 1], [3, 2, 2], [4, 3, 3], [5, 4, 4], [6, 5, 5], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.012642909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n79.10 tests/s, 79.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8qdwohr9\nStarted\n.\nFinished in 0.000404459 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2472.44 tests/s, 9889.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmp8o7z5y7m\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp8o7z5y7m.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007216512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.57 tests/s, 138.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptn_tst2b\nStarted\n.\nFinished in 0.00040935 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.90 tests/s, 9771.59 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  common_elements = []\n  l1.each_with_index do |element, index|\n    if element == l2[index] && element == l3[index]\n      common_elements << element\n    end\n  end\n  common_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpctetpwum\nStarted\n.\nFinished in 0.000464284 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2153.85 tests/s, 8615.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "Loaded suite /tmp/tmp83f29arv\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp83f29arv.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 0, 0], [1, 1, 1], [3, 2, 2], [4, 3, 3], [5, 4, 4], [6, 5, 5], [7, 7, 7]]>\n\ndiff:\n? [[1, 0, 0], [1, 1, 1], [3, 2, 2], [4, 3, 3], [5, 4, 4], [6, 5, 5], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.012642909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n79.10 tests/s, 79.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.select { |e, i| l2[i] == e && l3[i] == e }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6zu39m3g\nStarted\n.\nFinished in 0.000606893 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1647.74 tests/s, 6590.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x[0] if x[0] == x[1] && x[1] == x[2] }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0czo840f\nStarted\n.\nFinished in 0.00042089 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2375.92 tests/s, 9503.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4k295hth\nStarted\n.\nFinished in 0.000442395 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2260.42 tests/s, 9041.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmp8o7z5y7m\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp8o7z5y7m.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007216512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.57 tests/s, 138.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  result = []\n  l1.each_with_index do |e, i|\n    if l2[i] == e && l3[i] == e\n      result << e\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphl3wbv63\nStarted\n.\nFinished in 0.000478129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2091.49 tests/s, 8365.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e if e.uniq.size == 1 }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmpn_9rcjx7\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmpn_9rcjx7.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.00926698 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.91 tests/s, 107.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5pji5ohv\nStarted\n.\nFinished in 0.000416489 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2401.02 tests/s, 9604.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.select { |e, i| e == l2[i] && e == l3[i] }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppan57ioi\nStarted\n.\nFinished in 0.00045237 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2210.58 tests/s, 8842.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptn_tst2b\nStarted\n.\nFinished in 0.00040935 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.90 tests/s, 9771.59 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8qdwohr9\nStarted\n.\nFinished in 0.000404459 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2472.44 tests/s, 9889.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5pji5ohv\nStarted\n.\nFinished in 0.000416489 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2401.02 tests/s, 9604.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.select { |_, i| l2[i] == l3[i] }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123097,
      "stdout": "Loaded suite /tmp/tmpxju4y44l\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmpxju4y44l.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[1, 1, 3, 4, 5, 6, 7]>\n\ndiff:\n? [1, 1, 3, 4, 5, 6, 7]\n===============================================================================\n\nFinished in 0.007554446 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.37 tests/s, 132.37 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmp8o7z5y7m\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp8o7z5y7m.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007216512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.57 tests/s, 138.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8qdwohr9\nStarted\n.\nFinished in 0.000404459 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2472.44 tests/s, 9889.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  result = []\n  l1.each_with_index do |e1, i|\n    if l2[i] == e1 && l3[i] == e1\n      result << e1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp68ecsocv\nStarted\n.\nFinished in 0.000572876 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1745.58 tests/s, 6982.31 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  # TODO: return a list of indexes where the elements are common\n  index_list = []\n  l1.each_with_index do |element, index|\n    if element == l2[index] && element == l3[index]\n      index_list << index\n    end\n  end\n  index_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123097,
      "stdout": "Loaded suite /tmp/tmprgm53kma\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmprgm53kma.rb:16:in `test_extract_index_list'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_extract_index_list\n     15:     candidate = method(:extract_index_list)\n  => 16:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     17:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     18:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     19:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[1, 6]>\n\ndiff:\n? [1, 7]\n?     6 \n?     ? \n===============================================================================\n\nFinished in 0.007067395 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.49 tests/s, 141.49 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmp8o7z5y7m\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp8o7z5y7m.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007216512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.57 tests/s, 138.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e[0] if e[0] == e[1] && e[1] == e[2] }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa6qprhf_\nStarted\n.\nFinished in 0.000424213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2357.31 tests/s, 9429.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y66wpwz\nStarted\n.\nFinished in 0.000396807 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2520.12 tests/s, 10080.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.select { |e, i| e == l2[i] && e == l3[i] }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppan57ioi\nStarted\n.\nFinished in 0.00045237 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2210.58 tests/s, 8842.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x if x.uniq.size == 1 }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123097,
      "stdout": "Loaded suite /tmp/tmp_mcsqywf\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp_mcsqywf.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.010484197 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n95.38 tests/s, 95.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x.uniq[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1pugdgt1\nStarted\n.\nFinished in 0.000407157 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2456.06 tests/s, 9824.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.select { |e, i| l2[i] == e && l3[i] == e }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6zu39m3g\nStarted\n.\nFinished in 0.000606893 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1647.74 tests/s, 6590.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  # TODO: return an array of common elements\n  result = []\n  l1.each_with_index do |element, index|\n    if element == l2[index] && element == l3[index]\n      result << element\n    end\n  end\n  return result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpo0yevnyk\nStarted\n.\nFinished in 0.000400568 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.46 tests/s, 9985.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.select{|x, i| x == l2[i] && x == l3[i]}.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4rwrh47v\nStarted\n.\nFinished in 0.000488426 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2047.39 tests/s, 8189.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw9u2dka2\nStarted\n.\nFinished in 0.000509042 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1964.47 tests/s, 7857.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4k295hth\nStarted\n.\nFinished in 0.000442395 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2260.42 tests/s, 9041.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x if x.uniq.length == 1 }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmphmf1im8s\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmphmf1im8s.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.009434034 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n106.00 tests/s, 106.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map.with_index { |x, i| x if x.uniq.size == 1 }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123097,
      "stdout": "Loaded suite /tmp/tmpr0a6u5oz\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmpr0a6u5oz.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007501281 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.31 tests/s, 133.31 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.select { |e, i| l2[i] == e && l3[i] == e }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6zu39m3g\nStarted\n.\nFinished in 0.000606893 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1647.74 tests/s, 6590.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmp8o7z5y7m\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp8o7z5y7m.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007216512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.57 tests/s, 138.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw9u2dka2\nStarted\n.\nFinished in 0.000509042 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1964.47 tests/s, 7857.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x[0] if x[0] == x[1] && x[0] == x[2] }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfidkh8b\nStarted\n.\nFinished in 0.000490409 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2039.11 tests/s, 8156.46 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmp8o7z5y7m\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp8o7z5y7m.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007216512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.57 tests/s, 138.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4k295hth\nStarted\n.\nFinished in 0.000442395 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2260.42 tests/s, 9041.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |a, b, c| [a, b, c] if a == b && b == c }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmpxbr8lez6\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmpxbr8lez6.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.00929718 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.56 tests/s, 107.56 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.select { |e, i| e == l2[i] && e == l3[i] }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppan57ioi\nStarted\n.\nFinished in 0.00045237 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2210.58 tests/s, 8842.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.select do |e, i|\n    l2[i] == e && l3[i] == e\n  end.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3d_t2q8i\nStarted\n.\nFinished in 0.000495 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2020.20 tests/s, 8080.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y66wpwz\nStarted\n.\nFinished in 0.000396807 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2520.12 tests/s, 10080.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4k295hth\nStarted\n.\nFinished in 0.000442395 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2260.42 tests/s, 9041.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map.with_index { |e, i| e if e.uniq.size == 1 }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123097,
      "stdout": "Loaded suite /tmp/tmpjvyrxmff\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmpjvyrxmff.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.00751394 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.09 tests/s, 133.09 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4k295hth\nStarted\n.\nFinished in 0.000442395 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2260.42 tests/s, 9041.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_with_index.map { |e, i| e if l2[i] == e && l3[i] == e }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps44lwwxu\nStarted\n.\nFinished in 0.000472982 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2114.25 tests/s, 8456.98 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5pji5ohv\nStarted\n.\nFinished in 0.000416489 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2401.02 tests/s, 9604.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map {|x| x.uniq.size == 1 ? x.first : nil}.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3yi9f8x1\nStarted\n.\nFinished in 0.000403498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2478.33 tests/s, 9913.31 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  # TODO: return an array of common elements\n  common_elements = []\n  l1.each_with_index do |element, index|\n    if element == l2[index] && element == l3[index]\n      common_elements << element\n    end\n  end\n  common_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpoz9us9il\nStarted\n.\nFinished in 0.000419331 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2384.75 tests/s, 9539.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| x if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpubg6hh0u\nStarted\n.\nFinished in 0.000406677 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2458.95 tests/s, 9835.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5pji5ohv\nStarted\n.\nFinished in 0.000416489 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2401.02 tests/s, 9604.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  # TODO: return an array of common elements\n  result = []\n  l1.each_with_index do |element, index|\n    if element == l2[index] && element == l3[index]\n      result << element\n    end\n  end\n  return result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpo0yevnyk\nStarted\n.\nFinished in 0.000400568 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.46 tests/s, 9985.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map.with_index { |x, i| x if x.uniq.size == 1 }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123097,
      "stdout": "Loaded suite /tmp/tmpr0a6u5oz\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmpr0a6u5oz.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007501281 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.31 tests/s, 133.31 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.each_index.select { |i| l1[i] == l2[i] && l2[i] == l3[i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123097,
      "stdout": "Loaded suite /tmp/tmpr9juiq2y\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmpr9juiq2y.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[1, 6]>\n\ndiff:\n? [1, 7]\n?     6 \n?     ? \n===============================================================================\n\nFinished in 0.00612574 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n163.25 tests/s, 163.25 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmp8o7z5y7m\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp8o7z5y7m.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007216512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.57 tests/s, 138.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdkq8qzti\nStarted\n.\nFinished in 0.000448388 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2230.21 tests/s, 8920.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x[0] if x[0] == x[1] && x[1] == x[2] }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0czo840f\nStarted\n.\nFinished in 0.00042089 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2375.92 tests/s, 9503.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptn_tst2b\nStarted\n.\nFinished in 0.00040935 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.90 tests/s, 9771.59 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e.uniq[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu6yfxgxo\nStarted\n.\nFinished in 0.000447535 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2234.46 tests/s, 8937.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "Loaded suite /tmp/tmp8o7z5y7m\nStarted\nF\n===============================================================================\nFailure: test_extract_index_list(TestHumanEval)\n/tmp/tmp8o7z5y7m.rb:9:in `test_extract_index_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_extract_index_list\n      8:     candidate = method(:extract_index_list)\n  =>  9:     assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     10:     assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n     11:     assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n     12:     assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n<[1, 7]> expected but was\n<[[1, 1, 1], [7, 7, 7]]>\n\ndiff:\n? [[1, 1, 1], [7, 7, 7]]\n===============================================================================\n\nFinished in 0.007216512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.57 tests/s, 138.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x.first : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y66wpwz\nStarted\n.\nFinished in 0.000396807 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2520.12 tests/s, 10080.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e[0] : nil }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptn_tst2b\nStarted\n.\nFinished in 0.00040935 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.90 tests/s, 9771.59 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}