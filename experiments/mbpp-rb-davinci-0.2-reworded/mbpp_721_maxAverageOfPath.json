{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "rb",
  "prompt": "# Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\ndef maxAverageOfPath(cost)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maxAverageOfPath\n    candidate = method(:maxAverageOfPath)\n    assert_equal(5.2, candidate.call([[1, 2, 3], [6, 5, 4], [7, 3, 9]]))\n    assert_equal(6.2, candidate.call([[2, 3, 4], [7, 6, 5], [8, 4, 10]]))\n    assert_equal(7.2, candidate.call([[3, 4, 5], [8, 7, 6], [9, 5, 11]]))\n    assert_equal(5.8, candidate.call([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2.0 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n) }\n  dp[0][0] = cost[0][0]\n  for i in 1..n-1\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1..n-1\n    for j in 1..n-1\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2 * n - 1)\nend",
    "  return nil if cost.nil? || cost.empty?\n  return nil if cost[0].nil? || cost[0].empty?",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  # Write your code here\n  # To print results to the standard output you can use puts\n  # Example: puts \"Hello world!\"\n  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  for j in 1...n\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2.0 * n - 1)\nend",
    "  n = cost.size\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  # Write your code here\n  # To print results to the standard output you can use puts\n  # Example: puts \"Hello world!\"\n  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1..n-1\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1..n-1\n    for j in 1..n-1\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1).to_f\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1..n-1\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n  end\n  for i in 1..n-1\n    for j in 1..n-1\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 3)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  # Write your code here\n  # To print results to the standard output you can use puts\n  # Example: puts \"Hello world!\"\n  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1..n-1\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1..n-1\n    for j in 1..n-1\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1).to_f\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2 * n - 1)\nend",
    "  rows = cost.length\n  cols = cost[0].length\n  dp = Array.new(rows) { Array.new(cols, 0) }\n  dp[0][0] = cost[0][0]\n  (1...rows).each do |i|\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...cols).each do |j|\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\n  end\n  (1...rows).each do |i|\n    (1...cols).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[rows - 1][cols - 1] / (rows + cols - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2.0 * n - 1)\nend",
    "  return nil if cost.nil? || cost.empty?\n  return nil if cost[0].nil? || cost[0].empty?\n  return nil if cost.length != cost[0].length\n  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = cost[i][j] + [dp[i-1][j], dp[i][j-1]].max\n    end\n  end\n  dp[n-1][n-1] / (2*n-2)\nend",
    "  # Write your code here\n  # To print results to the standard output you can use puts\n  # Example: puts \"Hello world!\"\n  n = cost.length\n  dp = Array.new(n) { Array.new(n) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n  end\n  for i in 1...n\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = cost[i][j] + [dp[i - 1][j], dp[i][j - 1]].max\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2 * n - 1).to_f\nend",
    "  rows = cost.length\n  cols = cost[0].length\n  dp = Array.new(rows) { Array.new(cols, 0) }\n  dp[0][0] = cost[0][0]\n  (1...rows).each { |i| dp[i][0] = dp[i - 1][0] + cost[i][0] }\n  (1...cols).each { |j| dp[0][j] = dp[0][j - 1] + cost[0][j] }\n  (1...rows).each do |i|\n    (1...cols).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[rows - 1][cols - 1] / (rows + cols - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2 * n - 1).to_f\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[-1][-1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n-1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n-1).to_f\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2.0 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1..n-1\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n  end\n  for i in 1..n-1\n    for j in 1..n-1\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 2)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[-1][-1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.size\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2.0 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2.0 * n - 1)\nend",
    "  return 0 if cost.nil? || cost.empty?\n  return cost[0][0] if cost.length == 1\n  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2 * n - 1)\nend",
    "  # Write your code here\n  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  n = cost.length\n  dp = Array.new(n){Array.new(n, 0)}\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  return nil if cost.nil? || cost.empty?\n  return nil if cost[0].nil? || cost[0].empty?\n  return nil if cost.length != cost[0].length",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  return nil if cost.nil? || cost.empty?\n  return nil if cost[0].nil? || cost[0].empty?\n  return nil if cost.length != cost[0].length",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 2)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  # Write your code here\n  # To print results to the standard output you can use puts\n  # Example: puts \"Hello world!\"\n  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1..n-1\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1..n-1\n    for j in 1..n-1\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  return nil if cost.nil? || cost.empty?\n  return nil if cost[0].nil? || cost[0].empty?\n  return nil if cost.size != cost[0].size\n  n = cost.size\n  dp = Array.new(n) { Array.new(n) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2.0 * n - 1)\nend",
    "  return 0 if cost.empty?\n  return cost[0][0] if cost.length == 1",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  return 0 if cost.empty?\n  return cost[0][0] if cost.length == 1\n  return [cost[0][0], cost[1][0]].max if cost[0].length == 1\n  (1...cost.length).each do |i|\n    (1...cost[0].length).each do |j|\n      cost[i][j] += [cost[i-1][j], cost[i][j-1]].max\n    end\n  end\n  cost[-1][-1] / (cost.length + cost[0].length - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n-2)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end",
    "  # Write your code here\n  # To print results to the standard output you can use puts\n  # Example: puts \"Hello world!\"\n  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = cost[i][j] + [dp[i - 1][j], dp[i][j - 1]].max\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  # Write your code here\n  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1..n-1\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for j in 1..n-1\n    dp[0][j] = dp[0][j-1] + cost[0][j]\n  end\n  for i in 1..n-1\n    for j in 1..n-1\n      dp[i][j] = cost[i][j] + [dp[i-1][j], dp[i][j-1]].max\n    end\n  end\n  dp[n-1][n-1] / (2*n - 2).to_f\nend",
    "  return nil if cost.nil? || cost.empty? || cost[0].nil? || cost[0].empty?\n  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1..n-1\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1..n-1\n    for j in 1..n-1\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 3)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n) }\n  dp[0][0] = cost[0][0]\n  for i in 1..n-1\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n  end\n  for i in 1..n-1\n    for j in 1..n-1\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1..n-1\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n  end\n  for i in 1..n-1\n    for j in 1..n-1\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  return 0 if cost.nil? || cost.empty?\n  return cost[0][0] if cost.length == 1\n  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1..n-1\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1..n-1\n    for j in 1..n-1\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  return nil if cost.nil? || cost.empty?\n  return nil if cost[0].nil? || cost[0].empty?\n  return nil if cost.length != cost[0].length",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  # Write your code here\n  # To print results to the standard output you can use puts\n  # Example: puts \"Hello world!\"\n  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1..n-1\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n  end\n  for i in 1..n-1\n    for j in 1..n-1\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2.0 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  # Write your code here\n  n = cost.length\n  dp = Array.new(n) { Array.new(n) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2.0 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1).to_f\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2.0 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  return nil if cost.nil? || cost.length == 0\n  return nil if cost[0].nil? || cost[0].length == 0\n  return cost[0][0] if cost.length == 1 && cost[0].length == 1\n  n = cost.length\n  m = cost[0].length\n  dp = Array.new(n) { Array.new(m) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...m).each do |j|\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\n  end\n  (1...n).each do |i|\n    (1...m).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][m - 1] / (n + m - 1).to_f\nend",
    "  return nil if cost.nil? || cost.empty?\n  return nil if cost.first.nil? || cost.first.empty?\n  return nil if cost.size != cost.first.size\n  return nil if cost.size == 1",
    "  return 0 if cost.empty?\n  return cost[0][0] if cost.length == 1\n  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  # Write your code here\n  n = cost.length\n  dp = Array.new(n){Array.new(n,0)}\n  dp[0][0] = cost[0][0]\n  for i in 1..n-1\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n  end\n  for i in 1..n-1\n    for j in 1..n-1\n      dp[i][j] = [dp[i-1][j],dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1]/(2*n-1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n-1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n){Array.new(n, 0)}\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  return nil if cost.nil? || cost.empty?\n  return nil if cost.first.empty?\n  return cost.first.first if cost.length == 1\n  return cost.first.first + cost.last.last if cost.length == 2\n  return cost.first.first + cost.last.last + cost.length - 2 if cost.length == 3\n  max_average = 0\n  (0...cost.length).each do |i|\n    (0...cost.length).each do |j|\n      next if i == 0 && j == 0\n      next if i == cost.length - 1 && j == cost.length - 1\n      next if i == 0 && j == cost.length - 1\n      next if i == cost.length - 1 && j == 0\n      if i == 0\n        cost[i][j] += cost[i][j - 1]\n      elsif j == 0\n        cost[i][j] += cost[i - 1][j]\n      else\n        cost[i][j] += [cost[i - 1][j], cost[i][j - 1]].max\n      end\n    end\n  end\n  cost.last.last / (cost.length - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n-1).to_f\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 3)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  return 0 if cost.empty?\n  return cost[0][0] if cost.length == 1\n  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  n = cost.size\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  # Write your code here\n  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2.0 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  # Write your code here\n  # To print results to the standard output you can use puts\n  # Example: puts \"Hello world!\"\n  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1..n-1\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1..n-1\n    for j in 1..n-1\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  return dp[n-1][n-1] / (2*n-1).to_f\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n-1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n-1).to_f\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n){Array.new(n, 0)}\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n-1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1..n-1\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1..n-1\n    for j in 1..n-1\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n-1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n-1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1..n-1\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1..n-1\n    for j in 1..n-1\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2 * n - 1)\nend",
    "  # Write your code here\n  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n  end\n  (1...n).each do |i|\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[-1][-1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2 * n - 1).to_f\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.size\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1..n-1\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1..n-1\n    for j in 1..n-1\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2 * n - 1)\nend",
    "  # Write your code here\n  # To print results to the standard output you can use puts\n  # Example: puts \"Hello world!\"\n  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  return nil if cost.nil? || cost.empty?\n  return nil if cost[0].nil? || cost[0].empty?\n  return nil if cost.length != cost[0].length\n  n = cost.length\n  dp = Array.new(n) { Array.new(n) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n-1)\nend",
    "  return nil if cost.nil? || cost.empty?\n  return nil if cost[0].nil? || cost[0].empty?\n  return nil if cost.length != cost[0].length",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1..n-1\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n  end\n  for i in 1..n-1\n    for j in 1..n-1\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2 * n - 1)\nend",
    "  # Write your code here\n  n = cost.length\n  dp = Array.new(n) { Array.new(n) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  return 0 if cost.empty? || cost[0].empty?\n  m = cost.length\n  n = cost[0].length\n  dp = Array.new(m) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...m\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  for j in 1...n\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\n  end\n  for i in 1...m\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[m - 1][n - 1] / (m + n - 1)\nend",
    "  # write your code in Ruby 2.2\n  n = cost.length\n  dp = Array.new(n) { Array.new(n) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend"
  ]
}