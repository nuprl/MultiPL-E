{
  "name": "mbpp_283_validate",
  "language": "rb",
  "prompt": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "\tn = n.to_s.split('')\n\tn.each do |i|\n\t\tif n.count(i) > i.to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend",
    "  digits = n.to_s.split('').map(&:to_i)\n  digits.each do |digit|\n    return false if digits.count(digit) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  # Your code here\n  return false if n < 0\n  n.to_s.chars.group_by(&:to_i).all? { |k, v| k >= v.size }\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend"
  ]
}