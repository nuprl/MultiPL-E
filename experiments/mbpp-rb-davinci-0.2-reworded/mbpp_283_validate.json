{
  "name": "mbpp_283_validate",
  "language": "rb",
  "prompt": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "\tn = n.to_s.split('')\n\tn.each do |i|\n\t\tif n.count(i) > i.to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend",
    "  digits = n.to_s.split('').map(&:to_i)\n  digits.each do |digit|\n    return false if digits.count(digit) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  # Your code here\n  return false if n < 0\n  n.to_s.chars.group_by(&:to_i).all? { |k, v| k >= v.size }\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  # Write your code here\n  n_arr = n.to_s.split('')\n  n_arr.each do |i|\n    if n_arr.count(i) > i.to_i\n      return false\n    end\n  end\n  return true\nend",
    "  arr = n.to_s.split(\"\").map(&:to_i)\n  arr.each do |x|\n    if arr.count(x) > x\n      return false\n    end\n  end\n  return true\nend",
    "  # convert the integer to string\n  n_str = n.to_s\n  # convert the string to array\n  n_arr = n_str.split('')\n  # loop through the array\n  n_arr.each do |num|\n    # count the frequency of each digit\n    if n_arr.count(num) > num.to_i\n      return false\n    end\n  end\n  return true\nend",
    "  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.each_with_object(Hash.new(0)) { |c, h| h[c] += 1 }.values.all? { |v| v <= n.to_s.to_i }\nend",
    "  freq = Hash.new(0)\n  n.to_s.each_char { |c| freq[c.to_i] += 1 }\n  freq.each { |k, v| return false if v > k }\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.group_by(&:to_i).all? { |k, v| v.size <= k }\nend",
    "  # convert integer to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # create hash of digit frequencies\n  freq = Hash.new(0)\n  digits.each { |digit| freq[digit] += 1 }\n  # check if frequency of each digit is less than or equal to the digit itself\n  freq.each { |digit, count| return false if count > digit }\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  # Write your code here\n  n.to_s.split('').each do |i|\n    if n.to_s.count(i) > i.to_i\n      return false\n    end\n  end\n  return true\nend",
    "  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.split('').map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.each do |c|\n    return false if n.to_s.count(c) > c.to_i\n  end\n  true\nend",
    "\t# convert the integer to a string\n\tn = n.to_s\n\t# create a hash to store the frequency of each digit\n\tfreq = Hash.new(0)\n\t# iterate through the string and store the frequency of each digit in the hash\n\tn.each_char { |c| freq[c] += 1 }\n\t# iterate through the hash and check if the frequency of each digit is less than or equal to the digit itself\n\tfreq.each do |k, v|\n\t\tif v > k.to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "  n.to_s.chars.group_by { |x| x }.map { |k, v| v.size <= k.to_i }.all?\nend",
    "  # Write your code here\n  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend",
    "  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.split(\"\").each do |i|\n    if n.to_s.count(i) > i.to_i\n      return false\n    end\n  end\n  return true\nend",
    "  freq = Hash.new(0)\n  n.to_s.each_char { |c| freq[c.to_i] += 1 }\n  freq.each do |k, v|\n    return false if k < v\n  end\n  true\nend",
    "  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.group_by(&:to_i).all? { |k, v| v.size <= k }\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  # Write your code here\n  n = n.to_s.split('')\n  n.each do |i|\n    if n.count(i) > i.to_i\n      return false\n    end\n  end\n  return true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  # Write your code here\n  n.to_s.chars.each do |i|\n    if n.to_s.count(i) > i.to_i\n      return false\n    end\n  end\n  return true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.split('').each do |i|\n    if n.to_s.count(i) > i.to_i\n      return false\n    end\n  end\n  true\nend",
    "  n.to_s.chars.each do |digit|\n    if n.to_s.count(digit) > digit.to_i\n      return false\n    end\n  end\n  return true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  # Write your code here\n  n = n.to_s\n  n = n.split('')\n  n = n.map(&:to_i)\n  n.each do |i|\n    if n.count(i) > i\n      return false\n    end\n  end\n  return true\nend",
    "  # Write your code here\n  n = n.to_s.split('')\n  n.each do |i|\n    if n.count(i) > i.to_i\n      return false\n    end\n  end\n  return true\nend",
    "  n.to_s.chars.each do |c|\n    return false if n.to_s.count(c) > c.to_i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.uniq.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.group_by(&:to_i).all? { |k, v| v.size <= k }\nend",
    "  n.to_s.chars.each do |x|\n    return false if n.to_s.count(x) > x.to_i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.each do |char|\n    return false if n.to_s.count(char) > char.to_i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.split('').map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.split('').map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.each do |c|\n    return false if n.to_s.count(c) > c.to_i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.each_with_object(Hash.new(0)) { |c, h| h[c] += 1 }.all? { |k, v| v <= k.to_i }\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  # Write your code here\n  n = n.to_s.split('')\n  n.each do |i|\n    if n.count(i) > i.to_i\n      return false\n    end\n  end\n  return true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend",
    "  # Write your code here\n  n = n.to_s.split('')\n  n.each do |i|\n    if n.count(i) > i.to_i\n      return false\n    end\n  end\n  return true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  # Write your code here\n  n.to_s.split('').each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  # Write your code here\n  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.each do |digit|\n    if n.to_s.count(digit) > digit.to_i\n      return false\n    end\n  end\n  return true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend",
    "  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  # Write your code here\n  n.to_s.chars.each do |i|\n    return false if n.to_s.count(i) > i.to_i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend",
    "  # Write your code here\n  arr = n.to_s.split('')\n  arr.each do |i|\n    if arr.count(i) > i.to_i\n      return false\n    end\n  end\n  return true\nend",
    "  n.to_s.split('').map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.split('').map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.split('').map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  # convert integer to string\n  n = n.to_s\n  # split string into array of characters\n  n = n.split('')\n  # convert array of characters to array of integers\n  n = n.map(&:to_i)\n  # iterate through array of integers\n  n.each do |num|\n    # check if frequency of each digit is less than or equal to the digit itself\n    if n.count(num) > num\n      return false\n    end\n  end\n  return true\nend",
    "  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend",
    "  n.to_s.chars.group_by(&:to_i).all? { |k, v| v.size <= k }\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.split('').map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend"
  ]
}