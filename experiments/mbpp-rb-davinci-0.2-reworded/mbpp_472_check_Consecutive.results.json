{
  "name": "mbpp_472_check_Consecutive",
  "language": "rb",
  "prompt": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp06b7decb\nStarted\n.\nFinished in 0.000647849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1543.57 tests/s, 4630.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp06b7decb\nStarted\n.\nFinished in 0.000647849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1543.57 tests/s, 4630.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp06b7decb\nStarted\n.\nFinished in 0.000647849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1543.57 tests/s, 4630.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1] != l[i]+1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp087lykc1\nStarted\n.\nFinished in 0.000542831 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1842.19 tests/s, 5526.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    return false if l[i+1]-l[i] != 1\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy8wylvqu\nStarted\n.\nFinished in 0.000615835 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1623.81 tests/s, 4871.43 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if (l[i+1]-l[i] != 1)\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplvkxmjiw\nStarted\n.\nFinished in 0.000653847 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1529.41 tests/s, 4588.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if (l[i+1]-l[i] != 1)\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphch917vk\nStarted\n.\nFinished in 0.000539369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1854.02 tests/s, 5562.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  i = 0\n  while i < l.length - 1\n    if l[i] + 1 != l[i + 1]\n      return false\n    end\n    i += 1\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpg75y8l9i\nStarted\n.\nFinished in 0.000540964 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1848.55 tests/s, 5545.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  l.each_with_index do |x,i|\n    if l[i+1] != nil\n      if l[i+1] - x != 1\n        return false\n      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9qsj8kmi\nStarted\n.\nFinished in 0.000619304 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1614.72 tests/s, 4844.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  l.each_with_index do |e,i|\n    if l[i+1] != nil\n      if l[i+1] != e+1\n        return false\n      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpoys9v5og\nStarted\n.\nFinished in 0.000602028 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1661.05 tests/s, 4983.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  l.each_with_index do |x,i|\n    if l[i+1] != nil\n      if l[i+1] - x != 1\n        return false\n      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9qsj8kmi\nStarted\n.\nFinished in 0.000619304 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1614.72 tests/s, 4844.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] != l[i]+1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfpf1nucf\nStarted\n.\nFinished in 0.000414446 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2412.86 tests/s, 7238.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp06b7decb\nStarted\n.\nFinished in 0.000647849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1543.57 tests/s, 4630.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  l.each_with_index do |x,i|\n    if i != l.length-1\n      if l[i+1] != x+1\n        return false\n      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpojtxkmex\nStarted\n.\nFinished in 0.00042634 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2345.55 tests/s, 7036.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  return l.sort == (l.min..l.max).to_a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsy728_7w\nStarted\n.\nFinished in 0.000430471 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2323.04 tests/s, 6969.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp06b7decb\nStarted\n.\nFinished in 0.000647849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1543.57 tests/s, 4630.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if (l[i+1]-l[i]) != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp626riqur\nStarted\n.\nFinished in 0.00097631 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1024.26 tests/s, 3072.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp630_yx4n\nStarted\n.\nFinished in 0.000433006 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2309.44 tests/s, 6928.31 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] != l[i]+1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfpf1nucf\nStarted\n.\nFinished in 0.000414446 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2412.86 tests/s, 7238.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp06b7decb\nStarted\n.\nFinished in 0.000647849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1543.57 tests/s, 4630.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if (l[i+1]-l[i] != 1)\n      puts \"The array does not contain consecutive numbers\"\n      return\n    end\n  end\n  puts \"The array contains consecutive numbers\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "Loaded suite /tmp/tmpq8q0d8mk\nStarted\nThe array contains consecutive numbers\nF\n===============================================================================\nFailure: test_check_Consecutive(TestHumanEval)\n/tmp/tmpq8q0d8mk.rb:16:in `test_check_Consecutive'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_check_Consecutive\n     15:     candidate = method(:check_Consecutive)\n  => 16:     assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n     17:     assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n     18:     assert_equal(false, candidate.call([1, 2, 1]))\n     19:   end\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008562787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n116.78 tests/s, 116.78 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp630_yx4n\nStarted\n.\nFinished in 0.000433006 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2309.44 tests/s, 6928.31 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp630_yx4n\nStarted\n.\nFinished in 0.000433006 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2309.44 tests/s, 6928.31 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp06b7decb\nStarted\n.\nFinished in 0.000647849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1543.57 tests/s, 4630.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if (l[i+1]-l[i] != 1)\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplvkxmjiw\nStarted\n.\nFinished in 0.000653847 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1529.41 tests/s, 4588.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp06b7decb\nStarted\n.\nFinished in 0.000647849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1543.57 tests/s, 4630.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] != l[i]+1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfpf1nucf\nStarted\n.\nFinished in 0.000414446 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2412.86 tests/s, 7238.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] != l[i]+1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfpf1nucf\nStarted\n.\nFinished in 0.000414446 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2412.86 tests/s, 7238.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp06b7decb\nStarted\n.\nFinished in 0.000647849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1543.57 tests/s, 4630.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp06b7decb\nStarted\n.\nFinished in 0.000647849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1543.57 tests/s, 4630.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp06b7decb\nStarted\n.\nFinished in 0.000647849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1543.57 tests/s, 4630.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if (l[i+1]-l[i] != 1)\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplvkxmjiw\nStarted\n.\nFinished in 0.000653847 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1529.41 tests/s, 4588.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp630_yx4n\nStarted\n.\nFinished in 0.000433006 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2309.44 tests/s, 6928.31 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i]!=1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpo3f777g2\nStarted\n.\nFinished in 0.000422792 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2365.23 tests/s, 7095.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if (l[i+1]-l[i]==1)\n      return true\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "Loaded suite /tmp/tmpvcw0j05y\nStarted\nF\n===============================================================================\nFailure: test_check_Consecutive(TestHumanEval)\n/tmp/tmpvcw0j05y.rb:17:in `test_check_Consecutive'\n     14:   def test_check_Consecutive\n     15:     candidate = method(:check_Consecutive)\n     16:     assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n  => 17:     assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n     18:     assert_equal(false, candidate.call([1, 2, 1]))\n     19:   end\n     20: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\nFinished in 0.008938688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n111.87 tests/s, 223.75 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if (l[i+1]-l[i] != 1)\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplvkxmjiw\nStarted\n.\nFinished in 0.000653847 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1529.41 tests/s, 4588.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "Loaded suite /tmp/tmpxbjzrn1b\nStarted\nE\n===============================================================================\nError: test_check_Consecutive(TestHumanEval):\n  NoMethodError: undefined method `-' for nil:NilClass\n  \n      if l[i+1]-l[i] != 1\n               ^\n/tmp/tmpxbjzrn1b.rb:5:in `block in check_Consecutive'\n/tmp/tmpxbjzrn1b.rb:4:in `each'\n/tmp/tmpxbjzrn1b.rb:4:in `check_Consecutive'\n/tmp/tmpxbjzrn1b.rb:15:in `call'\n/tmp/tmpxbjzrn1b.rb:15:in `test_check_Consecutive'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_check_Consecutive\n     14:     candidate = method(:check_Consecutive)\n  => 15:     assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n     16:     assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n     17:     assert_equal(false, candidate.call([1, 2, 1]))\n     18:   end\n===============================================================================\n\nFinished in 0.001890118 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n529.07 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp06b7decb\nStarted\n.\nFinished in 0.000647849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1543.57 tests/s, 4630.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  (l.first..l.last).to_a == l\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxwvjkrrv\nStarted\n.\nFinished in 0.000421748 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2371.08 tests/s, 7113.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if (l[i+1]-l[i] == 1)\n      return true\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "Loaded suite /tmp/tmp30nqlhe2\nStarted\nF\n===============================================================================\nFailure: test_check_Consecutive(TestHumanEval)\n/tmp/tmp30nqlhe2.rb:17:in `test_check_Consecutive'\n     14:   def test_check_Consecutive\n     15:     candidate = method(:check_Consecutive)\n     16:     assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n  => 17:     assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n     18:     assert_equal(false, candidate.call([1, 2, 1]))\n     19:   end\n     20: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\nFinished in 0.014323195 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n69.82 tests/s, 139.63 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1] != l[i]+1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp087lykc1\nStarted\n.\nFinished in 0.000542831 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1842.19 tests/s, 5526.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if (l[i+1]-l[i] != 1)\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplvkxmjiw\nStarted\n.\nFinished in 0.000653847 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1529.41 tests/s, 4588.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp630_yx4n\nStarted\n.\nFinished in 0.000433006 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2309.44 tests/s, 6928.31 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1] != l[i]+1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp087lykc1\nStarted\n.\nFinished in 0.000542831 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1842.19 tests/s, 5526.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  return true if l.sort == (l.min..l.max).to_a\n  false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph9_txsmc\nStarted\n.\nFinished in 0.000581664 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1719.21 tests/s, 5157.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp630_yx4n\nStarted\n.\nFinished in 0.000433006 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2309.44 tests/s, 6928.31 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  (l.first..l.last).to_a == l\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxwvjkrrv\nStarted\n.\nFinished in 0.000421748 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2371.08 tests/s, 7113.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.size-1\n    if (l[i+1]-l[i] != 1)\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5435h3z5\nStarted\n.\nFinished in 0.000425585 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2349.71 tests/s, 7049.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp06b7decb\nStarted\n.\nFinished in 0.000647849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1543.57 tests/s, 4630.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] != l[i]+1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfpf1nucf\nStarted\n.\nFinished in 0.000414446 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2412.86 tests/s, 7238.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  l.each_with_index do |e,i|\n    if l[i+1] != nil\n      if l[i+1] - e != 1\n        return false\n      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4qptr22t\nStarted\n.\nFinished in 0.000426641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2343.89 tests/s, 7031.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp630_yx4n\nStarted\n.\nFinished in 0.000433006 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2309.44 tests/s, 6928.31 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.size-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvrmddr7q\nStarted\n.\nFinished in 0.000431934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2315.17 tests/s, 6945.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if (l[i+1]-l[i] != 1)\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplvkxmjiw\nStarted\n.\nFinished in 0.000653847 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1529.41 tests/s, 4588.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp06b7decb\nStarted\n.\nFinished in 0.000647849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1543.57 tests/s, 4630.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] != l[i]+1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfpf1nucf\nStarted\n.\nFinished in 0.000414446 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2412.86 tests/s, 7238.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    return false if (l[i+1]-l[i] != 1)\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2lqzm07u\nStarted\n.\nFinished in 0.000420334 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2379.06 tests/s, 7137.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] != l[i]+1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfpf1nucf\nStarted\n.\nFinished in 0.000414446 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2412.86 tests/s, 7238.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp630_yx4n\nStarted\n.\nFinished in 0.000433006 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2309.44 tests/s, 6928.31 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp06b7decb\nStarted\n.\nFinished in 0.000647849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1543.57 tests/s, 4630.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if (l[i+1]-l[i] != 1)\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplvkxmjiw\nStarted\n.\nFinished in 0.000653847 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1529.41 tests/s, 4588.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if (l[i+1]-l[i] != 1)\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplvkxmjiw\nStarted\n.\nFinished in 0.000653847 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1529.41 tests/s, 4588.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] == 1\n      return true\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "Loaded suite /tmp/tmp0xgmy4tb\nStarted\nF\n===============================================================================\nFailure: test_check_Consecutive(TestHumanEval)\n/tmp/tmp0xgmy4tb.rb:17:in `test_check_Consecutive'\n     14:   def test_check_Consecutive\n     15:     candidate = method(:check_Consecutive)\n     16:     assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n  => 17:     assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n     18:     assert_equal(false, candidate.call([1, 2, 1]))\n     19:   end\n     20: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\nFinished in 0.008717468 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.71 tests/s, 229.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if (l[i+1]-l[i] == 1)\n      return true\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "Loaded suite /tmp/tmp3equnenj\nStarted\nF\n===============================================================================\nFailure: test_check_Consecutive(TestHumanEval)\n/tmp/tmp3equnenj.rb:17:in `test_check_Consecutive'\n     14:   def test_check_Consecutive\n     15:     candidate = method(:check_Consecutive)\n     16:     assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n  => 17:     assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n     18:     assert_equal(false, candidate.call([1, 2, 1]))\n     19:   end\n     20: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\nFinished in 0.008922866 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n112.07 tests/s, 224.14 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp06b7decb\nStarted\n.\nFinished in 0.000647849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1543.57 tests/s, 4630.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in (0..l.length-2)\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplbesqilo\nStarted\n.\nFinished in 0.000423001 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2364.06 tests/s, 7092.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i]!=1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpo3f777g2\nStarted\n.\nFinished in 0.000422792 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2365.23 tests/s, 7095.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] != l[i]+1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfpf1nucf\nStarted\n.\nFinished in 0.000414446 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2412.86 tests/s, 7238.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp06b7decb\nStarted\n.\nFinished in 0.000647849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1543.57 tests/s, 4630.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp630_yx4n\nStarted\n.\nFinished in 0.000433006 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2309.44 tests/s, 6928.31 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp06b7decb\nStarted\n.\nFinished in 0.000647849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1543.57 tests/s, 4630.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp06b7decb\nStarted\n.\nFinished in 0.000647849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1543.57 tests/s, 4630.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp630_yx4n\nStarted\n.\nFinished in 0.000433006 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2309.44 tests/s, 6928.31 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp06b7decb\nStarted\n.\nFinished in 0.000647849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1543.57 tests/s, 4630.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1] - l[i] == 1\n      return true\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "Loaded suite /tmp/tmp6yu6nmpz\nStarted\nF\n===============================================================================\nFailure: test_check_Consecutive(TestHumanEval)\n/tmp/tmp6yu6nmpz.rb:17:in `test_check_Consecutive'\n     14:   def test_check_Consecutive\n     15:     candidate = method(:check_Consecutive)\n     16:     assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n  => 17:     assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n     18:     assert_equal(false, candidate.call([1, 2, 1]))\n     19:   end\n     20: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\nFinished in 0.008988328 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n111.26 tests/s, 222.51 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp06b7decb\nStarted\n.\nFinished in 0.000647849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1543.57 tests/s, 4630.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..(l.length-2)\n    if (l[i+1] - l[i]) != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1g8on8mr\nStarted\n.\nFinished in 0.000446287 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2240.71 tests/s, 6722.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if (l[i+1]-l[i] != 1)\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplvkxmjiw\nStarted\n.\nFinished in 0.000653847 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1529.41 tests/s, 4588.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  l.each_with_index do |x,i|\n    if l[i+1] != nil\n      if l[i+1] - x != 1\n        return false\n      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9qsj8kmi\nStarted\n.\nFinished in 0.000619304 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1614.72 tests/s, 4844.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  l.each_with_index do |e,i|\n    if i+1 < l.length\n      if l[i+1] != e+1\n        return false\n      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy6ho1mdx\nStarted\n.\nFinished in 0.0009429 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1060.56 tests/s, 3181.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  l.each_with_index do |x,i|\n    if l[i+1] != nil\n      if l[i+1] - x != 1\n        return false\n      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9qsj8kmi\nStarted\n.\nFinished in 0.000619304 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1614.72 tests/s, 4844.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if (l[i+1]-l[i] != 1)\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphch917vk\nStarted\n.\nFinished in 0.000539369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1854.02 tests/s, 5562.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] != l[i]+1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfpf1nucf\nStarted\n.\nFinished in 0.000414446 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2412.86 tests/s, 7238.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if (l[i+1]-l[i]) != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnl_g9uu3\nStarted\n.\nFinished in 0.000429602 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2327.74 tests/s, 6983.21 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if (l[i+1]-l[i] != 1)\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphch917vk\nStarted\n.\nFinished in 0.000539369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1854.02 tests/s, 5562.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  l.each_with_index do |e,i|\n    if l[i+1] != nil\n      if l[i+1] != e+1\n        return false\n      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpoys9v5og\nStarted\n.\nFinished in 0.000602028 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1661.05 tests/s, 4983.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] != l[i]+1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfpf1nucf\nStarted\n.\nFinished in 0.000414446 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2412.86 tests/s, 7238.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1] - l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp630_yx4n\nStarted\n.\nFinished in 0.000433006 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2309.44 tests/s, 6928.31 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] != l[i]+1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfpf1nucf\nStarted\n.\nFinished in 0.000414446 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2412.86 tests/s, 7238.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1] != l[i]+1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfpf1nucf\nStarted\n.\nFinished in 0.000414446 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2412.86 tests/s, 7238.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  return l.sort == (l.min..l.max).to_a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsy728_7w\nStarted\n.\nFinished in 0.000430471 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2323.04 tests/s, 6969.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsupzuszc\nStarted\n.\nFinished in 0.000531762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.54 tests/s, 5641.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if (l[i+1]-l[i] != 1)\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplvkxmjiw\nStarted\n.\nFinished in 0.000653847 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1529.41 tests/s, 4588.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0...l.length-1\n    if l[i]+1 != l[i+1]\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkmbxohue\nStarted\n.\nFinished in 0.000407727 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2452.62 tests/s, 7357.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  l.each_with_index do |e,i|\n    if l[i+1] != nil\n      if l[i+1] - e != 1\n        return false\n      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4qptr22t\nStarted\n.\nFinished in 0.000426641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2343.89 tests/s, 7031.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n  l.sort!\n  for i in 0..l.length-2\n    if l[i+1]-l[i] != 1\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw8c3w8s5\nStarted\n.\nFinished in 0.000548322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1823.75 tests/s, 5471.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}