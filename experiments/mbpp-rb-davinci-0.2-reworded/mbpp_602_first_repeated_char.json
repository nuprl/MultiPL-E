{
  "name": "mbpp_602_first_repeated_char",
  "language": "rb",
  "prompt": "# Write a rbthon function to find the first repeated character in a given string.\ndef first_repeated_char(str1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_first_repeated_char\n    candidate = method(:first_repeated_char)\n    assert_equal(\"a\", candidate.call(\"abcabc\"))\n    assert_equal(nil, candidate.call(\"abc\"))\n    assert_equal(\"1\", candidate.call(\"123123\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n    return char if count[char] == 2\n  end\n  nil\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  str1.chars.each do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')\nputs first_repeated_char('abcd')",
    "  str1.each_char do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')\nputs first_repeated_char('abcd')",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\np first_repeated_char('abcdab')",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')\nputs first_repeated_char('abcd')\nputs first_repeated_char('abcdabcd')",
    "  str1.each_char do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.chars.each do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\np first_repeated_char('abcdab')",
    "  str1.each_char do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')\nputs first_repeated_char('abcd')",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')\nputs first_repeated_char('abcd')\nputs first_repeated_char('abcdabcd')",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each { |k, v| return k if v > 1 }\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\n  return nil\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n    return char if count[char] > 1\n  end\n  nil\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')\nputs first_repeated_char('abcd')",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  str1.chars.find { |c| str1.count(c) > 1 }\nend",
    "  arr = str1.split('')\n  arr.each do |char|\n    if arr.count(char) > 1\n      return char\n    end\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')",
    "  str1.chars.each do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  str1.split(\"\").each do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')",
    "  str1.each_char do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdabcd')\nputs first_repeated_char('abcd')",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')",
    "  str1.split('').each do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')\nputs first_repeated_char('abcd')",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n    return char if count[char] == 2\n  end\n  nil\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.chars.each_with_index do |char, index|\n    return char if str1.chars.count(char) > 1 && str1.chars.index(char) == index\n  end\n  nil\nend",
    "  str1.each_char do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')\nputs first_repeated_char('abcd')",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n    return char if count[char] == 2\n  end\n  nil\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  count = 0\n  char = ''\n  str1.each_char do |ch|\n    count = str1.count(ch)\n    if count > 1\n      char = ch\n      break\n    end\n  end\n  return char\nend\nputs first_repeated_char('abcdab')",
    "  str1.split(\"\").each do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')\nputs first_repeated_char('abcd')",
    "  str1.each_char do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n    return char if count[char] == 2\n  end\n  nil\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  count = 0\n  str1.each_char do |char|\n    count += 1\n    return char if str1.count(char) > 1\n  end\n  return nil if count == str1.length\nend",
    "  str1.each_char do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n    return char if count[char] == 2\n  end\n  nil\nend",
    "  str1.each_char do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  str1.downcase!\n  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend\nputs first_repeated_char('abcdab')",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')\nputs first_repeated_char('abcd')",
    "  str1.split('').each do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.each_char do |ch|\n    if str1.count(ch) > 1\n      return ch\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('geeksforgeeks')",
    "  str1.split('').each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  arr = str1.split('')\n  arr.each_with_index do |char, index|\n    if arr.count(char) > 1\n      return char\n    end\n  end\nend",
    "  count = 0\n  ch = str1[0]\n  l = str1.length\n  for i in 0...l \n    for j in i+1...l \n      if str1[i] == str1[j]\n        ch = str1[i]\n        count = 1\n        break\n      end\n    end\n    if count == 1\n      break\n    end\n  end\n  return ch\nend\nputs first_repeated_char('abcdab')\nputs first_repeated_char('abcd')\nputs first_repeated_char('abcdaab')\nputs first_repeated_char('abcde')",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\np first_repeated_char('abcdab')",
    "  str1.each_char do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.chars.each do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')\nputs first_repeated_char('abcd')\nputs first_repeated_char('abcdabc')\nputs first_repeated_char('abcda')",
    "  str1.split('').each do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  arr = str1.split('')\n  arr.each_with_index do |char, index|\n    if arr.count(char) > 1\n      return char\n    end\n  end\nend",
    "  str1.split(\"\").each do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')\nputs first_repeated_char('abcd')\nputs first_repeated_char('aabbccdd')",
    "  str1.split(\"\").each do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n    return char if count[char] > 1\n  end\n  nil\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')\nputs first_repeated_char('abcd')",
    "  str1.split('').each do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n    return char if count[char] == 2\n  end\n  nil\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n    return char if count[char] == 2\n  end\n  nil\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n    return char if count[char] > 1\n  end\n  nil\nend",
    "  str1.each_char do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n    return char if count[char] > 1\n  end\n  nil\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')\nputs first_repeated_char('abcd')",
    "  str1.split('').each do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  str1.chars.each_with_index do |char, index|\n    return char if str1.chars.count(char) > 1\n  end\n  nil\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n    return char if count[char] == 2\n  end\n  nil\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\n  return nil\nend",
    "  str1.each_char do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdabcd')",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')\nputs first_repeated_char('abcd')",
    "  str1.split('').each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')\nputs first_repeated_char('abcd')",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')\nputs first_repeated_char('abcd')",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')\nputs first_repeated_char('abcd')\nputs first_repeated_char('abcdabcd')\nputs first_repeated_char('abcdabcdabcd')",
    "  str1.split('').each do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\n  nil\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  count = 0\n  str1.each_char do |char|\n    count += 1\n    return char if str1.count(char) > 1\n  end\n  return nil\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k,v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\nputs first_repeated_char('abcdab')\nputs first_repeated_char('abcd')",
    "  count = Hash.new(0)\n  str1.each_char do |char|\n    count[char] += 1\n  end\n  count.each do |k, v|\n    if v > 1\n      return k\n    end\n  end\nend\np first_repeated_char('abcdab')\np first_repeated_char('abcd')",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) > 1\n      return char\n    end\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) > 1\n  end\nend"
  ]
}