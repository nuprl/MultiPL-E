{
  "name": "mbpp_730_consecutive_duplicates",
  "language": "rb",
  "prompt": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_arr = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      new_arr << num\n    end\n  end\n  new_arr\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpoxcz5rqb\nStarted\n.\nFinished in 0.000911758 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1096.78 tests/s, 4387.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, index|\n    result << num if num != nums[index + 1]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl5krxfv7\nStarted\n.\nFinished in 0.000437017 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2288.24 tests/s, 9152.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_array = []\n  nums.each do |num|\n    new_array << num unless new_array.last == num\n  end\n  new_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxpiih1ll\nStarted\n.\nFinished in 0.000406603 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2459.40 tests/s, 9837.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_array = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      new_array << num\n    end\n  end\n  new_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpri6tr758\nStarted\n.\nFinished in 0.000421454 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2372.74 tests/s, 9490.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_arr = []\n  nums.each_with_index do |num, idx|\n    new_arr << num unless num == nums[idx + 1]\n  end\n  new_arr\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwkhjoj7y\nStarted\n.\nFinished in 0.000490007 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2040.79 tests/s, 8163.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, index|\n    result << num unless num == nums[index + 1]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf7hmaqbh\nStarted\n.\nFinished in 0.000393438 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2541.70 tests/s, 10166.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk(&:itself).map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp55gp15bb\nStarted\n.\nFinished in 0.000448019 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2232.05 tests/s, 8928.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, idx|\n    result << num unless num == nums[idx + 1]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp751z28p3\nStarted\n.\nFinished in 0.000416349 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2401.83 tests/s, 9607.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_nums = []\n  nums.each_with_index do |num, i|\n    new_nums << num if num != nums[i + 1]\n  end\n  new_nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgfxswxki\nStarted\n.\nFinished in 0.000414496 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2412.57 tests/s, 9650.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_nums = []\n  nums.each do |num|\n    new_nums << num unless new_nums.last == num\n  end\n  new_nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb7kmkq5z\nStarted\n.\nFinished in 0.000409242 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2443.54 tests/s, 9774.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, i|\n    result << num unless num == nums[i + 1]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp28kwnwbg\nStarted\n.\nFinished in 0.000432244 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2313.51 tests/s, 9254.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_nums = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxcaize44\nStarted\n.\nFinished in 0.000456881 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2188.75 tests/s, 8755.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, idx|\n    result << num unless num == nums[idx + 1]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp751z28p3\nStarted\n.\nFinished in 0.000416349 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2401.83 tests/s, 9607.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, i|\n    result << num if num != nums[i + 1]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyol30bkr\nStarted\n.\nFinished in 0.000435396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2296.76 tests/s, 9187.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_nums = []\n  nums.each_with_index do |num, index|\n    if index == 0\n      new_nums << num\n    elsif num != nums[index - 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpaan40oqc\nStarted\n.\nFinished in 0.000450484 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2219.83 tests/s, 8879.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.inject([]) do |result, num|\n    result << num unless result.last == num\n    result\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdem114fj\nStarted\n.\nFinished in 0.000447764 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2233.32 tests/s, 8933.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  (0...nums.length).each do |i|\n    if nums[i] == nums[i + 1]\n      nums.delete_at(i)\n    end\n  end\n  nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "Loaded suite /tmp/tmpo0tkbwmb\nStarted\nF\n===============================================================================\nFailure: test_consecutive_duplicates(TestHumanEval)\n/tmp/tmpo0tkbwmb.rb:14:in `test_consecutive_duplicates'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_consecutive_duplicates\n     13:     candidate = method(:consecutive_duplicates)\n  => 14:     assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     15:     assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     16:     assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     17:     assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 4]>\n\ndiff:\n? [0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 4]\n===============================================================================\n\nFinished in 0.012822659 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n77.99 tests/s, 77.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_arr = []\n  nums.each_with_index do |num, i|\n    if nums[i] != nums[i + 1]\n      new_arr << num\n    end\n  end\n  new_arr\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpudx37mbc\nStarted\n.\nFinished in 0.000978982 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1021.47 tests/s, 4085.88 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, i|\n    result << num unless num == nums[i + 1]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp28kwnwbg\nStarted\n.\nFinished in 0.000432244 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2313.51 tests/s, 9254.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, index|\n    result << num unless num == nums[index + 1]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf7hmaqbh\nStarted\n.\nFinished in 0.000393438 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2541.70 tests/s, 10166.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk{|n| n}.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp86wurgbu\nStarted\n.\nFinished in 0.000475969 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2100.98 tests/s, 8403.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  i = 0\n  while i < nums.length\n    if nums[i] == nums[i + 1]\n      nums.delete_at(i)\n    else\n      i += 1\n    end\n  end\n  nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbxhpvgen\nStarted\n.\nFinished in 0.000455273 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2196.48 tests/s, 8785.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, i|\n    result << num unless num == nums[i + 1]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp28kwnwbg\nStarted\n.\nFinished in 0.000432244 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2313.51 tests/s, 9254.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, i|\n    result << num unless num == nums[i + 1]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp28kwnwbg\nStarted\n.\nFinished in 0.000432244 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2313.51 tests/s, 9254.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_nums = []\n  nums.each_with_index do |num, index|\n    if nums[index] != nums[index + 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzz8cxoz7\nStarted\n.\nFinished in 0.00044059 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2269.68 tests/s, 9078.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.each_with_object([]) do |num, arr|\n    arr << num unless arr.last == num\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmple655111\nStarted\n.\nFinished in 0.000441884 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2263.04 tests/s, 9052.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_arr = []\n  nums.each_with_index do |num, idx|\n    if idx == 0\n      new_arr << num\n    elsif num != nums[idx - 1]\n      new_arr << num\n    end\n  end\n  new_arr\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpabqntgtp\nStarted\n.\nFinished in 0.000444077 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2251.86 tests/s, 9007.45 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  (0...nums.length).each do |i|\n    if nums[i] == nums[i + 1]\n      nums.delete_at(i)\n      i -= 1\n    end\n  end\n  nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "Loaded suite /tmp/tmpc2siq_ol\nStarted\nF\n===============================================================================\nFailure: test_consecutive_duplicates(TestHumanEval)\n/tmp/tmpc2siq_ol.rb:15:in `test_consecutive_duplicates'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_consecutive_duplicates\n     14:     candidate = method(:consecutive_duplicates)\n  => 15:     assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     16:     assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     17:     assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     18:     assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 4]>\n\ndiff:\n? [0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 4]\n===============================================================================\n\nFinished in 0.012819618 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n78.01 tests/s, 78.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_arr = []\n  nums.each_with_index do |num, i|\n    new_arr << num if num != nums[i+1]\n  end\n  new_arr\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpew36w_gq\nStarted\n.\nFinished in 0.000471162 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2122.41 tests/s, 8489.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    if result.last != num\n      result << num\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqc5a0m5l\nStarted\n.\nFinished in 0.000425706 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2349.04 tests/s, 9396.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_nums = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxcaize44\nStarted\n.\nFinished in 0.000456881 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2188.75 tests/s, 8755.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  # Write your code here\n  new_arr = []\n  nums.each_with_index do |num, index|\n    if num != nums[index + 1]\n      new_arr << num\n    end\n  end\n  new_arr\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4x9vmv9l\nStarted\n.\nFinished in 0.000446575 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2239.27 tests/s, 8957.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  (0...nums.length).each do |i|\n    if nums[i] == nums[i+1]\n      nums.delete_at(i)\n      i -= 1\n    end\n  end\n  nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "Loaded suite /tmp/tmptx62ig69\nStarted\nF\n===============================================================================\nFailure: test_consecutive_duplicates(TestHumanEval)\n/tmp/tmptx62ig69.rb:15:in `test_consecutive_duplicates'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_consecutive_duplicates\n     14:     candidate = method(:consecutive_duplicates)\n  => 15:     assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     16:     assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     17:     assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     18:     assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 4]>\n\ndiff:\n? [0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 4]\n===============================================================================\n\nFinished in 0.013342174 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n74.95 tests/s, 74.95 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_nums = []\n  nums.each_with_index do |num, index|\n    if index == 0\n      new_nums << num\n    elsif num != nums[index - 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpaan40oqc\nStarted\n.\nFinished in 0.000450484 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2219.83 tests/s, 8879.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  (0...nums.length).each do |i|\n    nums.delete_at(i) if nums[i] == nums[i + 1]\n  end\n  nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "Loaded suite /tmp/tmp8ik3qktz\nStarted\nF\n===============================================================================\nFailure: test_consecutive_duplicates(TestHumanEval)\n/tmp/tmp8ik3qktz.rb:12:in `test_consecutive_duplicates'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_consecutive_duplicates\n     11:     candidate = method(:consecutive_duplicates)\n  => 12:     assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     13:     assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     14:     assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     15:     assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 4]>\n\ndiff:\n? [0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 4]\n===============================================================================\n\nFinished in 0.013299612 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n75.19 tests/s, 75.19 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_nums = []\n  nums.each_with_index do |num, idx|\n    new_nums << num if num != nums[idx + 1]\n  end\n  new_nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkz7_z4xm\nStarted\n.\nFinished in 0.000461815 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2165.37 tests/s, 8661.48 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, index|\n    if index == 0\n      result << num\n    elsif num != nums[index - 1]\n      result << num\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdny3r93v\nStarted\n.\nFinished in 0.000466285 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2144.61 tests/s, 8578.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_nums = []\n  nums.each_with_index do |num, index|\n    if num != nums[index + 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7d6ibjl4\nStarted\n.\nFinished in 0.000453641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2204.39 tests/s, 8817.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_nums = []\n  nums.each_with_index do |num, index|\n    if num != nums[index + 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7d6ibjl4\nStarted\n.\nFinished in 0.000453641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2204.39 tests/s, 8817.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  # Write your code here\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8z5ctvcj\nStarted\n.\nFinished in 0.000431135 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.46 tests/s, 9277.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, i|\n    if num != nums[i+1]\n      result << num\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzdg0tks4\nStarted\n.\nFinished in 0.000465656 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2147.51 tests/s, 8590.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk(&:itself).map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp55gp15bb\nStarted\n.\nFinished in 0.000448019 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2232.05 tests/s, 8928.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, i|\n    result << num unless num == nums[i+1]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplgwsq2di\nStarted\n.\nFinished in 0.000428945 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2331.30 tests/s, 9325.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, index|\n    result << num if num != nums[index + 1]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl5krxfv7\nStarted\n.\nFinished in 0.000437017 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2288.24 tests/s, 9152.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    if result.last != num\n      result << num\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqc5a0m5l\nStarted\n.\nFinished in 0.000425706 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2349.04 tests/s, 9396.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.each_with_object([]) do |num, result|\n    result << num unless result.last == num\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1nsmfhyn\nStarted\n.\nFinished in 0.000430405 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2323.39 tests/s, 9293.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_nums = []\n  nums.each_with_index do |num, index|\n    new_nums << num if num != nums[index + 1]\n  end\n  new_nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpg6zfrmep\nStarted\n.\nFinished in 0.000440965 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2267.75 tests/s, 9071.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      result << num\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5ovk45gh\nStarted\n.\nFinished in 0.000437468 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2285.88 tests/s, 9143.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_arr = []\n  nums.each_with_index do |num, index|\n    if num != nums[index + 1]\n      new_arr << num\n    end\n  end\n  new_arr\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgk9dc_p2\nStarted\n.\nFinished in 0.000444396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2250.25 tests/s, 9000.98 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, i|\n    result << num if num != nums[i + 1]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyol30bkr\nStarted\n.\nFinished in 0.000435396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2296.76 tests/s, 9187.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    if result.last != num\n      result << num\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqc5a0m5l\nStarted\n.\nFinished in 0.000425706 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2349.04 tests/s, 9396.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_nums = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxcaize44\nStarted\n.\nFinished in 0.000456881 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2188.75 tests/s, 8755.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk{|n| n}.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp86wurgbu\nStarted\n.\nFinished in 0.000475969 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2100.98 tests/s, 8403.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk(&:itself).map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp55gp15bb\nStarted\n.\nFinished in 0.000448019 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2232.05 tests/s, 8928.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_arr = []\n  nums.each_with_index do |num, i|\n    new_arr << num unless num == nums[i + 1]\n  end\n  new_arr\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpq0h3i9h8\nStarted\n.\nFinished in 0.000427298 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2340.29 tests/s, 9361.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, index|\n    if num != nums[index + 1]\n      result << num\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw2t17_cm\nStarted\n.\nFinished in 0.000433762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.41 tests/s, 9221.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, i|\n    result << num unless num == nums[i + 1]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp28kwnwbg\nStarted\n.\nFinished in 0.000432244 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2313.51 tests/s, 9254.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.each_with_object([]) do |num, result|\n    result << num unless result.last == num\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1nsmfhyn\nStarted\n.\nFinished in 0.000430405 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2323.39 tests/s, 9293.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      result << num\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5ovk45gh\nStarted\n.\nFinished in 0.000437468 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2285.88 tests/s, 9143.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  (0...nums.length).each do |i|\n    nums.delete_at(i) if nums[i] == nums[i + 1]\n  end\n  nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "Loaded suite /tmp/tmp8ik3qktz\nStarted\nF\n===============================================================================\nFailure: test_consecutive_duplicates(TestHumanEval)\n/tmp/tmp8ik3qktz.rb:12:in `test_consecutive_duplicates'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_consecutive_duplicates\n     11:     candidate = method(:consecutive_duplicates)\n  => 12:     assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     13:     assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     14:     assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     15:     assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 4]>\n\ndiff:\n? [0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 4]\n===============================================================================\n\nFinished in 0.013299612 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n75.19 tests/s, 75.19 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, idx|\n    result << num unless num == nums[idx + 1]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp751z28p3\nStarted\n.\nFinished in 0.000416349 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2401.83 tests/s, 9607.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, index|\n    if num != nums[index + 1]\n      result << num\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw2t17_cm\nStarted\n.\nFinished in 0.000433762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.41 tests/s, 9221.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  (0...nums.length).each do |i|\n    if nums[i] == nums[i+1]\n      nums.delete_at(i)\n    end\n  end\n  nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "Loaded suite /tmp/tmpvv7_bdf4\nStarted\nF\n===============================================================================\nFailure: test_consecutive_duplicates(TestHumanEval)\n/tmp/tmpvv7_bdf4.rb:14:in `test_consecutive_duplicates'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_consecutive_duplicates\n     13:     candidate = method(:consecutive_duplicates)\n  => 14:     assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     15:     assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     16:     assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     17:     assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 4]>\n\ndiff:\n? [0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 4]\n===============================================================================\n\nFinished in 0.012526875 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n79.83 tests/s, 79.83 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      result << num\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5ovk45gh\nStarted\n.\nFinished in 0.000437468 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2285.88 tests/s, 9143.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_arr = []\n  nums.each_with_index do |num, idx|\n    if num != nums[idx + 1]\n      new_arr << num\n    end\n  end\n  new_arr\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptk9ptlko\nStarted\n.\nFinished in 0.000439977 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2272.85 tests/s, 9091.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_nums = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxcaize44\nStarted\n.\nFinished in 0.000456881 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2188.75 tests/s, 8755.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_nums = []\n  nums.each_with_index do |num, i|\n    if num != nums[i+1]\n      new_nums << num\n    end\n  end\n  new_nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppndzhnug\nStarted\n.\nFinished in 0.000816843 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1224.23 tests/s, 4896.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, index|\n    if num != nums[index + 1]\n      result << num\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw2t17_cm\nStarted\n.\nFinished in 0.000433762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.41 tests/s, 9221.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    if result.last != num\n      result << num\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqc5a0m5l\nStarted\n.\nFinished in 0.000425706 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2349.04 tests/s, 9396.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_nums = []\n  nums.each_with_index do |num, i|\n    new_nums << num if num != nums[i + 1]\n  end\n  new_nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgfxswxki\nStarted\n.\nFinished in 0.000414496 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2412.57 tests/s, 9650.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      result << num\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5ovk45gh\nStarted\n.\nFinished in 0.000437468 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2285.88 tests/s, 9143.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, index|\n    result << num unless num == nums[index + 1]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf7hmaqbh\nStarted\n.\nFinished in 0.000393438 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2541.70 tests/s, 10166.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_nums = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxcaize44\nStarted\n.\nFinished in 0.000456881 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2188.75 tests/s, 8755.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, i|\n    result << num if num != nums[i + 1]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyol30bkr\nStarted\n.\nFinished in 0.000435396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2296.76 tests/s, 9187.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, i|\n    result << num unless num == nums[i + 1]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp28kwnwbg\nStarted\n.\nFinished in 0.000432244 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2313.51 tests/s, 9254.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_arr = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      new_arr << num\n    end\n  end\n  new_arr\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpoxcz5rqb\nStarted\n.\nFinished in 0.000911758 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1096.78 tests/s, 4387.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.each_with_object([]) do |num, result|\n    result << num unless result.last == num\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1nsmfhyn\nStarted\n.\nFinished in 0.000430405 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2323.39 tests/s, 9293.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, index|\n    if num != nums[index + 1]\n      result << num\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw2t17_cm\nStarted\n.\nFinished in 0.000433762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.41 tests/s, 9221.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    if result.last != num\n      result << num\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqc5a0m5l\nStarted\n.\nFinished in 0.000425706 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2349.04 tests/s, 9396.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  # Write your code here\n  result = []\n  nums.each do |num|\n    if result.last != num\n      result << num\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8323ugon\nStarted\n.\nFinished in 0.0004162 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2402.69 tests/s, 9610.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  i = 0\n  while i < nums.length\n    if nums[i] == nums[i + 1]\n      nums.delete_at(i)\n    else\n      i += 1\n    end\n  end\n  nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbxhpvgen\nStarted\n.\nFinished in 0.000455273 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2196.48 tests/s, 8785.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_nums = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxcaize44\nStarted\n.\nFinished in 0.000456881 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2188.75 tests/s, 8755.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.each_with_index do |num, index|\n    if num == nums[index + 1]\n      nums.delete_at(index)\n    end\n  end\n  nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "Loaded suite /tmp/tmp9vr4bed1\nStarted\nF\n===============================================================================\nFailure: test_consecutive_duplicates(TestHumanEval)\n/tmp/tmp9vr4bed1.rb:14:in `test_consecutive_duplicates'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_consecutive_duplicates\n     13:     candidate = method(:consecutive_duplicates)\n  => 14:     assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     15:     assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     16:     assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     17:     assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 4]>\n\ndiff:\n? [0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 4]\n===============================================================================\n\nFinished in 0.021288848 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n46.97 tests/s, 46.97 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, index|\n    result << num unless num == nums[index + 1]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf7hmaqbh\nStarted\n.\nFinished in 0.000393438 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2541.70 tests/s, 10166.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  (0...nums.length).each do |i|\n    if nums[i] == nums[i + 1]\n      nums.delete_at(i)\n    end\n  end\n  nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "Loaded suite /tmp/tmpo0tkbwmb\nStarted\nF\n===============================================================================\nFailure: test_consecutive_duplicates(TestHumanEval)\n/tmp/tmpo0tkbwmb.rb:14:in `test_consecutive_duplicates'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_consecutive_duplicates\n     13:     candidate = method(:consecutive_duplicates)\n  => 14:     assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     15:     assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     16:     assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     17:     assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 4]>\n\ndiff:\n? [0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 4]\n===============================================================================\n\nFinished in 0.012822659 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n77.99 tests/s, 77.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  (0...nums.length).each do |i|\n    if nums[i] == nums[i+1]\n      nums.delete_at(i)\n      i -= 1\n    end\n  end\n  nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "Loaded suite /tmp/tmptx62ig69\nStarted\nF\n===============================================================================\nFailure: test_consecutive_duplicates(TestHumanEval)\n/tmp/tmptx62ig69.rb:15:in `test_consecutive_duplicates'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_consecutive_duplicates\n     14:     candidate = method(:consecutive_duplicates)\n  => 15:     assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     16:     assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     17:     assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     18:     assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 4]>\n\ndiff:\n? [0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 4]\n===============================================================================\n\nFinished in 0.013342174 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n74.95 tests/s, 74.95 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk(&:itself).map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp55gp15bb\nStarted\n.\nFinished in 0.000448019 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2232.05 tests/s, 8928.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_nums = []\n  nums.each_with_index do |num, index|\n    if index == 0\n      new_nums << num\n    elsif num != nums[index - 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpaan40oqc\nStarted\n.\nFinished in 0.000450484 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2219.83 tests/s, 8879.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_arr = []\n  nums.each_with_index do |num, index|\n    if num != nums[index + 1]\n      new_arr << num\n    end\n  end\n  new_arr\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgk9dc_p2\nStarted\n.\nFinished in 0.000444396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2250.25 tests/s, 9000.98 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, i|\n    result << num if num != nums[i + 1]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyol30bkr\nStarted\n.\nFinished in 0.000435396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2296.76 tests/s, 9187.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_nums = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxcaize44\nStarted\n.\nFinished in 0.000456881 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2188.75 tests/s, 8755.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, index|\n    result << num unless num == nums[index + 1]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf7hmaqbh\nStarted\n.\nFinished in 0.000393438 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2541.70 tests/s, 10166.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.each_with_object([]) do |num, new_nums|\n    new_nums << num unless new_nums.last == num\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzmcse3qm\nStarted\n.\nFinished in 0.000436787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2289.45 tests/s, 9157.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_nums = []\n  nums.each_with_index do |num, idx|\n    if num != nums[idx + 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplhg69woq\nStarted\n.\nFinished in 0.000447075 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2236.76 tests/s, 8947.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_arr = []\n  nums.each_with_index do |num, i|\n    if num != nums[i+1]\n      new_arr << num\n    end\n  end\n  new_arr\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx381m500\nStarted\n.\nFinished in 0.000378252 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2643.74 tests/s, 10574.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  (0...nums.length).each do |i|\n    if nums[i] == nums[i + 1]\n      nums.delete_at(i)\n    end\n  end\n  nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "Loaded suite /tmp/tmpo0tkbwmb\nStarted\nF\n===============================================================================\nFailure: test_consecutive_duplicates(TestHumanEval)\n/tmp/tmpo0tkbwmb.rb:14:in `test_consecutive_duplicates'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_consecutive_duplicates\n     13:     candidate = method(:consecutive_duplicates)\n  => 14:     assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     15:     assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     16:     assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     17:     assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 4]>\n\ndiff:\n? [0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 4]\n===============================================================================\n\nFinished in 0.012822659 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n77.99 tests/s, 77.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  # Write your code here\n  result = []\n  nums.each do |num|\n    if result.last != num\n      result << num\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8323ugon\nStarted\n.\nFinished in 0.0004162 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2402.69 tests/s, 9610.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, i|\n    result << num unless num == nums[i + 1]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp28kwnwbg\nStarted\n.\nFinished in 0.000432244 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2313.51 tests/s, 9254.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_array = []\n  nums.each_with_index do |num, index|\n    if num != nums[index + 1]\n      new_array << num\n    end\n  end\n  new_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj7eeh57f\nStarted\n.\nFinished in 0.000667353 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1498.46 tests/s, 5993.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  new_array = []\n  nums.each_with_index do |num, i|\n    if num != nums[i+1]\n      new_array << num\n    end\n  end\n  new_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpemf4d884\nStarted\n.\nFinished in 0.000423618 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2360.62 tests/s, 9442.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, i|\n    result << num unless num == nums[i + 1]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123631,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp28kwnwbg\nStarted\n.\nFinished in 0.000432244 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2313.51 tests/s, 9254.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7wkopt90\nStarted\n.\nFinished in 0.000397583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.20 tests/s, 10060.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnq35nmcf\nStarted\n.\nFinished in 0.000426814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.94 tests/s, 9371.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, idx|\n    result << num unless num == nums[idx + 1]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510279,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp751z28p3\nStarted\n.\nFinished in 0.000416349 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2401.83 tests/s, 9607.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}