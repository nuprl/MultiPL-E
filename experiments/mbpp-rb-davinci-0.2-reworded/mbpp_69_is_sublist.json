{
  "name": "mbpp_69_is_sublist",
  "language": "rb",
  "prompt": "# Write a function to check whether an array contains the given subarray or not.\ndef is_sublist(l, s)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_sublist\n    candidate = method(:is_sublist)\n    assert_equal(false, candidate.call([2, 4, 3, 5, 7], [3, 7]))\n    assert_equal(true, candidate.call([2, 4, 3, 5, 7], [4, 3]))\n    assert_equal(false, candidate.call([2, 4, 3, 5, 7], [1, 6]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] } if s.size <= l.size\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e,i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return true if s.empty?\n  return false if l.empty?\n  return l.join.include?(s.join)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return false if s.length > l.length\n  (0..l.length - s.length).each do |i|\n    return true if l[i, s.length] == s\n  end\n  false\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return false if s.empty?\n  return true if l.include?(s[0])\n  is_sublist(l[1..-1], s)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  l.each_cons(s.length).any? { |sub| sub == s }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? do |e, i|\n    e == l[i]\n  end\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return false if s.empty?\n  return true if l.include?(s)\n  is_sublist(l[1..-1], s)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return false if s.empty?\n  return true if l.empty?\n  return true if l.join.include?(s.join)\n  is_sublist(l[1..-1], s)\nend",
    "  if l.empty?\n    return false\n  end\n  if s.empty?\n    return true\n  end\n  if l.length < s.length\n    return false\n  end\n  l.each_with_index do |e, i|\n    if e == s[0]\n      if l[i, s.length] == s\n        return true\n      end\n    end\n  end\n  return false\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  if l.include?(s[0])\n    l.each_with_index do |e, i|\n      if e == s[0]\n        return true if s == l[i..i + s.length - 1]\n      end\n    end\n  end\n  false\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? {|e, i| e == l[i]}\nend",
    "  return false if s.empty?\n  return true if l.join.include?(s.join)\n  is_sublist(l[1..-1], s)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return false if s.empty?\n  return true if l.join.include?(s.join)\n  false\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  i = 0\n  j = 0\n  while i < l.length\n    if l[i] == s[j]\n      j += 1\n    else\n      j = 0\n    end\n    if j == s.length\n      return true\n    end\n    i += 1\n  end\n  false\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return true if l == s\n  return false if s.length > l.length\n  l.each_cons(s.length) do |sub|\n    return true if sub == s\n  end\n  false\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend"
  ]
}