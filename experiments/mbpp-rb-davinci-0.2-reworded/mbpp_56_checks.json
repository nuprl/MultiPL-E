{
  "name": "mbpp_56_checks",
  "language": "rb",
  "prompt": "# Write a rbthon function to check if a given number is one less than twice its reverse.\ndef checks(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_checks\n    candidate = method(:checks)\n    assert_equal(false, candidate.call(70))\n    assert_equal(false, candidate.call(23))\n    assert_equal(true, candidate.call(73))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n = n.to_s\n  n == (n.reverse.to_i - 1).to_s * 2\nend",
    "  if n.to_s.reverse.to_i == n-1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  if n.to_s.reverse.to_i == n-1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  return true if n == (n.to_s.reverse.to_i + 1) * 2\n  false\nend",
    "  n.to_s == n.to_s.reverse && n == (n.to_s.reverse.to_i - 1) / 2\nend",
    "  n.to_s == n.to_s.reverse ? (n-1).to_s == (n.to_s.reverse.to_i*2).to_s : false\nend",
    "  if n == (n.to_s.reverse.to_i * 2) - 1\n    puts \"true\"\n  else\n    puts \"false\"\n  end\nend",
    "  return n == (n.to_s.reverse.to_i * 2 - 1)\nend",
    "  return (n == (n.to_s.reverse.to_i * 2 - 1))\nend",
    "  return true if n == (n.to_s.reverse.to_i + 1) / 2\n  false\nend",
    "  if n == (n.to_s.reverse.to_i * 2) - 1\n    puts \"true\"\n  else\n    puts \"false\"\n  end\nend",
    "  n==(n.to_s.reverse.to_i*2-1)\nend\np checks(12)\np checks(1221)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  if n == (n.to_s.reverse.to_i * 2) - 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  return n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  rev = n.to_s.reverse.to_i\n  if n == rev * 2 - 1\n    return true\n  else\n    return false\n  end\nend"
  ]
}