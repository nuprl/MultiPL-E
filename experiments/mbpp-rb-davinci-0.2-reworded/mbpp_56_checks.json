{
  "name": "mbpp_56_checks",
  "language": "rb",
  "prompt": "# Write a rbthon function to check if a given number is one less than twice its reverse.\ndef checks(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_checks\n    candidate = method(:checks)\n    assert_equal(false, candidate.call(70))\n    assert_equal(false, candidate.call(23))\n    assert_equal(true, candidate.call(73))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n = n.to_s\n  n == (n.reverse.to_i - 1).to_s * 2\nend",
    "  if n.to_s.reverse.to_i == n-1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  if n.to_s.reverse.to_i == n-1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  return true if n == (n.to_s.reverse.to_i + 1) * 2\n  false\nend",
    "  n.to_s == n.to_s.reverse && n == (n.to_s.reverse.to_i - 1) / 2\nend",
    "  n.to_s == n.to_s.reverse ? (n-1).to_s == (n.to_s.reverse.to_i*2).to_s : false\nend",
    "  if n == (n.to_s.reverse.to_i * 2) - 1\n    puts \"true\"\n  else\n    puts \"false\"\n  end\nend",
    "  return n == (n.to_s.reverse.to_i * 2 - 1)\nend",
    "  return (n == (n.to_s.reverse.to_i * 2 - 1))\nend",
    "  return true if n == (n.to_s.reverse.to_i + 1) / 2\n  false\nend",
    "  if n == (n.to_s.reverse.to_i * 2) - 1\n    puts \"true\"\n  else\n    puts \"false\"\n  end\nend",
    "  n==(n.to_s.reverse.to_i*2-1)\nend\np checks(12)\np checks(1221)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)\np checks(1234)",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  if n == (n.to_s.reverse.to_i * 2) - 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  return n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  rev = n.to_s.reverse.to_i\n  if n == rev * 2 - 1\n    return true\n  else\n    return false\n  end\nend",
    "  reverse = n.to_s.reverse.to_i\n  if n == reverse + 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n = n.to_s\n  if n.length == 1\n    return false\n  end\n  if n.length == 2\n    if n[0] == n[1]\n      return true\n    else\n      return false\n    end\n  end\n  if n.length == 3\n    if n[0] == n[2]\n      return true\n    else\n      return false\n    end\n  end\n  if n.length == 4\n    if n[0] == n[3] && n[1] == n[2]\n      return true\n    else\n      return false\n    end\n  end\n  if n.length == 5\n    if n[0] == n[4] && n[1] == n[3]\n      return true\n    else\n      return false\n    end\n  end\n  if n.length == 6\n    if n[0] == n[5] && n[1] == n[4] && n[2] == n[3]\n      return true\n    else\n      return false\n    end\n  end\nend",
    "  n.to_s.reverse.to_i == n - 1\nend",
    "  return true if n == (n.to_s.reverse.to_i + 1) * 2\n  false\nend",
    "  rev = n.to_s.reverse.to_i\n  if (n-1) == 2*rev\n    return true\n  else\n    return false\n  end\nend",
    "  rev = n.to_s.reverse.to_i\n  if (n == rev - 1)\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  n = n.to_s\n  if n.length == 1\n    return false\n  end\n  if n.length == 2\n    if n[0].to_i == n[1].to_i\n      return false\n    end\n  end\n  if n.length == 3\n    if n[0].to_i == n[2].to_i\n      return false\n    end\n  end\n  if n.length == 4\n    if n[0].to_i == n[3].to_i\n      return false\n    end\n  end\n  if n.length == 5\n    if n[0].to_i == n[4].to_i\n      return false\n    end\n  end\n  if n.length == 6\n    if n[0].to_i == n[5].to_i\n      return false\n    end\n  end\n  if n.length == 7\n    if n[0].to_i == n[6].to_i\n      return false\n    end\n  end\n  if n.length == 8\n    if n[0].to_i == n[7].to_i\n      return false\n    end\n  end\n  if n.length == 9\n    if n[0].to_i == n[8].to_i\n      return false\n    end\n  end\n  if n.length == 10\n    if n[0].to_i == n[9].to_i\n      return false\n    end\n  end\n  if n.length == 11\n    if n[0].to_i == n[10].to_i\n      return false\n    end\n  end\n  if n.length == 12\n    if n[0].to_i == n[11].to_i\n      return false\n    end\n  end\n  if n.length == 13\n    if n[0].to_i == n[12].to_i\n      return false\n    end\n  end\n  if n.length == 14\n    if n[0].to_i == n[13].to_i\n      return false\n    end\n  end\n  if n.length == 15\n    if n[0].to_i == n",
    "  n == (n.to_s.reverse.to_i + 1) / 2\nend",
    "  n.to_s.reverse.to_i == n - 1\nend",
    "  return true if n == (n.to_s.reverse.to_i + 1) * 2\n  false\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  if n.to_s.reverse.to_i == n-1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  return true if n == (n.to_s.reverse.to_i + 1) * 2\n  false\nend",
    "  return false if n < 10\n  return true if n % 10 == 0\n  return n % 10 == (n / 10) % 10 - 1\nend",
    "  if n == (n.to_s.reverse.to_i * 2) - 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  n.to_s.reverse.to_i == n * 2 - 1\nend",
    "  n.to_s.reverse.to_i == n - 1\nend",
    "  return true if n == (n.to_s.reverse.to_i + 1) * 2\n  false\nend",
    "  rev = n.to_s.reverse.to_i\n  if (n == (2 * rev) - 1)\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n == (n.to_s.reverse.to_i - 1) / 2\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n1 = n.to_s.reverse.to_i\n  n2 = n1 * 2\n  n2 == n + 1\nend",
    "  reverse = n.to_s.reverse.to_i\n  if n == (2 * reverse) - 1\n    return true\n  else\n    return false\n  end\nend",
    "  if n.to_s.reverse.to_i == n-1\n    puts \"true\"\n  else\n    puts \"false\"\n  end\nend\nchecks(12)",
    "  n = n.to_s\n  if n.length == 1\n    return true\n  end\n  if n.length % 2 == 0\n    return false\n  end\n  if n.length % 2 != 0\n    return true\n  end\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n.to_s == n.to_s.reverse ? (n-1).to_s == (n*2).to_s.reverse : false\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n = n.to_s\n  n == (n.reverse.to_i * 2 - 1).to_s\nend",
    "  n = n.to_s.reverse.to_i\n  if n == n*2-1\n    return true\n  else\n    return false\n  end\nend\nputs checks(12)\nputs checks(13)\nputs checks(14)\nputs checks(15)\nputs checks(16)\nputs checks(17)\nputs checks(18)\nputs checks(19)\nputs checks(20)\nputs checks(21)\nputs checks(22)\nputs checks(23)\nputs checks(24)\nputs checks(25)\nputs checks(26)\nputs checks(27)\nputs checks(28)\nputs checks(29)\nputs checks(30)\nputs checks(31)\nputs checks(32)\nputs checks(33)\nputs checks(34)\nputs checks(35)\nputs checks(36)\nputs checks(37)\nputs checks(38)\nputs checks(39)\nputs checks(40)\nputs checks(41)\nputs checks(42)\nputs checks(43)\nputs checks(44)\nputs checks(45)\nputs checks(46)\nputs checks(47)\nputs checks(48)\nputs checks(49)\nputs checks(50)\nputs checks(51)\nputs checks(52)\nputs checks(53)\nputs checks(54)\nputs checks(55)\nputs checks(56)\nputs checks(57)\nputs checks(58)\nputs checks(59)\nputs checks(60)\nputs checks(61)\nputs checks(62)\nputs checks(63)\nputs checks(64)\nputs checks(65)\nputs checks(66)\nputs checks(67)\nputs checks(68)\nputs checks(69)\nputs checks(70)\nputs checks(71)\nputs checks(72)\nputs checks(73)\nputs checks(74)\nputs checks(75)\nputs checks(76)\nputs checks(77)\nputs checks(78)\nput",
    "  return true if n == (n.to_s.reverse.to_i + 1) * 2\n  false\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n.to_s.reverse.to_i == (n-1)/2\nend",
    "  n.to_s.reverse.to_i == n - 1\nend",
    "  n.to_s == n.to_s.reverse ? n == (n.to_s.reverse.to_i * 2) - 1 : false\nend",
    "  if n == (n.to_s.reverse.to_i * 2) - 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  return true if n == (n.to_s.reverse.to_i + 1) * 2\n  false\nend",
    "  return n == (n.to_s.reverse.to_i * 2 - 1)\nend",
    "  n = n.to_s\n  n == (n.reverse.to_i * 2 - 1).to_s\nend",
    "  n.to_s == n.to_s.reverse ? (n - 1).to_s == (n.to_s.reverse.to_i * 2).to_s : false\nend",
    "  if n == (n.to_s.reverse.to_i * 2) - 1\n    puts \"true\"\n  else\n    puts \"false\"\n  end\nend",
    "  if n == (n.to_s.reverse.to_i * 2) - 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n.to_s == n.to_s.reverse ? (n-1).to_s == (n.to_s.reverse.to_i*2).to_s : false\nend",
    "  return true if n == (n.to_s.reverse.to_i + 1) * 2\n  false\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n = n.to_s\n  if n.length == 1\n    return false\n  end\n  if (n.reverse.to_i + 1) == (n.to_i * 2)\n    return true\n  else\n    return false\n  end\nend",
    "  n.to_s == n.to_s.reverse ? n == (n.to_s.reverse.to_i * 2 - 1) : false\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  if n == (n.to_s.reverse.to_i * 2) - 1\n    return true\n  else\n    return false\n  end\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n.to_s == n.to_s.reverse ? (n - 1).to_s == (n * 2).to_s.reverse : false\nend",
    "  return true if n == (n.to_s.reverse.to_i + 1) * 2\n  false\nend",
    "  rev = n.to_s.reverse.to_i\n  if n == rev + 1\n    puts \"#{n} is one less than twice its reverse\"\n  else\n    puts \"#{n} is not one less than twice its reverse\"\n  end\nend",
    "  n = n.to_s\n  n == (n.reverse.to_i * 2 - 1).to_s\nend",
    "  n = n.to_s\n  n == (n.reverse.to_i * 2 - 1).to_s\nend",
    "  return true if n == (n.to_s.reverse.to_i + 1) * 2\n  return false\nend",
    "  if n.to_s.reverse.to_i == n-1\n    return true\n  else\n    return false\n  end\nend",
    "  n = n.to_s\n  n == (n.reverse.to_i * 2 - 1).to_s\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n = n.to_s\n  n == (n.reverse.to_i * 2 - 1).to_s\nend",
    "  return true if n == (n.to_s.reverse.to_i * 2) - 1\n  false\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  return true if n == (n.to_s.reverse.to_i + 1) * 2\n  false\nend",
    "  return true if n == (n.to_s.reverse.to_i + 1) * 2\n  false\nend",
    "  rev = n.to_s.reverse.to_i\n  if n == (2*rev)-1\n    return true\n  else\n    return false\n  end\nend",
    "  if n.to_s.reverse.to_i == n-1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  if n == (n.to_s.reverse.to_i + 1) * 2\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  return true if n == (n.to_s.reverse.to_i + 1) * 2\n  false\nend",
    "  n.to_s == n.to_s.reverse ? (n - 1) == (n.to_s.reverse.to_i * 2) : false\nend",
    "  n.to_s == n.to_s.reverse && n.to_s.to_i*2 == n.to_s.reverse.to_i+1\nend",
    "  return true if n == (n.to_s.reverse.to_i + 1) * 2\n  false\nend",
    "  return true if n == (n.to_s.reverse.to_i + 1) * 2\n  return false\nend",
    "  return true if n == (n.to_s.reverse.to_i + 1) * 2\n  false\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  rev = n.to_s.reverse.to_i\n  if n == rev - 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  n = n.to_s\n  n == (n.reverse.to_i * 2 - 1).to_s\nend",
    "  return true if n == (n.to_s.reverse.to_i + 1) * 2\n  return false\nend",
    "  if n == (n.to_s.reverse.to_i * 2) - 1\n    puts \"true\"\n  else\n    puts \"false\"\n  end\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n.to_s == n.to_s.reverse ? (n * 2) - 1 : n * 2\nend",
    "  n.to_s.reverse.to_i == n * 2 - 1\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  return n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  return true if n == (n.to_s.reverse.to_i + 1) * 2\n  false\nend",
    "  n = n.to_s\n  n.reverse.to_i == n.to_i - 1\nend",
    "  return true if n == (n.to_s.reverse.to_i + 1) * 2\n  false\nend",
    "  if n == n.to_s.reverse.to_i - 1\n    return true\n  else\n    return false\n  end\nend",
    "  n.to_s == n.to_s.reverse ? (n-1)/2 : n\nend",
    "  return true if n == (n.to_s.reverse.to_i + 1) * 2\n  false\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  return true if n == (n.to_s.reverse.to_i + 1) * 2\n  false\nend",
    "  return true if n == (n.to_s.reverse.to_i + 1) * 2\n  false\nend",
    "  return true if n == (n.to_s.reverse.to_i + 1) * 2\n  false\nend",
    "  n.to_s == n.to_s.reverse ? (n-1).to_s == (n*2).to_s.reverse : false\nend",
    "  rev = n.to_s.reverse.to_i\n  if (n == rev + 1) || (n == rev - 1)\n    puts \"true\"\n  else\n    puts \"false\"\n  end\nend",
    "  n.to_s == n.to_s.reverse ? (n-1).to_s == (n*2).to_s.reverse : false\nend",
    "  if n.to_s == n.to_s.reverse\n    return true\n  else\n    return false\n  end\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  return true if n == 1\n  return false if n % 10 == 0\n  return n == (n % 10) * 2 - 1 + checks(n / 10) * 10\nend",
    "  n.to_s == n.to_s.reverse ? n - 1 == n.to_s.reverse.to_i * 2 : false\nend",
    "  n.to_s.reverse.to_i == n / 2 - 1\nend",
    "  n = n.to_s\n  n == (n.reverse.to_i * 2 - 1).to_s\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n.to_s.reverse.to_i == n - 1\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  return false if n < 10\n  return true if n % 10 == 0\n  return n % 10 == (n / 10) % 10 - 1 && checks(n / 10)\nend",
    "  return true if n == (n.to_s.reverse.to_i + 1) * 2\n  false\nend",
    "  if n == (n.to_s.reverse.to_i * 2) - 1\n    puts \"true\"\n  else\n    puts \"false\"\n  end\nend",
    "  n = n.to_s\n  n == (n.reverse.to_i * 2 - 1).to_s\nend",
    "  n.to_s == n.to_s.reverse ? n == (n.to_s.reverse.to_i * 2) - 1 : false\nend",
    "  n = n.to_s\n  reverse = n.reverse.to_i\n  if n.to_i == reverse * 2 - 1\n    return true\n  else\n    return false\n  end\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n.to_s == n.to_s.reverse ? n - 1 == n.to_s.reverse.to_i * 2 : n + 1 == n.to_s.reverse.to_i * 2\nend",
    "  return n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n.to_s == n.to_s.reverse ? (n - 1).to_s == (n / 2).to_s.reverse : false\nend",
    "  return true if n == (n.to_s.reverse.to_i + 1) * 2\n  return false\nend",
    "  n.to_s == n.to_s.reverse ? (n+1)/2 : n*2-1\nend\np checks(12)\np checks(13)",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n = n.to_s\n  n == (n.reverse.to_i * 2 - 1).to_s\nend",
    "  if n == (n.to_s.reverse.to_i + 1) * 2\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  if n == (n.to_s.reverse.to_i * 2) - 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  return (n == (n.to_s.reverse.to_i * 2 - 1))\nend",
    "  rev = n.to_s.reverse.to_i\n  if n == 2 * rev - 1\n    return true\n  else\n    return false\n  end\nend",
    "  n.to_s.reverse.to_i == n - 1\nend",
    "  n1 = n.to_s.reverse.to_i\n  if n == n1*2-1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  if n == (n.to_s.reverse.to_i * 2) - 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n == (n.to_s.reverse.to_i - 1) * 2\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n.to_s.reverse.to_i == n/2 - 1\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n = n.to_s\n  rev = n.reverse\n  if n.to_i == rev.to_i * 2 - 1\n    return true\n  else\n    return false\n  end\nend",
    "  n1 = n.to_s.reverse.to_i\n  n2 = n1 * 2\n  n2 == n + 1\nend",
    "  rev = n.to_s.reverse.to_i\n  if (n == (rev * 2) - 1)\n    puts \"true\"\n  else\n    puts \"false\"\n  end\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n = n.to_s\n  n == (n.reverse.to_i * 2 - 1).to_s\nend",
    "  if n == (n.to_s.reverse.to_i * 2) - 1\n    return true\n  else\n    return false\n  end\nend",
    "  return (n-1)==(n.to_s.reverse.to_i*2)\nend\nputs checks(12)\nputs checks(23)\nputs checks(45)\nputs checks(56)\nputs checks(78)\nputs checks(89)\nputs checks(91)\nputs checks(102)\nputs checks(123)\nputs checks(234)\nputs checks(345)\nputs checks(456)\nputs checks(567)\nputs checks(678)\nputs checks(789)\nputs checks(890)\nputs checks(901)\nputs checks(1012)\nputs checks(1123)\nputs checks(1234)\nputs checks(2345)\nputs checks(3456)\nputs checks(4567)\nputs checks(5678)\nputs checks(6789)\nputs checks(7890)\nputs checks(8901)\nputs checks(9012)\nputs checks(10123)\nputs checks(11234)\nputs checks(12345)\nputs checks(23456)\nputs checks(34567)\nputs checks(45678)\nputs checks(56789)\nputs checks(67890)\nputs checks(78901)\nputs checks(89012)\nputs checks(90123)\nputs checks(101234)\nputs checks(112345)\nputs checks(123456)\nputs checks(234567)\nputs checks(345678)\nputs checks(456789)\nputs checks(567890)\nputs checks(678901)\nputs checks(789012)\nputs checks(890123)\nputs checks(901234)\nputs checks(1012345)\nputs checks(1123456)\nputs checks(1234567)\nputs checks(2345678)\nputs checks(3456789)\nputs checks(4567890)\nputs checks(5678901)\nputs checks(6789012)\nputs checks(7890123)\nputs checks(8901234)\nputs",
    "  n.to_s == n.to_s.reverse\nend",
    "  n.to_s.reverse.to_i == n - 1\nend",
    "  n.to_s == n.to_s.reverse ? (n - 1) / 2 == n.to_s.reverse.to_i : false\nend",
    "  n.to_s == n.to_s.reverse ? (n - n.to_s.reverse.to_i) == 1 : false\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  if n == (n.to_s.reverse.to_i * 2) - 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n == (n.to_s.reverse.to_i * 2 - 1)\nend",
    "  return n == (n.to_s.reverse.to_i * 2 - 1)\nend",
    "  return true if n == (n.to_s.reverse.to_i + 1) * 2\n  false\nend",
    "  return n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  rev = n.to_s.reverse.to_i\n  if (n == rev - 1)\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  n.to_s.reverse.to_i == n-1\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n == n.to_s.reverse.to_i + 1\nend",
    "  n.to_s == n.to_s.reverse ? (n-1)/2 == n.to_s.reverse.to_i : false\nend",
    "  n = n.to_s\n  if n.reverse.to_i == n.to_i - 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  return true if n == (n.to_s.reverse.to_i - 1) * 2\n  false\nend",
    "  if n.to_s == n.to_s.reverse\n    return true\n  else\n    return false\n  end\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  if n == (n.to_s.reverse.to_i + 1) * 2\n    return true\n  else\n    return false\n  end\nend",
    "  if n == (n.to_s.reverse.to_i + 1) * 2\n    puts \"#{n} is one less than twice its reverse\"\n  else\n    puts \"#{n} is not one less than twice its reverse\"\n  end\nend",
    "  n.to_s == n.to_s.reverse ? (n-1)/2 == (n.to_s.reverse.to_i) : false\nend\np checks(1221)\np checks(1231)",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend",
    "  return n == (n.to_s.reverse.to_i * 2 - 1)\nend",
    "  return (n == (n.to_s.reverse.to_i * 2 - 1))\nend",
    "  n.to_s == n.to_s.reverse ? (n-1).to_s == (n*2).to_s.reverse : false\nend",
    "  n == (n.to_s.reverse.to_i * 2) - 1\nend"
  ]
}