{
  "name": "mbpp_61_count_Substrings",
  "language": "rb",
  "prompt": "# Write a rbthon function to count the number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_Substrings\n    candidate = method(:count_Substrings)\n    assert_equal(6, candidate.call(\"112112\"))\n    assert_equal(6, candidate.call(\"111\"))\n    assert_equal(12, candidate.call(\"1101112\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i+1..s.length\n      if sum_of_digits(s[i..j-1]) == s[i..j-1].length\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..(s.length-1)\n    for j in i..(s.length-1)\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].chars.map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length\n    for j in i+1..s.length\n      if s[i..j].length == s[i..j].split('').map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  s.size.times do |i|\n    (i..s.size).each do |j|\n      count += 1 if s[i..j].to_i.digits.sum == s[i..j].size\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split(\"\").map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i+1..s.length\n      if sum_of_digits(s[i..j-1]) == s[i..j-1].length\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  s.size.times do |i|\n    (i..s.size).each do |j|\n      count += 1 if s[i..j].to_i.digits.sum == s[i..j].size\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split(\"\").map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend"
  ]
}