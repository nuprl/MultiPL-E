{
  "name": "mbpp_61_count_Substrings",
  "language": "rb",
  "prompt": "# Write a rbthon function to count the number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_Substrings\n    candidate = method(:count_Substrings)\n    assert_equal(6, candidate.call(\"112112\"))\n    assert_equal(6, candidate.call(\"111\"))\n    assert_equal(12, candidate.call(\"1101112\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i+1..s.length\n      if sum_of_digits(s[i..j-1]) == s[i..j-1].length\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..(s.length-1)\n    for j in i..(s.length-1)\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].chars.map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length\n    for j in i+1..s.length\n      if s[i..j].length == s[i..j].split('').map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  s.size.times do |i|\n    (i..s.size).each do |j|\n      count += 1 if s[i..j].to_i.digits.sum == s[i..j].size\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split(\"\").map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i+1..s.length\n      if sum_of_digits(s[i..j-1]) == s[i..j-1].length\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  s.size.times do |i|\n    (i..s.size).each do |j|\n      count += 1 if s[i..j].to_i.digits.sum == s[i..j].size\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split(\"\").map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  (0..s.length).each do |i|\n    (i..s.length).each do |j|\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  s.each_char.with_index do |char, index|\n    if index == s.length - 1\n      break\n    end\n    if char.to_i + s[index + 1].to_i == 2\n      count += 1\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].chars.map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i+1..s.length\n      if s[i..j-1].length == s[i..j-1].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  puts count\nend",
    "  count = 0\n  (0..s.length-1).each do |i|\n    (i..s.length-1).each do |j|\n      if s[i..j].length == s[i..j].split('').map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split(\"\").map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  (0..s.length-1).each do |i|\n    (i..s.length-1).each do |j|\n      sum = 0\n      (i..j).each do |k|\n        sum += s[k].to_i\n      end\n      count += 1 if sum == (j-i+1)\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  (0..s.length).each do |i|\n    (i..s.length).each do |j|\n      if (s[i..j].length == s[i..j].split(\"\").map(&:to_i).inject(:+))\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length\n    for j in i..s.length\n      if s[i..j].length == s[i..j].split(\"\").map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  s.scan(/\\d+/).count { |x| x.chars.map(&:to_i).reduce(:+) == x.length }\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  s.each_char.with_index do |_, i|\n    (i...s.length).each do |j|\n      count += 1 if s[i..j].to_i.digits.sum == s[i..j].length\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i+1..s.length\n      if sum_of_digits(s[i..j-1]) == s[i..j-1].length\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split(\"\").map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  (0..s.length-1).each do |i|\n    (i..s.length-1).each do |j|\n      if (s[i..j].to_i).digits.sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  (0..s.length-1).each do |i|\n    (i..s.length-1).each do |j|\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0...s.length\n    for j in i...s.length\n      if (s[i..j].length == s[i..j].split(\"\").map(&:to_i).reduce(:+))\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length\n    for j in i+1..s.length\n      if s[i..j].length == s[i..j].split(\"\").map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i+1..s.length\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i+1..s.length\n      if sum_of_digits(s[i..j-1]) == s[i..j-1].length\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  s.scan(/\\d+/).count { |x| x.chars.map(&:to_i).reduce(:+) == x.size }\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split(\"\").map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      count += 1 if sum == j-i+1\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split(\"\").map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  s.length.times do |i|\n    (i+1).upto(s.length) do |j|\n      count += 1 if s[i..j].split('').map(&:to_i).reduce(:+) == (j-i+1)\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split(\"\").map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  (1..s.length).each do |i|\n    (0..s.length-i).each do |j|\n      sum = 0\n      (j..j+i-1).each do |k|\n        sum += s[k].to_i\n      end\n      if sum == i\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i+1..s.length\n      if s[i..j-1].length == s[i..j-1].split(\"\").map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split(\"\").map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  (0...s.length).each do |i|\n    (i...s.length).each do |j|\n      count += 1 if s[i..j].length == s[i..j].split('').map(&:to_i).reduce(:+)\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i+1..s.length\n      if s[i..j-1].length == s[i..j-1].split('').map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  (0..s.length-1).each do |i|\n    (i..s.length-1).each do |j|\n      if (s[i..j].to_i.digits.sum == s[i..j].length)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0...s.length\n    for j in i...s.length\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].to_i.digits.sum == s[i..j].length\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  (0..s.length-1).each do |i|\n    (i..s.length-1).each do |j|\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(0, :+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      count += 1 if sum == j-i+1\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split(\"\").map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  (0..s.length-1).each do |i|\n    (i..s.length-1).each do |j|\n      sum = 0\n      (i..j).each do |k|\n        sum += s[k].to_i\n      end\n      count += 1 if sum == (j-i+1)\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i+1..s.length\n      if s[i..j-1].length == s[i..j-1].split(\"\").map(&:to_i).sum\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  s.length.times do |i|\n    (i..s.length).each do |j|\n      count += 1 if s[i..j].to_i.digits.sum == s[i..j].length\n    end\n  end\n  count\nend",
    "  count = 0\n  (0..s.length-1).each do |i|\n    (i..s.length-1).each do |j|\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  s.scan(/\\d+/).count { |x| x.chars.map(&:to_i).reduce(:+) == x.size }\nend",
    "  count = 0\n  s.each_char.with_index do |char, index|\n    (index...s.length).each do |index2|\n      count += 1 if s[index..index2].split(\"\").map(&:to_i).reduce(:+) == s[index..index2].length\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split(\"\").map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split(\"\").map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  (0...s.length).each do |i|\n    (i...s.length).each do |j|\n      if (s[i..j].to_i.digits.sum == (j - i + 1))\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  (0..s.length-1).each do |i|\n    (i..s.length-1).each do |j|\n      sum = 0\n      (i..j).each do |k|\n        sum += s[k].to_i\n      end\n      count += 1 if sum == (j-i+1)\n    end\n  end\n  count\nend",
    "  count = 0\n  s.size.times do |i|\n    (i...s.size).each do |j|\n      sub_string = s[i..j]\n      count += 1 if sub_string.size == sub_string.chars.map(&:to_i).reduce(:+)\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0...s.length\n    for j in i...s.length\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  (0..s.length-1).each do |i|\n    (i..s.length-1).each do |j|\n      sum = 0\n      (i..j).each do |k|\n        sum += s[k].to_i\n      end\n      count += 1 if sum == (j-i+1)\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(0, :+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if sum_of_digits(s[i..j]) == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split(\"\").map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  s.scan(/\\d+/).count { |x| x.to_i.digits.sum == x.length }\nend",
    "  count = 0\n  for i in 0...s.length\n    for j in i...s.length\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j - i + 1)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if sum_digits(s[i..j]) == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  (0..s.length-1).each do |i|\n    (i..s.length-1).each do |j|\n      if s[i..j].length == s[i..j].split('').map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if sum_of_digits(s[i..j]) == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  s.each_char.with_index do |char, index|\n    (index...s.length).each do |i|\n      count += 1 if s[index..i].to_i.digits.sum == (i - index + 1)\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].chars.map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  s.each_char.with_index do |char, index|\n    sum = char.to_i\n    for i in (index + 1)..s.length\n      sum += s[i].to_i\n      count += 1 if sum == i - index\n    end\n  end\n  count\nend",
    "  count = 0\n  s.length.times do |i|\n    (i..s.length).each do |j|\n      count += 1 if s[i..j].to_i.digits.sum == s[i..j].length\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length\n    for j in i+1..s.length\n      if s[i..j].length == s[i..j].split(\"\").map(&:to_i).inject(0, :+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  s.each_char.with_index do |char, index|\n    (index...s.length).each do |i|\n      count += 1 if s[index..i].split('').map(&:to_i).sum == s[index..i].length\n    end\n  end\n  count\nend",
    "  s.scan(/\\d+/).count { |x| x.to_i.digits.sum == x.size }\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == j-i+1\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  s.length.times do |i|\n    (i+1).upto(s.length) do |j|\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  (0..s.length-1).each do |i|\n    (i..s.length-1).each do |j|\n      if s[i..j].length == s[i..j].split('').map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  (0..s.length-1).each do |i|\n    (i..s.length-1).each do |j|\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  s.scan(/\\d+/).count { |x| x.to_i.digits.sum == x.size }\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0...s.length\n    for j in i...s.length\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      count += 1 if sum == (j - i + 1)\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split(\"\").map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split(\"\").map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i+1..s.length\n      if s[i..j-1].length == s[i..j-1].split('').map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum = sum + s[k].to_i\n      end\n      if sum == (j-i+1)\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split(\"\").map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0...s.length\n    for j in i...s.length\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j - i + 1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if (s[i..j].to_i.digits.sum == s[i..j].length)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  s.each_char.with_index do |_, i|\n    (i...s.length).each do |j|\n      count += 1 if s[i..j].split('').map(&:to_i).reduce(:+) == (j - i + 1)\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in (0...s.length)\n    for j in (i...s.length)\n      if (s[i..j].length == s[i..j].split(\"\").map(&:to_i).inject(:+))\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].chars.map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].chars.map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  s.scan(/\\d+/).count { |x| x.to_i.digits.sum == x.length }\nend",
    "  count = 0\n  (0..s.length-1).each do |i|\n    (i..s.length-1).each do |j|\n      if s[i..j].to_i.digits.sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  s.scan(/\\d+/).count { |x| x.to_i.digits.sum == x.length }\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split(\"\").map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  (0..s.length-1).each do |i|\n    (i..s.length-1).each do |j|\n      sum = 0\n      (i..j).each do |k|\n        sum += s[k].to_i\n      end\n      count += 1 if sum == (j-i+1)\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length\n    for j in i..s.length\n      if sum_of_digits(s[i..j]) == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  s.size.times do |i|\n    (i...s.size).each do |j|\n      count += 1 if s[i..j].chars.map(&:to_i).reduce(:+) == (j - i + 1)\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if sum_of_digits(s[i..j]) == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  s.size.times do |i|\n    (i...s.size).each do |j|\n      count += 1 if s[i..j].sum == (j - i + 1)\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  (0..s.length-1).each do |i|\n    (i..s.length-1).each do |j|\n      if s[i..j].length == s[i..j].split('').map(&:to_i).sum\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  (0...s.length).each do |i|\n    (i...s.length).each do |j|\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  s.length.times do |i|\n    (i+1).upto(s.length) do |j|\n      count += 1 if s[i..j].split('').map(&:to_i).reduce(:+) == (j-i+1)\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i+1..s.length\n      if sum_of_digits(s[i..j-1]) == s[i..j-1].length\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].chars.map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend"
  ]
}