{
  "name": "mbpp_266_lateralsurface_cube",
  "language": "rb",
  "prompt": "# Write a function to find the lateral surface area of a cube given its side length.\ndef lateralsurface_cube(l)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_266_lateralsurface_cube.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_lateralsurface_cube\n    candidate = method(:lateralsurface_cube)\n    assert_equal(100, candidate.call(5))\n    assert_equal(324, candidate.call(9))\n    assert_equal(400, candidate.call(10))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  return 4*l*l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  l**2*4\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return l * l * 4\nend",
    "  return 4*l*l\nend",
    "  l * l * 4\nend",
    "  return 4*l*l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  4 * l * l\nend",
    "  return 4*l*l\nend",
    "  return 4 * l * l\nend",
    "  return 4*l*l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  l * l * 4\nend",
    "  4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  l * l * 4\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4*l*l\nend",
    "  l * l * 4\nend",
    "  return l * l * 4\nend",
    "  4*l*l\nend",
    "  l**2 * 4\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return l * l * 4\nend",
    "  l * l * 4\nend",
    "  return 4 * l * l\nend",
    "  return 4*l*l\nend",
    "  return 4*l*l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  l**2 * 4\nend",
    "  return l * l * 4\nend",
    "  return 4 * l * l\nend",
    "  l * l * 4\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4*l*l\nend",
    "  return 4 * l * l\nend",
    "  return 4*l*l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4*l*l\nend",
    "  l * l * 4\nend",
    "  return 4 * l * l\nend",
    "  4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  l * l * 4\nend",
    "  return l * l * 4\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  l**2*4\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4*l*l\nend",
    "  return 4*l*l\nend",
    "  return l * l * 4\nend",
    "  return 4 * l * l\nend",
    "  l * l * 4\nend",
    "  l * l * 4\nend",
    "  return 4 * l * l\nend",
    "  return l * l * 4\nend",
    "  return 4*l*l\nend",
    "  return l * l * 4\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4*l*l\nend",
    "  return 4*l*l\nend",
    "  l * l * 4\nend",
    "  return 4 * l * l\nend",
    "  l**2 * 4\nend",
    "  return l**2*4\nend",
    "  return 4*l*l\nend",
    "  return 4*l*l\nend",
    "  return l*l*4\nend",
    "  return l * l * 4\nend",
    "  return 4 * l * l\nend",
    "  l * l * 4\nend",
    "  return 4*l*l\nend",
    "  l * l * 4\nend",
    "  return 4 * l * l\nend",
    "  return 4*l*l\nend",
    "  return 4*(l**2)\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  l * l * 4\nend",
    "  l**2*4\nend",
    "  return l**2 * 4\nend",
    "  return 4*l*l\nend",
    "  return 4*l**2\nend",
    "  return 4 * l * l\nend",
    "  return 4*l*l\nend",
    "  return 4*l*l\nend",
    "  4 * l * l\nend",
    "  return l*l*4\nend",
    "  return 4 * l * l\nend",
    "  return 4*l*l\nend",
    "  return l**2*4\nend",
    "  l**2 * 4\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4*l*l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  l*l*4\nend",
    "  l**2*4\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return l * l * 4\nend",
    "  4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4*l*l\nend",
    "  return 4*l*l\nend",
    "  l * l * 4\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  l * l * 4\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4*l*l\nend",
    "  return 4 * l * l\nend",
    "  return 4*l*l\nend",
    "  return 4 * l * l\nend",
    "  l * l * 4\nend",
    "  l**2 * 4\nend",
    "  4 * l * l\nend",
    "  return 4*l*l\nend",
    "  return 4 * l * l\nend",
    "  return 4*l*l\nend",
    "  return 4 * l * l\nend",
    "  l * l * 4\nend",
    "  return l * l * 4\nend",
    "  l*l*4\nend",
    "  return 4*l*l\nend",
    "  l * l * 4\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return l * l * 4\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4*l*l\nend",
    "  return 4*l*l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  return 4 * l * l\nend",
    "  l * l * 4\nend",
    "  return 4 * l * l\nend",
    "  return l * l * 4\nend",
    "  return 4 * l * l\nend",
    "  return 4*l*l\nend"
  ]
}