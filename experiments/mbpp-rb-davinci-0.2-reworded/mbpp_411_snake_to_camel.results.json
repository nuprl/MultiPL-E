{
  "name": "mbpp_411_snake_to_camel",
  "language": "rb",
  "prompt": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').each { |w| w.capitalize! }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3hbc6cvl\nStarted\n.\nFinished in 0.000389263 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2568.96 tests/s, 7706.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  return word if word !~ /_/ && word =~ /[A-Z]+.*/\n  word.split('_').map{|w| w.capitalize}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdlyi79dm\nStarted\n.\nFinished in 0.000391185 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2556.34 tests/s, 7669.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpttsq2u0w\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpttsq2u0w.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007779803 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.54 tests/s, 128.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpttsq2u0w\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpttsq2u0w.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007779803 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.54 tests/s, 128.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpttsq2u0w\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpttsq2u0w.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007779803 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.54 tests/s, 128.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  return word if word !~ /_/ && word =~ /[A-Z]+.*/\n  word.split('_').map{|w| w.capitalize}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdlyi79dm\nStarted\n.\nFinished in 0.000391185 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2556.34 tests/s, 7669.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").each {|x| x.capitalize!}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_jq528ou\nStarted\n.\nFinished in 0.000402383 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2485.19 tests/s, 7455.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpttsq2u0w\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpttsq2u0w.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007779803 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.54 tests/s, 128.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpttsq2u0w\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpttsq2u0w.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007779803 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.54 tests/s, 128.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmpa3fgkzg1\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpa3fgkzg1.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007083993 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.16 tests/s, 141.16 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index{|x,i| i == 0 ? x : x.capitalize}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmp32bb_49f\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp32bb_49f.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007098389 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n140.88 tests/s, 140.88 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index{|x, i| i == 0 ? x : x.capitalize}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmplln6gmxi\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmplln6gmxi.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006781776 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.45 tests/s, 147.45 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmpa3fgkzg1\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpa3fgkzg1.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007083993 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.16 tests/s, 141.16 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmpa3fgkzg1\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpa3fgkzg1.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007083993 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.16 tests/s, 141.16 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |x, i| i > 0 ? x.capitalize : x }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmpv91z2k63\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpv91z2k63.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006906347 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.79 tests/s, 144.79 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index {|x, i| i == 0 ? x : x.capitalize}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmpmznxsu03\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpmznxsu03.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006784486 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.40 tests/s, 147.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  return word if word !~ /_/ && word =~ /[A-Z]+.*/\n  word.split('_').map{|w| w.capitalize}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdlyi79dm\nStarted\n.\nFinished in 0.000391185 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2556.34 tests/s, 7669.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index {|w, i| i == 0 ? w : w.capitalize}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmp0v72yezv\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp0v72yezv.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.00711875 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n140.47 tests/s, 140.47 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index {|x, i| i == 0 ? x : x.capitalize}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmpmznxsu03\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpmznxsu03.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006784486 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.40 tests/s, 147.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpttsq2u0w\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpttsq2u0w.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007779803 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.54 tests/s, 128.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |word, index| index == 0 ? word : word.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmptg0m2lhj\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmptg0m2lhj.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006433874 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n155.43 tests/s, 155.43 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmpa3fgkzg1\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpa3fgkzg1.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007083993 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.16 tests/s, 141.16 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  words = word.split('_')\n  counter = 0\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "",
      "stderr": "/tmp/tmpmojbx659.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpmojbx659.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpttsq2u0w\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpttsq2u0w.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007779803 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.54 tests/s, 128.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmpa3fgkzg1\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpa3fgkzg1.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007083993 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.16 tests/s, 141.16 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i > 0 ? x.capitalize : x }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmpzbe3gdic\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpzbe3gdic.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007078032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.28 tests/s, 141.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').each { |w| w.capitalize! }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3hbc6cvl\nStarted\n.\nFinished in 0.000389263 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2568.96 tests/s, 7706.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmpa3fgkzg1\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpa3fgkzg1.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007083993 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.16 tests/s, 141.16 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpttsq2u0w\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpttsq2u0w.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007779803 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.54 tests/s, 128.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  # word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\n  word.split(\"_\").map.with_index { |x, i| i.zero? ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmp0rm5qjk6\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp0rm5qjk6.rb:10:in `test_snake_to_camel'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_snake_to_camel\n      9:     candidate = method(:snake_to_camel)\n  => 10:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     11:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     12:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     13:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.0068374 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.25 tests/s, 146.25 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index {|w, i| i == 0 ? w : w.capitalize}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmp0v72yezv\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp0v72yezv.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.00711875 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n140.47 tests/s, 140.47 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index {|x, i| i == 0 ? x : x.capitalize}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmpmznxsu03\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpmznxsu03.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006784486 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.40 tests/s, 147.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  words = word.split('_')\n  capitalized_words = words.map.with_index do |word, index|\n    index == 0 ? word : word.capitalize\n  end\n  capitalized_words.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmph4j_isw2\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmph4j_isw2.rb:13:in `test_snake_to_camel'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_snake_to_camel\n     12:     candidate = method(:snake_to_camel)\n  => 13:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     14:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     15:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     16:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.009768387 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n102.37 tests/s, 102.37 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmpa3fgkzg1\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpa3fgkzg1.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007083993 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.16 tests/s, 141.16 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmpa3fgkzg1\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpa3fgkzg1.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007083993 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.16 tests/s, 141.16 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpttsq2u0w\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpttsq2u0w.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007779803 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.54 tests/s, 128.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpttsq2u0w\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpttsq2u0w.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007779803 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.54 tests/s, 128.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpttsq2u0w\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpttsq2u0w.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007779803 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.54 tests/s, 128.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |word, index| index == 0 ? word : word.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmptg0m2lhj\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmptg0m2lhj.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006433874 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n155.43 tests/s, 155.43 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpttsq2u0w\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpttsq2u0w.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007779803 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.54 tests/s, 128.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmpa3fgkzg1\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpa3fgkzg1.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007083993 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.16 tests/s, 141.16 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index{|w, i| i == 0 ? w : w.capitalize}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmpo1i7r9gw\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpo1i7r9gw.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006797151 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.12 tests/s, 147.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmpa3fgkzg1\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpa3fgkzg1.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007083993 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.16 tests/s, 141.16 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').each { |x| x.capitalize! }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvzc7bka9\nStarted\n.\nFinished in 0.00039124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2555.98 tests/s, 7667.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmpa3fgkzg1\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpa3fgkzg1.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007083993 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.16 tests/s, 141.16 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index {|w, i| i == 0 ? w : w.capitalize}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmp0v72yezv\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp0v72yezv.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.00711875 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n140.47 tests/s, 140.47 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").each { |w| w.capitalize! }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjajmwzio\nStarted\n.\nFinished in 0.000421926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2370.08 tests/s, 7110.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index{|x, i| i == 0 ? x : x.capitalize}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmp7vb5ccme\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp7vb5ccme.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.009645144 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n103.68 tests/s, 103.68 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpttsq2u0w\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpttsq2u0w.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007779803 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.54 tests/s, 128.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmpa3fgkzg1\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpa3fgkzg1.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007083993 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.16 tests/s, 141.16 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  return word if word !~ /_/ && word =~ /[A-Z]+.*/\n  word.split('_').map{|w| w.capitalize}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdlyi79dm\nStarted\n.\nFinished in 0.000391185 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2556.34 tests/s, 7669.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpttsq2u0w\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpttsq2u0w.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007779803 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.54 tests/s, 128.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index {|w, i| i == 0 ? w : w.capitalize}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmp0v72yezv\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp0v72yezv.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.00711875 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n140.47 tests/s, 140.47 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpttsq2u0w\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpttsq2u0w.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007779803 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.54 tests/s, 128.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpttsq2u0w\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpttsq2u0w.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007779803 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.54 tests/s, 128.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index {|x, i| i == 0 ? x : x.capitalize}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmpmznxsu03\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpmznxsu03.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006784486 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.40 tests/s, 147.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpttsq2u0w\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpttsq2u0w.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007779803 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.54 tests/s, 128.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmpa3fgkzg1\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpa3fgkzg1.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007083993 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.16 tests/s, 141.16 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpttsq2u0w\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpttsq2u0w.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007779803 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.54 tests/s, 128.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmp385ja0dx\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp385ja0dx.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006987114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.12 tests/s, 143.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpttsq2u0w\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpttsq2u0w.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007779803 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.54 tests/s, 128.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  # word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\n  word.split('_').map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmp1mxueia2\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmp1mxueia2.rb:10:in `test_snake_to_camel'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_snake_to_camel\n      9:     candidate = method(:snake_to_camel)\n  => 10:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     11:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     12:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     13:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006841464 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.17 tests/s, 146.17 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i == 0 ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpq2k2z03l\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpq2k2z03l.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006560934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.42 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |x, i| i == 0 ? x : x.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmphqkvdwth\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmphqkvdwth.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006760953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split('_').map.with_index { |w, i| i.zero? ? w : w.capitalize }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1665509929,
      "stdout": "Loaded suite /tmp/tmpttsq2u0w\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpttsq2u0w.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.007779803 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.54 tests/s, 128.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n  word.split(\"_\").map.with_index {|x, i| i == 0 ? x : x.capitalize}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n",
      "timestamp": 1666122716,
      "stdout": "Loaded suite /tmp/tmpmznxsu03\nStarted\nF\n===============================================================================\nFailure: test_snake_to_camel(TestHumanEval)\n/tmp/tmpmznxsu03.rb:9:in `test_snake_to_camel'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_snake_to_camel\n      8:     candidate = method(:snake_to_camel)\n  =>  9:     assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n     10:     assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n     11:     assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n     12:   end\n<\"AndroidTv\"> expected but was\n<\"androidTv\">\n\ndiff:\n? AndroidTv\n? a        \n? ?        \n===============================================================================\n\nFinished in 0.006784486 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.40 tests/s, 147.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}